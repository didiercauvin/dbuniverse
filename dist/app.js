webpackJsonp([0],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar platform_browser_dynamic_1 = __webpack_require__(1);\r\nvar app_module_1 = __webpack_require__(23);\r\nplatform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2FwcC9tYWluLnRzPzY4MTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XHJcblxyXG5pbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL2FwcC5tb2R1bGUnO1xyXG5cclxucGxhdGZvcm1Ccm93c2VyRHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL21haW4udHMiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUVBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 23:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar http_1 = __webpack_require__(24);\r\nvar angular2_in_memory_web_api_1 = __webpack_require__(25);\r\nvar app_component_1 = __webpack_require__(37);\r\nvar welcome_module_1 = __webpack_require__(40);\r\nvar category_module_1 = __webpack_require__(76);\r\nvar book_module_1 = __webpack_require__(393);\r\nvar app_routing_module_1 = __webpack_require__(404);\r\nvar inmemorydata_service_1 = __webpack_require__(405);\r\nvar core_module_1 = __webpack_require__(100);\r\nvar core_service_1 = __webpack_require__(406);\r\nfunction loadData(service) {\r\n    return function () { return service.load(); };\r\n}\r\nvar AppModule = (function () {\r\n    function AppModule() {\r\n    }\r\n    return AppModule;\r\n}());\r\nAppModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            http_1.HttpModule,\r\n            welcome_module_1.WelcomeModule,\r\n            category_module_1.CategoryModule,\r\n            book_module_1.BookModule,\r\n            app_routing_module_1.AppRoutingModule,\r\n            angular2_in_memory_web_api_1.InMemoryWebApiModule.forRoot(inmemorydata_service_1.InMemoryDbUniverseService),\r\n            core_module_1.CoreModule\r\n        ],\r\n        declarations: [\r\n            app_component_1.AppComponent\r\n        ],\r\n        bootstrap: [app_component_1.AppComponent],\r\n        providers: [\r\n            core_service_1.CoreService,\r\n            {\r\n                provide: core_1.APP_INITIALIZER,\r\n                useFactory: loadData,\r\n                deps: [core_service_1.CoreService],\r\n                multi: true\r\n            }\r\n        ]\r\n    })\r\n], AppModule);\r\nexports.AppModule = AppModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYXBwLm1vZHVsZS50cz9jZjhhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBBUFBfSU5JVElBTElaRVIgfSAgICAgIGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwTW9kdWxlIH0gICAgZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XHJcbmltcG9ydCB7IEluTWVtb3J5V2ViQXBpTW9kdWxlIH0gZnJvbSAnYW5ndWxhcjItaW4tbWVtb3J5LXdlYi1hcGknO1xyXG5pbXBvcnQgeyBBcHBDb21wb25lbnQgfSAgZnJvbSAnLi9hcHAuY29tcG9uZW50JztcclxuaW1wb3J0IHsgV2VsY29tZU1vZHVsZSB9IGZyb20gJy4vd2VsY29tZS93ZWxjb21lLm1vZHVsZSc7XHJcbmltcG9ydCB7IENhdGVnb3J5TW9kdWxlIH0gZnJvbSAnLi9jYXRlZ29yaWVzL2NhdGVnb3J5Lm1vZHVsZSc7XHJcbmltcG9ydCB7IEJvb2tNb2R1bGUgfSBmcm9tICcuL2Jvb2tzL2Jvb2subW9kdWxlJztcclxuaW1wb3J0IHsgQXBwUm91dGluZ01vZHVsZSB9IGZyb20gJy4vYXBwLXJvdXRpbmcubW9kdWxlJztcclxuaW1wb3J0IHsgSW5NZW1vcnlEYlVuaXZlcnNlU2VydmljZSB9IGZyb20gJy4vaW5tZW1vcnlkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb3JlTW9kdWxlIH0gZnJvbSAnLi9jb3JlL2NvcmUubW9kdWxlJztcclxuaW1wb3J0IHsgQ29yZVNlcnZpY2UgfSBmcm9tICcuL2NvcmUvY29yZS5zZXJ2aWNlJztcclxuXHJcbmZ1bmN0aW9uIGxvYWREYXRhKHNlcnZpY2U6IENvcmVTZXJ2aWNlKSB7XHJcbiAgICByZXR1cm4gKCkgPT4gc2VydmljZS5sb2FkKCk7XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogICAgICBbIFxyXG4gICAgICAgICAgICAgICAgICBIdHRwTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgICBXZWxjb21lTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgICBDYXRlZ29yeU1vZHVsZSxcclxuICAgICAgICAgICAgICAgICAgQm9va01vZHVsZSxcclxuICAgICAgICAgICAgICAgICAgQXBwUm91dGluZ01vZHVsZSxcclxuICAgICAgICAgICAgICAgICAgSW5NZW1vcnlXZWJBcGlNb2R1bGUuZm9yUm9vdChJbk1lbW9yeURiVW5pdmVyc2VTZXJ2aWNlKSxcclxuICAgICAgICAgICAgICAgICAgQ29yZU1vZHVsZVxyXG4gICAgICAgICAgICAgICAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFsgXHJcbiAgICAgICAgQXBwQ29tcG9uZW50XHJcbiAgXSxcclxuICBib290c3RyYXA6ICAgIFsgQXBwQ29tcG9uZW50IF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBDb3JlU2VydmljZSxcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgICB1c2VGYWN0b3J5OiBsb2FkRGF0YSxcclxuICAgICAgZGVwczogW0NvcmVTZXJ2aWNlXSxcclxuICAgICAgbXVsdGk6IHRydWVcclxuICAgIH1cclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBcHBNb2R1bGUgeyB9XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG5vZGVfbW9kdWxlcy9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi9hcHAvYXBwLm1vZHVsZS50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUEwQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 24:
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * @license Angular v2.4.4\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(3), __webpack_require__(5), __webpack_require__(21)) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', '@angular/platform-browser'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}),global.ng.core,global.Rx,global.ng.platformBrowser));\n}(this, function (exports,_angular_core,rxjs_Observable,_angular_platformBrowser) { 'use strict';\n\n    /**\n     * A backend for http that uses the `XMLHttpRequest` browser API.\n     *\n     * Take care not to evaluate this in non-browser contexts.\n     *\n     * \\@experimental\n     */\n    var BrowserXhr = (function () {\n        function BrowserXhr() {\n        }\n        /**\n         * @return {?}\n         */\n        BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };\n        BrowserXhr.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BrowserXhr.ctorParameters = function () { return []; };\n        return BrowserXhr;\n    }());\n\n    var RequestMethod = {};\n    RequestMethod.Get = 0;\n    RequestMethod.Post = 1;\n    RequestMethod.Put = 2;\n    RequestMethod.Delete = 3;\n    RequestMethod.Options = 4;\n    RequestMethod.Head = 5;\n    RequestMethod.Patch = 6;\n    RequestMethod[RequestMethod.Get] = \"Get\";\n    RequestMethod[RequestMethod.Post] = \"Post\";\n    RequestMethod[RequestMethod.Put] = \"Put\";\n    RequestMethod[RequestMethod.Delete] = \"Delete\";\n    RequestMethod[RequestMethod.Options] = \"Options\";\n    RequestMethod[RequestMethod.Head] = \"Head\";\n    RequestMethod[RequestMethod.Patch] = \"Patch\";\n    var ReadyState = {};\n    ReadyState.Unsent = 0;\n    ReadyState.Open = 1;\n    ReadyState.HeadersReceived = 2;\n    ReadyState.Loading = 3;\n    ReadyState.Done = 4;\n    ReadyState.Cancelled = 5;\n    ReadyState[ReadyState.Unsent] = \"Unsent\";\n    ReadyState[ReadyState.Open] = \"Open\";\n    ReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\n    ReadyState[ReadyState.Loading] = \"Loading\";\n    ReadyState[ReadyState.Done] = \"Done\";\n    ReadyState[ReadyState.Cancelled] = \"Cancelled\";\n    var ResponseType = {};\n    ResponseType.Basic = 0;\n    ResponseType.Cors = 1;\n    ResponseType.Default = 2;\n    ResponseType.Error = 3;\n    ResponseType.Opaque = 4;\n    ResponseType[ResponseType.Basic] = \"Basic\";\n    ResponseType[ResponseType.Cors] = \"Cors\";\n    ResponseType[ResponseType.Default] = \"Default\";\n    ResponseType[ResponseType.Error] = \"Error\";\n    ResponseType[ResponseType.Opaque] = \"Opaque\";\n    var ContentType = {};\n    ContentType.NONE = 0;\n    ContentType.JSON = 1;\n    ContentType.FORM = 2;\n    ContentType.FORM_DATA = 3;\n    ContentType.TEXT = 4;\n    ContentType.BLOB = 5;\n    ContentType.ARRAY_BUFFER = 6;\n    ContentType[ContentType.NONE] = \"NONE\";\n    ContentType[ContentType.JSON] = \"JSON\";\n    ContentType[ContentType.FORM] = \"FORM\";\n    ContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\n    ContentType[ContentType.TEXT] = \"TEXT\";\n    ContentType[ContentType.BLOB] = \"BLOB\";\n    ContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n    var ResponseContentType = {};\n    ResponseContentType.Text = 0;\n    ResponseContentType.Json = 1;\n    ResponseContentType.ArrayBuffer = 2;\n    ResponseContentType.Blob = 3;\n    ResponseContentType[ResponseContentType.Text] = \"Text\";\n    ResponseContentType[ResponseContentType.Json] = \"Json\";\n    ResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\n    ResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n    /**\n     * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n     * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n     *\n     * The only known difference between this `Headers` implementation and the spec is the\n     * lack of an `entries` method.\n     *\n     * ### Example\n     *\n     * ```\n     * import {Headers} from '\\@angular/http';\n     *\n     * var firstHeaders = new Headers();\n     * firstHeaders.append('Content-Type', 'image/jpeg');\n     * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n     *\n     * // Create headers from Plain Old JavaScript Object\n     * var secondHeaders = new Headers({\n     *   'X-My-Custom-Header': 'Angular'\n     * });\n     * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n     *\n     * var thirdHeaders = new Headers(secondHeaders);\n     * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n     * ```\n     *\n     * \\@experimental\n     */\n    var Headers = (function () {\n        /**\n         * @param {?=} headers\n         */\n        function Headers(headers) {\n            var _this = this;\n            /** @internal header names are lower case */\n            this._headers = new Map();\n            /** @internal map lower case names to actual names */\n            this._normalizedNames = new Map();\n            if (!headers) {\n                return;\n            }\n            if (headers instanceof Headers) {\n                headers.forEach(function (values, name) {\n                    values.forEach(function (value) { return _this.append(name, value); });\n                });\n                return;\n            }\n            Object.keys(headers).forEach(function (name) {\n                var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n                _this.delete(name);\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n        }\n        /**\n         * Returns a new Headers instance from the given DOMString of Response Headers\n         * @param {?} headersString\n         * @return {?}\n         */\n        Headers.fromResponseHeaderString = function (headersString) {\n            var /** @type {?} */ headers = new Headers();\n            headersString.split('\\n').forEach(function (line) {\n                var /** @type {?} */ index = line.indexOf(':');\n                if (index > 0) {\n                    var /** @type {?} */ name_1 = line.slice(0, index);\n                    var /** @type {?} */ value = line.slice(index + 1).trim();\n                    headers.set(name_1, value);\n                }\n            });\n            return headers;\n        };\n        /**\n         * Appends a header to existing list of header values for a given header name.\n         * @param {?} name\n         * @param {?} value\n         * @return {?}\n         */\n        Headers.prototype.append = function (name, value) {\n            var /** @type {?} */ values = this.getAll(name);\n            if (values === null) {\n                this.set(name, value);\n            }\n            else {\n                values.push(value);\n            }\n        };\n        /**\n         * Deletes all header values for the given name.\n         * @param {?} name\n         * @return {?}\n         */\n        Headers.prototype.delete = function (name) {\n            var /** @type {?} */ lcName = name.toLowerCase();\n            this._normalizedNames.delete(lcName);\n            this._headers.delete(lcName);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        Headers.prototype.forEach = function (fn) {\n            var _this = this;\n            this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n        };\n        /**\n         * Returns first header that matches given name.\n         * @param {?} name\n         * @return {?}\n         */\n        Headers.prototype.get = function (name) {\n            var /** @type {?} */ values = this.getAll(name);\n            if (values === null) {\n                return null;\n            }\n            return values.length > 0 ? values[0] : null;\n        };\n        /**\n         * Checks for existence of header by given name.\n         * @param {?} name\n         * @return {?}\n         */\n        Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n        /**\n         * Returns the names of the headers\n         * @return {?}\n         */\n        Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n        /**\n         * Sets or overrides header value for given name.\n         * @param {?} name\n         * @param {?} value\n         * @return {?}\n         */\n        Headers.prototype.set = function (name, value) {\n            if (Array.isArray(value)) {\n                if (value.length) {\n                    this._headers.set(name.toLowerCase(), [value.join(',')]);\n                }\n            }\n            else {\n                this._headers.set(name.toLowerCase(), [value]);\n            }\n            this.mayBeSetNormalizedName(name);\n        };\n        /**\n         * Returns values of all headers.\n         * @return {?}\n         */\n        Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n        /**\n         * @return {?}\n         */\n        Headers.prototype.toJSON = function () {\n            var _this = this;\n            var /** @type {?} */ serialized = {};\n            this._headers.forEach(function (values, name) {\n                var /** @type {?} */ split = [];\n                values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n                serialized[_this._normalizedNames.get(name)] = split;\n            });\n            return serialized;\n        };\n        /**\n         * Returns list of header values for a given name.\n         * @param {?} name\n         * @return {?}\n         */\n        Headers.prototype.getAll = function (name) {\n            return this.has(name) ? this._headers.get(name.toLowerCase()) : null;\n        };\n        /**\n         * This method is not implemented.\n         * @return {?}\n         */\n        Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        Headers.prototype.mayBeSetNormalizedName = function (name) {\n            var /** @type {?} */ lcName = name.toLowerCase();\n            if (!this._normalizedNames.has(lcName)) {\n                this._normalizedNames.set(lcName, name);\n            }\n        };\n        return Headers;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates a response options object to be optionally provided when instantiating a\n     * {\\@link Response}.\n     *\n     * This class is based on the `ResponseInit` description in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#responseinit).\n     *\n     * All values are null by default. Typical defaults can be found in the\n     * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n     *\n     * This class may be used in tests to build {\\@link Response Responses} for\n     * mock responses (see {\\@link MockBackend}).\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: '{\"name\":\"Jeff\"}'\n     * });\n     * var res = new Response(options);\n     *\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * ```\n     *\n     * \\@experimental\n     */\n    var ResponseOptions = (function () {\n        /**\n         * @param {?=} __0\n         */\n        function ResponseOptions(_a) {\n            var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;\n            this.body = body != null ? body : null;\n            this.status = status != null ? status : null;\n            this.headers = headers != null ? headers : null;\n            this.statusText = statusText != null ? statusText : null;\n            this.type = type != null ? type : null;\n            this.url = url != null ? url : null;\n        }\n        /**\n         * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n         * override\n         * existing values. This method will not change the values of the instance on which it is being\n         * called.\n         *\n         * This may be useful when sharing a base `ResponseOptions` object inside tests,\n         * where certain properties may change from test to test.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n         *\n         * ```typescript\n         * import {ResponseOptions, Response} from '\\@angular/http';\n         *\n         * var options = new ResponseOptions({\n         *   body: {name: 'Jeff'}\n         * });\n         * var res = new Response(options.merge({\n         *   url: 'https://google.com'\n         * }));\n         * console.log('options.url:', options.url); // null\n         * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n         * console.log('res.url:', res.url); // https://google.com\n         * ```\n         * @param {?=} options\n         * @return {?}\n         */\n        ResponseOptions.prototype.merge = function (options) {\n            return new ResponseOptions({\n                body: options && options.body != null ? options.body : this.body,\n                status: options && options.status != null ? options.status : this.status,\n                headers: options && options.headers != null ? options.headers : this.headers,\n                statusText: options && options.statusText != null ? options.statusText : this.statusText,\n                type: options && options.type != null ? options.type : this.type,\n                url: options && options.url != null ? options.url : this.url,\n            });\n        };\n        return ResponseOptions;\n    }());\n    /**\n     * Subclass of {\\@link ResponseOptions}, with default values.\n     *\n     * Default values:\n     *  * status: 200\n     *  * headers: empty {\\@link Headers} object\n     *\n     * This class could be extended and bound to the {\\@link ResponseOptions} class\n     * when configuring an {\\@link Injector}, in order to override the default options\n     * used by {\\@link Http} to create {\\@link Response Responses}.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n     *\n     * ```typescript\n     * import {provide} from '\\@angular/core';\n     * import {bootstrap} from '\\@angular/platform-browser/browser';\n     * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n     * '\\@angular/http';\n     * import {App} from './myapp';\n     *\n     * class MyOptions extends BaseResponseOptions {\n     *   headers:Headers = new Headers({network: 'github'});\n     * }\n     *\n     * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n     * ```\n     *\n     * The options could also be extended when manually creating a {\\@link Response}\n     * object.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n     *\n     * ```\n     * import {BaseResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new BaseResponseOptions();\n     * var res = new Response(options.merge({\n     *   body: 'Angular',\n     *   headers: new Headers({framework: 'angular'})\n     * }));\n     * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n     * console.log('res.text():', res.text()); // Angular;\n     * ```\n     *\n     * \\@experimental\n     */\n    var BaseResponseOptions = (function (_super) {\n        __extends$1(BaseResponseOptions, _super);\n        function BaseResponseOptions() {\n            _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });\n        }\n        BaseResponseOptions.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BaseResponseOptions.ctorParameters = function () { return []; };\n        return BaseResponseOptions;\n    }(ResponseOptions));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Abstract class from which real backends are derived.\n     *\n     * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n     * {\\@link Request}.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var ConnectionBackend = (function () {\n        function ConnectionBackend() {\n        }\n        /**\n         * @abstract\n         * @param {?} request\n         * @return {?}\n         */\n        ConnectionBackend.prototype.createConnection = function (request) { };\n        return ConnectionBackend;\n    }());\n    /**\n     * Abstract class from which real connections are derived.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var Connection = (function () {\n        function Connection() {\n        }\n        return Connection;\n    }());\n    /**\n     * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var XSRFStrategy = (function () {\n        function XSRFStrategy() {\n        }\n        /**\n         * @abstract\n         * @param {?} req\n         * @return {?}\n         */\n        XSRFStrategy.prototype.configureRequest = function (req) { };\n        return XSRFStrategy;\n    }());\n\n    /**\n     * @param {?} method\n     * @return {?}\n     */\n    function normalizeMethodName(method) {\n        if (typeof method !== 'string')\n            return method;\n        switch (method.toUpperCase()) {\n            case 'GET':\n                return RequestMethod.Get;\n            case 'POST':\n                return RequestMethod.Post;\n            case 'PUT':\n                return RequestMethod.Put;\n            case 'DELETE':\n                return RequestMethod.Delete;\n            case 'OPTIONS':\n                return RequestMethod.Options;\n            case 'HEAD':\n                return RequestMethod.Head;\n            case 'PATCH':\n                return RequestMethod.Patch;\n        }\n        throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n    }\n    var /** @type {?} */ isSuccess = function (status) { return (status >= 200 && status < 300); };\n    /**\n     * @param {?} xhr\n     * @return {?}\n     */\n    function getResponseURL(xhr) {\n        if ('responseURL' in xhr) {\n            return xhr.responseURL;\n        }\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n            return xhr.getResponseHeader('X-Request-URL');\n        }\n        return;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    function stringToArrayBuffer(input) {\n        var /** @type {?} */ view = new Uint16Array(input.length);\n        for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n            view[i] = input.charCodeAt(i);\n        }\n        return view.buffer;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     * @param {?=} rawParams\n     * @return {?}\n     */\n    function paramParser(rawParams) {\n        if (rawParams === void 0) { rawParams = ''; }\n        var /** @type {?} */ map = new Map();\n        if (rawParams.length > 0) {\n            var /** @type {?} */ params = rawParams.split('&');\n            params.forEach(function (param) {\n                var /** @type {?} */ eqIdx = param.indexOf('=');\n                var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n                var /** @type {?} */ list = map.get(key) || [];\n                list.push(val);\n                map.set(key, list);\n            });\n        }\n        return map;\n    }\n    /**\n     * \\@experimental\n     *\n     */\n    var QueryEncoder = (function () {\n        function QueryEncoder() {\n        }\n        /**\n         * @param {?} k\n         * @return {?}\n         */\n        QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n        return QueryEncoder;\n    }());\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    function standardEncoding(v) {\n        return encodeURIComponent(v)\n            .replace(/%40/gi, '@')\n            .replace(/%3A/gi, ':')\n            .replace(/%24/gi, '$')\n            .replace(/%2C/gi, ',')\n            .replace(/%3B/gi, ';')\n            .replace(/%2B/gi, '+')\n            .replace(/%3D/gi, '=')\n            .replace(/%3F/gi, '?')\n            .replace(/%2F/gi, '/');\n    }\n    /**\n     * Map-like representation of url search parameters, based on\n     * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n     * with several extensions for merging URLSearchParams objects:\n     *   - setAll()\n     *   - appendAll()\n     *   - replaceAll()\n     *\n     * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n     * which is used to serialize parameters before making a request. By default,\n     * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n     * and then un-encodes certain characters that are allowed to be part of the query\n     * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n     *\n     * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n     *\n     * If the set of allowed query characters is not acceptable for a particular backend,\n     * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n     *\n     * ```\n     * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n     * class MyQueryEncoder extends QueryEncoder {\n     *   encodeKey(k: string): string {\n     *     return myEncodingFunction(k);\n     *   }\n     *\n     *   encodeValue(v: string): string {\n     *     return myEncodingFunction(v);\n     *   }\n     * }\n     *\n     * let params = new URLSearchParams('', new MyQueryEncoder());\n     * ```\n     * \\@experimental\n     */\n    var URLSearchParams = (function () {\n        /**\n         * @param {?=} rawParams\n         * @param {?=} queryEncoder\n         */\n        function URLSearchParams(rawParams, queryEncoder) {\n            if (rawParams === void 0) { rawParams = ''; }\n            if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n            this.rawParams = rawParams;\n            this.queryEncoder = queryEncoder;\n            this.paramsMap = paramParser(rawParams);\n        }\n        /**\n         * @return {?}\n         */\n        URLSearchParams.prototype.clone = function () {\n            var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n            clone.appendAll(this);\n            return clone;\n        };\n        /**\n         * @param {?} param\n         * @return {?}\n         */\n        URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n        /**\n         * @param {?} param\n         * @return {?}\n         */\n        URLSearchParams.prototype.get = function (param) {\n            var /** @type {?} */ storedParam = this.paramsMap.get(param);\n            return Array.isArray(storedParam) ? storedParam[0] : null;\n        };\n        /**\n         * @param {?} param\n         * @return {?}\n         */\n        URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n        /**\n         * @param {?} param\n         * @param {?} val\n         * @return {?}\n         */\n        URLSearchParams.prototype.set = function (param, val) {\n            if (val === void 0 || val === null) {\n                this.delete(param);\n                return;\n            }\n            var /** @type {?} */ list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(val);\n            this.paramsMap.set(param, list);\n        };\n        /**\n         * @param {?} searchParams\n         * @return {?}\n         */\n        URLSearchParams.prototype.setAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n                list.length = 0;\n                list.push(value[0]);\n                _this.paramsMap.set(param, list);\n            });\n        };\n        /**\n         * @param {?} param\n         * @param {?} val\n         * @return {?}\n         */\n        URLSearchParams.prototype.append = function (param, val) {\n            if (val === void 0 || val === null)\n                return;\n            var /** @type {?} */ list = this.paramsMap.get(param) || [];\n            list.push(val);\n            this.paramsMap.set(param, list);\n        };\n        /**\n         * @param {?} searchParams\n         * @return {?}\n         */\n        URLSearchParams.prototype.appendAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n                for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                    list.push(value[i]);\n                }\n                _this.paramsMap.set(param, list);\n            });\n        };\n        /**\n         * @param {?} searchParams\n         * @return {?}\n         */\n        URLSearchParams.prototype.replaceAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n                list.length = 0;\n                for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                    list.push(value[i]);\n                }\n                _this.paramsMap.set(param, list);\n            });\n        };\n        /**\n         * @return {?}\n         */\n        URLSearchParams.prototype.toString = function () {\n            var _this = this;\n            var /** @type {?} */ paramsList = [];\n            this.paramsMap.forEach(function (values, k) {\n                values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n            });\n            return paramsList.join('&');\n        };\n        /**\n         * @param {?} param\n         * @return {?}\n         */\n        URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n        return URLSearchParams;\n    }());\n\n    /**\n     * HTTP request body used by both {\\@link Request} and {\\@link Response}\n     * https://fetch.spec.whatwg.org/#body\n     * @abstract\n     */\n    var Body = (function () {\n        function Body() {\n        }\n        /**\n         * Attempts to return body as parsed `JSON` object, or raises an exception.\n         * @return {?}\n         */\n        Body.prototype.json = function () {\n            if (typeof this._body === 'string') {\n                return JSON.parse(/** @type {?} */ (this._body));\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return JSON.parse(this.text());\n            }\n            return this._body;\n        };\n        /**\n         * Returns the body as a string, presuming `toString()` can be called on the response body.\n         * @return {?}\n         */\n        Body.prototype.text = function () {\n            if (this._body instanceof URLSearchParams) {\n                return this._body.toString();\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n            }\n            if (this._body == null) {\n                return '';\n            }\n            if (typeof this._body === 'object') {\n                return JSON.stringify(this._body, null, 2);\n            }\n            return this._body.toString();\n        };\n        /**\n         * Return the body as an ArrayBuffer\n         * @return {?}\n         */\n        Body.prototype.arrayBuffer = function () {\n            if (this._body instanceof ArrayBuffer) {\n                return (this._body);\n            }\n            return stringToArrayBuffer(this.text());\n        };\n        /**\n         * Returns the request's body as a Blob, assuming that body exists.\n         * @return {?}\n         */\n        Body.prototype.blob = function () {\n            if (this._body instanceof Blob) {\n                return (this._body);\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return new Blob([this._body]);\n            }\n            throw new Error('The request body isn\\'t either a blob or an array buffer');\n        };\n        return Body;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates `Response` instances from provided values.\n     *\n     * Though this object isn't\n     * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n     * add data to a view.\n     *\n     * ### Example\n     *\n     * ```\n     * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n     * ```\n     *\n     * The Response's interface is inspired by the Response constructor defined in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n     * can be accessed many times. There are other differences in the implementation, but this is the\n     * most significant.\n     *\n     * \\@experimental\n     */\n    var Response = (function (_super) {\n        __extends$2(Response, _super);\n        /**\n         * @param {?} responseOptions\n         */\n        function Response(responseOptions) {\n            _super.call(this);\n            this._body = responseOptions.body;\n            this.status = responseOptions.status;\n            this.ok = (this.status >= 200 && this.status <= 299);\n            this.statusText = responseOptions.statusText;\n            this.headers = responseOptions.headers;\n            this.type = responseOptions.type;\n            this.url = responseOptions.url;\n        }\n        /**\n         * @return {?}\n         */\n        Response.prototype.toString = function () {\n            return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n        };\n        return Response;\n    }(Body));\n\n    var /** @type {?} */ _nextRequestId = 0;\n    var /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\n    var /** @type {?} */ _jsonpConnections = null;\n    /**\n     * @return {?}\n     */\n    function _getJsonpConnections() {\n        var /** @type {?} */ w = typeof window == 'object' ? window : {};\n        if (_jsonpConnections === null) {\n            _jsonpConnections = w[JSONP_HOME] = {};\n        }\n        return _jsonpConnections;\n    }\n    var BrowserJsonp = (function () {\n        function BrowserJsonp() {\n        }\n        /**\n         * @param {?} url\n         * @return {?}\n         */\n        BrowserJsonp.prototype.build = function (url) {\n            var /** @type {?} */ node = document.createElement('script');\n            node.src = url;\n            return node;\n        };\n        /**\n         * @return {?}\n         */\n        BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n        /**\n         * @param {?} id\n         * @return {?}\n         */\n        BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n        /**\n         * @param {?} id\n         * @param {?} connection\n         * @return {?}\n         */\n        BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n            var /** @type {?} */ connections = _getJsonpConnections();\n            connections[id] = connection;\n        };\n        /**\n         * @param {?} id\n         * @return {?}\n         */\n        BrowserJsonp.prototype.removeConnection = function (id) {\n            var /** @type {?} */ connections = _getJsonpConnections();\n            connections[id] = null;\n        };\n        /**\n         * @param {?} node\n         * @return {?}\n         */\n        BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n        /**\n         * @param {?} node\n         * @return {?}\n         */\n        BrowserJsonp.prototype.cleanup = function (node) {\n            if (node.parentNode) {\n                node.parentNode.removeChild(/** @type {?} */ ((node)));\n            }\n        };\n        BrowserJsonp.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BrowserJsonp.ctorParameters = function () { return []; };\n        return BrowserJsonp;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n    var /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n    /**\n     * Abstract base class for an in-flight JSONP request.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var JSONPConnection = (function () {\n        function JSONPConnection() {\n        }\n        /**\n         * Callback called when the JSONP request completes, to notify the application\n         * of the new data.\n         * @abstract\n         * @param {?=} data\n         * @return {?}\n         */\n        JSONPConnection.prototype.finished = function (data) { };\n        return JSONPConnection;\n    }());\n    var JSONPConnection_ = (function (_super) {\n        __extends(JSONPConnection_, _super);\n        /**\n         * @param {?} req\n         * @param {?} _dom\n         * @param {?=} baseResponseOptions\n         */\n        function JSONPConnection_(req, _dom, baseResponseOptions) {\n            var _this = this;\n            _super.call(this);\n            this._dom = _dom;\n            this.baseResponseOptions = baseResponseOptions;\n            this._finished = false;\n            if (req.method !== RequestMethod.Get) {\n                throw new TypeError(JSONP_ERR_WRONG_METHOD);\n            }\n            this.request = req;\n            this.response = new rxjs_Observable.Observable(function (responseObserver) {\n                _this.readyState = ReadyState.Loading;\n                var id = _this._id = _dom.nextRequestID();\n                _dom.exposeConnection(id, _this);\n                // Workaround Dart\n                // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n                var callback = _dom.requestCallback(_this._id);\n                var url = req.url;\n                if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                    url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n                }\n                else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                    url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n                }\n                var script = _this._script = _dom.build(url);\n                var onLoad = function (event) {\n                    if (_this.readyState === ReadyState.Cancelled)\n                        return;\n                    _this.readyState = ReadyState.Done;\n                    _dom.cleanup(script);\n                    if (!_this._finished) {\n                        var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                        if (baseResponseOptions) {\n                            responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                        }\n                        responseObserver.error(new Response(responseOptions_1));\n                        return;\n                    }\n                    var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                    if (_this.baseResponseOptions) {\n                        responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.next(new Response(responseOptions));\n                    responseObserver.complete();\n                };\n                var onError = function (error) {\n                    if (_this.readyState === ReadyState.Cancelled)\n                        return;\n                    _this.readyState = ReadyState.Done;\n                    _dom.cleanup(script);\n                    var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                    if (baseResponseOptions) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                };\n                script.addEventListener('load', onLoad);\n                script.addEventListener('error', onError);\n                _dom.send(script);\n                return function () {\n                    _this.readyState = ReadyState.Cancelled;\n                    script.removeEventListener('load', onLoad);\n                    script.removeEventListener('error', onError);\n                    _this._dom.cleanup(script);\n                };\n            });\n        }\n        /**\n         * @param {?=} data\n         * @return {?}\n         */\n        JSONPConnection_.prototype.finished = function (data) {\n            // Don't leak connections\n            this._finished = true;\n            this._dom.removeConnection(this._id);\n            if (this.readyState === ReadyState.Cancelled)\n                return;\n            this._responseData = data;\n        };\n        return JSONPConnection_;\n    }(JSONPConnection));\n    /**\n     * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var JSONPBackend = (function (_super) {\n        __extends(JSONPBackend, _super);\n        function JSONPBackend() {\n            _super.apply(this, arguments);\n        }\n        return JSONPBackend;\n    }(ConnectionBackend));\n    var JSONPBackend_ = (function (_super) {\n        __extends(JSONPBackend_, _super);\n        /**\n         * @param {?} _browserJSONP\n         * @param {?} _baseResponseOptions\n         */\n        function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n            _super.call(this);\n            this._browserJSONP = _browserJSONP;\n            this._baseResponseOptions = _baseResponseOptions;\n        }\n        /**\n         * @param {?} request\n         * @return {?}\n         */\n        JSONPBackend_.prototype.createConnection = function (request) {\n            return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n        };\n        JSONPBackend_.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        JSONPBackend_.ctorParameters = function () { return [\n            { type: BrowserJsonp, },\n            { type: ResponseOptions, },\n        ]; };\n        return JSONPBackend_;\n    }(JSONPBackend));\n\n    var /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n    /**\n     * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n     * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n     * request.\n     *\n     * This class would typically not be created or interacted with directly inside applications, though\n     * the {\\@link MockConnection} may be interacted with in tests.\n     *\n     * \\@experimental\n     */\n    var XHRConnection = (function () {\n        /**\n         * @param {?} req\n         * @param {?} browserXHR\n         * @param {?=} baseResponseOptions\n         */\n        function XHRConnection(req, browserXHR, baseResponseOptions) {\n            var _this = this;\n            this.request = req;\n            this.response = new rxjs_Observable.Observable(function (responseObserver) {\n                var _xhr = browserXHR.build();\n                _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n                if (req.withCredentials != null) {\n                    _xhr.withCredentials = req.withCredentials;\n                }\n                // load event handler\n                var onLoad = function () {\n                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                    var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                    var body = null;\n                    // HTTP 204 means no content\n                    if (status !== 204) {\n                        // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                        // response/responseType properties were introduced in ResourceLoader Level2 spec\n                        // (supported by IE10)\n                        body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                        // Implicitly strip a potential XSSI prefix.\n                        if (typeof body === 'string') {\n                            body = body.replace(XSSI_PREFIX, '');\n                        }\n                    }\n                    // fix status code when it is 0 (0 status is undocumented).\n                    // Occurs when accessing file resources or on Android 4.1 stock browser\n                    // while retrieving files from application cache.\n                    if (status === 0) {\n                        status = body ? 200 : 0;\n                    }\n                    var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                    // IE 9 does not provide the way to get URL of response\n                    var url = getResponseURL(_xhr) || req.url;\n                    var statusText = _xhr.statusText || 'OK';\n                    var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                    if (baseResponseOptions != null) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    var response = new Response(responseOptions);\n                    response.ok = isSuccess(status);\n                    if (response.ok) {\n                        responseObserver.next(response);\n                        // TODO(gdi2290): defer complete if array buffer until done\n                        responseObserver.complete();\n                        return;\n                    }\n                    responseObserver.error(response);\n                };\n                // error event handler\n                var onError = function (err) {\n                    var responseOptions = new ResponseOptions({\n                        body: err,\n                        type: ResponseType.Error,\n                        status: _xhr.status,\n                        statusText: _xhr.statusText,\n                    });\n                    if (baseResponseOptions != null) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                };\n                _this.setDetectedContentType(req, _xhr);\n                if (req.headers == null) {\n                    req.headers = new Headers();\n                }\n                if (!req.headers.has('Accept')) {\n                    req.headers.append('Accept', 'application/json, text/plain, */*');\n                }\n                req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n                // Select the correct buffer type to store the response\n                if (req.responseType != null && _xhr.responseType != null) {\n                    switch (req.responseType) {\n                        case ResponseContentType.ArrayBuffer:\n                            _xhr.responseType = 'arraybuffer';\n                            break;\n                        case ResponseContentType.Json:\n                            _xhr.responseType = 'json';\n                            break;\n                        case ResponseContentType.Text:\n                            _xhr.responseType = 'text';\n                            break;\n                        case ResponseContentType.Blob:\n                            _xhr.responseType = 'blob';\n                            break;\n                        default:\n                            throw new Error('The selected responseType is not supported');\n                    }\n                }\n                _xhr.addEventListener('load', onLoad);\n                _xhr.addEventListener('error', onError);\n                _xhr.send(_this.request.getBody());\n                return function () {\n                    _xhr.removeEventListener('load', onLoad);\n                    _xhr.removeEventListener('error', onError);\n                    _xhr.abort();\n                };\n            });\n        }\n        /**\n         * @param {?} req\n         * @param {?} _xhr\n         * @return {?}\n         */\n        XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n            // Skip if a custom Content-Type header is provided\n            if (req.headers != null && req.headers.get('Content-Type') != null) {\n                return;\n            }\n            // Set the detected content type\n            switch (req.contentType) {\n                case ContentType.NONE:\n                    break;\n                case ContentType.JSON:\n                    _xhr.setRequestHeader('content-type', 'application/json');\n                    break;\n                case ContentType.FORM:\n                    _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                    break;\n                case ContentType.TEXT:\n                    _xhr.setRequestHeader('content-type', 'text/plain');\n                    break;\n                case ContentType.BLOB:\n                    var /** @type {?} */ blob = req.blob();\n                    if (blob.type) {\n                        _xhr.setRequestHeader('content-type', blob.type);\n                    }\n                    break;\n            }\n        };\n        return XHRConnection;\n    }());\n    /**\n     * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n     * using a cookie. See {\\@link https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)}\n     * for more information on XSRF.\n     *\n     * Applications can configure custom cookie and header names by binding an instance of this class\n     * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n     * details.\n     *\n     * \\@experimental\n     */\n    var CookieXSRFStrategy = (function () {\n        /**\n         * @param {?=} _cookieName\n         * @param {?=} _headerName\n         */\n        function CookieXSRFStrategy(_cookieName, _headerName) {\n            if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n            if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n            this._cookieName = _cookieName;\n            this._headerName = _headerName;\n        }\n        /**\n         * @param {?} req\n         * @return {?}\n         */\n        CookieXSRFStrategy.prototype.configureRequest = function (req) {\n            var /** @type {?} */ xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);\n            if (xsrfToken) {\n                req.headers.set(this._headerName, xsrfToken);\n            }\n        };\n        return CookieXSRFStrategy;\n    }());\n    /**\n     * Creates {\\@link XHRConnection} instances.\n     *\n     * This class would typically not be used by end users, but could be\n     * overridden if a different backend implementation should be used,\n     * such as in a node backend.\n     *\n     * ### Example\n     *\n     * ```\n     * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n     * \\@Component({\n     *   viewProviders: [\n     *     HTTP_PROVIDERS,\n     *     {provide: Http, useFactory: (backend, options) => {\n     *       return new Http(backend, options);\n     *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n     * })\n     * class MyComponent {\n     *   constructor(http:Http) {\n     *     http.request('people.json').subscribe(res => this.people = res.json());\n     *   }\n     * }\n     * ```\n     * \\@experimental\n     */\n    var XHRBackend = (function () {\n        /**\n         * @param {?} _browserXHR\n         * @param {?} _baseResponseOptions\n         * @param {?} _xsrfStrategy\n         */\n        function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n            this._browserXHR = _browserXHR;\n            this._baseResponseOptions = _baseResponseOptions;\n            this._xsrfStrategy = _xsrfStrategy;\n        }\n        /**\n         * @param {?} request\n         * @return {?}\n         */\n        XHRBackend.prototype.createConnection = function (request) {\n            this._xsrfStrategy.configureRequest(request);\n            return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n        };\n        XHRBackend.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        XHRBackend.ctorParameters = function () { return [\n            { type: BrowserXhr, },\n            { type: ResponseOptions, },\n            { type: XSRFStrategy, },\n        ]; };\n        return XHRBackend;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates a request options object to be optionally provided when instantiating a\n     * {\\@link Request}.\n     *\n     * This class is based on the `RequestInit` description in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#requestinit).\n     *\n     * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n     * class, which sub-classes `RequestOptions`.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * var options = new RequestOptions({\n     *   method: RequestMethod.Post,\n     *   url: 'https://google.com'\n     * });\n     * var req = new Request(options);\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // https://google.com\n     * ```\n     *\n     * \\@experimental\n     */\n    var RequestOptions = (function () {\n        /**\n         * @param {?=} __0\n         */\n        function RequestOptions(_a) {\n            var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType;\n            this.method = method != null ? normalizeMethodName(method) : null;\n            this.headers = headers != null ? headers : null;\n            this.body = body != null ? body : null;\n            this.url = url != null ? url : null;\n            this.search =\n                search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;\n            this.withCredentials = withCredentials != null ? withCredentials : null;\n            this.responseType = responseType != null ? responseType : null;\n        }\n        /**\n         * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n         * existing values. This method will not change the values of the instance on which it is being\n         * called.\n         *\n         * Note that `headers` and `search` will override existing values completely if present in\n         * the `options` object. If these values should be merged, it should be done prior to calling\n         * `merge` on the `RequestOptions` instance.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n         *\n         * ```typescript\n         * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n         *\n         * var options = new RequestOptions({\n         *   method: RequestMethod.Post\n         * });\n         * var req = new Request(options.merge({\n         *   url: 'https://google.com'\n         * }));\n         * console.log('req.method:', RequestMethod[req.method]); // Post\n         * console.log('options.url:', options.url); // null\n         * console.log('req.url:', req.url); // https://google.com\n         * ```\n         * @param {?=} options\n         * @return {?}\n         */\n        RequestOptions.prototype.merge = function (options) {\n            return new RequestOptions({\n                method: options && options.method != null ? options.method : this.method,\n                headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n                body: options && options.body != null ? options.body : this.body,\n                url: options && options.url != null ? options.url : this.url,\n                search: options && options.search != null ?\n                    (typeof options.search === 'string' ? new URLSearchParams(options.search) :\n                        options.search.clone()) :\n                    this.search,\n                withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                    this.withCredentials,\n                responseType: options && options.responseType != null ? options.responseType :\n                    this.responseType\n            });\n        };\n        return RequestOptions;\n    }());\n    /**\n     * Subclass of {\\@link RequestOptions}, with default values.\n     *\n     * Default values:\n     *  * method: {\\@link RequestMethod RequestMethod.Get}\n     *  * headers: empty {\\@link Headers} object\n     *\n     * This class could be extended and bound to the {\\@link RequestOptions} class\n     * when configuring an {\\@link Injector}, in order to override the default options\n     * used by {\\@link Http} to create and send {\\@link Request Requests}.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\n     *\n     * ```typescript\n     * import {provide} from '\\@angular/core';\n     * import {bootstrap} from '\\@angular/platform-browser/browser';\n     * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\\@angular/http';\n     * import {App} from './myapp';\n     *\n     * class MyOptions extends BaseRequestOptions {\n     *   search: string = 'coreTeam=true';\n     * }\n     *\n     * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n     * ```\n     *\n     * The options could also be extended when manually creating a {\\@link Request}\n     * object.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\n     *\n     * ```\n     * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * var options = new BaseRequestOptions();\n     * var req = new Request(options.merge({\n     *   method: RequestMethod.Post,\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     *\n     * \\@experimental\n     */\n    var BaseRequestOptions = (function (_super) {\n        __extends$3(BaseRequestOptions, _super);\n        function BaseRequestOptions() {\n            _super.call(this, { method: RequestMethod.Get, headers: new Headers() });\n        }\n        BaseRequestOptions.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BaseRequestOptions.ctorParameters = function () { return []; };\n        return BaseRequestOptions;\n    }(RequestOptions));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates `Request` instances from provided values.\n     *\n     * The Request's interface is inspired by the Request constructor defined in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#request-class),\n     * but is considered a static value whose body can be accessed many times. There are other\n     * differences in the implementation, but this is the most significant.\n     *\n     * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n     * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n     * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n     * where it may be useful to generate a `Request` with arbitrary headers and search params.\n     *\n     * ```typescript\n     * import {Injectable, Injector} from '\\@angular/core';\n     * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n     *\n     * \\@Injectable()\n     * class AutoAuthenticator {\n     *   constructor(public http:Http) {}\n     *   request(url:string) {\n     *     return this.http.request(new Request({\n     *       method: RequestMethod.Get,\n     *       url: url,\n     *       search: 'password=123'\n     *     }));\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n     * var authenticator = injector.get(AutoAuthenticator);\n     * authenticator.request('people.json').subscribe(res => {\n     *   //URL should have included '?password=123'\n     *   console.log('people', res.json());\n     * });\n     * ```\n     *\n     * \\@experimental\n     */\n    var Request = (function (_super) {\n        __extends$5(Request, _super);\n        /**\n         * @param {?} requestOptions\n         */\n        function Request(requestOptions) {\n            _super.call(this);\n            // TODO: assert that url is present\n            var url = requestOptions.url;\n            this.url = requestOptions.url;\n            if (requestOptions.search) {\n                var search = requestOptions.search.toString();\n                if (search.length > 0) {\n                    var prefix = '?';\n                    if (this.url.indexOf('?') != -1) {\n                        prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n                    }\n                    // TODO: just delete search-query-looking string in url?\n                    this.url = url + prefix + search;\n                }\n            }\n            this._body = requestOptions.body;\n            this.method = normalizeMethodName(requestOptions.method);\n            // TODO(jeffbcross): implement behavior\n            // Defaults to 'omit', consistent with browser\n            this.headers = new Headers(requestOptions.headers);\n            this.contentType = this.detectContentType();\n            this.withCredentials = requestOptions.withCredentials;\n            this.responseType = requestOptions.responseType;\n        }\n        /**\n         * Returns the content type enum based on header options.\n         * @return {?}\n         */\n        Request.prototype.detectContentType = function () {\n            switch (this.headers.get('content-type')) {\n                case 'application/json':\n                    return ContentType.JSON;\n                case 'application/x-www-form-urlencoded':\n                    return ContentType.FORM;\n                case 'multipart/form-data':\n                    return ContentType.FORM_DATA;\n                case 'text/plain':\n                case 'text/html':\n                    return ContentType.TEXT;\n                case 'application/octet-stream':\n                    return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n                default:\n                    return this.detectContentTypeFromBody();\n            }\n        };\n        /**\n         * Returns the content type of request's body based on its type.\n         * @return {?}\n         */\n        Request.prototype.detectContentTypeFromBody = function () {\n            if (this._body == null) {\n                return ContentType.NONE;\n            }\n            else if (this._body instanceof URLSearchParams) {\n                return ContentType.FORM;\n            }\n            else if (this._body instanceof FormData) {\n                return ContentType.FORM_DATA;\n            }\n            else if (this._body instanceof Blob$1) {\n                return ContentType.BLOB;\n            }\n            else if (this._body instanceof ArrayBuffer$1) {\n                return ContentType.ARRAY_BUFFER;\n            }\n            else if (this._body && typeof this._body === 'object') {\n                return ContentType.JSON;\n            }\n            else {\n                return ContentType.TEXT;\n            }\n        };\n        /**\n         * Returns the request's body according to its type. If body is undefined, return\n         * null.\n         * @return {?}\n         */\n        Request.prototype.getBody = function () {\n            switch (this.contentType) {\n                case ContentType.JSON:\n                    return this.text();\n                case ContentType.FORM:\n                    return this.text();\n                case ContentType.FORM_DATA:\n                    return this._body;\n                case ContentType.TEXT:\n                    return this.text();\n                case ContentType.BLOB:\n                    return this.blob();\n                case ContentType.ARRAY_BUFFER:\n                    return this.arrayBuffer();\n                default:\n                    return null;\n            }\n        };\n        return Request;\n    }(Body));\n    var /** @type {?} */ noop = function () { };\n    var /** @type {?} */ w = typeof window == 'object' ? window : noop;\n    var /** @type {?} */ FormData = ((w) /** TODO #9100 */)['FormData'] || noop;\n    var /** @type {?} */ Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;\n    var /** @type {?} */ ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @param {?} backend\n     * @param {?} request\n     * @return {?}\n     */\n    function httpRequest(backend, request) {\n        return backend.createConnection(request).response;\n    }\n    /**\n     * @param {?} defaultOpts\n     * @param {?} providedOpts\n     * @param {?} method\n     * @param {?} url\n     * @return {?}\n     */\n    function mergeOptions(defaultOpts, providedOpts, method, url) {\n        var /** @type {?} */ newOptions = defaultOpts;\n        if (providedOpts) {\n            // Hack so Dart can used named parameters\n            return newOptions.merge(new RequestOptions({\n                method: providedOpts.method || method,\n                url: providedOpts.url || url,\n                search: providedOpts.search,\n                headers: providedOpts.headers,\n                body: providedOpts.body,\n                withCredentials: providedOpts.withCredentials,\n                responseType: providedOpts.responseType\n            }));\n        }\n        return newOptions.merge(new RequestOptions({ method: method, url: url }));\n    }\n    /**\n     * Performs http requests using `XMLHttpRequest` as the default backend.\n     *\n     * `Http` is available as an injectable class, with methods to perform http requests. Calling\n     * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n     * response is received.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n     * import 'rxjs/add/operator/map'\n     * \\@Component({\n     *   selector: 'http-app',\n     *   viewProviders: [HTTP_PROVIDERS],\n     *   templateUrl: 'people.html'\n     * })\n     * class PeopleComponent {\n     *   constructor(http: Http) {\n     *     http.get('people.json')\n     *       // Call map on the response observable to get the parsed people object\n     *       .map(res => res.json())\n     *       // Subscribe to the observable to get the parsed people object and attach it to the\n     *       // component\n     *       .subscribe(people => this.people = people);\n     *   }\n     * }\n     * ```\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n     * ```\n     *\n     * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n     * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n     * the {\\@link XHRBackend} provider, as in the following example:\n     *\n     * ### Example\n     *\n     * ```typescript\n     * import {BaseRequestOptions, Http} from '\\@angular/http';\n     * import {MockBackend} from '\\@angular/http/testing';\n     * var injector = Injector.resolveAndCreate([\n     *   BaseRequestOptions,\n     *   MockBackend,\n     *   {provide: Http, useFactory:\n     *       function(backend, defaultOptions) {\n     *         return new Http(backend, defaultOptions);\n     *       },\n     *       deps: [MockBackend, BaseRequestOptions]}\n     * ]);\n     * var http = injector.get(Http);\n     * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n     * ```\n     *\n     * \\@experimental\n     */\n    var Http = (function () {\n        /**\n         * @param {?} _backend\n         * @param {?} _defaultOptions\n         */\n        function Http(_backend, _defaultOptions) {\n            this._backend = _backend;\n            this._defaultOptions = _defaultOptions;\n        }\n        /**\n         * Performs any type of http request. First argument is required, and can either be a url or\n         * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n         * object can be provided as the 2nd argument. The options object will be merged with the values\n         * of {\\@link BaseRequestOptions} before performing the request.\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.request = function (url, options) {\n            var /** @type {?} */ responseObservable;\n            if (typeof url === 'string') {\n                responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n            }\n            else if (url instanceof Request) {\n                responseObservable = httpRequest(this._backend, url);\n            }\n            else {\n                throw new Error('First argument must be a url string or Request instance.');\n            }\n            return responseObservable;\n        };\n        /**\n         * Performs a request with `get` http method.\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.get = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n        };\n        /**\n         * Performs a request with `post` http method.\n         * @param {?} url\n         * @param {?} body\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.post = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n        };\n        /**\n         * Performs a request with `put` http method.\n         * @param {?} url\n         * @param {?} body\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.put = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n        };\n        /**\n         * Performs a request with `delete` http method.\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.delete = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n        };\n        /**\n         * Performs a request with `patch` http method.\n         * @param {?} url\n         * @param {?} body\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.patch = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n        };\n        /**\n         * Performs a request with `head` http method.\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.head = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n        };\n        /**\n         * Performs a request with `options` http method.\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.options = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n        };\n        Http.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        Http.ctorParameters = function () { return [\n            { type: ConnectionBackend, },\n            { type: RequestOptions, },\n        ]; };\n        return Http;\n    }());\n    /**\n     * \\@experimental\n     */\n    var Jsonp = (function (_super) {\n        __extends$4(Jsonp, _super);\n        /**\n         * @param {?} backend\n         * @param {?} defaultOptions\n         */\n        function Jsonp(backend, defaultOptions) {\n            _super.call(this, backend, defaultOptions);\n        }\n        /**\n         * Performs any type of http request. First argument is required, and can either be a url or\n         * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n         * object can be provided as the 2nd argument. The options object will be merged with the values\n         * of {\\@link BaseRequestOptions} before performing the request.\n         *\n         * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n         * supported by all current browsers. Because JSONP creates a `<script>` element with\n         * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n         * source could expose your application to XSS risks. Data exposed by JSONP may also be\n         * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n         * future security issues (e.g. content sniffing).  For more detail, see the\n         * [Security Guide](http://g.co/ng/security).\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Jsonp.prototype.request = function (url, options) {\n            var /** @type {?} */ responseObservable;\n            if (typeof url === 'string') {\n                url =\n                    new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n            }\n            if (url instanceof Request) {\n                if (url.method !== RequestMethod.Get) {\n                    throw new Error('JSONP requests must use GET request method.');\n                }\n                responseObservable = httpRequest(this._backend, url);\n            }\n            else {\n                throw new Error('First argument must be a url string or Request instance.');\n            }\n            return responseObservable;\n        };\n        Jsonp.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        Jsonp.ctorParameters = function () { return [\n            { type: ConnectionBackend, },\n            { type: RequestOptions, },\n        ]; };\n        return Jsonp;\n    }(Http));\n\n    /**\n     * @return {?}\n     */\n    function _createDefaultCookieXSRFStrategy() {\n        return new CookieXSRFStrategy();\n    }\n    /**\n     * @param {?} xhrBackend\n     * @param {?} requestOptions\n     * @return {?}\n     */\n    function httpFactory(xhrBackend, requestOptions) {\n        return new Http(xhrBackend, requestOptions);\n    }\n    /**\n     * @param {?} jsonpBackend\n     * @param {?} requestOptions\n     * @return {?}\n     */\n    function jsonpFactory(jsonpBackend, requestOptions) {\n        return new Jsonp(jsonpBackend, requestOptions);\n    }\n    /**\n     * The module that includes http's providers\n     *\n     * \\@experimental\n     */\n    var HttpModule = (function () {\n        function HttpModule() {\n        }\n        HttpModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        providers: [\n                            // TODO(pascal): use factory type annotations once supported in DI\n                            // issue: https://github.com/angular/angular/issues/3183\n                            { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                            BrowserXhr,\n                            { provide: RequestOptions, useClass: BaseRequestOptions },\n                            { provide: ResponseOptions, useClass: BaseResponseOptions },\n                            XHRBackend,\n                            { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                        ],\n                    },] },\n        ];\n        /** @nocollapse */\n        HttpModule.ctorParameters = function () { return []; };\n        return HttpModule;\n    }());\n    /**\n     * The module that includes jsonp's providers\n     *\n     * \\@experimental\n     */\n    var JsonpModule = (function () {\n        function JsonpModule() {\n        }\n        JsonpModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        providers: [\n                            // TODO(pascal): use factory type annotations once supported in DI\n                            // issue: https://github.com/angular/angular/issues/3183\n                            { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                            BrowserJsonp,\n                            { provide: RequestOptions, useClass: BaseRequestOptions },\n                            { provide: ResponseOptions, useClass: BaseResponseOptions },\n                            { provide: JSONPBackend, useClass: JSONPBackend_ },\n                        ],\n                    },] },\n        ];\n        /** @nocollapse */\n        JsonpModule.ctorParameters = function () { return []; };\n        return JsonpModule;\n    }());\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.4');\n\n    exports.BrowserXhr = BrowserXhr;\n    exports.JSONPBackend = JSONPBackend;\n    exports.JSONPConnection = JSONPConnection;\n    exports.CookieXSRFStrategy = CookieXSRFStrategy;\n    exports.XHRBackend = XHRBackend;\n    exports.XHRConnection = XHRConnection;\n    exports.BaseRequestOptions = BaseRequestOptions;\n    exports.RequestOptions = RequestOptions;\n    exports.BaseResponseOptions = BaseResponseOptions;\n    exports.ResponseOptions = ResponseOptions;\n    exports.ReadyState = ReadyState;\n    exports.RequestMethod = RequestMethod;\n    exports.ResponseContentType = ResponseContentType;\n    exports.ResponseType = ResponseType;\n    exports.Headers = Headers;\n    exports.Http = Http;\n    exports.Jsonp = Jsonp;\n    exports.HttpModule = HttpModule;\n    exports.JsonpModule = JsonpModule;\n    exports.Connection = Connection;\n    exports.ConnectionBackend = ConnectionBackend;\n    exports.XSRFStrategy = XSRFStrategy;\n    exports.Request = Request;\n    exports.Response = Response;\n    exports.QueryEncoder = QueryEncoder;\n    exports.URLSearchParams = URLSearchParams;\n    exports.VERSION = VERSION;\n\n}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 25:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n__export(__webpack_require__(26));\r\n__export(__webpack_require__(27));\r\nvar core_1 = __webpack_require__(3);\r\nvar http_1 = __webpack_require__(24);\r\nvar in_memory_backend_service_2 = __webpack_require__(27);\r\nvar InMemoryWebApiModule = (function () {\r\n    function InMemoryWebApiModule() {\r\n    }\r\n    /**\r\n    *  Prepare in-memory-web-api in the root/boot application module\r\n    *  with class that implements InMemoryDbService and creates an in-memory database.\r\n    *\r\n    * @param {Type} dbCreator - Class that creates seed data for in-memory database. Must implement InMemoryDbService.\r\n    * @param {InMemoryBackendConfigArgs} [options]\r\n    *\r\n    * @example\r\n    * InMemoryWebApiModule.forRoot(dbCreator);\r\n    * InMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\r\n    */\r\n    InMemoryWebApiModule.forRoot = function (dbCreator, options) {\r\n        var providers = [\r\n            { provide: http_1.XHRBackend, useClass: in_memory_backend_service_2.InMemoryBackendService },\r\n            { provide: in_memory_backend_service_2.SEED_DATA, useClass: dbCreator }\r\n        ];\r\n        if (options) {\r\n            providers.push({ provide: in_memory_backend_service_2.InMemoryBackendConfig, useValue: options });\r\n        }\r\n        return {\r\n            ngModule: InMemoryWebApiModule,\r\n            providers: providers\r\n        };\r\n    };\r\n    InMemoryWebApiModule = __decorate([\r\n        core_1.NgModule({}), \r\n        __metadata('design:paramtypes', [])\r\n    ], InMemoryWebApiModule);\r\n    return InMemoryWebApiModule;\r\n}());\r\nexports.InMemoryWebApiModule = InMemoryWebApiModule;\r\n//# sourceMappingURL=index.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2FuZ3VsYXIyLWluLW1lbW9yeS13ZWItYXBpL2luZGV4LmpzPzIxZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuX19leHBvcnQocmVxdWlyZSgnLi9odHRwLXN0YXR1cy1jb2RlcycpKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9pbi1tZW1vcnktYmFja2VuZC5zZXJ2aWNlJykpO1xyXG52YXIgY29yZV8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpO1xyXG52YXIgaHR0cF8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvaHR0cCcpO1xyXG52YXIgaW5fbWVtb3J5X2JhY2tlbmRfc2VydmljZV8yID0gcmVxdWlyZSgnLi9pbi1tZW1vcnktYmFja2VuZC5zZXJ2aWNlJyk7XHJcbnZhciBJbk1lbW9yeVdlYkFwaU1vZHVsZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbk1lbW9yeVdlYkFwaU1vZHVsZSgpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgKiAgUHJlcGFyZSBpbi1tZW1vcnktd2ViLWFwaSBpbiB0aGUgcm9vdC9ib290IGFwcGxpY2F0aW9uIG1vZHVsZVxyXG4gICAgKiAgd2l0aCBjbGFzcyB0aGF0IGltcGxlbWVudHMgSW5NZW1vcnlEYlNlcnZpY2UgYW5kIGNyZWF0ZXMgYW4gaW4tbWVtb3J5IGRhdGFiYXNlLlxyXG4gICAgKlxyXG4gICAgKiBAcGFyYW0ge1R5cGV9IGRiQ3JlYXRvciAtIENsYXNzIHRoYXQgY3JlYXRlcyBzZWVkIGRhdGEgZm9yIGluLW1lbW9yeSBkYXRhYmFzZS4gTXVzdCBpbXBsZW1lbnQgSW5NZW1vcnlEYlNlcnZpY2UuXHJcbiAgICAqIEBwYXJhbSB7SW5NZW1vcnlCYWNrZW5kQ29uZmlnQXJnc30gW29wdGlvbnNdXHJcbiAgICAqXHJcbiAgICAqIEBleGFtcGxlXHJcbiAgICAqIEluTWVtb3J5V2ViQXBpTW9kdWxlLmZvclJvb3QoZGJDcmVhdG9yKTtcclxuICAgICogSW5NZW1vcnlXZWJBcGlNb2R1bGUuZm9yUm9vdChkYkNyZWF0b3IsIHt1c2VWYWx1ZToge2RlbGF5OjYwMH19KTtcclxuICAgICovXHJcbiAgICBJbk1lbW9yeVdlYkFwaU1vZHVsZS5mb3JSb290ID0gZnVuY3Rpb24gKGRiQ3JlYXRvciwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciBwcm92aWRlcnMgPSBbXHJcbiAgICAgICAgICAgIHsgcHJvdmlkZTogaHR0cF8xLlhIUkJhY2tlbmQsIHVzZUNsYXNzOiBpbl9tZW1vcnlfYmFja2VuZF9zZXJ2aWNlXzIuSW5NZW1vcnlCYWNrZW5kU2VydmljZSB9LFxyXG4gICAgICAgICAgICB7IHByb3ZpZGU6IGluX21lbW9yeV9iYWNrZW5kX3NlcnZpY2VfMi5TRUVEX0RBVEEsIHVzZUNsYXNzOiBkYkNyZWF0b3IgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2goeyBwcm92aWRlOiBpbl9tZW1vcnlfYmFja2VuZF9zZXJ2aWNlXzIuSW5NZW1vcnlCYWNrZW5kQ29uZmlnLCB1c2VWYWx1ZTogb3B0aW9ucyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmdNb2R1bGU6IEluTWVtb3J5V2ViQXBpTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IHByb3ZpZGVyc1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgSW5NZW1vcnlXZWJBcGlNb2R1bGUgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBjb3JlXzEuTmdNb2R1bGUoe30pLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgSW5NZW1vcnlXZWJBcGlNb2R1bGUpO1xyXG4gICAgcmV0dXJuIEluTWVtb3J5V2ViQXBpTW9kdWxlO1xyXG59KCkpO1xyXG5leHBvcnRzLkluTWVtb3J5V2ViQXBpTW9kdWxlID0gSW5NZW1vcnlXZWJBcGlNb2R1bGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9hbmd1bGFyMi1pbi1tZW1vcnktd2ViLWFwaS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 26:
/***/ function(module, exports) {

	eval("\"use strict\";\r\nexports.STATUS = {\r\n    CONTINUE: 100,\r\n    SWITCHING_PROTOCOLS: 101,\r\n    OK: 200,\r\n    CREATED: 201,\r\n    ACCEPTED: 202,\r\n    NON_AUTHORITATIVE_INFORMATION: 203,\r\n    NO_CONTENT: 204,\r\n    RESET_CONTENT: 205,\r\n    PARTIAL_CONTENT: 206,\r\n    MULTIPLE_CHOICES: 300,\r\n    MOVED_PERMANTENTLY: 301,\r\n    FOUND: 302,\r\n    SEE_OTHER: 303,\r\n    NOT_MODIFIED: 304,\r\n    USE_PROXY: 305,\r\n    TEMPORARY_REDIRECT: 307,\r\n    BAD_REQUEST: 400,\r\n    UNAUTHORIZED: 401,\r\n    PAYMENT_REQUIRED: 402,\r\n    FORBIDDEN: 403,\r\n    NOT_FOUND: 404,\r\n    METHOD_NOT_ALLOWED: 405,\r\n    NOT_ACCEPTABLE: 406,\r\n    PROXY_AUTHENTICATION_REQUIRED: 407,\r\n    REQUEST_TIMEOUT: 408,\r\n    CONFLICT: 409,\r\n    GONE: 410,\r\n    LENGTH_REQUIRED: 411,\r\n    PRECONDITION_FAILED: 412,\r\n    PAYLOAD_TO_LARGE: 413,\r\n    URI_TOO_LONG: 414,\r\n    UNSUPPORTED_MEDIA_TYPE: 415,\r\n    RANGE_NOT_SATISFIABLE: 416,\r\n    EXPECTATION_FAILED: 417,\r\n    IM_A_TEAPOT: 418,\r\n    UPGRADE_REQUIRED: 426,\r\n    INTERNAL_SERVER_ERROR: 500,\r\n    NOT_IMPLEMENTED: 501,\r\n    BAD_GATEWAY: 502,\r\n    SERVICE_UNAVAILABLE: 503,\r\n    GATEWAY_TIMEOUT: 504,\r\n    HTTP_VERSION_NOT_SUPPORTED: 505,\r\n    PROCESSING: 102,\r\n    MULTI_STATUS: 207,\r\n    IM_USED: 226,\r\n    PERMANENT_REDIRECT: 308,\r\n    UNPROCESSABLE_ENTRY: 422,\r\n    LOCKED: 423,\r\n    FAILED_DEPENDENCY: 424,\r\n    PRECONDITION_REQUIRED: 428,\r\n    TOO_MANY_REQUESTS: 429,\r\n    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\r\n    UNAVAILABLE_FOR_LEGAL_REASONS: 451,\r\n    VARIANT_ALSO_NEGOTIATES: 506,\r\n    INSUFFICIENT_STORAGE: 507,\r\n    NETWORK_AUTHENTICATION_REQUIRED: 511\r\n};\r\n/*tslint:disable:quotemark max-line-length one-line */\r\nexports.STATUS_CODE_INFO = {\r\n    \"100\": {\r\n        \"code\": 100,\r\n        \"text\": \"Continue\",\r\n        \"description\": \"\\\"The initial part of a request has been received and has not yet been rejected by the server.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.2.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.2.1\"\r\n    },\r\n    \"101\": {\r\n        \"code\": 101,\r\n        \"text\": \"Switching Protocols\",\r\n        \"description\": \"\\\"The server understands and is willing to comply with the client's request, via the Upgrade header field, for a change in the application protocol being used on this connection.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.2.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.2.2\"\r\n    },\r\n    \"200\": {\r\n        \"code\": 200,\r\n        \"text\": \"OK\",\r\n        \"description\": \"\\\"The request has succeeded.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.1\"\r\n    },\r\n    \"201\": {\r\n        \"code\": 201,\r\n        \"text\": \"Created\",\r\n        \"description\": \"\\\"The request has been fulfilled and has resulted in one or more new resources being created.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.2\"\r\n    },\r\n    \"202\": {\r\n        \"code\": 202,\r\n        \"text\": \"Accepted\",\r\n        \"description\": \"\\\"The request has been accepted for processing, but the processing has not been completed.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.3\"\r\n    },\r\n    \"203\": {\r\n        \"code\": 203,\r\n        \"text\": \"Non-Authoritative Information\",\r\n        \"description\": \"\\\"The request was successful but the enclosed payload has been modified from that of the origin server's 200 (OK) response by a transforming proxy.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.4\"\r\n    },\r\n    \"204\": {\r\n        \"code\": 204,\r\n        \"text\": \"No Content\",\r\n        \"description\": \"\\\"The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.5\"\r\n    },\r\n    \"205\": {\r\n        \"code\": 205,\r\n        \"text\": \"Reset Content\",\r\n        \"description\": \"\\\"The server has fulfilled the request and desires that the user agent reset the \\\"document view\\\", which caused the request to be sent, to its original state as received from the origin server.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.6\"\r\n    },\r\n    \"206\": {\r\n        \"code\": 206,\r\n        \"text\": \"Partial Content\",\r\n        \"description\": \"\\\"The server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the requests's Range header field.\\\"\",\r\n        \"spec_title\": \"RFC7233#4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7233#section-4.1\"\r\n    },\r\n    \"300\": {\r\n        \"code\": 300,\r\n        \"text\": \"Multiple Choices\",\r\n        \"description\": \"\\\"The target resource has more than one representation, each with its own more specific identifier, and information about the alternatives is being provided so that the user (or user agent) can select a preferred representation by redirecting its request to one or more of those identifiers.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.1\"\r\n    },\r\n    \"301\": {\r\n        \"code\": 301,\r\n        \"text\": \"Moved Permanently\",\r\n        \"description\": \"\\\"The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.2\"\r\n    },\r\n    \"302\": {\r\n        \"code\": 302,\r\n        \"text\": \"Found\",\r\n        \"description\": \"\\\"The target resource resides temporarily under a different URI.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.3\"\r\n    },\r\n    \"303\": {\r\n        \"code\": 303,\r\n        \"text\": \"See Other\",\r\n        \"description\": \"\\\"The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, that is intended to provide an indirect response to the original request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.4\"\r\n    },\r\n    \"304\": {\r\n        \"code\": 304,\r\n        \"text\": \"Not Modified\",\r\n        \"description\": \"\\\"A conditional GET request has been received and would have resulted in a 200 (OK) response if it were not for the fact that the condition has evaluated to false.\\\"\",\r\n        \"spec_title\": \"RFC7232#4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7232#section-4.1\"\r\n    },\r\n    \"305\": {\r\n        \"code\": 305,\r\n        \"text\": \"Use Proxy\",\r\n        \"description\": \"*deprecated*\",\r\n        \"spec_title\": \"RFC7231#6.4.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.5\"\r\n    },\r\n    \"307\": {\r\n        \"code\": 307,\r\n        \"text\": \"Temporary Redirect\",\r\n        \"description\": \"\\\"The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.7\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.7\"\r\n    },\r\n    \"400\": {\r\n        \"code\": 400,\r\n        \"text\": \"Bad Request\",\r\n        \"description\": \"\\\"The server cannot or will not process the request because the received syntax is invalid, nonsensical, or exceeds some limitation on what the server is willing to process.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.1\"\r\n    },\r\n    \"401\": {\r\n        \"code\": 401,\r\n        \"text\": \"Unauthorized\",\r\n        \"description\": \"\\\"The request has not been applied because it lacks valid authentication credentials for the target resource.\\\"\",\r\n        \"spec_title\": \"RFC7235#6.3.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7235#section-3.1\"\r\n    },\r\n    \"402\": {\r\n        \"code\": 402,\r\n        \"text\": \"Payment Required\",\r\n        \"description\": \"*reserved*\",\r\n        \"spec_title\": \"RFC7231#6.5.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.2\"\r\n    },\r\n    \"403\": {\r\n        \"code\": 403,\r\n        \"text\": \"Forbidden\",\r\n        \"description\": \"\\\"The server understood the request but refuses to authorize it.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.3\"\r\n    },\r\n    \"404\": {\r\n        \"code\": 404,\r\n        \"text\": \"Not Found\",\r\n        \"description\": \"\\\"The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.4\"\r\n    },\r\n    \"405\": {\r\n        \"code\": 405,\r\n        \"text\": \"Method Not Allowed\",\r\n        \"description\": \"\\\"The method specified in the request-line is known by the origin server but not supported by the target resource.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.5\"\r\n    },\r\n    \"406\": {\r\n        \"code\": 406,\r\n        \"text\": \"Not Acceptable\",\r\n        \"description\": \"\\\"The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.6\"\r\n    },\r\n    \"407\": {\r\n        \"code\": 407,\r\n        \"text\": \"Proxy Authentication Required\",\r\n        \"description\": \"\\\"The client needs to authenticate itself in order to use a proxy.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.2\"\r\n    },\r\n    \"408\": {\r\n        \"code\": 408,\r\n        \"text\": \"Request Timeout\",\r\n        \"description\": \"\\\"The server did not receive a complete request message within the time that it was prepared to wait.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.7\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.7\"\r\n    },\r\n    \"409\": {\r\n        \"code\": 409,\r\n        \"text\": \"Conflict\",\r\n        \"description\": \"\\\"The request could not be completed due to a conflict with the current state of the resource.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.8\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.8\"\r\n    },\r\n    \"410\": {\r\n        \"code\": 410,\r\n        \"text\": \"Gone\",\r\n        \"description\": \"\\\"Access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.9\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.9\"\r\n    },\r\n    \"411\": {\r\n        \"code\": 411,\r\n        \"text\": \"Length Required\",\r\n        \"description\": \"\\\"The server refuses to accept the request without a defined Content-Length.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.10\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.10\"\r\n    },\r\n    \"412\": {\r\n        \"code\": 412,\r\n        \"text\": \"Precondition Failed\",\r\n        \"description\": \"\\\"One or more preconditions given in the request header fields evaluated to false when tested on the server.\\\"\",\r\n        \"spec_title\": \"RFC7232#4.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7232#section-4.2\"\r\n    },\r\n    \"413\": {\r\n        \"code\": 413,\r\n        \"text\": \"Payload Too Large\",\r\n        \"description\": \"\\\"The server is refusing to process a request because the request payload is larger than the server is willing or able to process.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.11\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.11\"\r\n    },\r\n    \"414\": {\r\n        \"code\": 414,\r\n        \"text\": \"URI Too Long\",\r\n        \"description\": \"\\\"The server is refusing to service the request because the request-target is longer than the server is willing to interpret.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.12\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.12\"\r\n    },\r\n    \"415\": {\r\n        \"code\": 415,\r\n        \"text\": \"Unsupported Media Type\",\r\n        \"description\": \"\\\"The origin server is refusing to service the request because the payload is in a format not supported by the target resource for this method.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.13\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.13\"\r\n    },\r\n    \"416\": {\r\n        \"code\": 416,\r\n        \"text\": \"Range Not Satisfiable\",\r\n        \"description\": \"\\\"None of the ranges in the request's Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.\\\"\",\r\n        \"spec_title\": \"RFC7233#4.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7233#section-4.4\"\r\n    },\r\n    \"417\": {\r\n        \"code\": 417,\r\n        \"text\": \"Expectation Failed\",\r\n        \"description\": \"\\\"The expectation given in the request's Expect header field could not be met by at least one of the inbound servers.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.14\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.14\"\r\n    },\r\n    \"418\": {\r\n        \"code\": 418,\r\n        \"text\": \"I'm a teapot\",\r\n        \"description\": \"\\\"1988 April Fools Joke. Returned by tea pots requested to brew coffee.\\\"\",\r\n        \"spec_title\": \"RFC 2324\",\r\n        \"spec_href\": \"https://tools.ietf.org/html/rfc2324\"\r\n    },\r\n    \"426\": {\r\n        \"code\": 426,\r\n        \"text\": \"Upgrade Required\",\r\n        \"description\": \"\\\"The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.15\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.15\"\r\n    },\r\n    \"500\": {\r\n        \"code\": 500,\r\n        \"text\": \"Internal Server Error\",\r\n        \"description\": \"\\\"The server encountered an unexpected condition that prevented it from fulfilling the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.1\"\r\n    },\r\n    \"501\": {\r\n        \"code\": 501,\r\n        \"text\": \"Not Implemented\",\r\n        \"description\": \"\\\"The server does not support the functionality required to fulfill the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.2\"\r\n    },\r\n    \"502\": {\r\n        \"code\": 502,\r\n        \"text\": \"Bad Gateway\",\r\n        \"description\": \"\\\"The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.3\"\r\n    },\r\n    \"503\": {\r\n        \"code\": 503,\r\n        \"text\": \"Service Unavailable\",\r\n        \"description\": \"\\\"The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.4\"\r\n    },\r\n    \"504\": {\r\n        \"code\": 504,\r\n        \"text\": \"Gateway Time-out\",\r\n        \"description\": \"\\\"The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.5\"\r\n    },\r\n    \"505\": {\r\n        \"code\": 505,\r\n        \"text\": \"HTTP Version Not Supported\",\r\n        \"description\": \"\\\"The server does not support, or refuses to support, the protocol version that was used in the request message.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.6\"\r\n    },\r\n    \"102\": {\r\n        \"code\": 102,\r\n        \"text\": \"Processing\",\r\n        \"description\": \"\\\"An interim response to inform the client that the server has accepted the complete request, but has not yet completed it.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.1\"\r\n    },\r\n    \"207\": {\r\n        \"code\": 207,\r\n        \"text\": \"Multi-Status\",\r\n        \"description\": \"\\\"Status for multiple independent operations.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.2\"\r\n    },\r\n    \"226\": {\r\n        \"code\": 226,\r\n        \"text\": \"IM Used\",\r\n        \"description\": \"\\\"The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\\\"\",\r\n        \"spec_title\": \"RFC3229#10.4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc3229#section-10.4.1\"\r\n    },\r\n    \"308\": {\r\n        \"code\": 308,\r\n        \"text\": \"Permanent Redirect\",\r\n        \"description\": \"\\\"The target resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs. [...] This status code is similar to 301 Moved Permanently (Section 7.3.2 of rfc7231), except that it does not allow rewriting the request method from POST to GET.\\\"\",\r\n        \"spec_title\": \"RFC7238\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7238\"\r\n    },\r\n    \"422\": {\r\n        \"code\": 422,\r\n        \"text\": \"Unprocessable Entity\",\r\n        \"description\": \"\\\"The server understands the content type of the request entity (hence a 415(Unsupported Media Type) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.3\"\r\n    },\r\n    \"423\": {\r\n        \"code\": 423,\r\n        \"text\": \"Locked\",\r\n        \"description\": \"\\\"The source or destination resource of a method is locked.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.4\"\r\n    },\r\n    \"424\": {\r\n        \"code\": 424,\r\n        \"text\": \"Failed Dependency\",\r\n        \"description\": \"\\\"The method could not be performed on the resource because the requested action depended on another action and that action failed.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.5\"\r\n    },\r\n    \"428\": {\r\n        \"code\": 428,\r\n        \"text\": \"Precondition Required\",\r\n        \"description\": \"\\\"The origin server requires the request to be conditional.\\\"\",\r\n        \"spec_title\": \"RFC6585#3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-3\"\r\n    },\r\n    \"429\": {\r\n        \"code\": 429,\r\n        \"text\": \"Too Many Requests\",\r\n        \"description\": \"\\\"The user has sent too many requests in a given amount of time (\\\"rate limiting\\\").\\\"\",\r\n        \"spec_title\": \"RFC6585#4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-4\"\r\n    },\r\n    \"431\": {\r\n        \"code\": 431,\r\n        \"text\": \"Request Header Fields Too Large\",\r\n        \"description\": \"\\\"The server is unwilling to process the request because its header fields are too large.\\\"\",\r\n        \"spec_title\": \"RFC6585#5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-5\"\r\n    },\r\n    \"451\": {\r\n        \"code\": 451,\r\n        \"text\": \"Unavailable For Legal Reasons\",\r\n        \"description\": \"\\\"The server is denying access to the resource in response to a legal demand.\\\"\",\r\n        \"spec_title\": \"draft-ietf-httpbis-legally-restricted-status\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/draft-ietf-httpbis-legally-restricted-status\"\r\n    },\r\n    \"506\": {\r\n        \"code\": 506,\r\n        \"text\": \"Variant Also Negotiates\",\r\n        \"description\": \"\\\"The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.\\\"\",\r\n        \"spec_title\": \"RFC2295#8.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2295#section-8.1\"\r\n    },\r\n    \"507\": {\r\n        \"code\": 507,\r\n        \"text\": \"Insufficient Storage\",\r\n        \"description\": \"\\The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.6\"\r\n    },\r\n    \"511\": {\r\n        \"code\": 511,\r\n        \"text\": \"Network Authentication Required\",\r\n        \"description\": \"\\\"The client needs to authenticate to gain network access.\\\"\",\r\n        \"spec_title\": \"RFC6585#6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-6\"\r\n    }\r\n};\r\n//# sourceMappingURL=http-status-codes.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 27:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar http_1 = __webpack_require__(24);\r\nvar Observable_1 = __webpack_require__(5);\r\n__webpack_require__(28);\r\nvar http_status_codes_1 = __webpack_require__(26);\r\n/**\r\n* Class that creates seed data for in-memory database\r\n* Must implement InMemoryDbService.\r\n*/\r\nexports.SEED_DATA = new core_1.OpaqueToken('seedData');\r\n/**\r\n*  InMemoryBackendService configuration options\r\n*  Usage:\r\n*    provide(InMemoryBackendConfig, {useValue: {delay:600}}),\r\n*/\r\nvar InMemoryBackendConfig = (function () {\r\n    function InMemoryBackendConfig(config) {\r\n        if (config === void 0) { config = {}; }\r\n        Object.assign(this, {\r\n            defaultResponseOptions: new http_1.BaseResponseOptions(),\r\n            delay: 500,\r\n            delete404: false\r\n        }, config);\r\n    }\r\n    return InMemoryBackendConfig;\r\n}());\r\nexports.InMemoryBackendConfig = InMemoryBackendConfig;\r\nexports.isSuccess = function (status) { return (status >= 200 && status < 300); };\r\n/**\r\n * Simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected InMemoryDataService service.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n *\r\n * ### Usage\r\n *\r\n * Create InMemoryDataService class the implements InMemoryDataService.\r\n * Register both this service and the seed data as in:\r\n * ```\r\n * // other imports\r\n * import { HTTPPROVIDERS, XHRBackend } from 'angular2/http';\r\n * import { InMemoryBackendConfig, InMemoryBackendService, SEEDDATA } from '../in-memory-backend/in-memory-backend.service';\r\n * import { InMemoryStoryService } from '../api/in-memory-story.service';\r\n *\r\n * @Component({\r\n *   selector: ...,\r\n *   templateUrl: ...,\r\n *   providers: [\r\n *     HTTPPROVIDERS,\r\n *     provide(XHRBackend, { useClass: InMemoryBackendService }),\r\n *     provide(SEEDDATA, { useClass: InMemoryStoryService }),\r\n *     provide(InMemoryBackendConfig, { useValue: { delay: 600 } }),\r\n *   ]\r\n * })\r\n * export class AppComponent { ... }\r\n * ```\r\n */\r\nvar InMemoryBackendService = (function () {\r\n    function InMemoryBackendService(seedData, config) {\r\n        this.seedData = seedData;\r\n        this.config = new InMemoryBackendConfig();\r\n        this.resetDb();\r\n        var loc = this.getLocation('./');\r\n        this.config.host = loc.host;\r\n        this.config.rootPath = loc.pathname;\r\n        Object.assign(this.config, config);\r\n    }\r\n    InMemoryBackendService.prototype.createConnection = function (req) {\r\n        var res = this.handleRequest(req);\r\n        var response = new Observable_1.Observable(function (responseObserver) {\r\n            if (exports.isSuccess(res.status)) {\r\n                responseObserver.next(res);\r\n                responseObserver.complete();\r\n            }\r\n            else {\r\n                responseObserver.error(res);\r\n            }\r\n            return function () { }; // unsubscribe function\r\n        });\r\n        response = response.delay(this.config.delay || 500);\r\n        return {\r\n            readyState: http_1.ReadyState.Done,\r\n            request: req,\r\n            response: response\r\n        };\r\n    };\r\n    ////  protected /////\r\n    /**\r\n     * Process Request and return an Http Response object\r\n     * in the manner of a RESTy web api.\r\n     *\r\n     * Expect URI pattern in the form :base/:collectionName/:id?\r\n     * Examples:\r\n     *   // for store with a 'characters' collection\r\n     *   GET api/characters          // all characters\r\n     *   GET api/characters/42       // the character with id=42\r\n     *   GET api/characters?name=^j  // 'j' is a regex; returns characters whose name contains 'j' or 'J'\r\n     *   GET api/characters.json/42  // ignores the \".json\"\r\n     *\r\n     *   POST commands/resetDb  // resets the \"database\"\r\n     */\r\n    InMemoryBackendService.prototype.handleRequest = function (req) {\r\n        var _a = this.parseUrl(req.url), base = _a.base, collectionName = _a.collectionName, id = _a.id, resourceUrl = _a.resourceUrl, query = _a.query;\r\n        var collection = this.db[collectionName];\r\n        var reqInfo = {\r\n            req: req,\r\n            base: base,\r\n            collection: collection,\r\n            collectionName: collectionName,\r\n            headers: new http_1.Headers({ 'Content-Type': 'application/json' }),\r\n            id: this.parseId(collection, id),\r\n            query: query,\r\n            resourceUrl: resourceUrl\r\n        };\r\n        var options;\r\n        try {\r\n            if ('commands' === reqInfo.base.toLowerCase()) {\r\n                options = this.commands(reqInfo);\r\n            }\r\n            else if (reqInfo.collection) {\r\n                switch (req.method) {\r\n                    case http_1.RequestMethod.Get:\r\n                        options = this.get(reqInfo);\r\n                        break;\r\n                    case http_1.RequestMethod.Post:\r\n                        options = this.post(reqInfo);\r\n                        break;\r\n                    case http_1.RequestMethod.Put:\r\n                        options = this.put(reqInfo);\r\n                        break;\r\n                    case http_1.RequestMethod.Delete:\r\n                        options = this.delete(reqInfo);\r\n                        break;\r\n                    default:\r\n                        options = this.createErrorResponse(http_status_codes_1.STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                options = this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            var err = error.message || error;\r\n            options = this.createErrorResponse(http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\r\n        }\r\n        options = this.setStatusText(options);\r\n        if (this.config.defaultResponseOptions) {\r\n            options = this.config.defaultResponseOptions.merge(options);\r\n        }\r\n        return new http_1.Response(options);\r\n    };\r\n    /**\r\n     * Apply query/search parameters as a filter over the collection\r\n     * This impl only supports RegExp queries on string properties of the collection\r\n     * ANDs the conditions together\r\n     */\r\n    InMemoryBackendService.prototype.applyQuery = function (collection, query) {\r\n        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\r\n        var conditions = [];\r\n        query.paramsMap.forEach(function (value, name) {\r\n            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), 'i') }); });\r\n        });\r\n        var len = conditions.length;\r\n        if (!len) {\r\n            return collection;\r\n        }\r\n        // AND the RegExp conditions\r\n        return collection.filter(function (row) {\r\n            var ok = true;\r\n            var i = len;\r\n            while (ok && i) {\r\n                i -= 1;\r\n                var cond = conditions[i];\r\n                ok = cond.rx.test(row[cond.name]);\r\n            }\r\n            return ok;\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.clone = function (data) {\r\n        return JSON.parse(JSON.stringify(data));\r\n    };\r\n    /**\r\n     * When the `base`=\"commands\", the `collectionName` is the command\r\n     * Example URLs:\r\n     *   commands/resetdb   // Reset the \"database\" to its original state\r\n     *   commands/config (GET) // Return this service's config object\r\n     *   commands/config (!GET) // Update the config (e.g. delay)\r\n     *\r\n     * Usage:\r\n     *   http.post('commands/resetdb', null);\r\n     *   http.get('commands/config');\r\n     *   http.post('commands/config', '{\"delay\":1000}');\r\n     */\r\n    InMemoryBackendService.prototype.commands = function (reqInfo) {\r\n        var command = reqInfo.collectionName.toLowerCase();\r\n        var method = reqInfo.req.method;\r\n        var options;\r\n        switch (command) {\r\n            case 'resetdb':\r\n                this.resetDb();\r\n                options = new http_1.ResponseOptions({ status: http_status_codes_1.STATUS.OK });\r\n                break;\r\n            case 'config':\r\n                if (method === http_1.RequestMethod.Get) {\r\n                    options = new http_1.ResponseOptions({\r\n                        body: this.clone(this.config),\r\n                        status: http_status_codes_1.STATUS.OK\r\n                    });\r\n                }\r\n                else {\r\n                    // Be nice ... any other method is a config update\r\n                    var body = JSON.parse(reqInfo.req.text() || '{}');\r\n                    Object.assign(this.config, body);\r\n                    options = new http_1.ResponseOptions({ status: http_status_codes_1.STATUS.NO_CONTENT });\r\n                }\r\n                break;\r\n            default:\r\n                options = this.createErrorResponse(http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\r\n        }\r\n        return options;\r\n    };\r\n    InMemoryBackendService.prototype.createErrorResponse = function (status, message) {\r\n        return new http_1.ResponseOptions({\r\n            body: { 'error': \"\" + message },\r\n            headers: new http_1.Headers({ 'Content-Type': 'application/json' }),\r\n            status: status\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.delete = function (_a) {\r\n        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers;\r\n        if (!id) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\r\n        }\r\n        var exists = this.removeById(collection, id);\r\n        return new http_1.ResponseOptions({\r\n            headers: headers,\r\n            status: (exists || !this.config.delete404) ? http_status_codes_1.STATUS.NO_CONTENT : http_status_codes_1.STATUS.NOT_FOUND\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.findById = function (collection, id) {\r\n        return collection.find(function (item) { return item.id === id; });\r\n    };\r\n    InMemoryBackendService.prototype.genId = function (collection) {\r\n        // assumes numeric ids\r\n        var maxId = 0;\r\n        collection.reduce(function (prev, item) {\r\n            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\r\n        }, null);\r\n        return maxId + 1;\r\n    };\r\n    InMemoryBackendService.prototype.get = function (_a) {\r\n        var id = _a.id, query = _a.query, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers;\r\n        var data = collection;\r\n        if (id) {\r\n            data = this.findById(collection, id);\r\n        }\r\n        else if (query) {\r\n            data = this.applyQuery(collection, query);\r\n        }\r\n        if (!data) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\r\n        }\r\n        return new http_1.ResponseOptions({\r\n            body: { data: this.clone(data) },\r\n            headers: headers,\r\n            status: http_status_codes_1.STATUS.OK\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.getLocation = function (href) {\r\n        var l = document.createElement('a');\r\n        l.href = href;\r\n        return l;\r\n    };\r\n    ;\r\n    InMemoryBackendService.prototype.indexOf = function (collection, id) {\r\n        return collection.findIndex(function (item) { return item.id === id; });\r\n    };\r\n    // tries to parse id as number if collection item.id is a number.\r\n    // returns the original param id otherwise.\r\n    InMemoryBackendService.prototype.parseId = function (collection, id) {\r\n        if (!id) {\r\n            return null;\r\n        }\r\n        var isNumberId = collection[0] && typeof collection[0].id === 'number';\r\n        if (isNumberId) {\r\n            var idNum = parseFloat(id);\r\n            return isNaN(idNum) ? id : idNum;\r\n        }\r\n        return id;\r\n    };\r\n    InMemoryBackendService.prototype.parseUrl = function (url) {\r\n        try {\r\n            var loc = this.getLocation(url);\r\n            var drop = this.config.rootPath.length;\r\n            var urlRoot = '';\r\n            if (loc.host !== this.config.host) {\r\n                // url for a server on a different host!\r\n                // assume it's collection is actually here too.\r\n                drop = 1; // the leading slash\r\n                urlRoot = loc.protocol + '//' + loc.host + '/';\r\n            }\r\n            var path = loc.pathname.substring(drop);\r\n            var _a = path.split('/'), base = _a[0], collectionName = _a[1], id = _a[2];\r\n            var resourceUrl = urlRoot + base + '/' + collectionName + '/';\r\n            collectionName = collectionName.split('.')[0]; // ignore anything after the '.', e.g., '.json'\r\n            var query = loc.search && new http_1.URLSearchParams(loc.search.substr(1));\r\n            return { base: base, id: id, collectionName: collectionName, resourceUrl: resourceUrl, query: query };\r\n        }\r\n        catch (err) {\r\n            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\r\n            throw new Error(msg);\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.post = function (_a) {\r\n        var collection = _a.collection, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl;\r\n        var item = JSON.parse(req.text());\r\n        if (!item.id) {\r\n            item.id = id || this.genId(collection);\r\n        }\r\n        // ignore the request id, if any. Alternatively,\r\n        // could reject request if id differs from item.id\r\n        id = item.id;\r\n        var existingIx = this.indexOf(collection, id);\r\n        if (existingIx > -1) {\r\n            collection[existingIx] = item;\r\n            return new http_1.ResponseOptions({\r\n                headers: headers,\r\n                status: http_status_codes_1.STATUS.NO_CONTENT\r\n            });\r\n        }\r\n        else {\r\n            collection.push(item);\r\n            headers.set('Location', resourceUrl + '/' + id);\r\n            return new http_1.ResponseOptions({\r\n                headers: headers,\r\n                body: { data: this.clone(item) },\r\n                status: http_status_codes_1.STATUS.CREATED\r\n            });\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.put = function (_a) {\r\n        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n        var item = JSON.parse(req.text());\r\n        if (!id) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\r\n        }\r\n        if (id !== item.id) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.BAD_REQUEST, \"\\\"\" + collectionName + \"\\\" id does not match item.id\");\r\n        }\r\n        var existingIx = this.indexOf(collection, id);\r\n        if (existingIx > -1) {\r\n            collection[existingIx] = item;\r\n            return new http_1.ResponseOptions({\r\n                headers: headers,\r\n                status: http_status_codes_1.STATUS.NO_CONTENT // successful; no content\r\n            });\r\n        }\r\n        else {\r\n            collection.push(item);\r\n            return new http_1.ResponseOptions({\r\n                body: { data: this.clone(item) },\r\n                headers: headers,\r\n                status: http_status_codes_1.STATUS.CREATED\r\n            });\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.removeById = function (collection, id) {\r\n        var ix = this.indexOf(collection, id);\r\n        if (ix > -1) {\r\n            collection.splice(ix, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Reset the \"database\" to its original state\r\n     */\r\n    InMemoryBackendService.prototype.resetDb = function () {\r\n        this.db = this.seedData.createDb();\r\n    };\r\n    InMemoryBackendService.prototype.setStatusText = function (options) {\r\n        try {\r\n            var statusCode = http_status_codes_1.STATUS_CODE_INFO[options.status];\r\n            options['statusText'] = statusCode ? statusCode.text : 'Unknown Status';\r\n            return options;\r\n        }\r\n        catch (err) {\r\n            return new http_1.ResponseOptions({\r\n                status: http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR,\r\n                statusText: 'Invalid Server Operation'\r\n            });\r\n        }\r\n    };\r\n    InMemoryBackendService = __decorate([\r\n        __param(0, core_1.Inject(exports.SEED_DATA)),\r\n        __param(1, core_1.Inject(InMemoryBackendConfig)),\r\n        __param(1, core_1.Optional()), \r\n        __metadata('design:paramtypes', [Object, Object])\r\n    ], InMemoryBackendService);\r\n    return InMemoryBackendService;\r\n}());\r\nexports.InMemoryBackendService = InMemoryBackendService;\r\n//# sourceMappingURL=in-memory-backend.service.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 37:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar AppComponent = (function () {\r\n    function AppComponent() {\r\n        this.pageTitle = \"Bienvenue dans l'univers de Dragon Ball\";\r\n    }\r\n    return AppComponent;\r\n}());\r\nAppComponent = __decorate([\r\n    core_1.Component({\r\n        selector: 'db-app',\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(38),\r\n        styles: [__webpack_require__(39)]\r\n    })\r\n], AppComponent);\r\nexports.AppComponent = AppComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYXBwLmNvbXBvbmVudC50cz82ZWNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2RiLWFwcCcsXHJcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLnRvU3RyaW5nKCksXHJcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9hcHAuY29tcG9uZW50Lmh0bWwnKSxcclxuICAgIHN0eWxlczogW3JlcXVpcmUoJy4vYXBwLmNvbXBvbmVudC5jc3MnKV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XHJcbiAgICBwYWdlVGl0bGU6IHN0cmluZyA9IFwiQmllbnZlbnVlIGRhbnMgbCd1bml2ZXJzIGRlIERyYWdvbiBCYWxsXCI7XHJcbiAgICBcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL2FwcC5jb21wb25lbnQudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQVFBO0FBTkE7QUFPQTtBQUVBO0FBQUE7QUFBQTtBQUhBO0FBTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 38:
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"header-bar\\\"></div>\\r\\n    <nav>\\r\\n      <a [routerLink]='[\\\"/\\\"]' routerLinkActive=\\\"active\\\">Home</a>\\r\\n      <a [routerLink]='[\\\"category\\\", \\\"db\\\"]' routerLinkActive=\\\"active\\\">Dragon Ball</a>\\r\\n      <a [routerLink]='[\\\"category\\\", \\\"dbz\\\"]' routerLinkActive=\\\"active\\\">Dragon Ball Z</a>\\r\\n    </nav>\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYXBwLmNvbXBvbmVudC5odG1sPzI0NDciXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImhlYWRlci1iYXJcXFwiPjwvZGl2PlxcclxcbiAgICA8bmF2PlxcclxcbiAgICAgIDxhIFtyb3V0ZXJMaW5rXT0nW1xcXCIvXFxcIl0nIHJvdXRlckxpbmtBY3RpdmU9XFxcImFjdGl2ZVxcXCI+SG9tZTwvYT5cXHJcXG4gICAgICA8YSBbcm91dGVyTGlua109J1tcXFwiY2F0ZWdvcnlcXFwiLCBcXFwiZGJcXFwiXScgcm91dGVyTGlua0FjdGl2ZT1cXFwiYWN0aXZlXFxcIj5EcmFnb24gQmFsbDwvYT5cXHJcXG4gICAgICA8YSBbcm91dGVyTGlua109J1tcXFwiY2F0ZWdvcnlcXFwiLCBcXFwiZGJ6XFxcIl0nIHJvdXRlckxpbmtBY3RpdmU9XFxcImFjdGl2ZVxcXCI+RHJhZ29uIEJhbGwgWjwvYT5cXHJcXG4gICAgPC9uYXY+XFxyXFxuICAgIDxyb3V0ZXItb3V0bGV0Pjwvcm91dGVyLW91dGxldD5cXHJcXG48L2Rpdj5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9hcHAuY29tcG9uZW50Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 39:
/***/ function(module, exports) {

	eval("module.exports = \"/*@media (min-width: 768px) {\\r\\n  .sidebar-nav .navbar .navbar-collapse {\\r\\n    padding: 0;\\r\\n    max-height: none;\\r\\n  }\\r\\n  .sidebar-nav .navbar ul {\\r\\n    float: none;\\r\\n    display: block;\\r\\n  }\\r\\n  .sidebar-nav .navbar li {\\r\\n    float: none;\\r\\n    display: block;\\r\\n  }\\r\\n  .sidebar-nav .navbar li a {\\r\\n    padding-top: 12px;\\r\\n    padding-bottom: 12px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.content {\\r\\n  height: 600px;\\r\\n  width: 400px;\\r\\n}*/\\r\\n\\r\\nh1 {\\r\\n  font-size: 1.2em;\\r\\n  color: #999;\\r\\n  color: #555;\\r\\n  margin-bottom: 0;\\r\\n}\\r\\nh2 {\\r\\n  font-size: 2em;\\r\\n  margin-top: 0;\\r\\n  padding-top: 0;\\r\\n}\\r\\nnav a {\\r\\n  padding: 5px 10px;\\r\\n  text-decoration: none;\\r\\n  margin-top: 10px;\\r\\n  display: inline-block;\\r\\n  background-color: #eee;\\r\\n  border-radius: 4px;\\r\\n}\\r\\nnav a:visited, a:link {\\r\\n  color: #607D8B;\\r\\n}\\r\\nnav a:hover {\\r\\n  color: #039be5;\\r\\n  background-color: #CFD8DC;\\r\\n}\\r\\nnav a.router-link-active {\\r\\n  color: #039be5;\\r\\n}\\r\\n.header-bar {\\r\\n  background-color: rgb(0,120,215);\\r\\n  height: 4px;\\r\\n  margin-top: 10px;\\r\\n  margin-bottom: 10px;\\r\\n}\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYXBwLmNvbXBvbmVudC5jc3M/MTNmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiLypAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXHJcXG4gIC5zaWRlYmFyLW5hdiAubmF2YmFyIC5uYXZiYXItY29sbGFwc2Uge1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICBtYXgtaGVpZ2h0OiBub25lO1xcclxcbiAgfVxcclxcbiAgLnNpZGViYXItbmF2IC5uYXZiYXIgdWwge1xcclxcbiAgICBmbG9hdDogbm9uZTtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICB9XFxyXFxuICAuc2lkZWJhci1uYXYgLm5hdmJhciBsaSB7XFxyXFxuICAgIGZsb2F0OiBub25lO1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIH1cXHJcXG4gIC5zaWRlYmFyLW5hdiAubmF2YmFyIGxpIGEge1xcclxcbiAgICBwYWRkaW5nLXRvcDogMTJweDtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDEycHg7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi5jb250ZW50IHtcXHJcXG4gIGhlaWdodDogNjAwcHg7XFxyXFxuICB3aWR0aDogNDAwcHg7XFxyXFxufSovXFxyXFxuXFxyXFxuaDEge1xcclxcbiAgZm9udC1zaXplOiAxLjJlbTtcXHJcXG4gIGNvbG9yOiAjOTk5O1xcclxcbiAgY29sb3I6ICM1NTU7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAwO1xcclxcbn1cXHJcXG5oMiB7XFxyXFxuICBmb250LXNpemU6IDJlbTtcXHJcXG4gIG1hcmdpbi10b3A6IDA7XFxyXFxuICBwYWRkaW5nLXRvcDogMDtcXHJcXG59XFxyXFxubmF2IGEge1xcclxcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG59XFxyXFxubmF2IGE6dmlzaXRlZCwgYTpsaW5rIHtcXHJcXG4gIGNvbG9yOiAjNjA3RDhCO1xcclxcbn1cXHJcXG5uYXYgYTpob3ZlciB7XFxyXFxuICBjb2xvcjogIzAzOWJlNTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNDRkQ4REM7XFxyXFxufVxcclxcbm5hdiBhLnJvdXRlci1saW5rLWFjdGl2ZSB7XFxyXFxuICBjb2xvcjogIzAzOWJlNTtcXHJcXG59XFxyXFxuLmhlYWRlci1iYXIge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAsMTIwLDIxNSk7XFxyXFxuICBoZWlnaHQ6IDRweDtcXHJcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbn1cIlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2FwcC5jb21wb25lbnQuY3NzXG4vLyBtb2R1bGUgaWQgPSAzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 40:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar common_1 = __webpack_require__(22);\r\nvar welcome_routing_module_1 = __webpack_require__(41);\r\nvar welcome_component_1 = __webpack_require__(73);\r\nvar WelcomeModule = (function () {\r\n    function WelcomeModule() {\r\n    }\r\n    return WelcomeModule;\r\n}());\r\nWelcomeModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            common_1.CommonModule,\r\n            welcome_routing_module_1.WelcomeRoutingModule\r\n        ],\r\n        declarations: [\r\n            welcome_component_1.WelcomeComponent\r\n        ],\r\n        exports: [\r\n            welcome_component_1.WelcomeComponent\r\n        ]\r\n    })\r\n], WelcomeModule);\r\nexports.WelcomeModule = WelcomeModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvd2VsY29tZS93ZWxjb21lLm1vZHVsZS50cz8zZmEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFdlbGNvbWVSb3V0aW5nTW9kdWxlIH0gZnJvbSAnLi93ZWxjb21lLXJvdXRpbmcubW9kdWxlJztcclxuaW1wb3J0IHsgV2VsY29tZUNvbXBvbmVudCB9IGZyb20gJy4vd2VsY29tZS5jb21wb25lbnQnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBDb21tb25Nb2R1bGUsXHJcbiAgICAgICAgV2VsY29tZVJvdXRpbmdNb2R1bGVcclxuICAgIF0sXHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBXZWxjb21lQ29tcG9uZW50XHJcbiAgICBdLFxyXG4gICAgZXhwb3J0czogW1xyXG4gICAgICAgIFdlbGNvbWVDb21wb25lbnRcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFdlbGNvbWVNb2R1bGUge1xyXG4gICAgXHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL2FwcC93ZWxjb21lL3dlbGNvbWUubW9kdWxlLnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFjQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBRkE7QUFaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 41:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar welcome_component_1 = __webpack_require__(73);\r\nvar WelcomeRoutingModule = (function () {\r\n    function WelcomeRoutingModule() {\r\n    }\r\n    return WelcomeRoutingModule;\r\n}());\r\nWelcomeRoutingModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            router_1.RouterModule.forChild([\r\n                { path: 'welcome', component: welcome_component_1.WelcomeComponent }\r\n            ])\r\n        ],\r\n        exports: [\r\n            router_1.RouterModule\r\n        ]\r\n    })\r\n], WelcomeRoutingModule);\r\nexports.WelcomeRoutingModule = WelcomeRoutingModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvd2VsY29tZS93ZWxjb21lLXJvdXRpbmcubW9kdWxlLnRzPzg2YTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgV2VsY29tZUNvbXBvbmVudCB9IGZyb20gJy4vd2VsY29tZS5jb21wb25lbnQnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBSb3V0ZXJNb2R1bGUuZm9yQ2hpbGQoW1xyXG4gICAgICAgICAgICB7IHBhdGg6ICd3ZWxjb21lJywgY29tcG9uZW50OiBXZWxjb21lQ29tcG9uZW50IH1cclxuICAgICAgICBdKVxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBSb3V0ZXJNb2R1bGUgICAgXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBXZWxjb21lUm91dGluZ01vZHVsZSB7XHJcbiAgICBcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL3dlbGNvbWUvd2VsY29tZS1yb3V0aW5nLm1vZHVsZS50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQVlBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFGQTtBQVZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 42:
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * @license Angular v3.4.4\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */(function (global, factory) {\n     true ? factory(exports, __webpack_require__(22), __webpack_require__(3), __webpack_require__(43), __webpack_require__(4), __webpack_require__(44), __webpack_require__(56), __webpack_require__(57), __webpack_require__(62), __webpack_require__(63), __webpack_require__(65), __webpack_require__(58), __webpack_require__(66), __webpack_require__(5), __webpack_require__(67), __webpack_require__(68), __webpack_require__(64), __webpack_require__(70), __webpack_require__(71), __webpack_require__(69), __webpack_require__(21), __webpack_require__(72)) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core', 'rxjs/BehaviorSubject', 'rxjs/Subject', 'rxjs/observable/from', 'rxjs/observable/of', 'rxjs/operator/concatMap', 'rxjs/operator/every', 'rxjs/operator/first', 'rxjs/operator/map', 'rxjs/operator/mergeMap', 'rxjs/operator/reduce', 'rxjs/Observable', 'rxjs/operator/catch', 'rxjs/operator/concatAll', 'rxjs/util/EmptyError', 'rxjs/observable/fromPromise', 'rxjs/operator/last', 'rxjs/operator/mergeAll', '@angular/platform-browser', 'rxjs/operator/filter'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.router = global.ng.router || {}),global.ng.common,global.ng.core,global.Rx,global.Rx,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.ng.platformBrowser,global.Rx.Observable.prototype));\n}(this, function (exports,_angular_common,_angular_core,rxjs_BehaviorSubject,rxjs_Subject,rxjs_observable_from,rxjs_observable_of,rxjs_operator_concatMap,rxjs_operator_every,rxjs_operator_first,rxjs_operator_map,rxjs_operator_mergeMap,rxjs_operator_reduce,rxjs_Observable,rxjs_operator_catch,rxjs_operator_concatAll,rxjs_util_EmptyError,rxjs_observable_fromPromise,l,rxjs_operator_mergeAll,_angular_platformBrowser,rxjs_operator_filter) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @whatItDoes Name of the primary outlet.\n     *\n     * @stable\n     */\n    var /** @type {?} */ PRIMARY_OUTLET = 'primary';\n    var NavigationCancelingError = (function (_super) {\n        __extends(NavigationCancelingError, _super);\n        /**\n         * @param {?} message\n         */\n        function NavigationCancelingError(message) {\n            _super.call(this, message);\n            this.message = message;\n            this.stack = (new Error(message)).stack;\n        }\n        /**\n         * @return {?}\n         */\n        NavigationCancelingError.prototype.toString = function () { return this.message; };\n        return NavigationCancelingError;\n    }(Error));\n    /**\n     * @param {?} segments\n     * @param {?} segmentGroup\n     * @param {?} route\n     * @return {?}\n     */\n    function defaultUrlMatcher(segments, segmentGroup, route) {\n        var /** @type {?} */ path = route.path;\n        var /** @type {?} */ parts = path.split('/');\n        var /** @type {?} */ posParams = {};\n        var /** @type {?} */ consumed = [];\n        var /** @type {?} */ currentIndex = 0;\n        for (var /** @type {?} */ i = 0; i < parts.length; ++i) {\n            if (currentIndex >= segments.length)\n                return null;\n            var /** @type {?} */ current = segments[currentIndex];\n            var /** @type {?} */ p = parts[i];\n            var /** @type {?} */ isPosParam = p.startsWith(':');\n            if (!isPosParam && p !== current.path)\n                return null;\n            if (isPosParam) {\n                posParams[p.substring(1)] = current;\n            }\n            consumed.push(current);\n            currentIndex++;\n        }\n        if (route.pathMatch === 'full' &&\n            (segmentGroup.hasChildren() || currentIndex < segments.length)) {\n            return null;\n        }\n        else {\n            return { consumed: consumed, posParams: posParams };\n        }\n    }\n\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function shallowEqualArrays(a, b) {\n        if (a.length !== b.length)\n            return false;\n        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n            if (!shallowEqual(a[i], b[i]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function shallowEqual(a, b) {\n        var /** @type {?} */ k1 = Object.keys(a);\n        var /** @type {?} */ k2 = Object.keys(b);\n        if (k1.length != k2.length) {\n            return false;\n        }\n        var /** @type {?} */ key;\n        for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n            key = k1[i];\n            if (a[key] !== b[key]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * @param {?} a\n     * @return {?}\n     */\n    function flatten(a) {\n        var /** @type {?} */ target = [];\n        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n            for (var /** @type {?} */ j = 0; j < a[i].length; ++j) {\n                target.push(a[i][j]);\n            }\n        }\n        return target;\n    }\n    /**\n     * @param {?} a\n     * @return {?}\n     */\n    function last(a) {\n        return a.length > 0 ? a[a.length - 1] : null;\n    }\n    /**\n     * @param {?} m1\n     * @param {?} m2\n     * @return {?}\n     */\n    function merge(m1, m2) {\n        var /** @type {?} */ m = {};\n        for (var attr in m1) {\n            if (m1.hasOwnProperty(attr)) {\n                m[attr] = m1[attr];\n            }\n        }\n        for (var attr in m2) {\n            if (m2.hasOwnProperty(attr)) {\n                m[attr] = m2[attr];\n            }\n        }\n        return m;\n    }\n    /**\n     * @param {?} map\n     * @param {?} callback\n     * @return {?}\n     */\n    function forEach(map, callback) {\n        for (var prop in map) {\n            if (map.hasOwnProperty(prop)) {\n                callback(map[prop], prop);\n            }\n        }\n    }\n    /**\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function waitForMap(obj, fn) {\n        var /** @type {?} */ waitFor = [];\n        var /** @type {?} */ res = {};\n        forEach(obj, function (a, k) {\n            if (k === PRIMARY_OUTLET) {\n                waitFor.push(rxjs_operator_map.map.call(fn(k, a), function (_) {\n                    res[k] = _;\n                    return _;\n                }));\n            }\n        });\n        forEach(obj, function (a, k) {\n            if (k !== PRIMARY_OUTLET) {\n                waitFor.push(rxjs_operator_map.map.call(fn(k, a), function (_) {\n                    res[k] = _;\n                    return _;\n                }));\n            }\n        });\n        if (waitFor.length > 0) {\n            var /** @type {?} */ concatted$ = rxjs_operator_concatAll.concatAll.call(rxjs_observable_of.of.apply(void 0, waitFor));\n            var /** @type {?} */ last$ = l.last.call(concatted$);\n            return rxjs_operator_map.map.call(last$, function () { return res; });\n        }\n        return rxjs_observable_of.of(res);\n    }\n    /**\n     * @param {?} observables\n     * @return {?}\n     */\n    function andObservables(observables) {\n        var /** @type {?} */ merged$ = rxjs_operator_mergeAll.mergeAll.call(observables);\n        return rxjs_operator_every.every.call(merged$, function (result) { return result === true; });\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function wrapIntoObservable(value) {\n        if (value instanceof rxjs_Observable.Observable) {\n            return value;\n        }\n        if (value instanceof Promise) {\n            return rxjs_observable_fromPromise.fromPromise(value);\n        }\n        return rxjs_observable_of.of(value);\n    }\n\n    /**\n     * @experimental\n     */\n    var /** @type {?} */ ROUTES = new _angular_core.OpaqueToken('ROUTES');\n    var LoadedRouterConfig = (function () {\n        /**\n         * @param {?} routes\n         * @param {?} injector\n         * @param {?} factoryResolver\n         * @param {?} injectorFactory\n         */\n        function LoadedRouterConfig(routes, injector, factoryResolver, injectorFactory) {\n            this.routes = routes;\n            this.injector = injector;\n            this.factoryResolver = factoryResolver;\n            this.injectorFactory = injectorFactory;\n        }\n        return LoadedRouterConfig;\n    }());\n    var RouterConfigLoader = (function () {\n        /**\n         * @param {?} loader\n         * @param {?} compiler\n         */\n        function RouterConfigLoader(loader, compiler) {\n            this.loader = loader;\n            this.compiler = compiler;\n        }\n        /**\n         * @param {?} parentInjector\n         * @param {?} loadChildren\n         * @return {?}\n         */\n        RouterConfigLoader.prototype.load = function (parentInjector, loadChildren) {\n            return rxjs_operator_map.map.call(this.loadModuleFactory(loadChildren), function (r) {\n                var /** @type {?} */ ref = r.create(parentInjector);\n                var /** @type {?} */ injectorFactory = function (parent) { return r.create(parent).injector; };\n                return new LoadedRouterConfig(flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver, injectorFactory);\n            });\n        };\n        /**\n         * @param {?} loadChildren\n         * @return {?}\n         */\n        RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {\n            var _this = this;\n            if (typeof loadChildren === 'string') {\n                return rxjs_observable_fromPromise.fromPromise(this.loader.load(loadChildren));\n            }\n            else {\n                var /** @type {?} */ offlineMode_1 = this.compiler instanceof _angular_core.Compiler;\n                return rxjs_operator_mergeMap.mergeMap.call(wrapIntoObservable(loadChildren()), function (t) { return offlineMode_1 ? rxjs_observable_of.of(/** @type {?} */ (t)) : rxjs_observable_fromPromise.fromPromise(_this.compiler.compileModuleAsync(t)); });\n            }\n        };\n        return RouterConfigLoader;\n    }());\n\n    /**\n     * @return {?}\n     */\n    function createEmptyUrlTree() {\n        return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @param {?} exact\n     * @return {?}\n     */\n    function containsTree(container, containee, exact) {\n        if (exact) {\n            return equalQueryParams(container.queryParams, containee.queryParams) &&\n                equalSegmentGroups(container.root, containee.root);\n        }\n        return containsQueryParams(container.queryParams, containee.queryParams) &&\n            containsSegmentGroup(container.root, containee.root);\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @return {?}\n     */\n    function equalQueryParams(container, containee) {\n        return shallowEqual(container, containee);\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @return {?}\n     */\n    function equalSegmentGroups(container, containee) {\n        if (!equalPath(container.segments, containee.segments))\n            return false;\n        if (container.numberOfChildren !== containee.numberOfChildren)\n            return false;\n        for (var c in containee.children) {\n            if (!container.children[c])\n                return false;\n            if (!equalSegmentGroups(container.children[c], containee.children[c]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @return {?}\n     */\n    function containsQueryParams(container, containee) {\n        return Object.keys(containee).length <= Object.keys(container).length &&\n            Object.keys(containee).every(function (key) { return containee[key] === container[key]; });\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @return {?}\n     */\n    function containsSegmentGroup(container, containee) {\n        return containsSegmentGroupHelper(container, containee, containee.segments);\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @param {?} containeePaths\n     * @return {?}\n     */\n    function containsSegmentGroupHelper(container, containee, containeePaths) {\n        if (container.segments.length > containeePaths.length) {\n            var /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\n            if (!equalPath(current, containeePaths))\n                return false;\n            if (containee.hasChildren())\n                return false;\n            return true;\n        }\n        else if (container.segments.length === containeePaths.length) {\n            if (!equalPath(container.segments, containeePaths))\n                return false;\n            for (var c in containee.children) {\n                if (!container.children[c])\n                    return false;\n                if (!containsSegmentGroup(container.children[c], containee.children[c]))\n                    return false;\n            }\n            return true;\n        }\n        else {\n            var /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\n            var /** @type {?} */ next = containeePaths.slice(container.segments.length);\n            if (!equalPath(container.segments, current))\n                return false;\n            if (!container.children[PRIMARY_OUTLET])\n                return false;\n            return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n        }\n    }\n    /**\n     * \\@whatItDoes Represents the parsed URL.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({templateUrl:'template.html'})\n     * class MyComponent {\n     *   constructor(router: Router) {\n     *     const tree: UrlTree =\n     *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n     *     const f = tree.fragment; // return 'fragment'\n     *     const q = tree.queryParams; // returns {debug: 'true'}\n     *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n     *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n     *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n     *     g.children['support'].segments; // return 1 segment 'help'\n     *   }\n     * }\n     * ```\n     *\n     * \\@description\n     *\n     * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n     * serialized tree.\n     * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n     *\n     * \\@stable\n     */\n    var UrlTree = (function () {\n        /**\n         * \\@internal\n         * @param {?} root\n         * @param {?} queryParams\n         * @param {?} fragment\n         */\n        function UrlTree(root, queryParams, fragment) {\n            this.root = root;\n            this.queryParams = queryParams;\n            this.fragment = fragment;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        UrlTree.prototype.toString = function () { return new DefaultUrlSerializer().serialize(this); };\n        return UrlTree;\n    }());\n    /**\n     * \\@whatItDoes Represents the parsed URL segment group.\n     *\n     * See {\\@link UrlTree} for more information.\n     *\n     * \\@stable\n     */\n    var UrlSegmentGroup = (function () {\n        /**\n         * @param {?} segments\n         * @param {?} children\n         */\n        function UrlSegmentGroup(segments, children) {\n            var _this = this;\n            this.segments = segments;\n            this.children = children;\n            /** The parent node in the url tree */\n            this.parent = null;\n            forEach(children, function (v, k) { return v.parent = _this; });\n        }\n        /**\n         * Wether the segment has child segments\n         * @return {?}\n         */\n        UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };\n        Object.defineProperty(UrlSegmentGroup.prototype, \"numberOfChildren\", {\n            /**\n             * Number of child segments\n             * @return {?}\n             */\n            get: function () { return Object.keys(this.children).length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };\n        return UrlSegmentGroup;\n    }());\n    /**\n     * \\@whatItDoes Represents a single URL segment.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({templateUrl:'template.html'})\n     * class MyComponent {\n     *   constructor(router: Router) {\n     *     const tree: UrlTree = router.parseUrl('/team;id=33');\n     *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n     *     const s: UrlSegment[] = g.segments;\n     *     s[0].path; // returns 'team'\n     *     s[0].parameters; // returns {id: 33}\n     *   }\n     * }\n     * ```\n     *\n     * \\@description\n     *\n     * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n     * parameters associated with the segment.\n     *\n     * \\@stable\n     */\n    var UrlSegment = (function () {\n        /**\n         * @param {?} path\n         * @param {?} parameters\n         */\n        function UrlSegment(path, parameters) {\n            this.path = path;\n            this.parameters = parameters;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        UrlSegment.prototype.toString = function () { return serializePath(this); };\n        return UrlSegment;\n    }());\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function equalSegments(a, b) {\n        if (a.length !== b.length)\n            return false;\n        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n            if (a[i].path !== b[i].path)\n                return false;\n            if (!shallowEqual(a[i].parameters, b[i].parameters))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function equalPath(a, b) {\n        if (a.length !== b.length)\n            return false;\n        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n            if (a[i].path !== b[i].path)\n                return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} segment\n     * @param {?} fn\n     * @return {?}\n     */\n    function mapChildrenIntoArray(segment, fn) {\n        var /** @type {?} */ res = [];\n        forEach(segment.children, function (child, childOutlet) {\n            if (childOutlet === PRIMARY_OUTLET) {\n                res = res.concat(fn(child, childOutlet));\n            }\n        });\n        forEach(segment.children, function (child, childOutlet) {\n            if (childOutlet !== PRIMARY_OUTLET) {\n                res = res.concat(fn(child, childOutlet));\n            }\n        });\n        return res;\n    }\n    /**\n     * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n     *\n     * \\@description The url serialization strategy is customizable. You can\n     * make all URLs case insensitive by providing a custom UrlSerializer.\n     *\n     * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var UrlSerializer = (function () {\n        function UrlSerializer() {\n        }\n        /**\n         * Parse a url into a {\\@link UrlTree}\n         * @abstract\n         * @param {?} url\n         * @return {?}\n         */\n        UrlSerializer.prototype.parse = function (url) { };\n        /**\n         * Converts a {\\@link UrlTree} into a url\n         * @abstract\n         * @param {?} tree\n         * @return {?}\n         */\n        UrlSerializer.prototype.serialize = function (tree) { };\n        return UrlSerializer;\n    }());\n    /**\n     * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n     *\n     * \\@description\n     *\n     * Example URLs:\n     *\n     * ```\n     * /inbox/33(popup:compose)\n     * /inbox/33;open=true/messages/44\n     * ```\n     *\n     * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n     * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n     * specify route specific parameters.\n     *\n     * \\@stable\n     */\n    var DefaultUrlSerializer = (function () {\n        function DefaultUrlSerializer() {\n        }\n        /**\n         * Parses a url into a {\\@link UrlTree}\n         * @param {?} url\n         * @return {?}\n         */\n        DefaultUrlSerializer.prototype.parse = function (url) {\n            var /** @type {?} */ p = new UrlParser(url);\n            return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n        };\n        /**\n         * Converts a {\\@link UrlTree} into a url\n         * @param {?} tree\n         * @return {?}\n         */\n        DefaultUrlSerializer.prototype.serialize = function (tree) {\n            var /** @type {?} */ segment = \"/\" + serializeSegment(tree.root, true);\n            var /** @type {?} */ query = serializeQueryParams(tree.queryParams);\n            var /** @type {?} */ fragment = tree.fragment !== null && tree.fragment !== undefined ? \"#\" + encodeURI(tree.fragment) : '';\n            return \"\" + segment + query + fragment;\n        };\n        return DefaultUrlSerializer;\n    }());\n    /**\n     * @param {?} segment\n     * @return {?}\n     */\n    function serializePaths(segment) {\n        return segment.segments.map(function (p) { return serializePath(p); }).join('/');\n    }\n    /**\n     * @param {?} segment\n     * @param {?} root\n     * @return {?}\n     */\n    function serializeSegment(segment, root) {\n        if (segment.hasChildren() && root) {\n            var /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\n                serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n                '';\n            var /** @type {?} */ children_1 = [];\n            forEach(segment.children, function (v, k) {\n                if (k !== PRIMARY_OUTLET) {\n                    children_1.push(k + \":\" + serializeSegment(v, false));\n                }\n            });\n            if (children_1.length > 0) {\n                return primary + \"(\" + children_1.join('//') + \")\";\n            }\n            else {\n                return \"\" + primary;\n            }\n        }\n        else if (segment.hasChildren() && !root) {\n            var /** @type {?} */ children = mapChildrenIntoArray(segment, function (v, k) {\n                if (k === PRIMARY_OUTLET) {\n                    return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n                }\n                else {\n                    return [(k + \":\" + serializeSegment(v, false))];\n                }\n            });\n            return serializePaths(segment) + \"/(\" + children.join('//') + \")\";\n        }\n        else {\n            return serializePaths(segment);\n        }\n    }\n    /**\n     * @param {?} s\n     * @return {?}\n     */\n    function encode(s) {\n        return encodeURIComponent(s);\n    }\n    /**\n     * @param {?} s\n     * @return {?}\n     */\n    function decode(s) {\n        return decodeURIComponent(s);\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    function serializePath(path) {\n        return \"\" + encode(path.path) + serializeParams(path.parameters);\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    function serializeParams(params) {\n        return pairs(params).map(function (p) { return (\";\" + encode(p.first) + \"=\" + encode(p.second)); }).join('');\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    function serializeQueryParams(params) {\n        var /** @type {?} */ strParams = Object.keys(params).map(function (name) {\n            var /** @type {?} */ value = params[name];\n            return Array.isArray(value) ? value.map(function (v) { return (encode(name) + \"=\" + encode(v)); }).join('&') :\n                encode(name) + \"=\" + encode(value);\n        });\n        return strParams.length ? \"?\" + strParams.join(\"&\") : '';\n    }\n    var Pair = (function () {\n        /**\n         * @param {?} first\n         * @param {?} second\n         */\n        function Pair(first, second) {\n            this.first = first;\n            this.second = second;\n        }\n        return Pair;\n    }());\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function pairs(obj) {\n        var /** @type {?} */ res = [];\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                res.push(new Pair(prop, obj[prop]));\n            }\n        }\n        return res;\n    }\n    var /** @type {?} */ SEGMENT_RE = /^[^\\/()?;=&#]+/;\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    function matchSegments(str) {\n        SEGMENT_RE.lastIndex = 0;\n        var /** @type {?} */ match = str.match(SEGMENT_RE);\n        return match ? match[0] : '';\n    }\n    var /** @type {?} */ QUERY_PARAM_RE = /^[^=?&#]+/;\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    function matchQueryParams(str) {\n        QUERY_PARAM_RE.lastIndex = 0;\n        var /** @type {?} */ match = str.match(SEGMENT_RE);\n        return match ? match[0] : '';\n    }\n    var /** @type {?} */ QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    function matchUrlQueryParamValue(str) {\n        QUERY_PARAM_VALUE_RE.lastIndex = 0;\n        var /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\n        return match ? match[0] : '';\n    }\n    var UrlParser = (function () {\n        /**\n         * @param {?} url\n         */\n        function UrlParser(url) {\n            this.url = url;\n            this.remaining = url;\n        }\n        /**\n         * @param {?} str\n         * @return {?}\n         */\n        UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };\n        /**\n         * @param {?} str\n         * @return {?}\n         */\n        UrlParser.prototype.capture = function (str) {\n            if (!this.remaining.startsWith(str)) {\n                throw new Error(\"Expected \\\"\" + str + \"\\\".\");\n            }\n            this.remaining = this.remaining.substring(str.length);\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseRootSegment = function () {\n            if (this.remaining.startsWith('/')) {\n                this.capture('/');\n            }\n            if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {\n                return new UrlSegmentGroup([], {});\n            }\n            return new UrlSegmentGroup([], this.parseChildren());\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseChildren = function () {\n            if (this.remaining.length == 0) {\n                return {};\n            }\n            if (this.peekStartsWith('/')) {\n                this.capture('/');\n            }\n            var /** @type {?} */ paths = [];\n            if (!this.peekStartsWith('(')) {\n                paths.push(this.parseSegments());\n            }\n            while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n                this.capture('/');\n                paths.push(this.parseSegments());\n            }\n            var /** @type {?} */ children = {};\n            if (this.peekStartsWith('/(')) {\n                this.capture('/');\n                children = this.parseParens(true);\n            }\n            var /** @type {?} */ res = {};\n            if (this.peekStartsWith('(')) {\n                res = this.parseParens(false);\n            }\n            if (paths.length > 0 || Object.keys(children).length > 0) {\n                res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);\n            }\n            return res;\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseSegments = function () {\n            var /** @type {?} */ path = matchSegments(this.remaining);\n            if (path === '' && this.peekStartsWith(';')) {\n                throw new Error(\"Empty path url segment cannot have parameters: '\" + this.remaining + \"'.\");\n            }\n            this.capture(path);\n            var /** @type {?} */ matrixParams = {};\n            if (this.peekStartsWith(';')) {\n                matrixParams = this.parseMatrixParams();\n            }\n            return new UrlSegment(decode(path), matrixParams);\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseQueryParams = function () {\n            var /** @type {?} */ params = {};\n            if (this.peekStartsWith('?')) {\n                this.capture('?');\n                this.parseQueryParam(params);\n                while (this.remaining.length > 0 && this.peekStartsWith('&')) {\n                    this.capture('&');\n                    this.parseQueryParam(params);\n                }\n            }\n            return params;\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseFragment = function () {\n            if (this.peekStartsWith('#')) {\n                return decodeURI(this.remaining.substring(1));\n            }\n            return null;\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseMatrixParams = function () {\n            var /** @type {?} */ params = {};\n            while (this.remaining.length > 0 && this.peekStartsWith(';')) {\n                this.capture(';');\n                this.parseParam(params);\n            }\n            return params;\n        };\n        /**\n         * @param {?} params\n         * @return {?}\n         */\n        UrlParser.prototype.parseParam = function (params) {\n            var /** @type {?} */ key = matchSegments(this.remaining);\n            if (!key) {\n                return;\n            }\n            this.capture(key);\n            var /** @type {?} */ value = '';\n            if (this.peekStartsWith('=')) {\n                this.capture('=');\n                var /** @type {?} */ valueMatch = matchSegments(this.remaining);\n                if (valueMatch) {\n                    value = valueMatch;\n                    this.capture(value);\n                }\n            }\n            params[decode(key)] = decode(value);\n        };\n        /**\n         * @param {?} params\n         * @return {?}\n         */\n        UrlParser.prototype.parseQueryParam = function (params) {\n            var /** @type {?} */ key = matchQueryParams(this.remaining);\n            if (!key) {\n                return;\n            }\n            this.capture(key);\n            var /** @type {?} */ value = '';\n            if (this.peekStartsWith('=')) {\n                this.capture('=');\n                var /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\n                if (valueMatch) {\n                    value = valueMatch;\n                    this.capture(value);\n                }\n            }\n            var /** @type {?} */ decodedKey = decode(key);\n            var /** @type {?} */ decodedVal = decode(value);\n            if (params.hasOwnProperty(decodedKey)) {\n                // Append to existing values\n                var /** @type {?} */ currentVal = params[decodedKey];\n                if (!Array.isArray(currentVal)) {\n                    currentVal = [currentVal];\n                    params[decodedKey] = currentVal;\n                }\n                currentVal.push(decodedVal);\n            }\n            else {\n                // Create a new value\n                params[decodedKey] = decodedVal;\n            }\n        };\n        /**\n         * @param {?} allowPrimary\n         * @return {?}\n         */\n        UrlParser.prototype.parseParens = function (allowPrimary) {\n            var /** @type {?} */ segments = {};\n            this.capture('(');\n            while (!this.peekStartsWith(')') && this.remaining.length > 0) {\n                var /** @type {?} */ path = matchSegments(this.remaining);\n                var /** @type {?} */ next = this.remaining[path.length];\n                // if is is not one of these characters, then the segment was unescaped\n                // or the group was not closed\n                if (next !== '/' && next !== ')' && next !== ';') {\n                    throw new Error(\"Cannot parse url '\" + this.url + \"'\");\n                }\n                var /** @type {?} */ outletName = void 0;\n                if (path.indexOf(':') > -1) {\n                    outletName = path.substr(0, path.indexOf(':'));\n                    this.capture(outletName);\n                    this.capture(':');\n                }\n                else if (allowPrimary) {\n                    outletName = PRIMARY_OUTLET;\n                }\n                var /** @type {?} */ children = this.parseChildren();\n                segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                    new UrlSegmentGroup([], children);\n                if (this.peekStartsWith('//')) {\n                    this.capture('//');\n                }\n            }\n            this.capture(')');\n            return segments;\n        };\n        return UrlParser;\n    }());\n\n    var NoMatch = (function () {\n        /**\n         * @param {?=} segmentGroup\n         */\n        function NoMatch(segmentGroup) {\n            if (segmentGroup === void 0) { segmentGroup = null; }\n            this.segmentGroup = segmentGroup;\n        }\n        return NoMatch;\n    }());\n    var AbsoluteRedirect = (function () {\n        /**\n         * @param {?} urlTree\n         */\n        function AbsoluteRedirect(urlTree) {\n            this.urlTree = urlTree;\n        }\n        return AbsoluteRedirect;\n    }());\n    /**\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    function noMatch(segmentGroup) {\n        return new rxjs_Observable.Observable(function (obs) { return obs.error(new NoMatch(segmentGroup)); });\n    }\n    /**\n     * @param {?} newTree\n     * @return {?}\n     */\n    function absoluteRedirect(newTree) {\n        return new rxjs_Observable.Observable(function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });\n    }\n    /**\n     * @param {?} redirectTo\n     * @return {?}\n     */\n    function namedOutletsRedirect(redirectTo) {\n        return new rxjs_Observable.Observable(function (obs) { return obs.error(new Error(\"Only absolute redirects can have named outlets. redirectTo: '\" + redirectTo + \"'\")); });\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function canLoadFails(route) {\n        return new rxjs_Observable.Observable(function (obs) { return obs.error(new NavigationCancelingError(\"Cannot load children because the guard of the route \\\"path: '\" + route.path + \"'\\\" returned false\")); });\n    }\n    /**\n     * @param {?} injector\n     * @param {?} configLoader\n     * @param {?} urlSerializer\n     * @param {?} urlTree\n     * @param {?} config\n     * @return {?}\n     */\n    function applyRedirects(injector, configLoader, urlSerializer, urlTree, config) {\n        return new ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config).apply();\n    }\n    var ApplyRedirects = (function () {\n        /**\n         * @param {?} injector\n         * @param {?} configLoader\n         * @param {?} urlSerializer\n         * @param {?} urlTree\n         * @param {?} config\n         */\n        function ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config) {\n            this.injector = injector;\n            this.configLoader = configLoader;\n            this.urlSerializer = urlSerializer;\n            this.urlTree = urlTree;\n            this.config = config;\n            this.allowRedirects = true;\n        }\n        /**\n         * @return {?}\n         */\n        ApplyRedirects.prototype.apply = function () {\n            var _this = this;\n            var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);\n            var /** @type {?} */ urlTrees$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, _this.urlTree.fragment); });\n            return rxjs_operator_catch._catch.call(urlTrees$, function (e) {\n                if (e instanceof AbsoluteRedirect) {\n                    // after an absolute redirect we do not apply any more redirects!\n                    _this.allowRedirects = false;\n                    // we need to run matching, so we can fetch all lazy-loaded modules\n                    return _this.match(e.urlTree);\n                }\n                else if (e instanceof NoMatch) {\n                    throw _this.noMatchError(e);\n                }\n                else {\n                    throw e;\n                }\n            });\n        };\n        /**\n         * @param {?} tree\n         * @return {?}\n         */\n        ApplyRedirects.prototype.match = function (tree) {\n            var _this = this;\n            var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.injector, this.config, tree.root, PRIMARY_OUTLET);\n            var /** @type {?} */ mapped$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) {\n                return _this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment);\n            });\n            return rxjs_operator_catch._catch.call(mapped$, function (e) {\n                if (e instanceof NoMatch) {\n                    throw _this.noMatchError(e);\n                }\n                else {\n                    throw e;\n                }\n            });\n        };\n        /**\n         * @param {?} e\n         * @return {?}\n         */\n        ApplyRedirects.prototype.noMatchError = function (e) {\n            return new Error(\"Cannot match any routes. URL Segment: '\" + e.segmentGroup + \"'\");\n        };\n        /**\n         * @param {?} rootCandidate\n         * @param {?} queryParams\n         * @param {?} fragment\n         * @return {?}\n         */\n        ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {\n            var /** @type {?} */ root = rootCandidate.segments.length > 0 ?\n                new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :\n                rootCandidate;\n            return new UrlTree(root, queryParams, fragment);\n            var _a;\n        };\n        /**\n         * @param {?} injector\n         * @param {?} routes\n         * @param {?} segmentGroup\n         * @param {?} outlet\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandSegmentGroup = function (injector, routes, segmentGroup, outlet) {\n            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n                return rxjs_operator_map.map.call(this.expandChildren(injector, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });\n            }\n            else {\n                return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} routes\n         * @param {?} segmentGroup\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandChildren = function (injector, routes, segmentGroup) {\n            var _this = this;\n            return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(injector, routes, child, childOutlet); });\n        };\n        /**\n         * @param {?} injector\n         * @param {?} segmentGroup\n         * @param {?} routes\n         * @param {?} segments\n         * @param {?} outlet\n         * @param {?} allowRedirects\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandSegment = function (injector, segmentGroup, routes, segments, outlet, allowRedirects) {\n            var _this = this;\n            var /** @type {?} */ routes$ = rxjs_observable_of.of.apply(void 0, routes);\n            var /** @type {?} */ processedRoutes$ = rxjs_operator_map.map.call(routes$, function (r) {\n                var /** @type {?} */ expanded$ = _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects);\n                return rxjs_operator_catch._catch.call(expanded$, function (e) {\n                    if (e instanceof NoMatch)\n                        return rxjs_observable_of.of(null);\n                    else\n                        throw e;\n                });\n            });\n            var /** @type {?} */ concattedProcessedRoutes$ = rxjs_operator_concatAll.concatAll.call(processedRoutes$);\n            var /** @type {?} */ first$ = rxjs_operator_first.first.call(concattedProcessedRoutes$, function (s) { return !!s; });\n            return rxjs_operator_catch._catch.call(first$, function (e, _) {\n                if (e instanceof rxjs_util_EmptyError.EmptyError) {\n                    if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                        return rxjs_observable_of.of(new UrlSegmentGroup([], {}));\n                    }\n                    else {\n                        throw new NoMatch(segmentGroup);\n                    }\n                }\n                else {\n                    throw e;\n                }\n            });\n        };\n        /**\n         * @param {?} segmentGroup\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {\n            return segments.length === 0 && !segmentGroup.children[outlet];\n        };\n        /**\n         * @param {?} injector\n         * @param {?} segmentGroup\n         * @param {?} routes\n         * @param {?} route\n         * @param {?} paths\n         * @param {?} outlet\n         * @param {?} allowRedirects\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandSegmentAgainstRoute = function (injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {\n            if (getOutlet$1(route) !== outlet)\n                return noMatch(segmentGroup);\n            if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))\n                return noMatch(segmentGroup);\n            if (route.redirectTo === undefined) {\n                return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);\n            }\n            else {\n                return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} segmentGroup\n         * @param {?} routes\n         * @param {?} route\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {\n            if (route.path === '**') {\n                return this.expandWildCardWithParamsAgainstRouteUsingRedirect(injector, routes, route, outlet);\n            }\n            else {\n                return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} routes\n         * @param {?} route\n         * @param {?} outlet\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (injector, routes, route, outlet) {\n            var _this = this;\n            var /** @type {?} */ newTree = this.applyRedirectCommands([], route.redirectTo, {});\n            if (route.redirectTo.startsWith('/')) {\n                return absoluteRedirect(newTree);\n            }\n            else {\n                return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {\n                    var /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\n                    return _this.expandSegment(injector, group, routes, newSegments, outlet, false);\n                });\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} segmentGroup\n         * @param {?} routes\n         * @param {?} route\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {\n            var _this = this;\n            var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;\n            if (!matched)\n                return noMatch(segmentGroup);\n            var /** @type {?} */ newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, /** @type {?} */ (positionalParamSegments));\n            if (route.redirectTo.startsWith('/')) {\n                return absoluteRedirect(newTree);\n            }\n            else {\n                return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {\n                    return _this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\n                });\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} rawSegmentGroup\n         * @param {?} route\n         * @param {?} segments\n         * @return {?}\n         */\n        ApplyRedirects.prototype.matchSegmentAgainstRoute = function (injector, rawSegmentGroup, route, segments) {\n            var _this = this;\n            if (route.path === '**') {\n                if (route.loadChildren) {\n                    return rxjs_operator_map.map.call(this.configLoader.load(injector, route.loadChildren), function (r) {\n                        ((route))._loadedConfig = r;\n                        return new UrlSegmentGroup(segments, {});\n                    });\n                }\n                else {\n                    return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));\n                }\n            }\n            else {\n                var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments_1 = _a.consumedSegments, lastChild = _a.lastChild;\n                if (!matched)\n                    return noMatch(rawSegmentGroup);\n                var /** @type {?} */ rawSlicedSegments_1 = segments.slice(lastChild);\n                var /** @type {?} */ childConfig$ = this.getChildConfig(injector, route);\n                return rxjs_operator_mergeMap.mergeMap.call(childConfig$, function (routerConfig) {\n                    var /** @type {?} */ childInjector = routerConfig.injector;\n                    var /** @type {?} */ childConfig = routerConfig.routes;\n                    var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;\n                    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                        var /** @type {?} */ expanded$ = _this.expandChildren(childInjector, childConfig, segmentGroup);\n                        return rxjs_operator_map.map.call(expanded$, function (children) { return new UrlSegmentGroup(consumedSegments_1, children); });\n                    }\n                    else if (childConfig.length === 0 && slicedSegments.length === 0) {\n                        return rxjs_observable_of.of(new UrlSegmentGroup(consumedSegments_1, {}));\n                    }\n                    else {\n                        var /** @type {?} */ expanded$ = _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n                        return rxjs_operator_map.map.call(expanded$, function (cs) { return new UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children); });\n                    }\n                });\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} route\n         * @return {?}\n         */\n        ApplyRedirects.prototype.getChildConfig = function (injector, route) {\n            var _this = this;\n            if (route.children) {\n                return rxjs_observable_of.of(new LoadedRouterConfig(route.children, injector, null, null));\n            }\n            else if (route.loadChildren) {\n                return rxjs_operator_mergeMap.mergeMap.call(runGuards(injector, route), function (shouldLoad) {\n                    if (shouldLoad) {\n                        if (((route))._loadedConfig) {\n                            return rxjs_observable_of.of(((route))._loadedConfig);\n                        }\n                        else {\n                            return rxjs_operator_map.map.call(_this.configLoader.load(injector, route.loadChildren), function (r) {\n                                ((route))._loadedConfig = r;\n                                return r;\n                            });\n                        }\n                    }\n                    else {\n                        return canLoadFails(route);\n                    }\n                });\n            }\n            else {\n                return rxjs_observable_of.of(new LoadedRouterConfig([], injector, null, null));\n            }\n        };\n        /**\n         * @param {?} route\n         * @param {?} urlTree\n         * @return {?}\n         */\n        ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {\n            var /** @type {?} */ res = [];\n            var /** @type {?} */ c = urlTree.root;\n            while (true) {\n                res = res.concat(c.segments);\n                if (c.numberOfChildren === 0) {\n                    return rxjs_observable_of.of(res);\n                }\n                else if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n                    return namedOutletsRedirect(route.redirectTo);\n                }\n                else {\n                    c = c.children[PRIMARY_OUTLET];\n                }\n            }\n        };\n        /**\n         * @param {?} segments\n         * @param {?} redirectTo\n         * @param {?} posParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {\n            var /** @type {?} */ t = this.urlSerializer.parse(redirectTo);\n            return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n        };\n        /**\n         * @param {?} redirectTo\n         * @param {?} urlTree\n         * @param {?} segments\n         * @param {?} posParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {\n            var /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n            return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n        };\n        /**\n         * @param {?} redirectToParams\n         * @param {?} actualParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {\n            var /** @type {?} */ res = {};\n            forEach(redirectToParams, function (v, k) {\n                if (v.startsWith(':')) {\n                    res[k] = actualParams[v.substring(1)];\n                }\n                else {\n                    res[k] = v;\n                }\n            });\n            return res;\n        };\n        /**\n         * @param {?} redirectTo\n         * @param {?} group\n         * @param {?} segments\n         * @param {?} posParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {\n            var _this = this;\n            var /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n            var /** @type {?} */ children = {};\n            forEach(group.children, function (child, name) {\n                children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);\n            });\n            return new UrlSegmentGroup(updatedSegments, children);\n        };\n        /**\n         * @param {?} redirectTo\n         * @param {?} redirectToSegments\n         * @param {?} actualSegments\n         * @param {?} posParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {\n            var _this = this;\n            return redirectToSegments.map(function (s) { return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :\n                _this.findOrReturn(s, actualSegments); });\n        };\n        /**\n         * @param {?} redirectTo\n         * @param {?} redirectToUrlSegment\n         * @param {?} posParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {\n            var /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\n            if (!pos)\n                throw new Error(\"Cannot redirect to '\" + redirectTo + \"'. Cannot find '\" + redirectToUrlSegment.path + \"'.\");\n            return pos;\n        };\n        /**\n         * @param {?} redirectToUrlSegment\n         * @param {?} actualSegments\n         * @return {?}\n         */\n        ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {\n            var /** @type {?} */ idx = 0;\n            for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {\n                var s = actualSegments_1[_i];\n                if (s.path === redirectToUrlSegment.path) {\n                    actualSegments.splice(idx);\n                    return s;\n                }\n                idx++;\n            }\n            return redirectToUrlSegment;\n        };\n        return ApplyRedirects;\n    }());\n    /**\n     * @param {?} injector\n     * @param {?} route\n     * @return {?}\n     */\n    function runGuards(injector, route) {\n        var /** @type {?} */ canLoad = route.canLoad;\n        if (!canLoad || canLoad.length === 0)\n            return rxjs_observable_of.of(true);\n        var /** @type {?} */ obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canLoad), function (c) {\n            var /** @type {?} */ guard = injector.get(c);\n            if (guard.canLoad) {\n                return wrapIntoObservable(guard.canLoad(route));\n            }\n            else {\n                return wrapIntoObservable(guard(route));\n            }\n        });\n        return andObservables(obs);\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    function match(segmentGroup, route, segments) {\n        var /** @type {?} */ noMatch = { matched: false, consumedSegments: /** @type {?} */ ([]), lastChild: 0, positionalParamSegments: {} };\n        if (route.path === '') {\n            if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n                return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n            }\n            else {\n                return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n            }\n        }\n        var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n        var /** @type {?} */ res = matcher(segments, segmentGroup, route);\n        if (!res)\n            return noMatch;\n        return {\n            matched: true,\n            consumedSegments: res.consumed,\n            lastChild: res.consumed.length,\n            positionalParamSegments: res.posParams\n        };\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} consumedSegments\n     * @param {?} slicedSegments\n     * @param {?} config\n     * @return {?}\n     */\n    function split(segmentGroup, consumedSegments, slicedSegments, config) {\n        if (slicedSegments.length > 0 &&\n            containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n            var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\n        }\n        else if (slicedSegments.length === 0 &&\n            containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n            var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };\n        }\n        else {\n            return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };\n        }\n    }\n    /**\n     * @param {?} s\n     * @return {?}\n     */\n    function mergeTrivialChildren(s) {\n        if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n            var /** @type {?} */ c = s.children[PRIMARY_OUTLET];\n            return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n        }\n        else {\n            return s;\n        }\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @param {?} children\n     * @return {?}\n     */\n    function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n        var /** @type {?} */ res = {};\n        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n            var r = routes_1[_i];\n            if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {\n                res[getOutlet$1(r)] = new UrlSegmentGroup([], {});\n            }\n        }\n        return merge(children, res);\n    }\n    /**\n     * @param {?} routes\n     * @param {?} primarySegmentGroup\n     * @return {?}\n     */\n    function createChildrenForEmptySegments(routes, primarySegmentGroup) {\n        var /** @type {?} */ res = {};\n        res[PRIMARY_OUTLET] = primarySegmentGroup;\n        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n            var r = routes_2[_i];\n            if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {\n                res[getOutlet$1(r)] = new UrlSegmentGroup([], {});\n            }\n        }\n        return res;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @return {?}\n     */\n    function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n        return routes\n            .filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r) &&\n            getOutlet$1(r) !== PRIMARY_OUTLET; })\n            .length > 0;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @return {?}\n     */\n    function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {\n        return routes.filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r); }).length > 0;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} r\n     * @return {?}\n     */\n    function emptyPathRedirect(segmentGroup, slicedSegments, r) {\n        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n            return false;\n        return r.path === '' && r.redirectTo !== undefined;\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function getOutlet$1(route) {\n        return route.outlet ? route.outlet : PRIMARY_OUTLET;\n    }\n\n    /**\n     * @param {?} config\n     * @param {?=} parentPath\n     * @return {?}\n     */\n    function validateConfig(config, parentPath) {\n        if (parentPath === void 0) { parentPath = ''; }\n        // forEach doesn't iterate undefined values\n        for (var /** @type {?} */ i = 0; i < config.length; i++) {\n            var /** @type {?} */ route = config[i];\n            var /** @type {?} */ fullPath = getFullPath(parentPath, route);\n            validateNode(route, fullPath);\n        }\n    }\n    /**\n     * @param {?} route\n     * @param {?} fullPath\n     * @return {?}\n     */\n    function validateNode(route, fullPath) {\n        if (!route) {\n            throw new Error(\"\\n      Invalid configuration of route '\" + fullPath + \"': Encountered undefined route.\\n      The reason might be an extra comma.\\n       \\n      Example: \\n      const routes: Routes = [\\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\\n        { path: 'detail/:id', component: HeroDetailComponent }\\n      ];\\n    \");\n        }\n        if (Array.isArray(route)) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': Array cannot be specified\");\n        }\n        if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': a componentless route cannot have a named outlet set\");\n        }\n        if (route.redirectTo && route.children) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and children cannot be used together\");\n        }\n        if (route.redirectTo && route.loadChildren) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and loadChildren cannot be used together\");\n        }\n        if (route.children && route.loadChildren) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': children and loadChildren cannot be used together\");\n        }\n        if (route.redirectTo && route.component) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and component cannot be used together\");\n        }\n        if (route.path && route.matcher) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path and matcher cannot be used together\");\n        }\n        if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"'. One of the following must be provided: component, redirectTo, children or loadChildren\");\n        }\n        if (route.path === void 0 && route.matcher === void 0) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': routes must have either a path or a matcher specified\");\n        }\n        if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path cannot start with a slash\");\n        }\n        if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n            var /** @type {?} */ exp = \"The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.\";\n            throw new Error(\"Invalid configuration of route '{path: \\\"\" + fullPath + \"\\\", redirectTo: \\\"\" + route.redirectTo + \"\\\"}': please provide 'pathMatch'. \" + exp);\n        }\n        if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': pathMatch can only be set to 'prefix' or 'full'\");\n        }\n        if (route.children) {\n            validateConfig(route.children, fullPath);\n        }\n    }\n    /**\n     * @param {?} parentPath\n     * @param {?} currentRoute\n     * @return {?}\n     */\n    function getFullPath(parentPath, currentRoute) {\n        if (!currentRoute) {\n            return parentPath;\n        }\n        if (!parentPath && !currentRoute.path) {\n            return '';\n        }\n        else if (parentPath && !currentRoute.path) {\n            return parentPath + \"/\";\n        }\n        else if (!parentPath && currentRoute.path) {\n            return currentRoute.path;\n        }\n        else {\n            return parentPath + \"/\" + currentRoute.path;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Tree = (function () {\n        /**\n         * @param {?} root\n         */\n        function Tree(root) {\n            this._root = root;\n        }\n        Object.defineProperty(Tree.prototype, \"root\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._root.value; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@internal\n         * @param {?} t\n         * @return {?}\n         */\n        Tree.prototype.parent = function (t) {\n            var /** @type {?} */ p = this.pathFromRoot(t);\n            return p.length > 1 ? p[p.length - 2] : null;\n        };\n        /**\n         * \\@internal\n         * @param {?} t\n         * @return {?}\n         */\n        Tree.prototype.children = function (t) {\n            var /** @type {?} */ n = findNode(t, this._root);\n            return n ? n.children.map(function (t) { return t.value; }) : [];\n        };\n        /**\n         * \\@internal\n         * @param {?} t\n         * @return {?}\n         */\n        Tree.prototype.firstChild = function (t) {\n            var /** @type {?} */ n = findNode(t, this._root);\n            return n && n.children.length > 0 ? n.children[0].value : null;\n        };\n        /**\n         * \\@internal\n         * @param {?} t\n         * @return {?}\n         */\n        Tree.prototype.siblings = function (t) {\n            var /** @type {?} */ p = findPath(t, this._root, []);\n            if (p.length < 2)\n                return [];\n            var /** @type {?} */ c = p[p.length - 2].children.map(function (c) { return c.value; });\n            return c.filter(function (cc) { return cc !== t; });\n        };\n        /**\n         * \\@internal\n         * @param {?} t\n         * @return {?}\n         */\n        Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root, []).map(function (s) { return s.value; }); };\n        return Tree;\n    }());\n    /**\n     * @param {?} expected\n     * @param {?} c\n     * @return {?}\n     */\n    function findNode(expected, c) {\n        if (expected === c.value)\n            return c;\n        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {\n            var cc = _a[_i];\n            var /** @type {?} */ r = findNode(expected, cc);\n            if (r)\n                return r;\n        }\n        return null;\n    }\n    /**\n     * @param {?} expected\n     * @param {?} c\n     * @param {?} collected\n     * @return {?}\n     */\n    function findPath(expected, c, collected) {\n        collected.push(c);\n        if (expected === c.value)\n            return collected;\n        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {\n            var cc = _a[_i];\n            var /** @type {?} */ cloned = collected.slice(0);\n            var /** @type {?} */ r = findPath(expected, cc, cloned);\n            if (r.length > 0)\n                return r;\n        }\n        return [];\n    }\n    var TreeNode = (function () {\n        /**\n         * @param {?} value\n         * @param {?} children\n         */\n        function TreeNode(value, children) {\n            this.value = value;\n            this.children = children;\n        }\n        /**\n         * @return {?}\n         */\n        TreeNode.prototype.toString = function () { return \"TreeNode(\" + this.value + \")\"; };\n        return TreeNode;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * \\@whatItDoes Represents the state of the router.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({templateUrl:'template.html'})\n     * class MyComponent {\n     *   constructor(router: Router) {\n     *     const state: RouterState = router.routerState;\n     *     const root: ActivatedRoute = state.root;\n     *     const child = root.firstChild;\n     *     const id: Observable<string> = child.params.map(p => p.id);\n     *     //...\n     *   }\n     * }\n     * ```\n     *\n     * \\@description\n     * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n     * segments,\n     * the extracted parameters, and the resolved data.\n     *\n     * See {\\@link ActivatedRoute} for more information.\n     *\n     * \\@stable\n     */\n    var RouterState = (function (_super) {\n        __extends$1(RouterState, _super);\n        /**\n         * \\@internal\n         * @param {?} root\n         * @param {?} snapshot\n         */\n        function RouterState(root, snapshot) {\n            _super.call(this, root);\n            this.snapshot = snapshot;\n            setRouterStateSnapshot(this, root);\n        }\n        /**\n         * @return {?}\n         */\n        RouterState.prototype.toString = function () { return this.snapshot.toString(); };\n        return RouterState;\n    }(Tree));\n    /**\n     * @param {?} urlTree\n     * @param {?} rootComponent\n     * @return {?}\n     */\n    function createEmptyState(urlTree, rootComponent) {\n        var /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n        var /** @type {?} */ emptyUrl = new rxjs_BehaviorSubject.BehaviorSubject([new UrlSegment('', {})]);\n        var /** @type {?} */ emptyParams = new rxjs_BehaviorSubject.BehaviorSubject({});\n        var /** @type {?} */ emptyData = new rxjs_BehaviorSubject.BehaviorSubject({});\n        var /** @type {?} */ emptyQueryParams = new rxjs_BehaviorSubject.BehaviorSubject({});\n        var /** @type {?} */ fragment = new rxjs_BehaviorSubject.BehaviorSubject('');\n        var /** @type {?} */ activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n        activated.snapshot = snapshot.root;\n        return new RouterState(new TreeNode(activated, []), snapshot);\n    }\n    /**\n     * @param {?} urlTree\n     * @param {?} rootComponent\n     * @return {?}\n     */\n    function createEmptyStateSnapshot(urlTree, rootComponent) {\n        var /** @type {?} */ emptyParams = {};\n        var /** @type {?} */ emptyData = {};\n        var /** @type {?} */ emptyQueryParams = {};\n        var /** @type {?} */ fragment = '';\n        var /** @type {?} */ activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\n        return new RouterStateSnapshot('', new TreeNode(activated, []));\n    }\n    /**\n     * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n     * outlet.\n     * An `ActivatedRoute` can also be used to traverse the router state tree.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({...})\n     * class MyComponent {\n     *   constructor(route: ActivatedRoute) {\n     *     const id: Observable<string> = route.params.map(p => p.id);\n     *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n     *     // route.data includes both `data` and `resolve`\n     *     const user = route.data.map(d => d.user);\n     *   }\n     * }\n     * ```\n     *\n     * \\@stable\n     */\n    var ActivatedRoute = (function () {\n        /**\n         * \\@internal\n         * @param {?} url\n         * @param {?} params\n         * @param {?} queryParams\n         * @param {?} fragment\n         * @param {?} data\n         * @param {?} outlet\n         * @param {?} component\n         * @param {?} futureSnapshot\n         */\n        function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {\n            this.url = url;\n            this.params = params;\n            this.queryParams = queryParams;\n            this.fragment = fragment;\n            this.data = data;\n            this.outlet = outlet;\n            this.component = component;\n            this._futureSnapshot = futureSnapshot;\n        }\n        Object.defineProperty(ActivatedRoute.prototype, \"routeConfig\", {\n            /**\n             * The configuration used to match this route\n             * @return {?}\n             */\n            get: function () { return this._futureSnapshot.routeConfig; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRoute.prototype, \"root\", {\n            /**\n             * The root of the router state\n             * @return {?}\n             */\n            get: function () { return this._routerState.root; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRoute.prototype, \"parent\", {\n            /**\n             * The parent of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.parent(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRoute.prototype, \"firstChild\", {\n            /**\n             * The first child of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.firstChild(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRoute.prototype, \"children\", {\n            /**\n             * The children of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.children(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRoute.prototype, \"pathFromRoot\", {\n            /**\n             * The path from the root of the router state tree to this route\n             * @return {?}\n             */\n            get: function () { return this._routerState.pathFromRoot(this); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        ActivatedRoute.prototype.toString = function () {\n            return this.snapshot ? this.snapshot.toString() : \"Future(\" + this._futureSnapshot + \")\";\n        };\n        return ActivatedRoute;\n    }());\n    /**\n     * \\@internal\n     * @param {?} route\n     * @return {?}\n     */\n    function inheritedParamsDataResolve(route) {\n        var /** @type {?} */ pathToRoot = route.pathFromRoot;\n        var /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\n        while (inhertingStartingFrom >= 1) {\n            var /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\n            var /** @type {?} */ parent_1 = pathToRoot[inhertingStartingFrom - 1];\n            // current route is an empty path => inherits its parent's params and data\n            if (current.routeConfig && current.routeConfig.path === '') {\n                inhertingStartingFrom--;\n            }\n            else if (!parent_1.component) {\n                inhertingStartingFrom--;\n            }\n            else {\n                break;\n            }\n        }\n        return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {\n            var /** @type {?} */ params = merge(res.params, curr.params);\n            var /** @type {?} */ data = merge(res.data, curr.data);\n            var /** @type {?} */ resolve = merge(res.resolve, curr._resolvedData);\n            return { params: params, data: data, resolve: resolve };\n        }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));\n    }\n    /**\n     * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n     * outlet\n     * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n     * state tree.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({templateUrl:'./my-component.html'})\n     * class MyComponent {\n     *   constructor(route: ActivatedRoute) {\n     *     const id: string = route.snapshot.params.id;\n     *     const url: string = route.snapshot.url.join('');\n     *     const user = route.snapshot.data.user;\n     *   }\n     * }\n     * ```\n     *\n     * \\@stable\n     */\n    var ActivatedRouteSnapshot = (function () {\n        /**\n         * \\@internal\n         * @param {?} url\n         * @param {?} params\n         * @param {?} queryParams\n         * @param {?} fragment\n         * @param {?} data\n         * @param {?} outlet\n         * @param {?} component\n         * @param {?} routeConfig\n         * @param {?} urlSegment\n         * @param {?} lastPathIndex\n         * @param {?} resolve\n         */\n        function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {\n            this.url = url;\n            this.params = params;\n            this.queryParams = queryParams;\n            this.fragment = fragment;\n            this.data = data;\n            this.outlet = outlet;\n            this.component = component;\n            this._routeConfig = routeConfig;\n            this._urlSegment = urlSegment;\n            this._lastPathIndex = lastPathIndex;\n            this._resolve = resolve;\n        }\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"routeConfig\", {\n            /**\n             * The configuration used to match this route\n             * @return {?}\n             */\n            get: function () { return this._routeConfig; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"root\", {\n            /**\n             * The root of the router state\n             * @return {?}\n             */\n            get: function () { return this._routerState.root; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"parent\", {\n            /**\n             * The parent of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.parent(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"firstChild\", {\n            /**\n             * The first child of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.firstChild(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"children\", {\n            /**\n             * The children of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.children(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"pathFromRoot\", {\n            /**\n             * The path from the root of the router state tree to this route\n             * @return {?}\n             */\n            get: function () { return this._routerState.pathFromRoot(this); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        ActivatedRouteSnapshot.prototype.toString = function () {\n            var /** @type {?} */ url = this.url.map(function (segment) { return segment.toString(); }).join('/');\n            var /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';\n            return \"Route(url:'\" + url + \"', path:'\" + matched + \"')\";\n        };\n        return ActivatedRouteSnapshot;\n    }());\n    /**\n     * \\@whatItDoes Represents the state of the router at a moment in time.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({templateUrl:'template.html'})\n     * class MyComponent {\n     *   constructor(router: Router) {\n     *     const state: RouterState = router.routerState;\n     *     const snapshot: RouterStateSnapshot = state.snapshot;\n     *     const root: ActivatedRouteSnapshot = snapshot.root;\n     *     const child = root.firstChild;\n     *     const id: Observable<string> = child.params.map(p => p.id);\n     *     //...\n     *   }\n     * }\n     * ```\n     *\n     * \\@description\n     * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n     * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n     *\n     * \\@stable\n     */\n    var RouterStateSnapshot = (function (_super) {\n        __extends$1(RouterStateSnapshot, _super);\n        /**\n         * \\@internal\n         * @param {?} url\n         * @param {?} root\n         */\n        function RouterStateSnapshot(url, root) {\n            _super.call(this, root);\n            this.url = url;\n            setRouterStateSnapshot(this, root);\n        }\n        /**\n         * @return {?}\n         */\n        RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };\n        return RouterStateSnapshot;\n    }(Tree));\n    /**\n     * @param {?} state\n     * @param {?} node\n     * @return {?}\n     */\n    function setRouterStateSnapshot(state, node) {\n        node.value._routerState = state;\n        node.children.forEach(function (c) { return setRouterStateSnapshot(state, c); });\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function serializeNode(node) {\n        var /** @type {?} */ c = node.children.length > 0 ? \" { \" + node.children.map(serializeNode).join(\", \") + \" } \" : '';\n        return \"\" + node.value + c;\n    }\n    /**\n     * The expectation is that the activate route is created with the right set of parameters.\n     * So we push new values into the observables only when they are not the initial values.\n     * And we detect that by checking if the snapshot field is set.\n     * @param {?} route\n     * @return {?}\n     */\n    function advanceActivatedRoute(route) {\n        if (route.snapshot) {\n            var /** @type {?} */ currentSnapshot = route.snapshot;\n            route.snapshot = route._futureSnapshot;\n            if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {\n                ((route.queryParams)).next(route._futureSnapshot.queryParams);\n            }\n            if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {\n                ((route.fragment)).next(route._futureSnapshot.fragment);\n            }\n            if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {\n                ((route.params)).next(route._futureSnapshot.params);\n            }\n            if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {\n                ((route.url)).next(route._futureSnapshot.url);\n            }\n            if (!equalParamsAndUrlSegments(currentSnapshot, route._futureSnapshot)) {\n                ((route.data)).next(route._futureSnapshot.data);\n            }\n        }\n        else {\n            route.snapshot = route._futureSnapshot;\n            // this is for resolved data\n            ((route.data)).next(route._futureSnapshot.data);\n        }\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function equalParamsAndUrlSegments(a, b) {\n        return shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n    }\n\n    /**\n     * @param {?} routeReuseStrategy\n     * @param {?} curr\n     * @param {?} prevState\n     * @return {?}\n     */\n    function createRouterState(routeReuseStrategy, curr, prevState) {\n        var /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n        return new RouterState(root, curr);\n    }\n    /**\n     * @param {?} routeReuseStrategy\n     * @param {?} curr\n     * @param {?=} prevState\n     * @return {?}\n     */\n    function createNode(routeReuseStrategy, curr, prevState) {\n        // reuse an activated route that is currently displayed on the screen\n        if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n            var /** @type {?} */ value = prevState.value;\n            value._futureSnapshot = curr.value;\n            var /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n            return new TreeNode(value, children);\n        }\n        else if (routeReuseStrategy.retrieve(curr.value)) {\n            var /** @type {?} */ tree = ((routeReuseStrategy.retrieve(curr.value))).route;\n            setFutureSnapshotsOfActivatedRoutes(curr, tree);\n            return tree;\n        }\n        else {\n            var /** @type {?} */ value = createActivatedRoute(curr.value);\n            var /** @type {?} */ children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });\n            return new TreeNode(value, children);\n        }\n    }\n    /**\n     * @param {?} curr\n     * @param {?} result\n     * @return {?}\n     */\n    function setFutureSnapshotsOfActivatedRoutes(curr, result) {\n        if (curr.value.routeConfig !== result.value.routeConfig) {\n            throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n        }\n        if (curr.children.length !== result.children.length) {\n            throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n        }\n        result.value._futureSnapshot = curr.value;\n        for (var /** @type {?} */ i = 0; i < curr.children.length; ++i) {\n            setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n        }\n    }\n    /**\n     * @param {?} routeReuseStrategy\n     * @param {?} curr\n     * @param {?} prevState\n     * @return {?}\n     */\n    function createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n        return curr.children.map(function (child) {\n            for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {\n                var p = _a[_i];\n                if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n                    return createNode(routeReuseStrategy, child, p);\n                }\n            }\n            return createNode(routeReuseStrategy, child);\n        });\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    function createActivatedRoute(c) {\n        return new ActivatedRoute(new rxjs_BehaviorSubject.BehaviorSubject(c.url), new rxjs_BehaviorSubject.BehaviorSubject(c.params), new rxjs_BehaviorSubject.BehaviorSubject(c.queryParams), new rxjs_BehaviorSubject.BehaviorSubject(c.fragment), new rxjs_BehaviorSubject.BehaviorSubject(c.data), c.outlet, c.component, c);\n    }\n\n    /**\n     * @param {?} route\n     * @param {?} urlTree\n     * @param {?} commands\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    function createUrlTree(route, urlTree, commands, queryParams, fragment) {\n        if (commands.length === 0) {\n            return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n        }\n        var /** @type {?} */ nav = computeNavigation(commands);\n        if (nav.toRoot()) {\n            return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n        }\n        var /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\n        var /** @type {?} */ segmentGroup = startingPosition.processChildren ?\n            updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n            updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n        return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n    }\n    /**\n     * @param {?} command\n     * @return {?}\n     */\n    function isMatrixParams(command) {\n        return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n    }\n    /**\n     * @param {?} oldSegmentGroup\n     * @param {?} newSegmentGroup\n     * @param {?} urlTree\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\n        if (urlTree.root === oldSegmentGroup) {\n            return new UrlTree(newSegmentGroup, stringify(queryParams), fragment);\n        }\n        return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams), fragment);\n    }\n    /**\n     * @param {?} current\n     * @param {?} oldSegment\n     * @param {?} newSegment\n     * @return {?}\n     */\n    function replaceSegment(current, oldSegment, newSegment) {\n        var /** @type {?} */ children = {};\n        forEach(current.children, function (c, outletName) {\n            if (c === oldSegment) {\n                children[outletName] = newSegment;\n            }\n            else {\n                children[outletName] = replaceSegment(c, oldSegment, newSegment);\n            }\n        });\n        return new UrlSegmentGroup(current.segments, children);\n    }\n    var Navigation = (function () {\n        /**\n         * @param {?} isAbsolute\n         * @param {?} numberOfDoubleDots\n         * @param {?} commands\n         */\n        function Navigation(isAbsolute, numberOfDoubleDots, commands) {\n            this.isAbsolute = isAbsolute;\n            this.numberOfDoubleDots = numberOfDoubleDots;\n            this.commands = commands;\n            if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n                throw new Error('Root segment cannot have matrix parameters');\n            }\n            var cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });\n            if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n                throw new Error('{outlets:{}} has to be the last command');\n            }\n        }\n        /**\n         * @return {?}\n         */\n        Navigation.prototype.toRoot = function () {\n            return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n        };\n        return Navigation;\n    }());\n    /**\n     * Transforms commands to a normalized `Navigation`\n     * @param {?} commands\n     * @return {?}\n     */\n    function computeNavigation(commands) {\n        if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n            return new Navigation(true, 0, commands);\n        }\n        var /** @type {?} */ numberOfDoubleDots = 0;\n        var /** @type {?} */ isAbsolute = false;\n        var /** @type {?} */ res = commands.reduce(function (res, cmd, cmdIdx) {\n            if (typeof cmd === 'object' && cmd != null) {\n                if (cmd.outlets) {\n                    var /** @type {?} */ outlets_1 = {};\n                    forEach(cmd.outlets, function (commands, name) {\n                        outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;\n                    });\n                    return res.concat([{ outlets: outlets_1 }]);\n                }\n                if (cmd.segmentPath) {\n                    return res.concat([cmd.segmentPath]);\n                }\n            }\n            if (!(typeof cmd === 'string')) {\n                return res.concat([cmd]);\n            }\n            if (cmdIdx === 0) {\n                cmd.split('/').forEach(function (urlPart, partIndex) {\n                    if (partIndex == 0 && urlPart === '.') {\n                    }\n                    else if (partIndex == 0 && urlPart === '') {\n                        isAbsolute = true;\n                    }\n                    else if (urlPart === '..') {\n                        numberOfDoubleDots++;\n                    }\n                    else if (urlPart != '') {\n                        res.push(urlPart);\n                    }\n                });\n                return res;\n            }\n            return res.concat([cmd]);\n        }, []);\n        return new Navigation(isAbsolute, numberOfDoubleDots, res);\n    }\n    var Position = (function () {\n        /**\n         * @param {?} segmentGroup\n         * @param {?} processChildren\n         * @param {?} index\n         */\n        function Position(segmentGroup, processChildren, index) {\n            this.segmentGroup = segmentGroup;\n            this.processChildren = processChildren;\n            this.index = index;\n        }\n        return Position;\n    }());\n    /**\n     * @param {?} nav\n     * @param {?} tree\n     * @param {?} route\n     * @return {?}\n     */\n    function findStartingPosition(nav, tree, route) {\n        if (nav.isAbsolute) {\n            return new Position(tree.root, true, 0);\n        }\n        if (route.snapshot._lastPathIndex === -1) {\n            return new Position(route.snapshot._urlSegment, true, 0);\n        }\n        var /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n        var /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\n        return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n    }\n    /**\n     * @param {?} group\n     * @param {?} index\n     * @param {?} numberOfDoubleDots\n     * @return {?}\n     */\n    function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n        var /** @type {?} */ g = group;\n        var /** @type {?} */ ci = index;\n        var /** @type {?} */ dd = numberOfDoubleDots;\n        while (dd > ci) {\n            dd -= ci;\n            g = g.parent;\n            if (!g) {\n                throw new Error('Invalid number of \\'../\\'');\n            }\n            ci = g.segments.length;\n        }\n        return new Position(g, false, ci - dd);\n    }\n    /**\n     * @param {?} command\n     * @return {?}\n     */\n    function getPath(command) {\n        if (typeof command === 'object' && command != null && command.outlets) {\n            return command.outlets[PRIMARY_OUTLET];\n        }\n        return \"\" + command;\n    }\n    /**\n     * @param {?} commands\n     * @return {?}\n     */\n    function getOutlets(commands) {\n        if (!(typeof commands[0] === 'object'))\n            return (_a = {}, _a[PRIMARY_OUTLET] = commands, _a);\n        if (commands[0].outlets === undefined)\n            return (_b = {}, _b[PRIMARY_OUTLET] = commands, _b);\n        return commands[0].outlets;\n        var _a, _b;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} startIndex\n     * @param {?} commands\n     * @return {?}\n     */\n    function updateSegmentGroup(segmentGroup, startIndex, commands) {\n        if (!segmentGroup) {\n            segmentGroup = new UrlSegmentGroup([], {});\n        }\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n        }\n        var /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\n        var /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\n        if (m.match && m.pathIndex < segmentGroup.segments.length) {\n            var /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n            g.children[PRIMARY_OUTLET] =\n                new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n            return updateSegmentGroupChildren(g, 0, slicedCommands);\n        }\n        else if (m.match && slicedCommands.length === 0) {\n            return new UrlSegmentGroup(segmentGroup.segments, {});\n        }\n        else if (m.match && !segmentGroup.hasChildren()) {\n            return createNewSegmentGroup(segmentGroup, startIndex, commands);\n        }\n        else if (m.match) {\n            return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n        }\n        else {\n            return createNewSegmentGroup(segmentGroup, startIndex, commands);\n        }\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} startIndex\n     * @param {?} commands\n     * @return {?}\n     */\n    function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n        if (commands.length === 0) {\n            return new UrlSegmentGroup(segmentGroup.segments, {});\n        }\n        else {\n            var /** @type {?} */ outlets_2 = getOutlets(commands);\n            var /** @type {?} */ children_1 = {};\n            forEach(outlets_2, function (commands, outlet) {\n                if (commands !== null) {\n                    children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n                }\n            });\n            forEach(segmentGroup.children, function (child, childOutlet) {\n                if (outlets_2[childOutlet] === undefined) {\n                    children_1[childOutlet] = child;\n                }\n            });\n            return new UrlSegmentGroup(segmentGroup.segments, children_1);\n        }\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} startIndex\n     * @param {?} commands\n     * @return {?}\n     */\n    function prefixedWith(segmentGroup, startIndex, commands) {\n        var /** @type {?} */ currentCommandIndex = 0;\n        var /** @type {?} */ currentPathIndex = startIndex;\n        var /** @type {?} */ noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\n        while (currentPathIndex < segmentGroup.segments.length) {\n            if (currentCommandIndex >= commands.length)\n                return noMatch;\n            var /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\n            var /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\n            var /** @type {?} */ next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n            if (currentPathIndex > 0 && curr === undefined)\n                break;\n            if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n                if (!compare(curr, next, path))\n                    return noMatch;\n                currentCommandIndex += 2;\n            }\n            else {\n                if (!compare(curr, {}, path))\n                    return noMatch;\n                currentCommandIndex++;\n            }\n            currentPathIndex++;\n        }\n        return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} startIndex\n     * @param {?} commands\n     * @return {?}\n     */\n    function createNewSegmentGroup(segmentGroup, startIndex, commands) {\n        var /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\n        var /** @type {?} */ i = 0;\n        while (i < commands.length) {\n            if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n                var /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\n                return new UrlSegmentGroup(paths, children);\n            }\n            // if we start with an object literal, we need to reuse the path part from the segment\n            if (i === 0 && isMatrixParams(commands[0])) {\n                var /** @type {?} */ p = segmentGroup.segments[startIndex];\n                paths.push(new UrlSegment(p.path, commands[0]));\n                i++;\n                continue;\n            }\n            var /** @type {?} */ curr = getPath(commands[i]);\n            var /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\n            if (curr && next && isMatrixParams(next)) {\n                paths.push(new UrlSegment(curr, stringify(next)));\n                i += 2;\n            }\n            else {\n                paths.push(new UrlSegment(curr, {}));\n                i++;\n            }\n        }\n        return new UrlSegmentGroup(paths, {});\n    }\n    /**\n     * @param {?} outlets\n     * @return {?}\n     */\n    function createNewSegmentChildren(outlets) {\n        var /** @type {?} */ children = {};\n        forEach(outlets, function (commands, outlet) {\n            if (commands !== null) {\n                children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n            }\n        });\n        return children;\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    function stringify(params) {\n        var /** @type {?} */ res = {};\n        forEach(params, function (v, k) { return res[k] = \"\" + v; });\n        return res;\n    }\n    /**\n     * @param {?} path\n     * @param {?} params\n     * @param {?} segment\n     * @return {?}\n     */\n    function compare(path, params, segment) {\n        return path == segment.path && shallowEqual(params, segment.parameters);\n    }\n\n    var NoMatch$1 = (function () {\n        function NoMatch() {\n        }\n        return NoMatch;\n    }());\n    /**\n     * @param {?} rootComponentType\n     * @param {?} config\n     * @param {?} urlTree\n     * @param {?} url\n     * @return {?}\n     */\n    function recognize(rootComponentType, config, urlTree, url) {\n        return new Recognizer(rootComponentType, config, urlTree, url).recognize();\n    }\n    var Recognizer = (function () {\n        /**\n         * @param {?} rootComponentType\n         * @param {?} config\n         * @param {?} urlTree\n         * @param {?} url\n         */\n        function Recognizer(rootComponentType, config, urlTree, url) {\n            this.rootComponentType = rootComponentType;\n            this.config = config;\n            this.urlTree = urlTree;\n            this.url = url;\n        }\n        /**\n         * @return {?}\n         */\n        Recognizer.prototype.recognize = function () {\n            try {\n                var /** @type {?} */ rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;\n                var /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n                var /** @type {?} */ root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n                var /** @type {?} */ rootNode = new TreeNode(root, children);\n                var /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\n                this.inheriteParamsAndData(routeState._root);\n                return rxjs_observable_of.of(routeState);\n            }\n            catch (e) {\n                return new rxjs_Observable.Observable(function (obs) { return obs.error(e); });\n            }\n        };\n        /**\n         * @param {?} routeNode\n         * @return {?}\n         */\n        Recognizer.prototype.inheriteParamsAndData = function (routeNode) {\n            var _this = this;\n            var /** @type {?} */ route = routeNode.value;\n            var /** @type {?} */ i = inheritedParamsDataResolve(route);\n            route.params = Object.freeze(i.params);\n            route.data = Object.freeze(i.data);\n            routeNode.children.forEach(function (n) { return _this.inheriteParamsAndData(n); });\n        };\n        /**\n         * @param {?} config\n         * @param {?} segmentGroup\n         * @param {?} outlet\n         * @return {?}\n         */\n        Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {\n            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n                return this.processChildren(config, segmentGroup);\n            }\n            else {\n                return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n            }\n        };\n        /**\n         * @param {?} config\n         * @param {?} segmentGroup\n         * @return {?}\n         */\n        Recognizer.prototype.processChildren = function (config, segmentGroup) {\n            var _this = this;\n            var /** @type {?} */ children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });\n            checkOutletNameUniqueness(children);\n            sortActivatedRouteSnapshots(children);\n            return children;\n        };\n        /**\n         * @param {?} config\n         * @param {?} segmentGroup\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {\n            for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {\n                var r = config_1[_i];\n                try {\n                    return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n                }\n                catch (e) {\n                    if (!(e instanceof NoMatch$1))\n                        throw e;\n                }\n            }\n            if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                return [];\n            }\n            else {\n                throw new NoMatch$1();\n            }\n        };\n        /**\n         * @param {?} segmentGroup\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {\n            return segments.length === 0 && !segmentGroup.children[outlet];\n        };\n        /**\n         * @param {?} route\n         * @param {?} rawSegment\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {\n            if (route.redirectTo)\n                throw new NoMatch$1();\n            if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet)\n                throw new NoMatch$1();\n            if (route.path === '**') {\n                var /** @type {?} */ params = segments.length > 0 ? last(segments).parameters : {};\n                var /** @type {?} */ snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n                return [new TreeNode(snapshot_1, [])];\n            }\n            var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;\n            var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n            var /** @type {?} */ childConfig = getChildConfig(route);\n            var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;\n            var /** @type {?} */ snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                var /** @type {?} */ children = this.processChildren(childConfig, segmentGroup);\n                return [new TreeNode(snapshot, children)];\n            }\n            else if (childConfig.length === 0 && slicedSegments.length === 0) {\n                return [new TreeNode(snapshot, [])];\n            }\n            else {\n                var /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n                return [new TreeNode(snapshot, children)];\n            }\n        };\n        return Recognizer;\n    }());\n    /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    function sortActivatedRouteSnapshots(nodes) {\n        nodes.sort(function (a, b) {\n            if (a.value.outlet === PRIMARY_OUTLET)\n                return -1;\n            if (b.value.outlet === PRIMARY_OUTLET)\n                return 1;\n            return a.value.outlet.localeCompare(b.value.outlet);\n        });\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function getChildConfig(route) {\n        if (route.children) {\n            return route.children;\n        }\n        else if (route.loadChildren) {\n            return ((route))._loadedConfig.routes;\n        }\n        else {\n            return [];\n        }\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    function match$1(segmentGroup, route, segments) {\n        if (route.path === '') {\n            if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n                throw new NoMatch$1();\n            }\n            else {\n                return { consumedSegments: [], lastChild: 0, parameters: {} };\n            }\n        }\n        var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n        var /** @type {?} */ res = matcher(segments, segmentGroup, route);\n        if (!res)\n            throw new NoMatch$1();\n        var /** @type {?} */ posParams = {};\n        forEach(res.posParams, function (v, k) { posParams[k] = v.path; });\n        var /** @type {?} */ parameters = merge(posParams, res.consumed[res.consumed.length - 1].parameters);\n        return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };\n    }\n    /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    function checkOutletNameUniqueness(nodes) {\n        var /** @type {?} */ names = {};\n        nodes.forEach(function (n) {\n            var /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\n            if (routeWithSameOutletName) {\n                var /** @type {?} */ p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');\n                var /** @type {?} */ c = n.value.url.map(function (s) { return s.toString(); }).join('/');\n                throw new Error(\"Two segments cannot have the same outlet name: '\" + p + \"' and '\" + c + \"'.\");\n            }\n            names[n.value.outlet] = n.value;\n        });\n    }\n    /**\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    function getSourceSegmentGroup(segmentGroup) {\n        var /** @type {?} */ s = segmentGroup;\n        while (s._sourceSegment) {\n            s = s._sourceSegment;\n        }\n        return s;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    function getPathIndexShift(segmentGroup) {\n        var /** @type {?} */ s = segmentGroup;\n        var /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n        while (s._sourceSegment) {\n            s = s._sourceSegment;\n            res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n        }\n        return res - 1;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} consumedSegments\n     * @param {?} slicedSegments\n     * @param {?} config\n     * @return {?}\n     */\n    function split$1(segmentGroup, consumedSegments, slicedSegments, config) {\n        if (slicedSegments.length > 0 &&\n            containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n            var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            return { segmentGroup: s, slicedSegments: [] };\n        }\n        else if (slicedSegments.length === 0 &&\n            containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n            var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            return { segmentGroup: s, slicedSegments: slicedSegments };\n        }\n        else {\n            var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            return { segmentGroup: s, slicedSegments: slicedSegments };\n        }\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @param {?} children\n     * @return {?}\n     */\n    function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n        var /** @type {?} */ res = {};\n        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n            var r = routes_1[_i];\n            if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {\n                var /** @type {?} */ s = new UrlSegmentGroup([], {});\n                s._sourceSegment = segmentGroup;\n                s._segmentIndexShift = segmentGroup.segments.length;\n                res[getOutlet$2(r)] = s;\n            }\n        }\n        return merge(children, res);\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} consumedSegments\n     * @param {?} routes\n     * @param {?} primarySegment\n     * @return {?}\n     */\n    function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\n        var /** @type {?} */ res = {};\n        res[PRIMARY_OUTLET] = primarySegment;\n        primarySegment._sourceSegment = segmentGroup;\n        primarySegment._segmentIndexShift = consumedSegments.length;\n        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n            var r = routes_2[_i];\n            if (r.path === '' && getOutlet$2(r) !== PRIMARY_OUTLET) {\n                var /** @type {?} */ s = new UrlSegmentGroup([], {});\n                s._sourceSegment = segmentGroup;\n                s._segmentIndexShift = consumedSegments.length;\n                res[getOutlet$2(r)] = s;\n            }\n        }\n        return res;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @return {?}\n     */\n    function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n        return routes\n            .filter(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) &&\n            getOutlet$2(r) !== PRIMARY_OUTLET; })\n            .length > 0;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @return {?}\n     */\n    function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n        return routes.filter(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); }).length > 0;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} r\n     * @return {?}\n     */\n    function emptyPathMatch(segmentGroup, slicedSegments, r) {\n        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n            return false;\n        return r.path === '' && r.redirectTo === undefined;\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function getOutlet$2(route) {\n        return route.outlet ? route.outlet : PRIMARY_OUTLET;\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function getData(route) {\n        return route.data ? route.data : {};\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function getResolve(route) {\n        return route.resolve ? route.resolve : {};\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * \\@whatItDoes Contains all the router outlets created in a component.\n     *\n     * \\@stable\n     */\n    var RouterOutletMap = (function () {\n        function RouterOutletMap() {\n            /** @internal */\n            this._outlets = {};\n        }\n        /**\n         * Adds an outlet to this map.\n         * @param {?} name\n         * @param {?} outlet\n         * @return {?}\n         */\n        RouterOutletMap.prototype.registerOutlet = function (name, outlet) { this._outlets[name] = outlet; };\n        /**\n         * Removes an outlet from this map.\n         * @param {?} name\n         * @return {?}\n         */\n        RouterOutletMap.prototype.removeOutlet = function (name) { this._outlets[name] = undefined; };\n        return RouterOutletMap;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * \\@whatItDoes Provides a way to migrate Angular 1 applications to Angular 2.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var UrlHandlingStrategy = (function () {\n        function UrlHandlingStrategy() {\n        }\n        /**\n         * Tells the router if this URL should be processed.\n         *\n         * When it returns true, the router will execute the regular navigation.\n         * When it returns false, the router will set the router state to an empty state.\n         * As a result, all the active components will be destroyed.\n         *\n         * @abstract\n         * @param {?} url\n         * @return {?}\n         */\n        UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };\n        /**\n         * Extracts the part of the URL that should be handled by the router.\n         * The rest of the URL will remain untouched.\n         * @abstract\n         * @param {?} url\n         * @return {?}\n         */\n        UrlHandlingStrategy.prototype.extract = function (url) { };\n        /**\n         * Merges the URL fragment with the rest of the URL.\n         * @abstract\n         * @param {?} newUrlPart\n         * @param {?} rawUrl\n         * @return {?}\n         */\n        UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };\n        return UrlHandlingStrategy;\n    }());\n    /**\n     * \\@experimental\n     */\n    var DefaultUrlHandlingStrategy = (function () {\n        function DefaultUrlHandlingStrategy() {\n        }\n        /**\n         * @param {?} url\n         * @return {?}\n         */\n        DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };\n        /**\n         * @param {?} url\n         * @return {?}\n         */\n        DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };\n        /**\n         * @param {?} newUrlPart\n         * @param {?} wholeUrl\n         * @return {?}\n         */\n        DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };\n        return DefaultUrlHandlingStrategy;\n    }());\n\n    /**\n     * \\@whatItDoes Represents an event triggered when a navigation starts.\n     *\n     * \\@stable\n     */\n    var NavigationStart = (function () {\n        /**\n         * @param {?} id\n         * @param {?} url\n         */\n        function NavigationStart(id, url) {\n            this.id = id;\n            this.url = url;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        NavigationStart.prototype.toString = function () { return \"NavigationStart(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n        return NavigationStart;\n    }());\n    /**\n     * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n     *\n     * \\@stable\n     */\n    var NavigationEnd = (function () {\n        /**\n         * @param {?} id\n         * @param {?} url\n         * @param {?} urlAfterRedirects\n         */\n        function NavigationEnd(id, url, urlAfterRedirects) {\n            this.id = id;\n            this.url = url;\n            this.urlAfterRedirects = urlAfterRedirects;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        NavigationEnd.prototype.toString = function () {\n            return \"NavigationEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"')\";\n        };\n        return NavigationEnd;\n    }());\n    /**\n     * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n     *\n     * \\@stable\n     */\n    var NavigationCancel = (function () {\n        /**\n         * @param {?} id\n         * @param {?} url\n         * @param {?} reason\n         */\n        function NavigationCancel(id, url, reason) {\n            this.id = id;\n            this.url = url;\n            this.reason = reason;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        NavigationCancel.prototype.toString = function () { return \"NavigationCancel(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n        return NavigationCancel;\n    }());\n    /**\n     * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n     *\n     * \\@stable\n     */\n    var NavigationError = (function () {\n        /**\n         * @param {?} id\n         * @param {?} url\n         * @param {?} error\n         */\n        function NavigationError(id, url, error) {\n            this.id = id;\n            this.url = url;\n            this.error = error;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        NavigationError.prototype.toString = function () {\n            return \"NavigationError(id: \" + this.id + \", url: '\" + this.url + \"', error: \" + this.error + \")\";\n        };\n        return NavigationError;\n    }());\n    /**\n     * \\@whatItDoes Represents an event triggered when routes are recognized.\n     *\n     * \\@stable\n     */\n    var RoutesRecognized = (function () {\n        /**\n         * @param {?} id\n         * @param {?} url\n         * @param {?} urlAfterRedirects\n         * @param {?} state\n         */\n        function RoutesRecognized(id, url, urlAfterRedirects, state) {\n            this.id = id;\n            this.url = url;\n            this.urlAfterRedirects = urlAfterRedirects;\n            this.state = state;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        RoutesRecognized.prototype.toString = function () {\n            return \"RoutesRecognized(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n        };\n        return RoutesRecognized;\n    }());\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    function defaultErrorHandler(error) {\n        throw error;\n    }\n    /**\n     * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n     */\n    var DefaultRouteReuseStrategy = (function () {\n        function DefaultRouteReuseStrategy() {\n        }\n        /**\n         * @param {?} route\n         * @return {?}\n         */\n        DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) { return false; };\n        /**\n         * @param {?} route\n         * @param {?} detachedTree\n         * @return {?}\n         */\n        DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) { };\n        /**\n         * @param {?} route\n         * @return {?}\n         */\n        DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) { return false; };\n        /**\n         * @param {?} route\n         * @return {?}\n         */\n        DefaultRouteReuseStrategy.prototype.retrieve = function (route) { return null; };\n        /**\n         * @param {?} future\n         * @param {?} curr\n         * @return {?}\n         */\n        DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {\n            return future.routeConfig === curr.routeConfig;\n        };\n        return DefaultRouteReuseStrategy;\n    }());\n    /**\n     * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n     *\n     * See {\\@link Routes} for more details and examples.\n     *\n     * \\@ngModule RouterModule\n     *\n     * \\@stable\n     */\n    var Router = (function () {\n        /**\n         * @param {?} rootComponentType\n         * @param {?} urlSerializer\n         * @param {?} outletMap\n         * @param {?} location\n         * @param {?} injector\n         * @param {?} loader\n         * @param {?} compiler\n         * @param {?} config\n         */\n        function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {\n            this.rootComponentType = rootComponentType;\n            this.urlSerializer = urlSerializer;\n            this.outletMap = outletMap;\n            this.location = location;\n            this.injector = injector;\n            this.config = config;\n            this.navigations = new rxjs_BehaviorSubject.BehaviorSubject(null);\n            this.routerEvents = new rxjs_Subject.Subject();\n            this.navigationId = 0;\n            /**\n             * Error handler that is invoked when a navigation errors.\n             *\n             * See {@link ErrorHandler} for more information.\n             */\n            this.errorHandler = defaultErrorHandler;\n            /**\n             * Indicates if at least one navigation happened.\n             */\n            this.navigated = false;\n            /**\n             * Extracts and merges URLs. Used for Angular 1 to Angular 2 migrations.\n             */\n            this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\n            this.routeReuseStrategy = new DefaultRouteReuseStrategy();\n            this.resetConfig(config);\n            this.currentUrlTree = createEmptyUrlTree();\n            this.rawUrlTree = this.currentUrlTree;\n            this.configLoader = new RouterConfigLoader(loader, compiler);\n            this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n            this.processNavigations();\n        }\n        /**\n         * \\@internal\n         * TODO: this should be removed once the constructor of the router made internal\n         * @param {?} rootComponentType\n         * @return {?}\n         */\n        Router.prototype.resetRootComponentType = function (rootComponentType) {\n            this.rootComponentType = rootComponentType;\n            // TODO: vsavkin router 4.0 should make the root component set to null\n            // this will simplify the lifecycle of the router.\n            this.currentRouterState.root.component = this.rootComponentType;\n        };\n        /**\n         * Sets up the location change listener and performs the initial navigation.\n         * @return {?}\n         */\n        Router.prototype.initialNavigation = function () {\n            this.setUpLocationChangeListener();\n            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\n        };\n        /**\n         * Sets up the location change listener.\n         * @return {?}\n         */\n        Router.prototype.setUpLocationChangeListener = function () {\n            var _this = this;\n            // Zone.current.wrap is needed because of the issue with RxJS scheduler,\n            // which does not work properly with zone.js in IE and Safari\n            if (!this.locationSubscription) {\n                this.locationSubscription = (this.location.subscribe(Zone.current.wrap(function (change) {\n                    var /** @type {?} */ rawUrlTree = _this.urlSerializer.parse(change['url']);\n                    var /** @type {?} */ source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n                    setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, { replaceUrl: true }); }, 0);\n                })));\n            }\n        };\n        Object.defineProperty(Router.prototype, \"routerState\", {\n            /**\n             * The current route state\n             * @return {?}\n             */\n            get: function () { return this.currentRouterState; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Router.prototype, \"url\", {\n            /**\n             * The current url\n             * @return {?}\n             */\n            get: function () { return this.serializeUrl(this.currentUrlTree); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Router.prototype, \"events\", {\n            /**\n             * An observable of router events\n             * @return {?}\n             */\n            get: function () { return this.routerEvents; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Resets the configuration used for navigation and generating links.\n         *\n         * ### Usage\n         *\n         * ```\n         * router.resetConfig([\n         *  { path: 'team/:id', component: TeamCmp, children: [\n         *    { path: 'simple', component: SimpleCmp },\n         *    { path: 'user/:name', component: UserCmp }\n         *  ]}\n         * ]);\n         * ```\n         * @param {?} config\n         * @return {?}\n         */\n        Router.prototype.resetConfig = function (config) {\n            validateConfig(config);\n            this.config = config;\n        };\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        Router.prototype.ngOnDestroy = function () { this.dispose(); };\n        /**\n         * Disposes of the router\n         * @return {?}\n         */\n        Router.prototype.dispose = function () {\n            if (this.locationSubscription) {\n                this.locationSubscription.unsubscribe();\n                this.locationSubscription = null;\n            }\n        };\n        /**\n         * Applies an array of commands to the current url tree and creates a new url tree.\n         *\n         * When given an activate route, applies the given commands starting from the route.\n         * When not given a route, applies the given command starting from the root.\n         *\n         * ### Usage\n         *\n         * ```\n         * // create /team/33/user/11\n         * router.createUrlTree(['/team', 33, 'user', 11]);\n         *\n         * // create /team/33;expand=true/user/11\n         * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n         *\n         * // you can collapse static segments like this (this works only with the first passed-in value):\n         * router.createUrlTree(['/team/33/user', userId]);\n         *\n         * // If the first segment can contain slashes, and you do not want the router to split it, you\n         * // can do the following:\n         *\n         * router.createUrlTree([{segmentPath: '/one/two'}]);\n         *\n         * // create /team/33/(user/11//right:chat)\n         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n         *\n         * // remove the right secondary node\n         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n         *\n         * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n         *\n         * // navigate to /team/33/user/11/details\n         * router.createUrlTree(['details'], {relativeTo: route});\n         *\n         * // navigate to /team/33/user/22\n         * router.createUrlTree(['../22'], {relativeTo: route});\n         *\n         * // navigate to /team/44/user/22\n         * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n         * ```\n         * @param {?} commands\n         * @param {?=} __1\n         * @return {?}\n         */\n        Router.prototype.createUrlTree = function (commands, _a) {\n            var _b = _a === void 0 ? {} : _a, relativeTo = _b.relativeTo, queryParams = _b.queryParams, fragment = _b.fragment, preserveQueryParams = _b.preserveQueryParams, preserveFragment = _b.preserveFragment;\n            var /** @type {?} */ a = relativeTo || this.routerState.root;\n            var /** @type {?} */ q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;\n            var /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n            return createUrlTree(a, this.currentUrlTree, commands, q, f);\n        };\n        /**\n         * Navigate based on the provided url. This navigation is always absolute.\n         *\n         * Returns a promise that:\n         * - resolves to 'true' when navigation succeeds,\n         * - resolves to 'false' when navigation fails,\n         * - is rejected when an error happens.\n         *\n         * ### Usage\n         *\n         * ```\n         * router.navigateByUrl(\"/team/33/user/11\");\n         *\n         * // Navigate without updating the URL\n         * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n         * ```\n         *\n         * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n         * and does not apply any delta to the current one.\n         * @param {?} url\n         * @param {?=} extras\n         * @return {?}\n         */\n        Router.prototype.navigateByUrl = function (url, extras) {\n            if (extras === void 0) { extras = { skipLocationChange: false }; }\n            if (url instanceof UrlTree) {\n                return this.scheduleNavigation(this.urlHandlingStrategy.merge(url, this.rawUrlTree), 'imperative', extras);\n            }\n            var /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n            return this.scheduleNavigation(this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree), 'imperative', extras);\n        };\n        /**\n         * Navigate based on the provided array of commands and a starting point.\n         * If no starting route is provided, the navigation is absolute.\n         *\n         * Returns a promise that:\n         * - resolves to 'true' when navigation succeeds,\n         * - resolves to 'false' when navigation fails,\n         * - is rejected when an error happens.\n         *\n         * ### Usage\n         *\n         * ```\n         * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n         *\n         * // Navigate without updating the URL\n         * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n         * ```\n         *\n         * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n         * URL.\n         * @param {?} commands\n         * @param {?=} extras\n         * @return {?}\n         */\n        Router.prototype.navigate = function (commands, extras) {\n            if (extras === void 0) { extras = { skipLocationChange: false }; }\n            validateCommands(commands);\n            if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {\n                extras.queryParams = this.removeEmptyProps(extras.queryParams);\n            }\n            return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n        };\n        /**\n         * Serializes a {\\@link UrlTree} into a string\n         * @param {?} url\n         * @return {?}\n         */\n        Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };\n        /**\n         * Parses a string into a {\\@link UrlTree}\n         * @param {?} url\n         * @return {?}\n         */\n        Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };\n        /**\n         * Returns whether the url is activated\n         * @param {?} url\n         * @param {?} exact\n         * @return {?}\n         */\n        Router.prototype.isActive = function (url, exact) {\n            if (url instanceof UrlTree) {\n                return containsTree(this.currentUrlTree, url, exact);\n            }\n            else {\n                var /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n                return containsTree(this.currentUrlTree, urlTree, exact);\n            }\n        };\n        /**\n         * @param {?} params\n         * @return {?}\n         */\n        Router.prototype.removeEmptyProps = function (params) {\n            return Object.keys(params).reduce(function (result, key) {\n                var /** @type {?} */ value = params[key];\n                if (value !== null && value !== undefined) {\n                    result[key] = value;\n                }\n                return result;\n            }, {});\n        };\n        /**\n         * @return {?}\n         */\n        Router.prototype.processNavigations = function () {\n            var _this = this;\n            rxjs_operator_concatMap.concatMap\n                .call(this.navigations, function (nav) {\n                if (nav) {\n                    _this.executeScheduledNavigation(nav);\n                    // a failed navigation should not stop the router from processing\n                    // further navigations => the catch\n                    return nav.promise.catch(function () { });\n                }\n                else {\n                    return (rxjs_observable_of.of(null));\n                }\n            })\n                .subscribe(function () { });\n        };\n        /**\n         * @param {?} rawUrl\n         * @param {?} source\n         * @param {?} extras\n         * @return {?}\n         */\n        Router.prototype.scheduleNavigation = function (rawUrl, source, extras) {\n            var /** @type {?} */ lastNavigation = this.navigations.value;\n            // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n            // and that navigation results in 'replaceState' that leads to the same URL,\n            // we should skip those.\n            if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n                lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n                return null; // return value is not used\n            }\n            // Because of a bug in IE and Edge, the location class fires two events (popstate and\n            // hashchange)\n            // every single time. The second one should be ignored. Otherwise, the URL will flicker.\n            if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n                lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n                return null; // return value is not used\n            }\n            var /** @type {?} */ resolve = null;\n            var /** @type {?} */ reject = null;\n            var /** @type {?} */ promise = new Promise(function (res, rej) {\n                resolve = res;\n                reject = rej;\n            });\n            var /** @type {?} */ id = ++this.navigationId;\n            this.navigations.next({ id: id, source: source, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });\n            // Make sure that the error is propagated even though `processNavigations` catch\n            // handler does not rethrow\n            return promise.catch(function (e) { return Promise.reject(e); });\n        };\n        /**\n         * @param {?} __0\n         * @return {?}\n         */\n        Router.prototype.executeScheduledNavigation = function (_a) {\n            var _this = this;\n            var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;\n            var /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\n            var /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n            if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n                Promise.resolve()\n                    .then(function (_) { return _this.runNavigate(url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null); })\n                    .then(resolve, reject);\n            }\n            else if (urlTransition && this.rawUrlTree &&\n                this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n                Promise.resolve()\n                    .then(function (_) { return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot); })\n                    .then(resolve, reject);\n            }\n            else {\n                this.rawUrlTree = rawUrl;\n                resolve(null);\n            }\n        };\n        /**\n         * @param {?} url\n         * @param {?} rawUrl\n         * @param {?} shouldPreventPushState\n         * @param {?} shouldReplaceUrl\n         * @param {?} id\n         * @param {?} precreatedState\n         * @return {?}\n         */\n        Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {\n            var _this = this;\n            if (id !== this.navigationId) {\n                this.location.go(this.urlSerializer.serialize(this.currentUrlTree));\n                this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), \"Navigation ID \" + id + \" is not equal to the current navigation id \" + this.navigationId));\n                return Promise.resolve(false);\n            }\n            return new Promise(function (resolvePromise, rejectPromise) {\n                // create an observable of the url and route state snapshot\n                // this operation do not result in any side effects\n                var /** @type {?} */ urlAndSnapshot$;\n                if (!precreatedState) {\n                    var /** @type {?} */ redirectsApplied$ = applyRedirects(_this.injector, _this.configLoader, _this.urlSerializer, url, _this.config);\n                    urlAndSnapshot$ = rxjs_operator_mergeMap.mergeMap.call(redirectsApplied$, function (appliedUrl) {\n                        return rxjs_operator_map.map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {\n                            _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));\n                            return { appliedUrl: appliedUrl, snapshot: snapshot };\n                        });\n                    });\n                }\n                else {\n                    urlAndSnapshot$ = rxjs_observable_of.of({ appliedUrl: url, snapshot: precreatedState });\n                }\n                // run preactivation: guards and data resolvers\n                var /** @type {?} */ preActivation;\n                var /** @type {?} */ preactivationTraverse$ = rxjs_operator_map.map.call(urlAndSnapshot$, function (_a) {\n                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;\n                    preActivation =\n                        new PreActivation(snapshot, _this.currentRouterState.snapshot, _this.injector);\n                    preActivation.traverse(_this.outletMap);\n                    return { appliedUrl: appliedUrl, snapshot: snapshot };\n                });\n                var /** @type {?} */ preactivationCheckGuards = rxjs_operator_mergeMap.mergeMap.call(preactivationTraverse$, function (_a) {\n                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;\n                    if (_this.navigationId !== id)\n                        return rxjs_observable_of.of(false);\n                    return rxjs_operator_map.map.call(preActivation.checkGuards(), function (shouldActivate) {\n                        return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };\n                    });\n                });\n                var /** @type {?} */ preactivationResolveData$ = rxjs_operator_mergeMap.mergeMap.call(preactivationCheckGuards, function (p) {\n                    if (_this.navigationId !== id)\n                        return rxjs_observable_of.of(false);\n                    if (p.shouldActivate) {\n                        return rxjs_operator_map.map.call(preActivation.resolveData(), function () { return p; });\n                    }\n                    else {\n                        return rxjs_observable_of.of(p);\n                    }\n                });\n                // create router state\n                // this operation has side effects => route state is being affected\n                var /** @type {?} */ routerState$ = rxjs_operator_map.map.call(preactivationResolveData$, function (_a) {\n                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;\n                    if (shouldActivate) {\n                        var /** @type {?} */ state = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);\n                        return { appliedUrl: appliedUrl, state: state, shouldActivate: shouldActivate };\n                    }\n                    else {\n                        return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };\n                    }\n                });\n                // applied the new router state\n                // this operation has side effects\n                var /** @type {?} */ navigationIsSuccessful;\n                var /** @type {?} */ storedState = _this.currentRouterState;\n                var /** @type {?} */ storedUrl = _this.currentUrlTree;\n                routerState$\n                    .forEach(function (_a) {\n                    var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;\n                    if (!shouldActivate || id !== _this.navigationId) {\n                        navigationIsSuccessful = false;\n                        return;\n                    }\n                    _this.currentUrlTree = appliedUrl;\n                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);\n                    _this.currentRouterState = state;\n                    if (!shouldPreventPushState) {\n                        var /** @type {?} */ path = _this.urlSerializer.serialize(_this.rawUrlTree);\n                        if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {\n                            _this.location.replaceState(path);\n                        }\n                        else {\n                            _this.location.go(path);\n                        }\n                    }\n                    new ActivateRoutes(_this.routeReuseStrategy, state, storedState)\n                        .activate(_this.outletMap);\n                    navigationIsSuccessful = true;\n                })\n                    .then(function () {\n                    _this.navigated = true;\n                    if (navigationIsSuccessful) {\n                        _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));\n                        resolvePromise(true);\n                    }\n                    else {\n                        _this.resetUrlToCurrentUrlTree();\n                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));\n                        resolvePromise(false);\n                    }\n                }, function (e) {\n                    if (e instanceof NavigationCancelingError) {\n                        _this.resetUrlToCurrentUrlTree();\n                        _this.navigated = true;\n                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));\n                        resolvePromise(false);\n                    }\n                    else {\n                        _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));\n                        try {\n                            resolvePromise(_this.errorHandler(e));\n                        }\n                        catch (ee) {\n                            rejectPromise(ee);\n                        }\n                    }\n                    _this.currentRouterState = storedState;\n                    _this.currentUrlTree = storedUrl;\n                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);\n                    _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));\n                });\n            });\n        };\n        /**\n         * @return {?}\n         */\n        Router.prototype.resetUrlToCurrentUrlTree = function () {\n            var /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n            this.location.replaceState(path);\n        };\n        return Router;\n    }());\n    var CanActivate = (function () {\n        /**\n         * @param {?} path\n         */\n        function CanActivate(path) {\n            this.path = path;\n        }\n        Object.defineProperty(CanActivate.prototype, \"route\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.path[this.path.length - 1]; },\n            enumerable: true,\n            configurable: true\n        });\n        return CanActivate;\n    }());\n    var CanDeactivate = (function () {\n        /**\n         * @param {?} component\n         * @param {?} route\n         */\n        function CanDeactivate(component, route) {\n            this.component = component;\n            this.route = route;\n        }\n        return CanDeactivate;\n    }());\n    var PreActivation = (function () {\n        /**\n         * @param {?} future\n         * @param {?} curr\n         * @param {?} injector\n         */\n        function PreActivation(future, curr, injector) {\n            this.future = future;\n            this.curr = curr;\n            this.injector = injector;\n            this.checks = [];\n        }\n        /**\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        PreActivation.prototype.traverse = function (parentOutletMap) {\n            var /** @type {?} */ futureRoot = this.future._root;\n            var /** @type {?} */ currRoot = this.curr ? this.curr._root : null;\n            this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);\n        };\n        /**\n         * @return {?}\n         */\n        PreActivation.prototype.checkGuards = function () {\n            var _this = this;\n            if (this.checks.length === 0)\n                return rxjs_observable_of.of(true);\n            var /** @type {?} */ checks$ = rxjs_observable_from.from(this.checks);\n            var /** @type {?} */ runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function (s) {\n                if (s instanceof CanActivate) {\n                    return andObservables(rxjs_observable_from.from([_this.runCanActivateChild(s.path), _this.runCanActivate(s.route)]));\n                }\n                else if (s instanceof CanDeactivate) {\n                    // workaround https://github.com/Microsoft/TypeScript/issues/7271\n                    var /** @type {?} */ s2 = (s);\n                    return _this.runCanDeactivate(s2.component, s2.route);\n                }\n                else {\n                    throw new Error('Cannot be reached');\n                }\n            });\n            return rxjs_operator_every.every.call(runningChecks$, function (result) { return result === true; });\n        };\n        /**\n         * @return {?}\n         */\n        PreActivation.prototype.resolveData = function () {\n            var _this = this;\n            if (this.checks.length === 0)\n                return rxjs_observable_of.of(null);\n            var /** @type {?} */ checks$ = rxjs_observable_from.from(this.checks);\n            var /** @type {?} */ runningChecks$ = rxjs_operator_concatMap.concatMap.call(checks$, function (s) {\n                if (s instanceof CanActivate) {\n                    return _this.runResolve(s.route);\n                }\n                else {\n                    return rxjs_observable_of.of(null);\n                }\n            });\n            return rxjs_operator_reduce.reduce.call(runningChecks$, function (_, __) { return _; });\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} outletMap\n         * @param {?} futurePath\n         * @return {?}\n         */\n        PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap, futurePath) {\n            var _this = this;\n            var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n            futureNode.children.forEach(function (c) {\n                _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));\n                delete prevChildren[c.value.outlet];\n            });\n            forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]); });\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} parentOutletMap\n         * @param {?} futurePath\n         * @return {?}\n         */\n        PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap, futurePath) {\n            var /** @type {?} */ future = futureNode.value;\n            var /** @type {?} */ curr = currNode ? currNode.value : null;\n            var /** @type {?} */ outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;\n            // reusing the node\n            if (curr && future._routeConfig === curr._routeConfig) {\n                if (!equalParamsAndUrlSegments(future, curr)) {\n                    this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));\n                }\n                else {\n                    // we need to set the data\n                    future.data = curr.data;\n                    future._resolvedData = curr._resolvedData;\n                }\n                // If we have a component, we need to go through an outlet.\n                if (future.component) {\n                    this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);\n                }\n                else {\n                    this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);\n                }\n            }\n            else {\n                if (curr) {\n                    this.deactiveRouteAndItsChildren(currNode, outlet);\n                }\n                this.checks.push(new CanActivate(futurePath));\n                // If we have a component, we need to go through an outlet.\n                if (future.component) {\n                    this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);\n                }\n                else {\n                    this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);\n                }\n            }\n        };\n        /**\n         * @param {?} route\n         * @param {?} outlet\n         * @return {?}\n         */\n        PreActivation.prototype.deactiveRouteAndItsChildren = function (route, outlet) {\n            var _this = this;\n            var /** @type {?} */ prevChildren = nodeChildrenAsMap(route);\n            var /** @type {?} */ r = route.value;\n            forEach(prevChildren, function (v, k) {\n                if (!r.component) {\n                    _this.deactiveRouteAndItsChildren(v, outlet);\n                }\n                else if (!!outlet) {\n                    _this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);\n                }\n                else {\n                    _this.deactiveRouteAndItsChildren(v, null);\n                }\n            });\n            if (!r.component) {\n                this.checks.push(new CanDeactivate(null, r));\n            }\n            else if (outlet && outlet.isActivated) {\n                this.checks.push(new CanDeactivate(outlet.component, r));\n            }\n            else {\n                this.checks.push(new CanDeactivate(null, r));\n            }\n        };\n        /**\n         * @param {?} future\n         * @return {?}\n         */\n        PreActivation.prototype.runCanActivate = function (future) {\n            var _this = this;\n            var /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;\n            if (!canActivate || canActivate.length === 0)\n                return rxjs_observable_of.of(true);\n            var /** @type {?} */ obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canActivate), function (c) {\n                var /** @type {?} */ guard = _this.getToken(c, future);\n                var /** @type {?} */ observable;\n                if (guard.canActivate) {\n                    observable = wrapIntoObservable(guard.canActivate(future, _this.future));\n                }\n                else {\n                    observable = wrapIntoObservable(guard(future, _this.future));\n                }\n                return rxjs_operator_first.first.call(observable);\n            });\n            return andObservables(obs);\n        };\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n        PreActivation.prototype.runCanActivateChild = function (path) {\n            var _this = this;\n            var /** @type {?} */ future = path[path.length - 1];\n            var /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)\n                .reverse()\n                .map(function (p) { return _this.extractCanActivateChild(p); })\n                .filter(function (_) { return _ !== null; });\n            return andObservables(rxjs_operator_map.map.call(rxjs_observable_from.from(canActivateChildGuards), function (d) {\n                var /** @type {?} */ obs = rxjs_operator_map.map.call(rxjs_observable_from.from(d.guards), function (c) {\n                    var /** @type {?} */ guard = _this.getToken(c, c.node);\n                    var /** @type {?} */ observable;\n                    if (guard.canActivateChild) {\n                        observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));\n                    }\n                    else {\n                        observable = wrapIntoObservable(guard(future, _this.future));\n                    }\n                    return rxjs_operator_first.first.call(observable);\n                });\n                return andObservables(obs);\n            }));\n        };\n        /**\n         * @param {?} p\n         * @return {?}\n         */\n        PreActivation.prototype.extractCanActivateChild = function (p) {\n            var /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;\n            if (!canActivateChild || canActivateChild.length === 0)\n                return null;\n            return { node: p, guards: canActivateChild };\n        };\n        /**\n         * @param {?} component\n         * @param {?} curr\n         * @return {?}\n         */\n        PreActivation.prototype.runCanDeactivate = function (component, curr) {\n            var _this = this;\n            var /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;\n            if (!canDeactivate || canDeactivate.length === 0)\n                return rxjs_observable_of.of(true);\n            var /** @type {?} */ canDeactivate$ = rxjs_operator_mergeMap.mergeMap.call(rxjs_observable_from.from(canDeactivate), function (c) {\n                var /** @type {?} */ guard = _this.getToken(c, curr);\n                var /** @type {?} */ observable;\n                if (guard.canDeactivate) {\n                    observable = wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));\n                }\n                else {\n                    observable = wrapIntoObservable(guard(component, curr, _this.curr));\n                }\n                return rxjs_operator_first.first.call(observable);\n            });\n            return rxjs_operator_every.every.call(canDeactivate$, function (result) { return result === true; });\n        };\n        /**\n         * @param {?} future\n         * @return {?}\n         */\n        PreActivation.prototype.runResolve = function (future) {\n            var /** @type {?} */ resolve = future._resolve;\n            return rxjs_operator_map.map.call(this.resolveNode(resolve, future), function (resolvedData) {\n                future._resolvedData = resolvedData;\n                future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);\n                return null;\n            });\n        };\n        /**\n         * @param {?} resolve\n         * @param {?} future\n         * @return {?}\n         */\n        PreActivation.prototype.resolveNode = function (resolve, future) {\n            var _this = this;\n            return waitForMap(resolve, function (k, v) {\n                var /** @type {?} */ resolver = _this.getToken(v, future);\n                return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) :\n                    wrapIntoObservable(resolver(future, _this.future));\n            });\n        };\n        /**\n         * @param {?} token\n         * @param {?} snapshot\n         * @return {?}\n         */\n        PreActivation.prototype.getToken = function (token, snapshot) {\n            var /** @type {?} */ config = closestLoadedConfig(snapshot);\n            var /** @type {?} */ injector = config ? config.injector : this.injector;\n            return injector.get(token);\n        };\n        return PreActivation;\n    }());\n    var ActivateRoutes = (function () {\n        /**\n         * @param {?} routeReuseStrategy\n         * @param {?} futureState\n         * @param {?} currState\n         */\n        function ActivateRoutes(routeReuseStrategy, futureState, currState) {\n            this.routeReuseStrategy = routeReuseStrategy;\n            this.futureState = futureState;\n            this.currState = currState;\n        }\n        /**\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.activate = function (parentOutletMap) {\n            var /** @type {?} */ futureRoot = this.futureState._root;\n            var /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\n            this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);\n            advanceActivatedRoute(this.futureState.root);\n            this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} outletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, outletMap) {\n            var _this = this;\n            var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n            futureNode.children.forEach(function (c) {\n                _this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);\n                delete prevChildren[c.value.outlet];\n            });\n            forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap); });\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} outletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {\n            var _this = this;\n            var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n            futureNode.children.forEach(function (c) { _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap); });\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentOutletMap) {\n            var /** @type {?} */ future = futureNode.value;\n            var /** @type {?} */ curr = currNode ? currNode.value : null;\n            // reusing the node\n            if (future === curr) {\n                // If we have a normal route, we need to go through an outlet.\n                if (future.component) {\n                    var /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n                    this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);\n                }\n                else {\n                    this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);\n                }\n            }\n            else {\n                if (curr) {\n                    this.deactiveRouteAndItsChildren(currNode, parentOutletMap);\n                }\n            }\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {\n            var /** @type {?} */ future = futureNode.value;\n            var /** @type {?} */ curr = currNode ? currNode.value : null;\n            // reusing the node\n            if (future === curr) {\n                // advance the route to push the parameters\n                advanceActivatedRoute(future);\n                // If we have a normal route, we need to go through an outlet.\n                if (future.component) {\n                    var /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n                    this.activateChildRoutes(futureNode, currNode, outlet.outletMap);\n                }\n                else {\n                    this.activateChildRoutes(futureNode, currNode, parentOutletMap);\n                }\n            }\n            else {\n                // if we have a normal route, we need to advance the route\n                // and place the component into the outlet. After that recurse.\n                if (future.component) {\n                    advanceActivatedRoute(future);\n                    var /** @type {?} */ outlet = getOutlet(parentOutletMap, futureNode.value);\n                    if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n                        var /** @type {?} */ stored = ((this.routeReuseStrategy.retrieve(future.snapshot)));\n                        this.routeReuseStrategy.store(future.snapshot, null);\n                        outlet.attach(stored.componentRef, stored.route.value);\n                        advanceActivatedRouteNodeAndItsChildren(stored.route);\n                    }\n                    else {\n                        var /** @type {?} */ outletMap = new RouterOutletMap();\n                        this.placeComponentIntoOutlet(outletMap, future, outlet);\n                        this.activateChildRoutes(futureNode, null, outletMap);\n                    }\n                }\n                else {\n                    advanceActivatedRoute(future);\n                    this.activateChildRoutes(futureNode, null, parentOutletMap);\n                }\n            }\n        };\n        /**\n         * @param {?} outletMap\n         * @param {?} future\n         * @param {?} outlet\n         * @return {?}\n         */\n        ActivateRoutes.prototype.placeComponentIntoOutlet = function (outletMap, future, outlet) {\n            var /** @type {?} */ resolved = ([{ provide: ActivatedRoute, useValue: future }, {\n                    provide: RouterOutletMap,\n                    useValue: outletMap\n                }]);\n            var /** @type {?} */ config = parentLoadedConfig(future.snapshot);\n            var /** @type {?} */ resolver = null;\n            var /** @type {?} */ injector = null;\n            if (config) {\n                injector = config.injectorFactory(outlet.locationInjector);\n                resolver = config.factoryResolver;\n                resolved.push({ provide: _angular_core.ComponentFactoryResolver, useValue: resolver });\n            }\n            else {\n                injector = outlet.locationInjector;\n                resolver = outlet.locationFactoryResolver;\n            }\n            outlet.activate(future, resolver, injector, _angular_core.ReflectiveInjector.resolve(resolved), outletMap);\n        };\n        /**\n         * @param {?} route\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.deactiveRouteAndItsChildren = function (route, parentOutletMap) {\n            if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n                this.detachAndStoreRouteSubtree(route, parentOutletMap);\n            }\n            else {\n                this.deactiveRouteAndOutlet(route, parentOutletMap);\n            }\n        };\n        /**\n         * @param {?} route\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentOutletMap) {\n            var /** @type {?} */ outlet = getOutlet(parentOutletMap, route.value);\n            var /** @type {?} */ componentRef = outlet.detach();\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route });\n        };\n        /**\n         * @param {?} route\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.deactiveRouteAndOutlet = function (route, parentOutletMap) {\n            var _this = this;\n            var /** @type {?} */ prevChildren = nodeChildrenAsMap(route);\n            var /** @type {?} */ outlet = null;\n            // getOutlet throws when cannot find the right outlet,\n            // which can happen if an outlet was in an NgIf and was removed\n            try {\n                outlet = getOutlet(parentOutletMap, route.value);\n            }\n            catch (e) {\n                return;\n            }\n            var /** @type {?} */ childOutletMap = outlet.outletMap;\n            forEach(prevChildren, function (v, k) {\n                if (route.value.component) {\n                    _this.deactiveRouteAndItsChildren(v, childOutletMap);\n                }\n                else {\n                    _this.deactiveRouteAndItsChildren(v, parentOutletMap);\n                }\n            });\n            if (outlet && outlet.isActivated) {\n                outlet.deactivate();\n            }\n        };\n        return ActivateRoutes;\n    }());\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function advanceActivatedRouteNodeAndItsChildren(node) {\n        advanceActivatedRoute(node.value);\n        node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n    }\n    /**\n     * @param {?} snapshot\n     * @return {?}\n     */\n    function parentLoadedConfig(snapshot) {\n        var /** @type {?} */ s = snapshot.parent;\n        while (s) {\n            var /** @type {?} */ c = s._routeConfig;\n            if (c && c._loadedConfig)\n                return c._loadedConfig;\n            if (c && c.component)\n                return null;\n            s = s.parent;\n        }\n        return null;\n    }\n    /**\n     * @param {?} snapshot\n     * @return {?}\n     */\n    function closestLoadedConfig(snapshot) {\n        if (!snapshot)\n            return null;\n        var /** @type {?} */ s = snapshot.parent;\n        while (s) {\n            var /** @type {?} */ c = s._routeConfig;\n            if (c && c._loadedConfig)\n                return c._loadedConfig;\n            s = s.parent;\n        }\n        return null;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function nodeChildrenAsMap(node) {\n        return node ? node.children.reduce(function (m, c) {\n            m[c.value.outlet] = c;\n            return m;\n        }, {}) : {};\n    }\n    /**\n     * @param {?} outletMap\n     * @param {?} route\n     * @return {?}\n     */\n    function getOutlet(outletMap, route) {\n        var /** @type {?} */ outlet = outletMap._outlets[route.outlet];\n        if (!outlet) {\n            var /** @type {?} */ componentName = ((route.component)).name;\n            if (route.outlet === PRIMARY_OUTLET) {\n                throw new Error(\"Cannot find primary outlet to load '\" + componentName + \"'\");\n            }\n            else {\n                throw new Error(\"Cannot find the outlet \" + route.outlet + \" to load '\" + componentName + \"'\");\n            }\n        }\n        return outlet;\n    }\n    /**\n     * @param {?} commands\n     * @return {?}\n     */\n    function validateCommands(commands) {\n        for (var /** @type {?} */ i = 0; i < commands.length; i++) {\n            var /** @type {?} */ cmd = commands[i];\n            if (cmd == null) {\n                throw new Error(\"The requested path contains \" + cmd + \" segment at index \" + i);\n            }\n        }\n    }\n\n    /**\n     * \\@whatItDoes Lets you link to specific parts of your app.\n     *\n     * \\@howToUse\n     *\n     * Consider the following route configuration:\n     * `[{ path: 'user/:name', component: UserCmp }]`\n     *\n     * When linking to this `user/:name` route, you can write:\n     * `<a routerLink='/user/bob'>link to user component</a>`\n     *\n     * \\@description\n     *\n     * The RouterLink directives let you link to specific parts of your app.\n     *\n     * When the link is static, you can use the directive as follows:\n     * `<a routerLink=\"/user/bob\">link to user component</a>`\n     *\n     * If you use dynamic values to generate the link, you can pass an array of path\n     * segments, followed by the params for each segment.\n     *\n     * For instance `['/team', teamId, 'user', userName, {details: true}]`\n     * means that we want to generate a link to `/team/11/user/bob;details=true`.\n     *\n     * Multiple static segments can be merged into one\n     * (e.g., `['/team/11/user', userName, {details: true}]`).\n     *\n     * The first segment name can be prepended with `/`, `./`, or `../`:\n     * * If the first segment begins with `/`, the router will look up the route from the root of the\n     *   app.\n     * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n     *   instead look in the children of the current activated route.\n     * * And if the first segment begins with `../`, the router will go up one level.\n     *\n     * You can set query params and fragment as follows:\n     *\n     * ```\n     * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n     *   link to user component\n     * </a>\n     * ```\n     * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n     *\n     * You can also tell the directive to preserve the current query params and fragment:\n     *\n     * ```\n     * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n     *   link to user component\n     * </a>\n     * ```\n     *\n     * The router link directive always treats the provided input as a delta to the current url.\n     *\n     * For instance, if the current url is `/user/(box//aux:team)`.\n     *\n     * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n     * `/user/(jim//aux:team)`.\n     *\n     * \\@selector ':not(a)[routerLink]'\n     * \\@ngModule RouterModule\n     *\n     * See {\\@link Router.createUrlTree} for more information.\n     *\n     * \\@stable\n     */\n    var RouterLink = (function () {\n        /**\n         * @param {?} router\n         * @param {?} route\n         */\n        function RouterLink(router, route) {\n            this.router = router;\n            this.route = route;\n            this.commands = [];\n        }\n        Object.defineProperty(RouterLink.prototype, \"routerLink\", {\n            /**\n             * @param {?} commands\n             * @return {?}\n             */\n            set: function (commands) {\n                if (commands != null) {\n                    this.commands = Array.isArray(commands) ? commands : [commands];\n                }\n                else {\n                    this.commands = [];\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        RouterLink.prototype.onClick = function () {\n            var /** @type {?} */ extras = {\n                skipLocationChange: attrBoolValue(this.skipLocationChange),\n                replaceUrl: attrBoolValue(this.replaceUrl),\n            };\n            this.router.navigateByUrl(this.urlTree, extras);\n            return true;\n        };\n        Object.defineProperty(RouterLink.prototype, \"urlTree\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this.router.createUrlTree(this.commands, {\n                    relativeTo: this.route,\n                    queryParams: this.queryParams,\n                    fragment: this.fragment,\n                    preserveQueryParams: attrBoolValue(this.preserveQueryParams),\n                    preserveFragment: attrBoolValue(this.preserveFragment),\n                });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        RouterLink.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: ':not(a)[routerLink]' },] },\n        ];\n        /** @nocollapse */\n        RouterLink.ctorParameters = function () { return [\n            { type: Router, },\n            { type: ActivatedRoute, },\n        ]; };\n        RouterLink.propDecorators = {\n            'queryParams': [{ type: _angular_core.Input },],\n            'fragment': [{ type: _angular_core.Input },],\n            'preserveQueryParams': [{ type: _angular_core.Input },],\n            'preserveFragment': [{ type: _angular_core.Input },],\n            'skipLocationChange': [{ type: _angular_core.Input },],\n            'replaceUrl': [{ type: _angular_core.Input },],\n            'routerLink': [{ type: _angular_core.Input },],\n            'onClick': [{ type: _angular_core.HostListener, args: ['click',] },],\n        };\n        return RouterLink;\n    }());\n    /**\n     * \\@whatItDoes Lets you link to specific parts of your app.\n     *\n     * See {\\@link RouterLink} for more information.\n     *\n     * \\@selector 'a[routerLink]'\n     * \\@ngModule RouterModule\n     *\n     * \\@stable\n     */\n    var RouterLinkWithHref = (function () {\n        /**\n         * @param {?} router\n         * @param {?} route\n         * @param {?} locationStrategy\n         */\n        function RouterLinkWithHref(router, route, locationStrategy) {\n            var _this = this;\n            this.router = router;\n            this.route = route;\n            this.locationStrategy = locationStrategy;\n            this.commands = [];\n            this.subscription = router.events.subscribe(function (s) {\n                if (s instanceof NavigationEnd) {\n                    _this.updateTargetUrlAndHref();\n                }\n            });\n        }\n        Object.defineProperty(RouterLinkWithHref.prototype, \"routerLink\", {\n            /**\n             * @param {?} commands\n             * @return {?}\n             */\n            set: function (commands) {\n                if (commands != null) {\n                    this.commands = Array.isArray(commands) ? commands : [commands];\n                }\n                else {\n                    this.commands = [];\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };\n        /**\n         * @return {?}\n         */\n        RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n        /**\n         * @param {?} button\n         * @param {?} ctrlKey\n         * @param {?} metaKey\n         * @return {?}\n         */\n        RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey) {\n            if (button !== 0 || ctrlKey || metaKey) {\n                return true;\n            }\n            if (typeof this.target === 'string' && this.target != '_self') {\n                return true;\n            }\n            var /** @type {?} */ extras = {\n                skipLocationChange: attrBoolValue(this.skipLocationChange),\n                replaceUrl: attrBoolValue(this.replaceUrl),\n            };\n            this.router.navigateByUrl(this.urlTree, extras);\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {\n            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n        };\n        Object.defineProperty(RouterLinkWithHref.prototype, \"urlTree\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this.router.createUrlTree(this.commands, {\n                    relativeTo: this.route,\n                    queryParams: this.queryParams,\n                    fragment: this.fragment,\n                    preserveQueryParams: attrBoolValue(this.preserveQueryParams),\n                    preserveFragment: attrBoolValue(this.preserveFragment),\n                });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        RouterLinkWithHref.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'a[routerLink]' },] },\n        ];\n        /** @nocollapse */\n        RouterLinkWithHref.ctorParameters = function () { return [\n            { type: Router, },\n            { type: ActivatedRoute, },\n            { type: _angular_common.LocationStrategy, },\n        ]; };\n        RouterLinkWithHref.propDecorators = {\n            'target': [{ type: _angular_core.HostBinding, args: ['attr.target',] }, { type: _angular_core.Input },],\n            'queryParams': [{ type: _angular_core.Input },],\n            'fragment': [{ type: _angular_core.Input },],\n            'preserveQueryParams': [{ type: _angular_core.Input },],\n            'preserveFragment': [{ type: _angular_core.Input },],\n            'skipLocationChange': [{ type: _angular_core.Input },],\n            'replaceUrl': [{ type: _angular_core.Input },],\n            'href': [{ type: _angular_core.HostBinding },],\n            'routerLink': [{ type: _angular_core.Input },],\n            'onClick': [{ type: _angular_core.HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey'],] },],\n        };\n        return RouterLinkWithHref;\n    }());\n    /**\n     * @param {?} s\n     * @return {?}\n     */\n    function attrBoolValue(s) {\n        return s === '' || !!s;\n    }\n\n    /**\n     * \\@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n     * ```\n     *\n     * \\@description\n     *\n     * The RouterLinkActive directive lets you add a CSS class to an element when the link's route\n     * becomes active.\n     *\n     * Consider the following example:\n     *\n     * ```\n     * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n     * ```\n     *\n     * When the url is either '/user' or '/user/bob', the active-link class will\n     * be added to the `a` tag. If the url changes, the class will be removed.\n     *\n     * You can set more than one class, as follows:\n     *\n     * ```\n     * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n     * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n     * ```\n     *\n     * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n     * only when the url matches the link exactly.\n     *\n     * ```\n     * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n     * true}\">Bob</a>\n     * ```\n     *\n     * You can assign the RouterLinkActive instance to a template variable and directly check\n     * the `isActive` status.\n     * ```\n     * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n     *   Bob {{ rla.isActive ? '(already open)' : ''}}\n     * </a>\n     * ```\n     *\n     * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n     *\n     * ```\n     * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n     *   <a routerLink=\"/user/jim\">Jim</a>\n     *   <a routerLink=\"/user/bob\">Bob</a>\n     * </div>\n     * ```\n     *\n     * This will set the active-link class on the div tag if the url is either '/user/jim' or\n     * '/user/bob'.\n     *\n     * \\@selector ':not(a)[routerLink]'\n     * \\@ngModule RouterModule\n     *\n     * \\@stable\n     */\n    var RouterLinkActive = (function () {\n        /**\n         * @param {?} router\n         * @param {?} element\n         * @param {?} renderer\n         * @param {?} cdr\n         */\n        function RouterLinkActive(router, element, renderer, cdr) {\n            var _this = this;\n            this.router = router;\n            this.element = element;\n            this.renderer = renderer;\n            this.cdr = cdr;\n            this.classes = [];\n            this.active = false;\n            this.routerLinkActiveOptions = { exact: false };\n            this.subscription = router.events.subscribe(function (s) {\n                if (s instanceof NavigationEnd) {\n                    _this.update();\n                }\n            });\n        }\n        Object.defineProperty(RouterLinkActive.prototype, \"isActive\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.active; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        RouterLinkActive.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this.links.changes.subscribe(function (_) { return _this.update(); });\n            this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });\n            this.update();\n        };\n        Object.defineProperty(RouterLinkActive.prototype, \"routerLinkActive\", {\n            /**\n             * @param {?} data\n             * @return {?}\n             */\n            set: function (data) {\n                var /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');\n                this.classes = classes.filter(function (c) { return !!c; });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };\n        /**\n         * @return {?}\n         */\n        RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n        /**\n         * @return {?}\n         */\n        RouterLinkActive.prototype.update = function () {\n            var _this = this;\n            if (!this.links || !this.linksWithHrefs || !this.router.navigated)\n                return;\n            var /** @type {?} */ hasActiveLinks = this.hasActiveLinks();\n            // react only when status has changed to prevent unnecessary dom updates\n            if (this.active !== hasActiveLinks) {\n                this.active = hasActiveLinks;\n                this.classes.forEach(function (c) { return _this.renderer.setElementClass(_this.element.nativeElement, c, hasActiveLinks); });\n                this.cdr.detectChanges();\n            }\n        };\n        /**\n         * @param {?} router\n         * @return {?}\n         */\n        RouterLinkActive.prototype.isLinkActive = function (router) {\n            var _this = this;\n            return function (link) {\n                return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);\n            };\n        };\n        /**\n         * @return {?}\n         */\n        RouterLinkActive.prototype.hasActiveLinks = function () {\n            return this.links.some(this.isLinkActive(this.router)) ||\n                this.linksWithHrefs.some(this.isLinkActive(this.router));\n        };\n        RouterLinkActive.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[routerLinkActive]',\n                        exportAs: 'routerLinkActive',\n                    },] },\n        ];\n        /** @nocollapse */\n        RouterLinkActive.ctorParameters = function () { return [\n            { type: Router, },\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ChangeDetectorRef, },\n        ]; };\n        RouterLinkActive.propDecorators = {\n            'links': [{ type: _angular_core.ContentChildren, args: [RouterLink, { descendants: true },] },],\n            'linksWithHrefs': [{ type: _angular_core.ContentChildren, args: [RouterLinkWithHref, { descendants: true },] },],\n            'routerLinkActiveOptions': [{ type: _angular_core.Input },],\n            'routerLinkActive': [{ type: _angular_core.Input },],\n        };\n        return RouterLinkActive;\n    }());\n\n    /**\n     * \\@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router\n     * state.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * <router-outlet></router-outlet>\n     * <router-outlet name='left'></router-outlet>\n     * <router-outlet name='right'></router-outlet>\n     * ```\n     *\n     * A router outlet will emit an activate event any time a new component is being instantiated,\n     * and a deactivate event when it is being destroyed.\n     *\n     * ```\n     * <router-outlet\n     *   (activate)='onActivate($event)'\n     *   (deactivate)='onDeactivate($event)'></router-outlet>\n     * ```\n     * \\@selector 'a[routerLink]'\n     * \\@ngModule RouterModule\n     *\n     * \\@stable\n     */\n    var RouterOutlet = (function () {\n        /**\n         * @param {?} parentOutletMap\n         * @param {?} location\n         * @param {?} resolver\n         * @param {?} name\n         */\n        function RouterOutlet(parentOutletMap, location, resolver, name) {\n            this.parentOutletMap = parentOutletMap;\n            this.location = location;\n            this.resolver = resolver;\n            this.name = name;\n            this.activateEvents = new _angular_core.EventEmitter();\n            this.deactivateEvents = new _angular_core.EventEmitter();\n            parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);\n        }\n        /**\n         * @return {?}\n         */\n        RouterOutlet.prototype.ngOnDestroy = function () { this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET); };\n        Object.defineProperty(RouterOutlet.prototype, \"locationInjector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.location.injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RouterOutlet.prototype, \"locationFactoryResolver\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.resolver; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RouterOutlet.prototype, \"isActivated\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return !!this.activated; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RouterOutlet.prototype, \"component\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                if (!this.activated)\n                    throw new Error('Outlet is not activated');\n                return this.activated.instance;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RouterOutlet.prototype, \"activatedRoute\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                if (!this.activated)\n                    throw new Error('Outlet is not activated');\n                return this._activatedRoute;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        RouterOutlet.prototype.detach = function () {\n            if (!this.activated)\n                throw new Error('Outlet is not activated');\n            this.location.detach();\n            var /** @type {?} */ r = this.activated;\n            this.activated = null;\n            this._activatedRoute = null;\n            return r;\n        };\n        /**\n         * @param {?} ref\n         * @param {?} activatedRoute\n         * @return {?}\n         */\n        RouterOutlet.prototype.attach = function (ref, activatedRoute) {\n            this.activated = ref;\n            this._activatedRoute = activatedRoute;\n            this.location.insert(ref.hostView);\n        };\n        /**\n         * @return {?}\n         */\n        RouterOutlet.prototype.deactivate = function () {\n            if (this.activated) {\n                var /** @type {?} */ c = this.component;\n                this.activated.destroy();\n                this.activated = null;\n                this._activatedRoute = null;\n                this.deactivateEvents.emit(c);\n            }\n        };\n        /**\n         * @param {?} activatedRoute\n         * @param {?} resolver\n         * @param {?} injector\n         * @param {?} providers\n         * @param {?} outletMap\n         * @return {?}\n         */\n        RouterOutlet.prototype.activate = function (activatedRoute, resolver, injector, providers, outletMap) {\n            if (this.isActivated) {\n                throw new Error('Cannot activate an already activated outlet');\n            }\n            this.outletMap = outletMap;\n            this._activatedRoute = activatedRoute;\n            var /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\n            var /** @type {?} */ component = (snapshot._routeConfig.component);\n            var /** @type {?} */ factory = resolver.resolveComponentFactory(component);\n            var /** @type {?} */ inj = _angular_core.ReflectiveInjector.fromResolvedProviders(providers, injector);\n            this.activated = this.location.createComponent(factory, this.location.length, inj, []);\n            this.activated.changeDetectorRef.detectChanges();\n            this.activateEvents.emit(this.activated.instance);\n        };\n        RouterOutlet.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'router-outlet' },] },\n        ];\n        /** @nocollapse */\n        RouterOutlet.ctorParameters = function () { return [\n            { type: RouterOutletMap, },\n            { type: _angular_core.ViewContainerRef, },\n            { type: _angular_core.ComponentFactoryResolver, },\n            { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['name',] },] },\n        ]; };\n        RouterOutlet.propDecorators = {\n            'activateEvents': [{ type: _angular_core.Output, args: ['activate',] },],\n            'deactivateEvents': [{ type: _angular_core.Output, args: ['deactivate',] },],\n        };\n        return RouterOutlet;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * \\@whatItDoes Provides a way to customize when activated routes get reused.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var RouteReuseStrategy = (function () {\n        function RouteReuseStrategy() {\n        }\n        /**\n         * Determines if this route (and its subtree) should be detached to be reused later\n         * @abstract\n         * @param {?} route\n         * @return {?}\n         */\n        RouteReuseStrategy.prototype.shouldDetach = function (route) { };\n        /**\n         * Stores the detached route\n         * @abstract\n         * @param {?} route\n         * @param {?} handle\n         * @return {?}\n         */\n        RouteReuseStrategy.prototype.store = function (route, handle) { };\n        /**\n         * Determines if this route (and its subtree) should be reattached\n         * @abstract\n         * @param {?} route\n         * @return {?}\n         */\n        RouteReuseStrategy.prototype.shouldAttach = function (route) { };\n        /**\n         * Retrieves the previously stored route\n         * @abstract\n         * @param {?} route\n         * @return {?}\n         */\n        RouteReuseStrategy.prototype.retrieve = function (route) { };\n        /**\n         * Determines if a route should be reused\n         * @abstract\n         * @param {?} future\n         * @param {?} curr\n         * @return {?}\n         */\n        RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };\n        return RouteReuseStrategy;\n    }());\n\n    var /** @type {?} */ getDOM = _angular_platformBrowser.__platform_browser_private__.getDOM;\n\n    /**\n     * \\@whatItDoes Provides a preloading strategy.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var PreloadingStrategy = (function () {\n        function PreloadingStrategy() {\n        }\n        /**\n         * @abstract\n         * @param {?} route\n         * @param {?} fn\n         * @return {?}\n         */\n        PreloadingStrategy.prototype.preload = function (route, fn) { };\n        return PreloadingStrategy;\n    }());\n    /**\n     * \\@whatItDoes Provides a preloading strategy that preloads all modules as quicky as possible.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n     * ```\n     *\n     * \\@experimental\n     */\n    var PreloadAllModules = (function () {\n        function PreloadAllModules() {\n        }\n        /**\n         * @param {?} route\n         * @param {?} fn\n         * @return {?}\n         */\n        PreloadAllModules.prototype.preload = function (route, fn) {\n            return rxjs_operator_catch._catch.call(fn(), function () { return rxjs_observable_of.of(null); });\n        };\n        return PreloadAllModules;\n    }());\n    /**\n     * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n     *\n     * \\@description\n     *\n     * This strategy is enabled by default.\n     *\n     * \\@experimental\n     */\n    var NoPreloading = (function () {\n        function NoPreloading() {\n        }\n        /**\n         * @param {?} route\n         * @param {?} fn\n         * @return {?}\n         */\n        NoPreloading.prototype.preload = function (route, fn) { return rxjs_observable_of.of(null); };\n        return NoPreloading;\n    }());\n    /**\n     * The preloader optimistically loads all router configurations to\n     * make navigations into lazily-loaded sections of the application faster.\n     *\n     * The preloader runs in the background. When the router bootstraps, the preloader\n     * starts listening to all navigation events. After every such event, the preloader\n     * will check if any configurations can be loaded lazily.\n     *\n     * If a route is protected by `canLoad` guards, the preloaded will not load it.\n     *\n     * \\@stable\n     */\n    var RouterPreloader = (function () {\n        /**\n         * @param {?} router\n         * @param {?} moduleLoader\n         * @param {?} compiler\n         * @param {?} injector\n         * @param {?} preloadingStrategy\n         */\n        function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {\n            this.router = router;\n            this.injector = injector;\n            this.preloadingStrategy = preloadingStrategy;\n            this.loader = new RouterConfigLoader(moduleLoader, compiler);\n        }\n        ;\n        /**\n         * @return {?}\n         */\n        RouterPreloader.prototype.setUpPreloading = function () {\n            var _this = this;\n            var /** @type {?} */ navigations = rxjs_operator_filter.filter.call(this.router.events, function (e) { return e instanceof NavigationEnd; });\n            this.subscription = rxjs_operator_concatMap.concatMap.call(navigations, function () { return _this.preload(); }).subscribe(function (v) { });\n        };\n        /**\n         * @return {?}\n         */\n        RouterPreloader.prototype.preload = function () { return this.processRoutes(this.injector, this.router.config); };\n        /**\n         * @return {?}\n         */\n        RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n        /**\n         * @param {?} injector\n         * @param {?} routes\n         * @return {?}\n         */\n        RouterPreloader.prototype.processRoutes = function (injector, routes) {\n            var /** @type {?} */ res = [];\n            for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n                var c = routes_1[_i];\n                // we already have the config loaded, just recurce\n                if (c.loadChildren && !c.canLoad && ((c))._loadedConfig) {\n                    var /** @type {?} */ childConfig = ((c))._loadedConfig;\n                    res.push(this.processRoutes(childConfig.injector, childConfig.routes));\n                }\n                else if (c.loadChildren && !c.canLoad) {\n                    res.push(this.preloadConfig(injector, c));\n                }\n                else if (c.children) {\n                    res.push(this.processRoutes(injector, c.children));\n                }\n            }\n            return rxjs_operator_mergeAll.mergeAll.call(rxjs_observable_from.from(res));\n        };\n        /**\n         * @param {?} injector\n         * @param {?} route\n         * @return {?}\n         */\n        RouterPreloader.prototype.preloadConfig = function (injector, route) {\n            var _this = this;\n            return this.preloadingStrategy.preload(route, function () {\n                var /** @type {?} */ loaded = _this.loader.load(injector, route.loadChildren);\n                return rxjs_operator_mergeMap.mergeMap.call(loaded, function (config) {\n                    var /** @type {?} */ c = route;\n                    c._loadedConfig = config;\n                    return _this.processRoutes(config.injector, config.routes);\n                });\n            });\n        };\n        RouterPreloader.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        RouterPreloader.ctorParameters = function () { return [\n            { type: Router, },\n            { type: _angular_core.NgModuleFactoryLoader, },\n            { type: _angular_core.Compiler, },\n            { type: _angular_core.Injector, },\n            { type: PreloadingStrategy, },\n        ]; };\n        return RouterPreloader;\n    }());\n\n    /**\n     * @whatItDoes Contains a list of directives\n     * @stable\n     */\n    var /** @type {?} */ ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];\n    /**\n     * @whatItDoes Is used in DI to configure the router.\n     * @stable\n     */\n    var /** @type {?} */ ROUTER_CONFIGURATION = new _angular_core.OpaqueToken('ROUTER_CONFIGURATION');\n    /**\n     * @docsNotRequired\n     */\n    var /** @type {?} */ ROUTER_FORROOT_GUARD = new _angular_core.OpaqueToken('ROUTER_FORROOT_GUARD');\n    var /** @type {?} */ ROUTER_PROVIDERS = [\n        _angular_common.Location,\n        { provide: UrlSerializer, useClass: DefaultUrlSerializer },\n        {\n            provide: Router,\n            useFactory: setupRouter,\n            deps: [\n                _angular_core.ApplicationRef, UrlSerializer, RouterOutletMap, _angular_common.Location, _angular_core.Injector, _angular_core.NgModuleFactoryLoader,\n                _angular_core.Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new _angular_core.Optional()],\n                [RouteReuseStrategy, new _angular_core.Optional()]\n            ]\n        },\n        RouterOutletMap,\n        { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n        { provide: _angular_core.NgModuleFactoryLoader, useClass: _angular_core.SystemJsNgModuleLoader },\n        RouterPreloader,\n        NoPreloading,\n        PreloadAllModules,\n        { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },\n    ];\n    /**\n     * @return {?}\n     */\n    function routerNgProbeToken() {\n        return new _angular_core.NgProbeToken('Router', Router);\n    }\n    /**\n     * \\@whatItDoes Adds router directives and providers.\n     *\n     * \\@howToUse\n     *\n     * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n     * Since the router deals with a global shared resource--location, we cannot have\n     * more than one router service active.\n     *\n     * That is why there are two ways to create the module: `RouterModule.forRoot` and\n     * `RouterModule.forChild`.\n     *\n     * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n     *   service itself.\n     * * `forChild` creates a module that contains all the directives and the given routes, but does not\n     *   include the router service.\n     *\n     * When registered at the root, the module should be used as follows\n     *\n     * ```\n     * \\@NgModule({\n     *   imports: [RouterModule.forRoot(ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * For submodules and lazy loaded submodules the module should be used as follows:\n     *\n     * ```\n     * \\@NgModule({\n     *   imports: [RouterModule.forChild(ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * \\@description\n     *\n     * Managing state transitions is one of the hardest parts of building applications. This is\n     * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n     * In addition, we often want to split applications into multiple bundles and load them on demand.\n     * Doing this transparently is not trivial.\n     *\n     * The Angular 2 router solves these problems. Using the router, you can declaratively specify\n     * application states, manage state transitions while taking care of the URL, and load bundles on\n     * demand.\n     *\n     * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n     * overview of how the router should be used.\n     *\n     * \\@stable\n     */\n    var RouterModule = (function () {\n        /**\n         * @param {?} guard\n         */\n        function RouterModule(guard) {\n        }\n        /**\n         * Creates a module with all the router providers and directives. It also optionally sets up an\n         * application listener to perform an initial navigation.\n         *\n         * Options:\n         * * `enableTracing` makes the router log all its internal events to the console.\n         * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n         * API.\n         * * `initialNavigation` disables the initial navigation.\n         * * `errorHandler` provides a custom error handler.\n         * @param {?} routes\n         * @param {?=} config\n         * @return {?}\n         */\n        RouterModule.forRoot = function (routes, config) {\n            return {\n                ngModule: RouterModule,\n                providers: [\n                    ROUTER_PROVIDERS,\n                    provideRoutes(routes),\n                    {\n                        provide: ROUTER_FORROOT_GUARD,\n                        useFactory: provideForRootGuard,\n                        deps: [[Router, new _angular_core.Optional(), new _angular_core.SkipSelf()]]\n                    },\n                    { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n                    {\n                        provide: _angular_common.LocationStrategy,\n                        useFactory: provideLocationStrategy,\n                        deps: [\n                            _angular_common.PlatformLocation, [new _angular_core.Inject(_angular_common.APP_BASE_HREF), new _angular_core.Optional()], ROUTER_CONFIGURATION\n                        ]\n                    },\n                    {\n                        provide: PreloadingStrategy,\n                        useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                            NoPreloading\n                    },\n                    { provide: _angular_core.NgProbeToken, multi: true, useFactory: routerNgProbeToken },\n                    provideRouterInitializer(),\n                ],\n            };\n        };\n        /**\n         * Creates a module with all the router directives and a provider registering routes.\n         * @param {?} routes\n         * @return {?}\n         */\n        RouterModule.forChild = function (routes) {\n            return { ngModule: RouterModule, providers: [provideRoutes(routes)] };\n        };\n        RouterModule.decorators = [\n            { type: _angular_core.NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },\n        ];\n        /** @nocollapse */\n        RouterModule.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ROUTER_FORROOT_GUARD,] },] },\n        ]; };\n        return RouterModule;\n    }());\n    /**\n     * @param {?} platformLocationStrategy\n     * @param {?} baseHref\n     * @param {?=} options\n     * @return {?}\n     */\n    function provideLocationStrategy(platformLocationStrategy, baseHref, options) {\n        if (options === void 0) { options = {}; }\n        return options.useHash ? new _angular_common.HashLocationStrategy(platformLocationStrategy, baseHref) :\n            new _angular_common.PathLocationStrategy(platformLocationStrategy, baseHref);\n    }\n    /**\n     * @param {?} router\n     * @return {?}\n     */\n    function provideForRootGuard(router) {\n        if (router) {\n            throw new Error(\"RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.\");\n        }\n        return 'guarded';\n    }\n    /**\n     * \\@whatItDoes Registers routes.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@NgModule({\n     *   imports: [RouterModule.forChild(ROUTES)],\n     *   providers: [provideRoutes(EXTRA_ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * \\@stable\n     * @param {?} routes\n     * @return {?}\n     */\n    function provideRoutes(routes) {\n        return [\n            { provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },\n            { provide: ROUTES, multi: true, useValue: routes },\n        ];\n    }\n    /**\n     * @param {?} ref\n     * @param {?} urlSerializer\n     * @param {?} outletMap\n     * @param {?} location\n     * @param {?} injector\n     * @param {?} loader\n     * @param {?} compiler\n     * @param {?} config\n     * @param {?=} opts\n     * @param {?=} urlHandlingStrategy\n     * @param {?=} routeReuseStrategy\n     * @return {?}\n     */\n    function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {\n        if (opts === void 0) { opts = {}; }\n        var /** @type {?} */ router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));\n        if (urlHandlingStrategy) {\n            router.urlHandlingStrategy = urlHandlingStrategy;\n        }\n        if (routeReuseStrategy) {\n            router.routeReuseStrategy = routeReuseStrategy;\n        }\n        if (opts.errorHandler) {\n            router.errorHandler = opts.errorHandler;\n        }\n        if (opts.enableTracing) {\n            var /** @type {?} */ dom_1 = getDOM();\n            router.events.subscribe(function (e) {\n                dom_1.logGroup(\"Router Event: \" + ((e.constructor)).name);\n                dom_1.log(e.toString());\n                dom_1.log(e);\n                dom_1.logGroupEnd();\n            });\n        }\n        return router;\n    }\n    /**\n     * @param {?} router\n     * @return {?}\n     */\n    function rootRoute(router) {\n        return router.routerState.root;\n    }\n    /**\n     * @param {?} router\n     * @param {?} ref\n     * @param {?} preloader\n     * @param {?} opts\n     * @return {?}\n     */\n    function initialRouterNavigation(router, ref, preloader, opts) {\n        return function (bootstrappedComponentRef) {\n            if (bootstrappedComponentRef !== ref.components[0]) {\n                return;\n            }\n            router.resetRootComponentType(ref.componentTypes[0]);\n            preloader.setUpPreloading();\n            if (opts.initialNavigation === false) {\n                router.setUpLocationChangeListener();\n            }\n            else {\n                router.initialNavigation();\n            }\n        };\n    }\n    /**\n     * A token for the router initializer that will be called after the app is bootstrapped.\n     *\n     * @experimental\n     */\n    var /** @type {?} */ ROUTER_INITIALIZER = new _angular_core.OpaqueToken('Router Initializer');\n    /**\n     * @return {?}\n     */\n    function provideRouterInitializer() {\n        return [\n            {\n                provide: ROUTER_INITIALIZER,\n                useFactory: initialRouterNavigation,\n                deps: [Router, _angular_core.ApplicationRef, RouterPreloader, ROUTER_CONFIGURATION]\n            },\n            { provide: _angular_core.APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\n        ];\n    }\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */ VERSION = new _angular_core.Version('3.4.4');\n\n    var /** @type {?} */ __router_private__ = {\n        ROUTER_PROVIDERS: ROUTER_PROVIDERS,\n        ROUTES: ROUTES,\n        flatten: flatten,\n    };\n\n    exports.RouterLink = RouterLink;\n    exports.RouterLinkWithHref = RouterLinkWithHref;\n    exports.RouterLinkActive = RouterLinkActive;\n    exports.RouterOutlet = RouterOutlet;\n    exports.RouteReuseStrategy = RouteReuseStrategy;\n    exports.NavigationCancel = NavigationCancel;\n    exports.NavigationEnd = NavigationEnd;\n    exports.NavigationError = NavigationError;\n    exports.NavigationStart = NavigationStart;\n    exports.Router = Router;\n    exports.RoutesRecognized = RoutesRecognized;\n    exports.ROUTER_CONFIGURATION = ROUTER_CONFIGURATION;\n    exports.ROUTER_INITIALIZER = ROUTER_INITIALIZER;\n    exports.RouterModule = RouterModule;\n    exports.provideRoutes = provideRoutes;\n    exports.RouterOutletMap = RouterOutletMap;\n    exports.NoPreloading = NoPreloading;\n    exports.PreloadAllModules = PreloadAllModules;\n    exports.PreloadingStrategy = PreloadingStrategy;\n    exports.RouterPreloader = RouterPreloader;\n    exports.ActivatedRoute = ActivatedRoute;\n    exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;\n    exports.RouterState = RouterState;\n    exports.RouterStateSnapshot = RouterStateSnapshot;\n    exports.PRIMARY_OUTLET = PRIMARY_OUTLET;\n    exports.UrlHandlingStrategy = UrlHandlingStrategy;\n    exports.DefaultUrlSerializer = DefaultUrlSerializer;\n    exports.UrlSegment = UrlSegment;\n    exports.UrlSegmentGroup = UrlSegmentGroup;\n    exports.UrlSerializer = UrlSerializer;\n    exports.UrlTree = UrlTree;\n    exports.VERSION = VERSION;\n    exports.__router_private__ = __router_private__;\n\n}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 73:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar WelcomeComponent = (function () {\r\n    function WelcomeComponent() {\r\n        this.pageTitle = \"Bienvenue dans l'univers de Dragon Ball et Dragon Ball Z\";\r\n        // state: string = 'fadeIn';\r\n        // items: any[] = ['item1', 'item2', 'item3'];\r\n        // toggleState(): void {\r\n        //     // this.state = (this.state === 'small' ? 'large' : 'small');\r\n        //     this.items.push('another item');\r\n        //     this.state = \"fadeIn\";\r\n        // }\r\n    }\r\n    return WelcomeComponent;\r\n}());\r\nWelcomeComponent = __decorate([\r\n    core_1.Component({\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(74),\r\n        styles: [__webpack_require__(75)],\r\n    })\r\n], WelcomeComponent);\r\nexports.WelcomeComponent = WelcomeComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvd2VsY29tZS93ZWxjb21lLmNvbXBvbmVudC50cz8xYTFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgdHJpZ2dlciwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCBhbmltYXRlLCBrZXlmcmFtZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZC50b1N0cmluZygpLFxyXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vd2VsY29tZS5jb21wb25lbnQuaHRtbCcpLFxyXG4gICAgc3R5bGVzOiBbcmVxdWlyZSgnLi93ZWxjb21lLmNvbXBvbmVudC5jc3MnKV0sXHJcbiAgICAvLyBhbmltYXRpb25zOiBbXHJcbiAgICAvLyAgICAgdHJpZ2dlcignbXlUcmlnZ2VyJywgW1xyXG4gICAgLy8gICAgICAgICBzdGF0ZSgnc21hbGwnLCBzdHlsZSh7XHJcbiAgICAvLyAgICAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcclxuICAgIC8vICAgICAgICAgfSkpLFxyXG4gICAgLy8gICAgICAgICBzdGF0ZSgnbGFyZ2UnLCBzdHlsZSh7XHJcbiAgICAvLyAgICAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxLjQpJ1xyXG4gICAgLy8gICAgICAgICB9KSksLFxyXG4gICAgLy8gICAgICAgICBzdGF0ZSgnZXh0cmEtbGFyZ2UnLCBzdHlsZSh7XHJcbiAgICAvLyAgICAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgyKSdcclxuICAgIC8vICAgICAgICAgfSkpLFxyXG4gICAgLy8gICAgICAgICBzdGF0ZSgnZmFkZUluJywgc3R5bGUoe1xyXG4gICAgLy8gICAgICAgICAgICAgb3BhY2l0eTogJzEnLFxyXG4gICAgLy8gICAgICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMS4yKSdcclxuICAgIC8vICAgICAgICAgfSkpLFxyXG4gICAgLy8gICAgICAgICB0cmFuc2l0aW9uKCd2b2lkID0+IConLCBbXHJcbiAgICAvLyAgICAgICAgICAgICBhbmltYXRlKDUwMCwga2V5ZnJhbWVzKFtcclxuICAgIC8vICAgICAgICAgICAgICAgICBzdHlsZSh7b3BhY2l0eTogMCwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMzBweCknLCBvZmZzZXQ6IDB9KSxcclxuICAgIC8vICAgICAgICAgICAgICAgICBzdHlsZSh7b3BhY2l0eTogMSwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSg1cHgpIHNjYWxlKDEuMiknLCBvZmZzZXQ6IDAuM30pLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHN0eWxlKHtvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApIHNjYWxlKDEuMiknLCBvZmZzZXQ6IDF9KSxcclxuICAgIC8vICAgICAgICAgICAgIF0pKVxyXG4gICAgLy8gICAgICAgICBdKVxyXG4gICAgLy8gICAgIF0pXHJcbiAgICAvLyBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBXZWxjb21lQ29tcG9uZW50IHtcclxuICAgIHBhZ2VUaXRsZTogc3RyaW5nID0gXCJCaWVudmVudWUgZGFucyBsJ3VuaXZlcnMgZGUgRHJhZ29uIEJhbGwgZXQgRHJhZ29uIEJhbGwgWlwiO1xyXG4gICAgLy8gc3RhdGU6IHN0cmluZyA9ICdmYWRlSW4nO1xyXG4gICAgLy8gaXRlbXM6IGFueVtdID0gWydpdGVtMScsICdpdGVtMicsICdpdGVtMyddO1xyXG5cclxuICAgIC8vIHRvZ2dsZVN0YXRlKCk6IHZvaWQge1xyXG4gICAgLy8gICAgIC8vIHRoaXMuc3RhdGUgPSAodGhpcy5zdGF0ZSA9PT0gJ3NtYWxsJyA/ICdsYXJnZScgOiAnc21hbGwnKTtcclxuICAgIC8vICAgICB0aGlzLml0ZW1zLnB1c2goJ2Fub3RoZXIgaXRlbScpO1xyXG4gICAgLy8gICAgIHRoaXMuc3RhdGUgPSBcImZhZGVJblwiO1xyXG4gICAgLy8gfVxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG5vZGVfbW9kdWxlcy9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi9hcHAvd2VsY29tZS93ZWxjb21lLmNvbXBvbmVudC50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBK0JBO0FBN0JBO0FBOEJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFWQTtBQTdCQTtBQUNBO0FBQ0E7QUFDQTtBQXlCQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 74:
/***/ function(module, exports) {

	eval("module.exports = \"<h3>{{pageTitle}}</h3>\\r\\n\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvd2VsY29tZS93ZWxjb21lLmNvbXBvbmVudC5odG1sPzE3NTMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxoMz57e3BhZ2VUaXRsZX19PC9oMz5cXHJcXG5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC93ZWxjb21lL3dlbGNvbWUuY29tcG9uZW50Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 75:
/***/ function(module, exports) {

	eval("module.exports = \"ul {\\r\\n    list-style-type: none;\\r\\n    margin: 30px 30px 0 0;\\r\\n    padding: 0;\\r\\n}\\r\\n\\r\\nli {\\r\\n    padding: 15px;\\r\\n    width: 100%;\\r\\n    background: #f1f1f1;\\r\\n    margin-bottom: 2px;\\r\\n    font-weight: bold;\\r\\n}\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvd2VsY29tZS93ZWxjb21lLmNvbXBvbmVudC5jc3M/NDkwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwidWwge1xcclxcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxyXFxuICAgIG1hcmdpbjogMzBweCAzMHB4IDAgMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxuXFxyXFxubGkge1xcclxcbiAgICBwYWRkaW5nOiAxNXB4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgYmFja2dyb3VuZDogI2YxZjFmMTtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMnB4O1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC93ZWxjb21lL3dlbGNvbWUuY29tcG9uZW50LmNzc1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 76:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar common_1 = __webpack_require__(22);\r\nvar category_component_1 = __webpack_require__(77);\r\nvar category_routing_module_1 = __webpack_require__(80);\r\nvar character_module_1 = __webpack_require__(82);\r\nvar category_guard_service_1 = __webpack_require__(81);\r\nvar CategoryModule = (function () {\r\n    function CategoryModule() {\r\n    }\r\n    return CategoryModule;\r\n}());\r\nCategoryModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            common_1.CommonModule,\r\n            category_routing_module_1.CategoryRoutingModule,\r\n            character_module_1.CharacterModule\r\n        ],\r\n        declarations: [\r\n            category_component_1.CategoryComponent\r\n        ],\r\n        providers: [\r\n            category_guard_service_1.CategoryGuard\r\n        ]\r\n    })\r\n], CategoryModule);\r\nexports.CategoryModule = CategoryModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2F0ZWdvcmllcy9jYXRlZ29yeS5tb2R1bGUudHM/MTAyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgQ2F0ZWdvcnlDb21wb25lbnQgfSBmcm9tICcuL2NhdGVnb3J5LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENhdGVnb3J5Um91dGluZ01vZHVsZSB9IGZyb20gJy4vY2F0ZWdvcnktcm91dGluZy5tb2R1bGUnO1xyXG5pbXBvcnQgeyBDaGFyYWN0ZXJNb2R1bGUgfSBmcm9tICcuLi9jaGFyYWN0ZXJzL2NoYXJhY3Rlci5tb2R1bGUnO1xyXG5pbXBvcnQgeyBDYXRlZ29yeUd1YXJkIH0gZnJvbSAnLi9jYXRlZ29yeS1ndWFyZC5zZXJ2aWNlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBpbXBvcnRzOiBbIFxyXG4gICAgICAgIENvbW1vbk1vZHVsZSxcclxuICAgICAgICBDYXRlZ29yeVJvdXRpbmdNb2R1bGUsXHJcbiAgICAgICAgQ2hhcmFjdGVyTW9kdWxlXHJcbiAgICBdLFxyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgQ2F0ZWdvcnlDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICBDYXRlZ29yeUd1YXJkXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDYXRlZ29yeU1vZHVsZSB7XHJcbiAgICBcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL2NhdGVnb3JpZXMvY2F0ZWdvcnkubW9kdWxlLnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBZUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUZBO0FBYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 77:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar CategoryComponent = (function () {\r\n    function CategoryComponent() {\r\n    }\r\n    return CategoryComponent;\r\n}());\r\nCategoryComponent = __decorate([\r\n    core_1.Component({\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(78),\r\n        styles: [__webpack_require__(79)]\r\n    })\r\n], CategoryComponent);\r\nexports.CategoryComponent = CategoryComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2F0ZWdvcmllcy9jYXRlZ29yeS5jb21wb25lbnQudHM/Yzc5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLnRvU3RyaW5nKCksXHJcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9jYXRlZ29yeS5jb21wb25lbnQuaHRtbCcpLFxyXG4gICAgc3R5bGVzOiBbcmVxdWlyZSgnLi9jYXRlZ29yeS5jb21wb25lbnQuY3NzJyldXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDYXRlZ29yeUNvbXBvbmVudCB7XHJcbiAgICBcclxuICAgIFxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG5vZGVfbW9kdWxlcy9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi9hcHAvY2F0ZWdvcmllcy9jYXRlZ29yeS5jb21wb25lbnQudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQU9BO0FBQUE7QUFHQTtBQUFBO0FBQUE7QUFIQTtBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 78:
/***/ function(module, exports) {

	eval("module.exports = \"\\r\\n<div class=\\\"row\\\">\\r\\n    <ul class=\\\"category\\\">\\r\\n        <li>\\r\\n            <a routerLink=\\\"characters\\\"><span class=\\\"badge\\\">Personnages</span></a>\\r\\n            <a routerLink=\\\"books\\\"><span class=\\\"badge\\\">Livres</span></a>\\r\\n        </li>\\r\\n    </ul>\\r\\n</div>\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2F0ZWdvcmllcy9jYXRlZ29yeS5jb21wb25lbnQuaHRtbD9mMzA1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCJcXHJcXG48ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcclxcbiAgICA8dWwgY2xhc3M9XFxcImNhdGVnb3J5XFxcIj5cXHJcXG4gICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICA8YSByb3V0ZXJMaW5rPVxcXCJjaGFyYWN0ZXJzXFxcIj48c3BhbiBjbGFzcz1cXFwiYmFkZ2VcXFwiPlBlcnNvbm5hZ2VzPC9zcGFuPjwvYT5cXHJcXG4gICAgICAgICAgICA8YSByb3V0ZXJMaW5rPVxcXCJib29rc1xcXCI+PHNwYW4gY2xhc3M9XFxcImJhZGdlXFxcIj5MaXZyZXM8L3NwYW4+PC9hPlxcclxcbiAgICAgICAgPC9saT5cXHJcXG4gICAgPC91bD5cXHJcXG48L2Rpdj5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9jYXRlZ29yaWVzL2NhdGVnb3J5LmNvbXBvbmVudC5odG1sXG4vLyBtb2R1bGUgaWQgPSA3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 79:
/***/ function(module, exports) {

	eval("module.exports = \"\\r\\n.category {\\r\\n  list-style-type: none;\\r\\n  margin-top: 15px;\\r\\n}\\r\\n\\r\\n.category li {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.category .badge {\\r\\n  padding-top: 22px;\\r\\n  min-width: 100px;\\r\\n  min-height: 5em;\\r\\n}\\r\\n\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2F0ZWdvcmllcy9jYXRlZ29yeS5jb21wb25lbnQuY3NzPzg4ZTEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIlxcclxcbi5jYXRlZ29yeSB7XFxyXFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxyXFxuICBtYXJnaW4tdG9wOiAxNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uY2F0ZWdvcnkgbGkge1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uY2F0ZWdvcnkgLmJhZGdlIHtcXHJcXG4gIHBhZGRpbmctdG9wOiAyMnB4O1xcclxcbiAgbWluLXdpZHRoOiAxMDBweDtcXHJcXG4gIG1pbi1oZWlnaHQ6IDVlbTtcXHJcXG59XFxyXFxuXCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9jYXRlZ29yaWVzL2NhdGVnb3J5LmNvbXBvbmVudC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 80:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar category_component_1 = __webpack_require__(77);\r\nvar category_guard_service_1 = __webpack_require__(81);\r\nvar CategoryRoutingModule = (function () {\r\n    function CategoryRoutingModule() {\r\n    }\r\n    return CategoryRoutingModule;\r\n}());\r\nCategoryRoutingModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            router_1.RouterModule.forChild([\r\n                { path: 'category/:id', component: category_component_1.CategoryComponent, canActivate: [category_guard_service_1.CategoryGuard] }\r\n            ])\r\n        ],\r\n        exports: [router_1.RouterModule]\r\n    })\r\n], CategoryRoutingModule);\r\nexports.CategoryRoutingModule = CategoryRoutingModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2F0ZWdvcmllcy9jYXRlZ29yeS1yb3V0aW5nLm1vZHVsZS50cz82N2Q1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IENhdGVnb3J5Q29tcG9uZW50IH0gZnJvbSAnLi9jYXRlZ29yeS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDYXRlZ29yeUd1YXJkIH0gZnJvbSAnLi9jYXRlZ29yeS1ndWFyZC5zZXJ2aWNlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgUm91dGVyTW9kdWxlLmZvckNoaWxkKFtcclxuICAgICAgICAgICAgeyBwYXRoOiAnY2F0ZWdvcnkvOmlkJywgY29tcG9uZW50OiBDYXRlZ29yeUNvbXBvbmVudCwgY2FuQWN0aXZhdGU6IFsgQ2F0ZWdvcnlHdWFyZCBdIH1cclxuICAgICAgICBdKVxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFsgUm91dGVyTW9kdWxlIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIENhdGVnb3J5Um91dGluZ01vZHVsZSB7XHJcbiAgICBcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL2NhdGVnb3JpZXMvY2F0ZWdvcnktcm91dGluZy5tb2R1bGUudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVVBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFGQTtBQVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 81:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar CategoryGuard = (function () {\r\n    function CategoryGuard(_router) {\r\n        this._router = _router;\r\n    }\r\n    CategoryGuard.prototype.canActivate = function (route) {\r\n        var category = route.url[1].path;\r\n        if (category !== \"db\" && category !== \"dbz\") {\r\n            this._router.navigate(['/welcome']);\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    return CategoryGuard;\r\n}());\r\nCategoryGuard = __decorate([\r\n    core_1.Injectable(),\r\n    __metadata(\"design:paramtypes\", [router_1.Router])\r\n], CategoryGuard);\r\nexports.CategoryGuard = CategoryGuard;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2F0ZWdvcmllcy9jYXRlZ29yeS1ndWFyZC5zZXJ2aWNlLnRzPzc3NDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDYW5BY3RpdmF0ZSwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENhdGVnb3J5R3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JvdXRlcjogUm91dGVyKSB7fVxyXG4gICAgXHJcbiAgICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gcm91dGUudXJsWzFdLnBhdGg7XHJcbiAgICAgICAgaWYgKGNhdGVnb3J5ICE9PSBcImRiXCIgJiYgY2F0ZWdvcnkgIT09IFwiZGJ6XCIpIHtcclxuICAgICAgICAgICAgdGhpcy5fcm91dGVyLm5hdmlnYXRlKFsnL3dlbGNvbWUnXSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL2FwcC9jYXRlZ29yaWVzL2NhdGVnb3J5LWd1YXJkLnNlcnZpY2UudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBR0E7QUFFQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQWJBO0FBREE7QUFHQTtBQUZBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 82:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar character_routing_module_1 = __webpack_require__(83);\r\nvar character_list_component_1 = __webpack_require__(84);\r\nvar character_details_component_1 = __webpack_require__(92);\r\nvar character_form_component_1 = __webpack_require__(97);\r\nvar core_module_1 = __webpack_require__(100);\r\nvar shared_module_1 = __webpack_require__(385);\r\nvar CharacterModule = (function () {\r\n    function CharacterModule() {\r\n    }\r\n    return CharacterModule;\r\n}());\r\nCharacterModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            shared_module_1.SharedModule,\r\n            character_routing_module_1.CharacterRoutingModule,\r\n            core_module_1.CoreModule\r\n        ],\r\n        declarations: [\r\n            character_list_component_1.CharacterListComponent,\r\n            character_details_component_1.CharacterDetailsComponent,\r\n            character_form_component_1.CharacterFormComponent\r\n        ],\r\n        exports: [\r\n            character_list_component_1.CharacterListComponent,\r\n            character_details_component_1.CharacterDetailsComponent\r\n        ]\r\n    })\r\n], CharacterModule);\r\nexports.CharacterModule = CharacterModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXIubW9kdWxlLnRzP2Y2NWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2hhcmFjdGVyUm91dGluZ01vZHVsZSB9IGZyb20gJy4vY2hhcmFjdGVyLXJvdXRpbmcubW9kdWxlJztcclxuaW1wb3J0IHsgQ2hhcmFjdGVyTGlzdENvbXBvbmVudCB9IGZyb20gJy4vY2hhcmFjdGVyLWxpc3QuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2hhcmFjdGVyRGV0YWlsc0NvbXBvbmVudCB9IGZyb20gJy4vY2hhcmFjdGVyLWRldGFpbHMuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2hhcmFjdGVyRm9ybUNvbXBvbmVudCB9IGZyb20gJy4vY2hhcmFjdGVyLWZvcm0uY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ29yZU1vZHVsZSB9IGZyb20gJy4uL2NvcmUvY29yZS5tb2R1bGUnO1xyXG5pbXBvcnQgeyBTaGFyZWRNb2R1bGUgfSBmcm9tICcuLi9zaGFyZWQvc2hhcmVkLm1vZHVsZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIFNoYXJlZE1vZHVsZSxcclxuICAgICAgICBDaGFyYWN0ZXJSb3V0aW5nTW9kdWxlLFxyXG4gICAgICAgIENvcmVNb2R1bGVcclxuICAgIF0sXHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBDaGFyYWN0ZXJMaXN0Q29tcG9uZW50LFxyXG4gICAgICAgIENoYXJhY3RlckRldGFpbHNDb21wb25lbnQsXHJcbiAgICAgICAgQ2hhcmFjdGVyRm9ybUNvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBDaGFyYWN0ZXJMaXN0Q29tcG9uZW50LFxyXG4gICAgICAgIENoYXJhY3RlckRldGFpbHNDb21wb25lbnRcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIENoYXJhY3Rlck1vZHVsZSB7XHJcblxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG5vZGVfbW9kdWxlcy9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXIubW9kdWxlLnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFrQkE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUZBO0FBaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 83:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar character_list_component_1 = __webpack_require__(84);\r\nvar character_details_component_1 = __webpack_require__(92);\r\nvar character_form_component_1 = __webpack_require__(97);\r\nvar CharacterRoutingModule = (function () {\r\n    function CharacterRoutingModule() {\r\n    }\r\n    return CharacterRoutingModule;\r\n}());\r\nCharacterRoutingModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            router_1.RouterModule.forChild([\r\n                { path: 'category/:category/characters', component: character_list_component_1.CharacterListComponent },\r\n                { path: 'category/:category/characters/edit', component: character_form_component_1.CharacterFormComponent },\r\n                { path: 'category/:category/characters/:id', component: character_details_component_1.CharacterDetailsComponent },\r\n                { path: 'category/:category/characters/:id/edit', component: character_form_component_1.CharacterFormComponent }\r\n            ])\r\n        ],\r\n        exports: [\r\n            router_1.RouterModule\r\n        ]\r\n    })\r\n], CharacterRoutingModule);\r\nexports.CharacterRoutingModule = CharacterRoutingModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItcm91dGluZy5tb2R1bGUudHM/YTdhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBDaGFyYWN0ZXJMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9jaGFyYWN0ZXItbGlzdC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGFyYWN0ZXJEZXRhaWxzQ29tcG9uZW50IH0gZnJvbSAnLi9jaGFyYWN0ZXItZGV0YWlscy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGFyYWN0ZXJGb3JtQ29tcG9uZW50IH0gZnJvbSAnLi9jaGFyYWN0ZXItZm9ybS5jb21wb25lbnQnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBSb3V0ZXJNb2R1bGUuZm9yQ2hpbGQoW1xyXG4gICAgICAgICAgICB7IHBhdGg6ICdjYXRlZ29yeS86Y2F0ZWdvcnkvY2hhcmFjdGVycycsIGNvbXBvbmVudDogQ2hhcmFjdGVyTGlzdENvbXBvbmVudCB9LFxyXG4gICAgICAgICAgICB7IHBhdGg6ICdjYXRlZ29yeS86Y2F0ZWdvcnkvY2hhcmFjdGVycy9lZGl0JywgY29tcG9uZW50OiBDaGFyYWN0ZXJGb3JtQ29tcG9uZW50IH0sXHJcbiAgICAgICAgICAgIHsgcGF0aDogJ2NhdGVnb3J5LzpjYXRlZ29yeS9jaGFyYWN0ZXJzLzppZCcsIGNvbXBvbmVudDogQ2hhcmFjdGVyRGV0YWlsc0NvbXBvbmVudCB9LFxyXG4gICAgICAgICAgICB7IHBhdGg6ICdjYXRlZ29yeS86Y2F0ZWdvcnkvY2hhcmFjdGVycy86aWQvZWRpdCcsIGNvbXBvbmVudDogQ2hhcmFjdGVyRm9ybUNvbXBvbmVudCB9XHJcbiAgICAgICAgXSlcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgUm91dGVyTW9kdWxlXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDaGFyYWN0ZXJSb3V0aW5nTW9kdWxlIHtcclxuICAgIFxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG5vZGVfbW9kdWxlcy9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItcm91dGluZy5tb2R1bGUudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUZBO0FBYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 84:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar character_service_1 = __webpack_require__(85);\r\nvar CharacterListComponent = (function () {\r\n    // public state: string = 'fadeIn';\r\n    function CharacterListComponent(_service, _route, _router) {\r\n        this._service = _service;\r\n        this._route = _route;\r\n        this._router = _router;\r\n        this.pageTitle = \"Liste des personnages\";\r\n    }\r\n    CharacterListComponent.prototype.ngOnInit = function () {\r\n        this.getCharacters();\r\n    };\r\n    CharacterListComponent.prototype.getCharacters = function () {\r\n        var _this = this;\r\n        this._route.params\r\n            .switchMap(function (params) { return _this._service.getCharacters(params['category']); })\r\n            .subscribe(function (characters) { return _this.characters = characters; }, function (error) { return console.log(error); });\r\n    };\r\n    CharacterListComponent.prototype.onNew = function () {\r\n        this._router.navigate(['edit'], { relativeTo: this._route });\r\n    };\r\n    CharacterListComponent.prototype.onBack = function () {\r\n        this._router.navigate(['../'], { relativeTo: this._route });\r\n    };\r\n    return CharacterListComponent;\r\n}());\r\nCharacterListComponent = __decorate([\r\n    core_1.Component({\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(90),\r\n        styles: [__webpack_require__(91)],\r\n    }),\r\n    __metadata(\"design:paramtypes\", [character_service_1.CharacterService,\r\n        router_1.ActivatedRoute,\r\n        router_1.Router])\r\n], CharacterListComponent);\r\nexports.CharacterListComponent = CharacterListComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItbGlzdC5jb21wb25lbnQudHM/ZTdkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgdHJpZ2dlciwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCBhbmltYXRlLCBrZXlmcmFtZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFBhcmFtcywgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgQ2hhcmFjdGVyU2VydmljZSB9IGZyb20gJy4vY2hhcmFjdGVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLnRvU3RyaW5nKCksXHJcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9jaGFyYWN0ZXItbGlzdC5jb21wb25lbnQuaHRtbCcpLFxyXG4gICAgc3R5bGVzOiBbcmVxdWlyZSgnLi9jaGFyYWN0ZXItbGlzdC5jb21wb25lbnQuY3NzJyldLFxyXG4gICAgLy8gYW5pbWF0aW9uczogW1xyXG4gICAgLy8gICAgIHRyaWdnZXIoJ215VHJpZ2dlcicsIFtcclxuICAgIC8vICAgICAgICAgc3RhdGUoJ2ZhZGVJbicsIHN0eWxlKHtcclxuICAgIC8vICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgIC8vICAgICAgICAgfSkpLFxyXG4gICAgLy8gICAgICAgICB0cmFuc2l0aW9uKCd2b2lkID0+IConLCBbXHJcbiAgICAvLyAgICAgICAgICAgICBzdHlsZSh7b3BhY2l0eTogMCwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgyMHB4KSd9KSxcclxuICAgIC8vICAgICAgICAgICAgIGFuaW1hdGUoJzUwMG1zIDAgZWFzZS1pbicpXHJcbiAgICAvLyAgICAgICAgICAgICAvLyBhbmltYXRlKDUwMCwga2V5ZnJhbWVzKFtcclxuICAgIC8vICAgICAgICAgICAgIC8vICAgICBzdHlsZSh7b3BhY2l0eTogMCwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMzBweCknLCBvZmZzZXQ6IDB9KSxcclxuICAgIC8vICAgICAgICAgICAgIC8vICAgICBzdHlsZSh7b3BhY2l0eTogMSwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSg1cHgpJywgb2Zmc2V0OiAwLjN9KSxcclxuICAgIC8vICAgICAgICAgICAgIC8vICAgICBzdHlsZSh7b3BhY2l0eTogMSwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwcHgpJywgb2Zmc2V0OiAxfSksXHJcbiAgICAvLyAgICAgICAgICAgICAvLyBdKSlcclxuICAgIC8vICAgICAgICAgXSlcclxuICAgIC8vICAgICBdKVxyXG4gICAgLy8gXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBwdWJsaWMgcGFnZVRpdGxlOiBzdHJpbmcgPSBcIkxpc3RlIGRlcyBwZXJzb25uYWdlc1wiO1xyXG4gICAgcHVibGljIGNoYXJhY3RlcnM6IGFueVtdO1xyXG4gICAgLy8gcHVibGljIHN0YXRlOiBzdHJpbmcgPSAnZmFkZUluJztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIF9zZXJ2aWNlOiBDaGFyYWN0ZXJTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgX3JvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcclxuICAgICAgICBwcml2YXRlIF9yb3V0ZXI6IFJvdXRlclxyXG4gICAgKSB7fVxyXG5cclxuICAgIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgdGhpcy5nZXRDaGFyYWN0ZXJzKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDaGFyYWN0ZXJzKCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yb3V0ZS5wYXJhbXNcclxuICAgICAgICAgICAgLnN3aXRjaE1hcCgocGFyYW1zOiBQYXJhbXMpID0+IHRoaXMuX3NlcnZpY2UuZ2V0Q2hhcmFjdGVycyhwYXJhbXNbJ2NhdGVnb3J5J10pKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVycyA9PiB0aGlzLmNoYXJhY3RlcnMgPSBjaGFyYWN0ZXJzLFxyXG4gICAgICAgICAgICAgICAgZXJyb3IgPT4gY29uc29sZS5sb2coPGFueT5lcnJvcilcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uTmV3KCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yb3V0ZXIubmF2aWdhdGUoWydlZGl0J10sIHtyZWxhdGl2ZVRvOiB0aGlzLl9yb3V0ZX0pO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIG9uQmFjaygpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgdGhpcy5fcm91dGVyLm5hdmlnYXRlKFsnLi4vJ10sIHtyZWxhdGl2ZVRvOiB0aGlzLl9yb3V0ZX0pO1xyXG5cclxuICAgIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL2NoYXJhY3RlcnMvY2hhcmFjdGVyLWxpc3QuY29tcG9uZW50LnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBdUJBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBUUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBS0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBdkNBO0FBckJBO0FBQ0E7QUFDQTtBQUNBO0FBaUJBO0FBT0E7QUFDQTtBQUNBO0FBUkE7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 85:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar http_1 = __webpack_require__(24);\r\nvar angular2_uuid_1 = __webpack_require__(86);\r\nvar Observable_1 = __webpack_require__(5);\r\nvar BehaviorSubject_1 = __webpack_require__(43);\r\nvar category_service_1 = __webpack_require__(87);\r\n__webpack_require__(88);\r\n__webpack_require__(89);\r\nvar CharacterService = (function () {\r\n    function CharacterService(_http, _categoryService) {\r\n        this._http = _http;\r\n        this._categoryService = _categoryService;\r\n    }\r\n    CharacterService.prototype.init = function (categories) {\r\n        var _this = this;\r\n        this._data = new BehaviorSubject_1.BehaviorSubject([]);\r\n        this._values = [];\r\n        Observable_1.Observable.from(categories)\r\n            .concatMap(function (category) {\r\n            return Observable_1.Observable.defer(function () { return _this._http.get(_this.getUrl(category)); });\r\n        }, function (_, response) { return response.json().data; })\r\n            .subscribe(function (data) {\r\n            _this._values = _this._values.concat(data);\r\n        }, function (err) { return console.error(err); }, function () {\r\n            console.log('characters loaded');\r\n            _this._data.next(_this._values);\r\n        });\r\n    };\r\n    CharacterService.prototype.getCharacters = function (category) {\r\n        return this._data\r\n            .map(function (characters) { return characters.filter(function (c) { return c.category === category; }); });\r\n    };\r\n    CharacterService.prototype.getCharacter = function (category, id) {\r\n        var _this = this;\r\n        return this.getCharacters(category)\r\n            .map(function (characters) {\r\n            var c = characters.filter(function (c) { return c.id === id; })[0];\r\n            return {\r\n                character: c,\r\n                previousId: _this.getPreviousId(characters, id),\r\n                nextId: _this.getNextId(characters, id)\r\n            };\r\n        });\r\n    };\r\n    CharacterService.prototype.save = function (category, character) {\r\n        if (character.id) {\r\n            return this.put(category, character);\r\n        }\r\n        return this.post(category, character);\r\n    };\r\n    CharacterService.prototype.put = function (category, character) {\r\n        var _this = this;\r\n        var headers = new http_1.Headers({\r\n            'Content-Type': 'application/json'\r\n        });\r\n        var url = this.getUrl(category) + \"/\" + character.id;\r\n        return this._http\r\n            .put(url, JSON.stringify(character), { headers: headers })\r\n            .map(function () {\r\n            var c = _this._values.filter(function (char) {\r\n                return char.id === character.id;\r\n            })[0];\r\n            c.name = character.name;\r\n            c.description = character.description;\r\n            c.imageUrl = character.imageUrl;\r\n            _this._data.next(_this._values);\r\n            return character;\r\n        })\r\n            .catch(this.handleError);\r\n    };\r\n    CharacterService.prototype.post = function (category, character) {\r\n        var _this = this;\r\n        var headers = new http_1.Headers({\r\n            'Content-Type': 'application/json'\r\n        });\r\n        character.id = angular2_uuid_1.UUID.UUID();\r\n        return this._http\r\n            .post(this.getUrl(category), JSON.stringify(character), { headers: headers })\r\n            .map(function (response) {\r\n            var c = response.json().data;\r\n            _this._values.push(c);\r\n            return c;\r\n        })\r\n            .catch(this.handleError);\r\n    };\r\n    CharacterService.prototype.handleError = function (error) {\r\n        return Observable_1.Observable.throw(error || 'Server error');\r\n    };\r\n    CharacterService.prototype.getUrl = function (category) {\r\n        var url = 'app/characters' + category;\r\n        return url;\r\n    };\r\n    CharacterService.prototype.getNextId = function (characters, id) {\r\n        var ids = characters.map(function (c) { return c.id; });\r\n        var currentIndex = ids.indexOf(id);\r\n        if (currentIndex >= 0 && currentIndex < ids.length - 1) {\r\n            return ids[currentIndex + 1];\r\n        }\r\n        return id;\r\n    };\r\n    CharacterService.prototype.getPreviousId = function (characters, id) {\r\n        var ids = characters.map(function (c) { return c.id; });\r\n        var currentIndex = ids.indexOf(id);\r\n        if (currentIndex > 0) {\r\n            return ids[currentIndex - 1];\r\n        }\r\n        return id;\r\n    };\r\n    return CharacterService;\r\n}());\r\nCharacterService = __decorate([\r\n    core_1.Injectable(),\r\n    __metadata(\"design:paramtypes\", [http_1.Http,\r\n        category_service_1.CategoryService])\r\n], CharacterService);\r\nexports.CharacterService = CharacterService;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 86:
/***/ function(module, exports) {

	eval("\"use strict\";\nvar UUID = (function () {\n    function UUID() {\n        // no-op\n    }\n    UUID.UUID = function () {\n        if (typeof (window) !== \"undefined\" && typeof (window.crypto) !== \"undefined\" && typeof (window.crypto.getRandomValues) !== \"undefined\") {\n            // If we have a cryptographically secure PRNG, use that\n            // http://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\n            var buf = new Uint16Array(8);\n            window.crypto.getRandomValues(buf);\n            return (this.pad4(buf[0]) + this.pad4(buf[1]) + \"-\" + this.pad4(buf[2]) + \"-\" + this.pad4(buf[3]) + \"-\" + this.pad4(buf[4]) + \"-\" + this.pad4(buf[5]) + this.pad4(buf[6]) + this.pad4(buf[7]));\n        }\n        else {\n            // Otherwise, just use Math.random\n            // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n            // https://stackoverflow.com/questions/11605068/why-does-jshint-argue-against-bitwise-operators-how-should-i-express-this-code\n            return this.random4() + this.random4() + \"-\" + this.random4() + \"-\" + this.random4() + \"-\" +\n                this.random4() + \"-\" + this.random4() + this.random4() + this.random4();\n        }\n    };\n    UUID.pad4 = function (num) {\n        var ret = num.toString(16);\n        while (ret.length < 4) {\n            ret = \"0\" + ret;\n        }\n        return ret;\n    };\n    UUID.random4 = function () {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n    return UUID;\n}());\nexports.UUID = UUID;\n//# sourceMappingURL=index.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2FuZ3VsYXIyLXV1aWQvaW5kZXguanM/MDBiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBVVUlEID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVVUlEKCkge1xuICAgICAgICAvLyBuby1vcFxuICAgIH1cbiAgICBVVUlELlVVSUQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKHdpbmRvdykgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mICh3aW5kb3cuY3J5cHRvKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgKHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSBQUk5HLCB1c2UgdGhhdFxuICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82OTA2OTE2L2NvbGxpc2lvbnMtd2hlbi1nZW5lcmF0aW5nLXV1aWRzLWluLWphdmFzY3JpcHRcbiAgICAgICAgICAgIHZhciBidWYgPSBuZXcgVWludDE2QXJyYXkoOCk7XG4gICAgICAgICAgICB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhidWYpO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnBhZDQoYnVmWzBdKSArIHRoaXMucGFkNChidWZbMV0pICsgXCItXCIgKyB0aGlzLnBhZDQoYnVmWzJdKSArIFwiLVwiICsgdGhpcy5wYWQ0KGJ1ZlszXSkgKyBcIi1cIiArIHRoaXMucGFkNChidWZbNF0pICsgXCItXCIgKyB0aGlzLnBhZDQoYnVmWzVdKSArIHRoaXMucGFkNChidWZbNl0pICsgdGhpcy5wYWQ0KGJ1Zls3XSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHVzZSBNYXRoLnJhbmRvbVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2NyZWF0ZS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTE2MDUwNjgvd2h5LWRvZXMtanNoaW50LWFyZ3VlLWFnYWluc3QtYml0d2lzZS1vcGVyYXRvcnMtaG93LXNob3VsZC1pLWV4cHJlc3MtdGhpcy1jb2RlXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yYW5kb200KCkgKyB0aGlzLnJhbmRvbTQoKSArIFwiLVwiICsgdGhpcy5yYW5kb200KCkgKyBcIi1cIiArIHRoaXMucmFuZG9tNCgpICsgXCItXCIgK1xuICAgICAgICAgICAgICAgIHRoaXMucmFuZG9tNCgpICsgXCItXCIgKyB0aGlzLnJhbmRvbTQoKSArIHRoaXMucmFuZG9tNCgpICsgdGhpcy5yYW5kb200KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFVVSUQucGFkNCA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICAgICAgdmFyIHJldCA9IG51bS50b1N0cmluZygxNik7XG4gICAgICAgIHdoaWxlIChyZXQubGVuZ3RoIDwgNCkge1xuICAgICAgICAgICAgcmV0ID0gXCIwXCIgKyByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIFVVSUQucmFuZG9tNCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXG4gICAgICAgICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAuc3Vic3RyaW5nKDEpO1xuICAgIH07XG4gICAgcmV0dXJuIFVVSUQ7XG59KCkpO1xuZXhwb3J0cy5VVUlEID0gVVVJRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9hbmd1bGFyMi11dWlkL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 87:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar Observable_1 = __webpack_require__(5);\r\nvar CategoryService = (function () {\r\n    function CategoryService() {\r\n    }\r\n    CategoryService.prototype.getCategories = function () {\r\n        return Observable_1.Observable.of([\"db\", \"dbz\"]);\r\n    };\r\n    return CategoryService;\r\n}());\r\nCategoryService = __decorate([\r\n    core_1.Injectable()\r\n], CategoryService);\r\nexports.CategoryService = CategoryService;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2F0ZWdvcmllcy9jYXRlZ29yeS5zZXJ2aWNlLnRzPzhjNmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcy9CZWhhdmlvclN1YmplY3QnXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDYXRlZ29yeVNlcnZpY2Uge1xyXG5cclxuICAgIHB1YmxpYyBnZXRDYXRlZ29yaWVzKCk6IE9ic2VydmFibGU8c3RyaW5nW10+IHtcclxuXHJcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUub2YoW1wiZGJcIiwgXCJkYnpcIl0pO1xyXG5cclxuICAgIH1cclxuXHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL2FwcC9jYXRlZ29yaWVzL2NhdGVnb3J5LnNlcnZpY2UudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBSUE7QUFBQTtBQVFBO0FBTkE7QUFFQTtBQUVBO0FBRUE7QUFBQTtBQVJBO0FBREE7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 90:
/***/ function(module, exports) {

	eval("module.exports = \"<h3>{{pageTitle}}</h3>\\r\\n\\r\\n<div class='row'>\\r\\n    <a class='btn btn-info' (click)='onNew()'>\\r\\n        <i class='glyphicon glyphicon-plus'></i> Ajouter un personnage\\r\\n    </a>\\r\\n</div>\\r\\n<div class=\\\"grid\\\">\\r\\n    <div *ngFor=\\\"let character of characters\\\" class=\\\"grid-list\\\">\\r\\n        <div class=\\\"module\\\">\\r\\n            <a [routerLink]=\\\"character.id\\\" routerLinkActive=\\\"true\\\"><span class=\\\"badge\\\"><h4>{{character.name}}</h4></span></a>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <a class='btn btn-info' (click)='onBack()'>\\r\\n        <i class='glyphicon glyphicon-chevron-left'></i>Retour\\r\\n    </a>\\r\\n</div>\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItbGlzdC5jb21wb25lbnQuaHRtbD9hZTUwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8aDM+e3twYWdlVGl0bGV9fTwvaDM+XFxyXFxuXFxyXFxuPGRpdiBjbGFzcz0ncm93Jz5cXHJcXG4gICAgPGEgY2xhc3M9J2J0biBidG4taW5mbycgKGNsaWNrKT0nb25OZXcoKSc+XFxyXFxuICAgICAgICA8aSBjbGFzcz0nZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzJz48L2k+IEFqb3V0ZXIgdW4gcGVyc29ubmFnZVxcclxcbiAgICA8L2E+XFxyXFxuPC9kaXY+XFxyXFxuPGRpdiBjbGFzcz1cXFwiZ3JpZFxcXCI+XFxyXFxuICAgIDxkaXYgKm5nRm9yPVxcXCJsZXQgY2hhcmFjdGVyIG9mIGNoYXJhY3RlcnNcXFwiIGNsYXNzPVxcXCJncmlkLWxpc3RcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kdWxlXFxcIj5cXHJcXG4gICAgICAgICAgICA8YSBbcm91dGVyTGlua109XFxcImNoYXJhY3Rlci5pZFxcXCIgcm91dGVyTGlua0FjdGl2ZT1cXFwidHJ1ZVxcXCI+PHNwYW4gY2xhc3M9XFxcImJhZGdlXFxcIj48aDQ+e3tjaGFyYWN0ZXIubmFtZX19PC9oND48L3NwYW4+PC9hPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlxcclxcbjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxyXFxuICAgIDxhIGNsYXNzPSdidG4gYnRuLWluZm8nIChjbGljayk9J29uQmFjaygpJz5cXHJcXG4gICAgICAgIDxpIGNsYXNzPSdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCc+PC9pPlJldG91clxcclxcbiAgICA8L2E+XFxyXFxuPC9kaXY+XCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItbGlzdC5jb21wb25lbnQuaHRtbFxuLy8gbW9kdWxlIGlkID0gOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 91:
/***/ function(module, exports) {

	eval("module.exports = \"\\r\\nh3 {\\r\\n  text-align: left; \\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.grid {\\r\\n  margin: 0;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.grid-list {\\r\\n\\tfloat: left;\\r\\n}\\r\\n\\r\\n.module {\\r\\n\\tpadding: 20px;\\r\\n\\ttext-align: center;\\r\\n\\tborder-radius: 2px;\\r\\n}\\r\\n\\r\\n.module .badge {\\r\\n\\tmax-height: 120px;\\r\\n\\tmin-width: 150px;\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItbGlzdC5jb21wb25lbnQuY3NzP2I5YjAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIlxcclxcbmgzIHtcXHJcXG4gIHRleHQtYWxpZ246IGxlZnQ7IFxcclxcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWQge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3JpZC1saXN0IHtcXHJcXG5cXHRmbG9hdDogbGVmdDtcXHJcXG59XFxyXFxuXFxyXFxuLm1vZHVsZSB7XFxyXFxuXFx0cGFkZGluZzogMjBweDtcXHJcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogMnB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kdWxlIC5iYWRnZSB7XFxyXFxuXFx0bWF4LWhlaWdodDogMTIwcHg7XFxyXFxuXFx0bWluLXdpZHRoOiAxNTBweDtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9jaGFyYWN0ZXJzL2NoYXJhY3Rlci1saXN0LmNvbXBvbmVudC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 92:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar character_service_1 = __webpack_require__(85);\r\n__webpack_require__(93);\r\nvar CharacterDetailsComponent = (function () {\r\n    function CharacterDetailsComponent(_service, _route, _router) {\r\n        this._service = _service;\r\n        this._route = _route;\r\n        this._router = _router;\r\n        this.imageWidth = 150;\r\n        this.imageHeight = 300;\r\n    }\r\n    CharacterDetailsComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this._route.params\r\n            .switchMap(function (params) { return _this._service.getCharacter(params['category'], params['id']); })\r\n            .subscribe(function (info) {\r\n            _this.previousId = info.previousId;\r\n            _this.nextId = info.nextId;\r\n            _this.character = info.character;\r\n        }, function (error) { return console.log(error); });\r\n    };\r\n    CharacterDetailsComponent.prototype.onBack = function () {\r\n        this._router.navigate(['../'], { relativeTo: this._route });\r\n    };\r\n    CharacterDetailsComponent.prototype.onEdit = function () {\r\n        this._router.navigate(['edit'], { relativeTo: this._route });\r\n    };\r\n    return CharacterDetailsComponent;\r\n}());\r\nCharacterDetailsComponent = __decorate([\r\n    core_1.Component({\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(95),\r\n        styles: [__webpack_require__(96)]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [character_service_1.CharacterService,\r\n        router_1.ActivatedRoute,\r\n        router_1.Router])\r\n], CharacterDetailsComponent);\r\nexports.CharacterDetailsComponent = CharacterDetailsComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItZGV0YWlscy5jb21wb25lbnQudHM/NjFlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyLCBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBDaGFyYWN0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9jaGFyYWN0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IElDaGFyYWN0ZXIsIElDaGFyYWN0ZXJJbmZvIH0gZnJvbSAnLi9jaGFyYWN0ZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3Ivc3dpdGNoTWFwJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZC50b1N0cmluZygpLFxyXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vY2hhcmFjdGVyLWRldGFpbHMuY29tcG9uZW50Lmh0bWwnKSxcclxuICAgIHN0eWxlczogW3JlcXVpcmUoJy4vY2hhcmFjdGVyLWRldGFpbHMuY29tcG9uZW50LmNzcycpXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyRGV0YWlsc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgY2hhcmFjdGVyOiBJQ2hhcmFjdGVyO1xyXG4gICAgaW1hZ2VXaWR0aDogbnVtYmVyID0gMTUwO1xyXG4gICAgaW1hZ2VIZWlnaHQ6IG51bWJlciA9IDMwMDtcclxuICAgIHByZXZpb3VzSWQ6IHN0cmluZztcclxuICAgIG5leHRJZDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgX3NlcnZpY2U6IENoYXJhY3RlclNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBfcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxyXG4gICAgICAgIHByaXZhdGUgX3JvdXRlcjogUm91dGVyXHJcbiAgICApIHt9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcblxyXG4gICAgICAgIHRoaXMuX3JvdXRlLnBhcmFtc1xyXG4gICAgICAgICAgICAuc3dpdGNoTWFwKChwYXJhbXM6IFBhcmFtcykgPT4gdGhpcy5fc2VydmljZS5nZXRDaGFyYWN0ZXIocGFyYW1zWydjYXRlZ29yeSddLCBwYXJhbXNbJ2lkJ10pKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAgICAgKGluZm86IElDaGFyYWN0ZXJJbmZvKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c0lkID0gaW5mby5wcmV2aW91c0lkO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dElkID0gaW5mby5uZXh0SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIgPSBpbmZvLmNoYXJhY3RlclxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvbkJhY2soKTogdm9pZCB7XHJcblxyXG4gICAgICAgIHRoaXMuX3JvdXRlci5uYXZpZ2F0ZShbJy4uLyddLCB7cmVsYXRpdmVUbzogdGhpcy5fcm91dGV9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgb25FZGl0KCk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLl9yb3V0ZXIubmF2aWdhdGUoWydlZGl0J10sIHtyZWxhdGl2ZVRvOiB0aGlzLl9yb3V0ZX0pO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL2NoYXJhY3RlcnMvY2hhcmFjdGVyLWRldGFpbHMuY29tcG9uZW50LnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFPQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBUkE7QUFDQTtBQVFBO0FBRUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUFBO0FBekNBO0FBTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQVhBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 95:
/***/ function(module, exports) {

	eval("module.exports = \"<div *ngIf=\\\"character\\\">\\r\\n    <h3>Fiche détaillée de {{character.name}}</h3>\\r\\n    <div>\\r\\n        <a class='btn btn-info' (click)='onBack()'>\\r\\n            <i class='glyphicon glyphicon-chevron-left'></i> Retour à la liste\\r\\n        </a>\\r\\n        <a class='btn btn-info' (click)='onEdit()'>\\r\\n            <i class='glyphicon glyphicon-pencil'></i> Modifier\\r\\n        </a>\\r\\n    </div>\\r\\n    <div>\\r\\n         <db-image [model]='character'></db-image>\\r\\n    </div>\\r\\n    <db-pager [currentId]=\\\"character.id\\\" [previousId]=\\\"previousId\\\" [nextId]=\\\"nextId\\\"></db-pager>\\r\\n</div>\\r\\n\\r\\n\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItZGV0YWlscy5jb21wb25lbnQuaHRtbD8yZWZmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2ICpuZ0lmPVxcXCJjaGFyYWN0ZXJcXFwiPlxcclxcbiAgICA8aDM+RmljaGUgZMOpdGFpbGzDqWUgZGUge3tjaGFyYWN0ZXIubmFtZX19PC9oMz5cXHJcXG4gICAgPGRpdj5cXHJcXG4gICAgICAgIDxhIGNsYXNzPSdidG4gYnRuLWluZm8nIChjbGljayk9J29uQmFjaygpJz5cXHJcXG4gICAgICAgICAgICA8aSBjbGFzcz0nZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQnPjwvaT4gUmV0b3VyIMOgIGxhIGxpc3RlXFxyXFxuICAgICAgICA8L2E+XFxyXFxuICAgICAgICA8YSBjbGFzcz0nYnRuIGJ0bi1pbmZvJyAoY2xpY2spPSdvbkVkaXQoKSc+XFxyXFxuICAgICAgICAgICAgPGkgY2xhc3M9J2dseXBoaWNvbiBnbHlwaGljb24tcGVuY2lsJz48L2k+IE1vZGlmaWVyXFxyXFxuICAgICAgICA8L2E+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2PlxcclxcbiAgICAgICAgIDxkYi1pbWFnZSBbbW9kZWxdPSdjaGFyYWN0ZXInPjwvZGItaW1hZ2U+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGItcGFnZXIgW2N1cnJlbnRJZF09XFxcImNoYXJhY3Rlci5pZFxcXCIgW3ByZXZpb3VzSWRdPVxcXCJwcmV2aW91c0lkXFxcIiBbbmV4dElkXT1cXFwibmV4dElkXFxcIj48L2RiLXBhZ2VyPlxcclxcbjwvZGl2PlxcclxcblxcclxcblwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2NoYXJhY3RlcnMvY2hhcmFjdGVyLWRldGFpbHMuY29tcG9uZW50Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 96:
/***/ function(module, exports) {

	eval("module.exports = \"\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItZGV0YWlscy5jb21wb25lbnQuY3NzPzg2YjUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIlwiXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItZGV0YWlscy5jb21wb25lbnQuY3NzXG4vLyBtb2R1bGUgaWQgPSA5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 97:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar character_service_1 = __webpack_require__(85);\r\nvar CharacterFormComponent = (function () {\r\n    function CharacterFormComponent(_service, _route, _router) {\r\n        this._service = _service;\r\n        this._route = _route;\r\n        this._router = _router;\r\n        this.category = this._route.snapshot.params['category'];\r\n    }\r\n    CharacterFormComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this.categories = [\r\n            \"db\",\r\n            \"dbz\"\r\n        ];\r\n        var id = this._route.snapshot.params['id'];\r\n        if (id) {\r\n            this._service\r\n                .getCharacter(this.category, id)\r\n                .subscribe(function (info) {\r\n                _this.model = Object.assign({}, info.character);\r\n            }, function (error) { return console.log(error); });\r\n        }\r\n        else {\r\n            this.model = {\r\n                id: null,\r\n                category: this.category,\r\n                name: '',\r\n                description: '',\r\n                imageUrl: ''\r\n            };\r\n        }\r\n    };\r\n    CharacterFormComponent.prototype.onSubmit = function () {\r\n        var _this = this;\r\n        this._service\r\n            .save(this.category, this.model)\r\n            .subscribe(function (character) { return _this.onBack(); }, function (error) { return console.log(error); });\r\n    };\r\n    CharacterFormComponent.prototype.onBack = function () {\r\n        this._router.navigate(['../'], { relativeTo: this._route });\r\n    };\r\n    return CharacterFormComponent;\r\n}());\r\nCharacterFormComponent = __decorate([\r\n    core_1.Component({\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(98),\r\n        styles: [__webpack_require__(99)]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [character_service_1.CharacterService,\r\n        router_1.ActivatedRoute,\r\n        router_1.Router])\r\n], CharacterFormComponent);\r\nexports.CharacterFormComponent = CharacterFormComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItZm9ybS5jb21wb25lbnQudHM/YjkwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgSUNoYXJhY3RlciwgSUNoYXJhY3RlckluZm8gfSBmcm9tICcuL2NoYXJhY3Rlcic7XHJcbmltcG9ydCB7IENoYXJhY3RlclNlcnZpY2UgfSBmcm9tICcuL2NoYXJhY3Rlci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZC50b1N0cmluZygpLFxyXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vY2hhcmFjdGVyLWZvcm0uY29tcG9uZW50Lmh0bWwnKSxcclxuICAgIHN0eWxlczogW3JlcXVpcmUoJy4vY2hhcmFjdGVyLWZvcm0uY29tcG9uZW50LmNzcycpXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBjYXRlZ29yaWVzOiBzdHJpbmdbXTtcclxuICAgIG1vZGVsOiBJQ2hhcmFjdGVyO1xyXG4gICAgY2F0ZWdvcnk6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIF9zZXJ2aWNlOiBDaGFyYWN0ZXJTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgX3JvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcclxuICAgICAgICBwcml2YXRlIF9yb3V0ZXI6IFJvdXRlclxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5jYXRlZ29yeSA9IHRoaXMuX3JvdXRlLnNuYXBzaG90LnBhcmFtc1snY2F0ZWdvcnknXTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNhdGVnb3JpZXMgPSBbXHJcbiAgICAgICAgICAgIFwiZGJcIixcclxuICAgICAgICAgICAgXCJkYnpcIlxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGxldCBpZCA9IHRoaXMuX3JvdXRlLnNuYXBzaG90LnBhcmFtc1snaWQnXTtcclxuXHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlcnZpY2VcclxuICAgICAgICAgICAgICAgIC5nZXRDaGFyYWN0ZXIodGhpcy5jYXRlZ29yeSwgaWQpXHJcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAgICAgICAgIChpbmZvOiBJQ2hhcmFjdGVySW5mbykgPT4geyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbCA9IE9iamVjdC5hc3NpZ24oe30sIGluZm8uY2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnJyxcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcclxuICAgICAgICAgICAgICAgIGltYWdlVXJsOiAnJ1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25TdWJtaXQoKSB7XHJcbiAgICAgICAgdGhpcy5fc2VydmljZVxyXG4gICAgICAgICAgICAgICAgLnNhdmUodGhpcy5jYXRlZ29yeSwgdGhpcy5tb2RlbClcclxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgICAgICAgICAgKGNoYXJhY3RlcjogSUNoYXJhY3RlcikgPT4gdGhpcy5vbkJhY2soKSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgb25CYWNrKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3JvdXRlci5uYXZpZ2F0ZShbJy4uLyddLCB7cmVsYXRpdmVUbzogdGhpcy5fcm91dGV9KTtcclxuICAgIH1cclxuXHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL2FwcC9jaGFyYWN0ZXJzL2NoYXJhY3Rlci1mb3JtLmNvbXBvbmVudC50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQTtBQU9BO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQXZEQTtBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFSQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 98:
/***/ function(module, exports) {

	eval("module.exports = \"<div class='container'>\\r\\n    <h1>Edition d'un personnage</h1>\\r\\n\\r\\n    <form *ngIf=\\\"model\\\" (ngSubmit)=\\\"onSubmit()\\\" #characterForm=\\\"ngForm\\\" novalidate>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n                <label for=\\\"category\\\">Catégorie</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"category\\\" \\r\\n                        required\\r\\n                        disabled\\r\\n                        [(ngModel)]=\\\"model.category\\\"\\r\\n                        name=\\\"category\\\">\\r\\n                    <option *ngFor=\\\"let cat of categories\\\" [value]=\\\"cat\\\">{{cat}}</option>\\r\\n                </select>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n                <label for=\\\"name\\\">Nom</label>\\r\\n                <input  type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" \\r\\n                        required\\r\\n                        [(ngModel)]=\\\"model.name\\\"\\r\\n                        name=\\\"name\\\"\\r\\n                        #name=\\\"ngModel\\\">\\r\\n                <div [hidden]=\\\"name.valid || name.pristine\\\"\\r\\n                    class=\\\"alert alert-danger\\\">\\r\\n                    Le nom est requis\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n                <label for=\\\"description\\\">Description</label>\\r\\n                <textarea class=\\\"form-control\\\" id=\\\"description\\\"\\r\\n                        required\\r\\n                        [(ngModel)]=\\\"model.description\\\"\\r\\n                        name=\\\"description\\\"></textarea>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n                <label for=\\\"imageUrl\\\">Url de l'image</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"imageUrl\\\" \\r\\n                        required\\r\\n                        [(ngModel)]=\\\"model.imageUrl\\\"\\r\\n                        name=\\\"imageUrl\\\">\\r\\n            </div>\\r\\n        </div>\\r\\n        <div>\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"!characterForm.form.valid\\\">Enregistrer</button>\\r\\n            <a class='btn btn-success' (click)='onBack()'>Retour</a>\\r\\n        </div>\\r\\n    </form>\\r\\n</div>\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItZm9ybS5jb21wb25lbnQuaHRtbD9jMDE2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPSdjb250YWluZXInPlxcclxcbiAgICA8aDE+RWRpdGlvbiBkJ3VuIHBlcnNvbm5hZ2U8L2gxPlxcclxcblxcclxcbiAgICA8Zm9ybSAqbmdJZj1cXFwibW9kZWxcXFwiIChuZ1N1Ym1pdCk9XFxcIm9uU3VibWl0KClcXFwiICNjaGFyYWN0ZXJGb3JtPVxcXCJuZ0Zvcm1cXFwiIG5vdmFsaWRhdGU+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXAgY29sLWxnLTZcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJjYXRlZ29yeVxcXCI+Q2F0w6lnb3JpZTwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgaWQ9XFxcImNhdGVnb3J5XFxcIiBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgWyhuZ01vZGVsKV09XFxcIm1vZGVsLmNhdGVnb3J5XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XFxcImNhdGVnb3J5XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gKm5nRm9yPVxcXCJsZXQgY2F0IG9mIGNhdGVnb3JpZXNcXFwiIFt2YWx1ZV09XFxcImNhdFxcXCI+e3tjYXR9fTwvb3B0aW9uPlxcclxcbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIGNvbC1sZy02XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwibmFtZVxcXCI+Tm9tPC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPGlucHV0ICB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBpZD1cXFwibmFtZVxcXCIgXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cXFwibW9kZWwubmFtZVxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVxcXCJuYW1lXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICNuYW1lPVxcXCJuZ01vZGVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwibmFtZS52YWxpZCB8fCBuYW1lLnByaXN0aW5lXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LWRhbmdlclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICBMZSBub20gZXN0IHJlcXVpc1xcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIGNvbC1sZy02XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwiZGVzY3JpcHRpb25cXFwiPkRlc2NyaXB0aW9uPC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJkZXNjcmlwdGlvblxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsobmdNb2RlbCldPVxcXCJtb2RlbC5kZXNjcmlwdGlvblxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVxcXCJkZXNjcmlwdGlvblxcXCI+PC90ZXh0YXJlYT5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIGNvbC1sZy02XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwiaW1hZ2VVcmxcXFwiPlVybCBkZSBsJ2ltYWdlPC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJpbWFnZVVybFxcXCIgXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cXFwibW9kZWwuaW1hZ2VVcmxcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cXFwiaW1hZ2VVcmxcXFwiPlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2PlxcclxcbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwic3VibWl0XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBbZGlzYWJsZWRdPVxcXCIhY2hhcmFjdGVyRm9ybS5mb3JtLnZhbGlkXFxcIj5FbnJlZ2lzdHJlcjwvYnV0dG9uPlxcclxcbiAgICAgICAgICAgIDxhIGNsYXNzPSdidG4gYnRuLXN1Y2Nlc3MnIChjbGljayk9J29uQmFjaygpJz5SZXRvdXI8L2E+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgPC9mb3JtPlxcclxcbjwvZGl2PlwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2NoYXJhY3RlcnMvY2hhcmFjdGVyLWZvcm0uY29tcG9uZW50Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 99:
/***/ function(module, exports) {

	eval("module.exports = \".ng-valid[required], .ng-valid.required {\\r\\n    border-left: 5px solid #42A948;\\r\\n}\\r\\n\\r\\n.ng-invalid:not(form)  {\\r\\n  border-left: 5px solid #a94442;\\r\\n}\\r\\n\\r\\ntextarea {\\r\\n  height: 100px;\\r\\n}\\r\\n\\r\\n.btn {\\r\\n  min-width: 100px;\\r\\n}\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2hhcmFjdGVycy9jaGFyYWN0ZXItZm9ybS5jb21wb25lbnQuY3NzPzgxYmQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIi5uZy12YWxpZFtyZXF1aXJlZF0sIC5uZy12YWxpZC5yZXF1aXJlZCB7XFxyXFxuICAgIGJvcmRlci1sZWZ0OiA1cHggc29saWQgIzQyQTk0ODtcXHJcXG59XFxyXFxuXFxyXFxuLm5nLWludmFsaWQ6bm90KGZvcm0pICB7XFxyXFxuICBib3JkZXItbGVmdDogNXB4IHNvbGlkICNhOTQ0NDI7XFxyXFxufVxcclxcblxcclxcbnRleHRhcmVhIHtcXHJcXG4gIGhlaWdodDogMTAwcHg7XFxyXFxufVxcclxcblxcclxcbi5idG4ge1xcclxcbiAgbWluLXdpZHRoOiAxMDBweDtcXHJcXG59XCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9jaGFyYWN0ZXJzL2NoYXJhY3Rlci1mb3JtLmNvbXBvbmVudC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 100:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar character_service_1 = __webpack_require__(85);\r\nvar book_service_1 = __webpack_require__(101);\r\nvar category_service_1 = __webpack_require__(87);\r\nvar CoreModule = (function () {\r\n    function CoreModule() {\r\n    }\r\n    return CoreModule;\r\n}());\r\nCoreModule = __decorate([\r\n    core_1.NgModule({\r\n        providers: [\r\n            character_service_1.CharacterService,\r\n            book_service_1.BookService,\r\n            category_service_1.CategoryService\r\n        ]\r\n    })\r\n], CoreModule);\r\nexports.CoreModule = CoreModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2NvcmUvY29yZS5tb2R1bGUudHM/NWFjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3JlU2VydmljZSB9IGZyb20gJy4vY29yZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2hhcmFjdGVyU2VydmljZSB9IGZyb20gJy4uL2NoYXJhY3RlcnMvY2hhcmFjdGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCb29rU2VydmljZSB9IGZyb20gJy4uL2Jvb2tzL2Jvb2suc2VydmljZSc7XHJcbmltcG9ydCB7IENhdGVnb3J5U2VydmljZSB9IGZyb20gJy4uL2NhdGVnb3JpZXMvY2F0ZWdvcnkuc2VydmljZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgQ2hhcmFjdGVyU2VydmljZSxcclxuICAgICAgICBCb29rU2VydmljZSxcclxuICAgICAgICBDYXRlZ29yeVNlcnZpY2VcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIENvcmVNb2R1bGUge1xyXG5cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL2NvcmUvY29yZS5tb2R1bGUudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQVNBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFGQTtBQVBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 101:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar http_1 = __webpack_require__(24);\r\nvar angular2_uuid_1 = __webpack_require__(86);\r\nvar rxjs_1 = __webpack_require__(102);\r\nvar BehaviorSubject_1 = __webpack_require__(43);\r\n__webpack_require__(88);\r\nvar BookService = (function () {\r\n    function BookService(_http) {\r\n        this._http = _http;\r\n        this._url = 'app/books';\r\n    }\r\n    BookService.prototype.init = function (categories) {\r\n        // for(let i = 0; i < 10; i++) {\r\n        //     console.log(UUID.UUID());\r\n        // }\r\n        var _this = this;\r\n        this._data = new BehaviorSubject_1.BehaviorSubject([]);\r\n        this._values = [];\r\n        rxjs_1.Observable.from(categories)\r\n            .concatMap(function (category) {\r\n            return rxjs_1.Observable.defer(function () { return _this._http.get(_this.getUrl(category)); });\r\n        }, function (_, response) { return response.json().data; })\r\n            .subscribe(function (data) { return _this._values = _this._values.concat(data); }, function (err) { return console.error(err); }, function () {\r\n            console.log('books loaded');\r\n            _this._data.next(_this._values);\r\n        });\r\n    };\r\n    BookService.prototype.getBooks = function (category) {\r\n        return this._data\r\n            .map(function (books) { return books.filter(function (b) { return b.category === category; }); });\r\n    };\r\n    BookService.prototype.getBook = function (category, id) {\r\n        var _this = this;\r\n        return this.getBooks(category)\r\n            .map(function (books) {\r\n            var b = books.filter(function (b) { return b.id === id; })[0];\r\n            return {\r\n                book: b,\r\n                previousId: _this.getPreviousId(books, b.id),\r\n                nextId: _this.getNextId(books, b.id)\r\n            };\r\n        });\r\n    };\r\n    BookService.prototype.save = function (category, book) {\r\n        if (book.id) {\r\n            return this.put(category, book);\r\n        }\r\n        return this.post(category, book);\r\n    };\r\n    BookService.prototype.put = function (category, book) {\r\n        var _this = this;\r\n        var headers = new http_1.Headers({\r\n            'Content-Type': 'application/json'\r\n        });\r\n        var url = this.getUrl(category) + \"/\" + book.id;\r\n        return this._http\r\n            .put(url, JSON.stringify(book), { headers: headers })\r\n            .map(function () {\r\n            var b = _this._values.filter(function (tBook) {\r\n                return tBook.id === book.id;\r\n            })[0];\r\n            b.title = book.title;\r\n            b.description = book.description;\r\n            b.imageUrl = book.imageUrl;\r\n            _this._data.next(_this._values);\r\n            return book;\r\n        })\r\n            .catch(this.handleError);\r\n    };\r\n    BookService.prototype.post = function (category, book) {\r\n        var _this = this;\r\n        var headers = new http_1.Headers({\r\n            'Content-Type': 'application/json'\r\n        });\r\n        book.id = angular2_uuid_1.UUID.UUID();\r\n        return this._http\r\n            .post(this.getUrl(category), JSON.stringify(book), { headers: headers })\r\n            .map(function (response) {\r\n            var c = response.json().data;\r\n            _this._values.push(c);\r\n            return c;\r\n        })\r\n            .catch(this.handleError);\r\n    };\r\n    BookService.prototype.handleError = function (error) {\r\n        return rxjs_1.Observable.throw(error || 'Server error');\r\n    };\r\n    BookService.prototype.getUrl = function (category) {\r\n        var url = 'app/books' + category;\r\n        return url;\r\n    };\r\n    BookService.prototype.getNextId = function (books, id) {\r\n        var ids = books.map(function (c) { return c.id; });\r\n        var currentIndex = ids.indexOf(id);\r\n        if (currentIndex >= 0 && currentIndex < ids.length - 1) {\r\n            return ids[currentIndex + 1];\r\n        }\r\n        return id;\r\n    };\r\n    BookService.prototype.getPreviousId = function (books, id) {\r\n        var ids = books.map(function (c) { return c.id; });\r\n        var currentIndex = ids.indexOf(id);\r\n        if (currentIndex > 0) {\r\n            return ids[currentIndex - 1];\r\n        }\r\n        return id;\r\n    };\r\n    return BookService;\r\n}());\r\nBookService = __decorate([\r\n    core_1.Injectable(),\r\n    __metadata(\"design:paramtypes\", [http_1.Http])\r\n], BookService);\r\nexports.BookService = BookService;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2suc2VydmljZS50cz8xMjRmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cCwgUmVzcG9uc2UsIEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9odHRwJztcclxuaW1wb3J0IHsgVVVJRCB9IGZyb20gJ2FuZ3VsYXIyLXV1aWQnO1xyXG5pbXBvcnQgeyBJQm9vaywgSUJvb2tJbmZvIH0gZnJvbSAnLi9ib29rJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzL0JlaGF2aW9yU3ViamVjdCc7XHJcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvbWFwJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJvb2tTZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIF91cmw6IHN0cmluZyA9ICdhcHAvYm9va3MnO1xyXG4gICAgcHJpdmF0ZSBfZGF0YTogQmVoYXZpb3JTdWJqZWN0PElCb29rW10+O1xyXG4gICAgcHJpdmF0ZSBfdmFsdWVzOiBJQm9va1tdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2h0dHA6IEh0dHApIHsgfVxyXG5cclxuICAgIHB1YmxpYyBpbml0KGNhdGVnb3JpZXM6IHN0cmluZ1tdKSB7XHJcblxyXG4gICAgICAgIC8vIGZvcihsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XHJcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKFVVSUQuVVVJRCgpKTtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PElCb29rW10+KFtdKTtcclxuICAgICAgICB0aGlzLl92YWx1ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgT2JzZXJ2YWJsZS5mcm9tKGNhdGVnb3JpZXMpXHJcbiAgICAgICAgICAgICAgICAuY29uY2F0TWFwKFxyXG4gICAgICAgICAgICAgICAgICAgIChjYXRlZ29yeTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmRlZmVyKCgpID0+IHRoaXMuX2h0dHAuZ2V0KHRoaXMuZ2V0VXJsKGNhdGVnb3J5KSkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAoXywgcmVzcG9uc2U6IFJlc3BvbnNlKSA9PiA8SUJvb2tbXT5yZXNwb25zZS5qc29uKCkuZGF0YVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShcclxuICAgICAgICAgICAgICAgICAgICAoZGF0YTogSUJvb2tbXSkgPT4gdGhpcy5fdmFsdWVzID0gdGhpcy5fdmFsdWVzLmNvbmNhdChkYXRhKSxcclxuICAgICAgICAgICAgICAgICAgICAoZXJyOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSxcclxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdib29rcyBsb2FkZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0YS5uZXh0KHRoaXMuX3ZhbHVlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRCb29rcyhjYXRlZ29yeTogc3RyaW5nKTogT2JzZXJ2YWJsZTxJQm9va1tdPiB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFcclxuICAgICAgICAgICAgICAgICAgICAubWFwKChib29rczogSUJvb2tbXSkgPT4gYm9va3MuZmlsdGVyKChiOiBJQm9vaykgPT4gYi5jYXRlZ29yeSA9PT0gY2F0ZWdvcnkpKTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBnZXRCb29rKGNhdGVnb3J5OiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPElCb29rSW5mbz4ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEJvb2tzKGNhdGVnb3J5KVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKGJvb2tzOiBJQm9va1tdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGIgPSBib29rcy5maWx0ZXIoKGI6IElCb29rKSA9PiBiLmlkID09PSBpZClbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vazogYixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzSWQ6IHRoaXMuZ2V0UHJldmlvdXNJZChib29rcywgYi5pZCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SWQ6IHRoaXMuZ2V0TmV4dElkKGJvb2tzLCBiLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzYXZlKGNhdGVnb3J5OiBzdHJpbmcsIGJvb2s6IElCb29rKTogT2JzZXJ2YWJsZTxJQm9vaz4ge1xyXG4gICAgICAgIGlmIChib29rLmlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1dChjYXRlZ29yeSwgYm9vayk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5wb3N0KGNhdGVnb3J5LCBib29rKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHB1dChjYXRlZ29yeTogc3RyaW5nLCBib29rOiBJQm9vayk6IE9ic2VydmFibGU8SUJvb2s+IHtcclxuICAgICAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgdXJsID0gYCR7dGhpcy5nZXRVcmwoY2F0ZWdvcnkpfS8ke2Jvb2suaWR9YDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHBcclxuICAgICAgICAgICAgICAgICAgICAucHV0KHVybCwgSlNPTi5zdHJpbmdpZnkoYm9vayksIHtoZWFkZXJzOiBoZWFkZXJzfSlcclxuICAgICAgICAgICAgICAgICAgICAubWFwKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSB0aGlzLl92YWx1ZXMuZmlsdGVyKCh0Qm9vazogSUJvb2spID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0Qm9vay5pZCA9PT0gYm9vay5pZDsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYi50aXRsZSA9IGJvb2sudGl0bGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGIuZGVzY3JpcHRpb24gPSBib29rLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiLmltYWdlVXJsID0gYm9vay5pbWFnZVVybDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEubmV4dCh0aGlzLl92YWx1ZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJvb2s7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwb3N0KGNhdGVnb3J5OiBzdHJpbmcsIGJvb2s6IElCb29rKTogT2JzZXJ2YWJsZTxJQm9vaz4ge1xyXG4gICAgICAgIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJvb2suaWQgPSBVVUlELlVVSUQoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHBcclxuICAgICAgICAgICAgICAgICAgICAucG9zdCh0aGlzLmdldFVybChjYXRlZ29yeSksIEpTT04uc3RyaW5naWZ5KGJvb2spLCB7aGVhZGVyczogaGVhZGVyc30pXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjID0gPElCb29rPnJlc3BvbnNlLmpzb24oKS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMucHVzaChjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGM7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlRXJyb3IoZXJyb3I6IFJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0VXJsKGNhdGVnb3J5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHVybCA9ICdhcHAvYm9va3MnICsgY2F0ZWdvcnk7XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldE5leHRJZChib29rczogSUJvb2tbXSwgaWQ6IHN0cmluZykge1xyXG5cclxuICAgICAgICBjb25zdCBpZHMgPSBib29rcy5tYXAoYyA9PiBjLmlkKTtcclxuICAgICAgICBsZXQgY3VycmVudEluZGV4ID0gaWRzLmluZGV4T2YoaWQpO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudEluZGV4ID49IDAgJiYgY3VycmVudEluZGV4IDwgaWRzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkc1tjdXJyZW50SW5kZXggKyAxXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpZDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQcmV2aW91c0lkKGJvb2tzOiBJQm9va1tdLCBpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgaWRzID0gYm9va3MubWFwKGMgPT4gYy5pZCk7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IGlkcy5pbmRleE9mKGlkKTtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkc1tjdXJyZW50SW5kZXggLSAxXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpZDtcclxuXHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL2FwcC9ib29rcy9ib29rLnNlcnZpY2UudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQU1BO0FBQUE7QUFKQTtBQUlBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBSUE7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQTdJQTtBQURBO0FBT0E7QUFOQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 385:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar common_1 = __webpack_require__(22);\r\nvar platform_browser_1 = __webpack_require__(21);\r\nvar forms_1 = __webpack_require__(386);\r\nvar image_component_1 = __webpack_require__(387);\r\nvar pager_component_1 = __webpack_require__(390);\r\nvar SharedModule = (function () {\r\n    function SharedModule() {\r\n    }\r\n    return SharedModule;\r\n}());\r\nSharedModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            platform_browser_1.BrowserModule\r\n        ],\r\n        declarations: [\r\n            image_component_1.ImageComponent,\r\n            pager_component_1.PagerComponent\r\n        ],\r\n        exports: [\r\n            image_component_1.ImageComponent,\r\n            pager_component_1.PagerComponent,\r\n            platform_browser_1.BrowserModule,\r\n            common_1.CommonModule,\r\n            forms_1.FormsModule\r\n        ]\r\n    })\r\n], SharedModule);\r\nexports.SharedModule = SharedModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL3NoYXJlZC9zaGFyZWQubW9kdWxlLnRzPzJiNjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgSW1hZ2VDb21wb25lbnQgfSBmcm9tICcuL2ltYWdlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBhZ2VyQ29tcG9uZW50IH0gZnJvbSAnLi9wYWdlci5jb21wb25lbnQnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBCcm93c2VyTW9kdWxlXHJcbiAgICBdLFxyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgSW1hZ2VDb21wb25lbnQsXHJcbiAgICAgICAgUGFnZXJDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgSW1hZ2VDb21wb25lbnQsXHJcbiAgICAgICAgUGFnZXJDb21wb25lbnQsXHJcbiAgICAgICAgQnJvd3Nlck1vZHVsZSxcclxuICAgICAgICBDb21tb25Nb2R1bGUsXHJcbiAgICAgICAgRm9ybXNNb2R1bGVcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFNoYXJlZE1vZHVsZSB7IH1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL2FwcC9zaGFyZWQvc2hhcmVkLm1vZHVsZS50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWtCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 386:
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * @license Angular v2.4.4\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(3), __webpack_require__(358), __webpack_require__(4), __webpack_require__(5), __webpack_require__(70)) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Base class for control directives.\n     *\n     * Only used internally in the forms module.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AbstractControlDirective = (function () {\n        function AbstractControlDirective() {\n        }\n        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { throw new Error('unimplemented'); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.value : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.valid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.invalid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.pending : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.errors : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.pristine : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.dirty : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.touched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.untouched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.disabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.enabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.statusChanges : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.valueChanges : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.reset = function (value) {\n            if (value === void 0) { value = undefined; }\n            if (this.control)\n                this.control.reset(value);\n        };\n        /**\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return this.control ? this.control.hasError(errorCode, path) : false;\n        };\n        /**\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return this.control ? this.control.getError(errorCode, path) : null;\n        };\n        return AbstractControlDirective;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * A directive that contains multiple {\\@link NgControl}s.\n     *\n     * Only used by the forms module.\n     *\n     * \\@stable\n     */\n    var ControlContainer = (function (_super) {\n        __extends$1(ControlContainer, _super);\n        function ControlContainer() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n            /**\n             * Get the form to which this container belongs.\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlContainer.prototype, \"path\", {\n            /**\n             * Get the path to this container.\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return ControlContainer;\n    }(AbstractControlDirective));\n\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPresent(obj) {\n        return obj != null;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isBlank(obj) {\n        return obj == null;\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    /**\n     * @param {?} o\n     * @return {?}\n     */\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.merge = function (m1, m2) {\n            var /** @type {?} */ m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.equals = function (m1, m2) {\n            var /** @type {?} */ k1 = Object.keys(m1);\n            var /** @type {?} */ k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n                var /** @type {?} */ key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        /**\n         * @param {?} arr\n         * @param {?} condition\n         * @return {?}\n         */\n        ListWrapper.findLast = function (arr, condition) {\n            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n                if (condition(arr[i])) {\n                    return arr[i];\n                }\n            }\n            return null;\n        };\n        /**\n         * @param {?} list\n         * @param {?} items\n         * @return {?}\n         */\n        ListWrapper.removeAll = function (list, items) {\n            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n                var /** @type {?} */ index = list.indexOf(items[i]);\n                if (index > -1) {\n                    list.splice(index, 1);\n                }\n            }\n        };\n        /**\n         * @param {?} list\n         * @param {?} el\n         * @return {?}\n         */\n        ListWrapper.remove = function (list, el) {\n            var /** @type {?} */ index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        /**\n         * @param {?} list\n         * @return {?}\n         */\n        ListWrapper.flatten = function (list) {\n            return list.reduce(function (flat, item) {\n                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n                return ((flat)).concat(flatItem);\n            }, []);\n        };\n        return ListWrapper;\n    }());\n\n    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function isEmptyInputValue(value) {\n        // we don't check for string here so it also works with arrays\n        return value == null || value.length === 0;\n    }\n    /**\n     * Providers for validators to be used for {@link FormControl}s in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * ### Example\n     *\n     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n     * @stable\n     */\n    var /** @type {?} */ NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n    /**\n     * Providers for asynchronous validators to be used for {@link FormControl}s\n     * in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * See {@link NG_VALIDATORS} for more details.\n     *\n     * @stable\n     */\n    var /** @type {?} */ NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n    /**\n     * Provides a set of validators used by form controls.\n     *\n     * A validator is a function that processes a {\\@link FormControl} or collection of\n     * controls and returns a map of errors. A null map means that validation has passed.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * var loginControl = new FormControl(\"\", Validators.required)\n     * ```\n     *\n     * \\@stable\n     */\n    var Validators = (function () {\n        function Validators() {\n        }\n        /**\n         * Validator that requires controls to have a non-empty value.\n         * @param {?} control\n         * @return {?}\n         */\n        Validators.required = function (control) {\n            return isEmptyInputValue(control.value) ? { 'required': true } : null;\n        };\n        /**\n         * Validator that requires control value to be true.\n         * @param {?} control\n         * @return {?}\n         */\n        Validators.requiredTrue = function (control) {\n            return control.value === true ? null : { 'required': true };\n        };\n        /**\n         * Validator that requires controls to have a value of a minimum length.\n         * @param {?} minLength\n         * @return {?}\n         */\n        Validators.minLength = function (minLength) {\n            return function (control) {\n                if (isEmptyInputValue(control.value)) {\n                    return null; // don't validate empty values to allow optional controls\n                }\n                var /** @type {?} */ length = control.value ? control.value.length : 0;\n                return length < minLength ?\n                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires controls to have a value of a maximum length.\n         * @param {?} maxLength\n         * @return {?}\n         */\n        Validators.maxLength = function (maxLength) {\n            return function (control) {\n                var /** @type {?} */ length = control.value ? control.value.length : 0;\n                return length > maxLength ?\n                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires a control to match a regex to its value.\n         * @param {?} pattern\n         * @return {?}\n         */\n        Validators.pattern = function (pattern) {\n            if (!pattern)\n                return Validators.nullValidator;\n            var /** @type {?} */ regex;\n            var /** @type {?} */ regexStr;\n            if (typeof pattern === 'string') {\n                regexStr = \"^\" + pattern + \"$\";\n                regex = new RegExp(regexStr);\n            }\n            else {\n                regexStr = pattern.toString();\n                regex = pattern;\n            }\n            return function (control) {\n                if (isEmptyInputValue(control.value)) {\n                    return null; // don't validate empty values to allow optional controls\n                }\n                var /** @type {?} */ value = control.value;\n                return regex.test(value) ? null :\n                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n            };\n        };\n        /**\n         * No-op validator.\n         * @param {?} c\n         * @return {?}\n         */\n        Validators.nullValidator = function (c) { return null; };\n        /**\n         * Compose multiple validators into a single function that returns the union\n         * of the individual error maps.\n         * @param {?} validators\n         * @return {?}\n         */\n        Validators.compose = function (validators) {\n            if (!validators)\n                return null;\n            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                return _mergeErrors(_executeValidators(control, presentValidators));\n            };\n        };\n        /**\n         * @param {?} validators\n         * @return {?}\n         */\n        Validators.composeAsync = function (validators) {\n            if (!validators)\n                return null;\n            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                var /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n                return Promise.all(promises).then(_mergeErrors);\n            };\n        };\n        return Validators;\n    }());\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function _convertToPromise(obj) {\n        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n    }\n    /**\n     * @param {?} control\n     * @param {?} validators\n     * @return {?}\n     */\n    function _executeValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    /**\n     * @param {?} control\n     * @param {?} validators\n     * @return {?}\n     */\n    function _executeAsyncValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    /**\n     * @param {?} arrayOfErrors\n     * @return {?}\n     */\n    function _mergeErrors(arrayOfErrors) {\n        var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n        }, {});\n        return Object.keys(res).length === 0 ? null : res;\n    }\n\n    /**\n     * Used to provide a {@link ControlValueAccessor} for form controls.\n     *\n     * See {@link DefaultValueAccessor} for how to implement one.\n     * @stable\n     */\n    var /** @type {?} */ NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\n    var /** @type {?} */ CHECKBOX_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n        multi: true,\n    };\n    /**\n     * The accessor for writing a value and listening to changes on a checkbox input element.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n     *  ```\n     *\n     *  \\@stable\n     */\n    var CheckboxControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        CheckboxControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                        providers: [CHECKBOX_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return CheckboxControlValueAccessor;\n    }());\n\n    var /** @type {?} */ DEFAULT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The default accessor for writing a value and listening to changes that is used by the\n     * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"text\" name=\"searchQuery\" ngModel>\n     *  ```\n     *\n     *  \\@stable\n     */\n    var DefaultValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function DefaultValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.writeValue = function (value) {\n            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        DefaultValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                        // TODO: vsavkin replace the above selector with the one below it once\n                        // https://github.com/angular/angular/issues/3011 is implemented\n                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [DEFAULT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        DefaultValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return DefaultValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function normalizeValidator(validator) {\n        if (((validator)).validate) {\n            return function (c) { return ((validator)).validate(c); };\n        }\n        else {\n            return (validator);\n        }\n    }\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function normalizeAsyncValidator(validator) {\n        if (((validator)).validate) {\n            return function (c) { return ((validator)).validate(c); };\n        }\n        else {\n            return (validator);\n        }\n    }\n\n    var /** @type {?} */ NUMBER_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a number value and listening to changes that is used by the\n     * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"number\" [(ngModel)]=\"age\">\n     *  ```\n     */\n    var NumberValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function NumberValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.writeValue = function (value) {\n            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        NumberValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [NUMBER_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        NumberValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return NumberValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @return {?}\n     */\n    function unimplemented() {\n        throw new Error('unimplemented');\n    }\n    /**\n     * A base class that all control directive extend.\n     * It binds a {\\@link FormControl} object to a DOM element.\n     *\n     * Used internally by Angular forms.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var NgControl = (function (_super) {\n        __extends$2(NgControl, _super);\n        function NgControl() {\n            _super.apply(this, arguments);\n            /** @internal */\n            this._parent = null;\n            this.name = null;\n            this.valueAccessor = null;\n            /** @internal */\n            this._rawValidators = [];\n            /** @internal */\n            this._rawAsyncValidators = [];\n        }\n        Object.defineProperty(NgControl.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return (unimplemented()); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return (unimplemented()); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @abstract\n         * @param {?} newValue\n         * @return {?}\n         */\n        NgControl.prototype.viewToModelUpdate = function (newValue) { };\n        return NgControl;\n    }(AbstractControlDirective));\n\n    var /** @type {?} */ RADIO_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * Internal class used by Angular to uncheck radio buttons with the matching name.\n     */\n    var RadioControlRegistry = (function () {\n        function RadioControlRegistry() {\n            this._accessors = [];\n        }\n        /**\n         * @param {?} control\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.add = function (control, accessor) {\n            this._accessors.push([control, accessor]);\n        };\n        /**\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.remove = function (accessor) {\n            for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n                if (this._accessors[i][1] === accessor) {\n                    this._accessors.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        /**\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.select = function (accessor) {\n            var _this = this;\n            this._accessors.forEach(function (c) {\n                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                    c[1].fireUncheck(accessor.value);\n                }\n            });\n        };\n        /**\n         * @param {?} controlPair\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n            if (!controlPair[0].control)\n                return false;\n            return controlPair[0]._parent === accessor._control._parent &&\n                controlPair[1].name === accessor.name;\n        };\n        RadioControlRegistry.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        RadioControlRegistry.ctorParameters = function () { return []; };\n        return RadioControlRegistry;\n    }());\n    /**\n     * \\@whatItDoes Writes radio control values and listens to radio control changes.\n     *\n     * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n     * to keep the view synced with the {\\@link FormControl} model.\n     *\n     * \\@howToUse\n     *\n     * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n     * value accessor will be active on any radio control that has a form directive. You do\n     * **not** need to add a special selector to activate it.\n     *\n     * ### How to use radio buttons with form directives\n     *\n     * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n     * in the same group have the same `name` attribute.  Radio buttons with different `name`\n     * attributes do not affect each other.\n     *\n     * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n     *\n     * When using radio buttons in a reactive form, radio buttons in the same group should have the\n     * same `formControlName`. You can also add a `name` attribute, but it's optional.\n     *\n     * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n     *\n     *  * **npm package**: `\\@angular/forms`\n     *\n     *  \\@stable\n     */\n    var RadioControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         * @param {?} _registry\n         * @param {?} _injector\n         */\n        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this._registry = _registry;\n            this._injector = _injector;\n            this.onChange = function () { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.ngOnInit = function () {\n            this._control = this._injector.get(NgControl);\n            this._checkName();\n            this._registry.add(this._control, this);\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.writeValue = function (value) {\n            this._state = value === this.value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this._fn = fn;\n            this.onChange = function () {\n                fn(_this.value);\n                _this._registry.select(_this);\n            };\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype._checkName = function () {\n            if (this.name && this.formControlName && this.name !== this.formControlName) {\n                this._throwNameError();\n            }\n            if (!this.name && this.formControlName)\n                this.name = this.formControlName;\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype._throwNameError = function () {\n            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n        };\n        RadioControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                        providers: [RADIO_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RadioControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n            { type: RadioControlRegistry, },\n            { type: _angular_core.Injector, },\n        ]; };\n        RadioControlValueAccessor.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'formControlName': [{ type: _angular_core.Input },],\n            'value': [{ type: _angular_core.Input },],\n        };\n        return RadioControlValueAccessor;\n    }());\n\n    var /** @type {?} */ RANGE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a range value and listening to changes that is used by the\n     * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"range\" [(ngModel)]=\"age\" >\n     *  ```\n     */\n    var RangeValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function RangeValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        RangeValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [RANGE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RangeValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return RangeValueAccessor;\n    }());\n\n    var /** @type {?} */ SELECT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * @param {?} id\n     * @param {?} value\n     * @return {?}\n     */\n    function _buildValueString(id, value) {\n        if (id == null)\n            return \"\" + value;\n        if (!isPrimitive(value))\n            value = 'Object';\n        return (id + \": \" + value).slice(0, 50);\n    }\n    /**\n     * @param {?} valueString\n     * @return {?}\n     */\n    function _extractId(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * \\@whatItDoes Writes values and listens to changes on a select element.\n     *\n     * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n     * to keep the view synced with the {\\@link FormControl} model.\n     *\n     * \\@howToUse\n     *\n     * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n     * value accessor will be active on any select control that has a form directive. You do\n     * **not** need to add a special selector to activate it.\n     *\n     * ### How to use select controls with form directives\n     *\n     * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n     * attribute to the main `<select>` tag.\n     *\n     * If your option values are simple strings, you can bind to the normal `value` property\n     * on the option.  If your option values happen to be objects (and you'd like to save the\n     * selection in your form as an object), use `ngValue` instead:\n     *\n     * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n     *\n     * In reactive forms, you'll also want to add your form directive (`formControlName` or\n     * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n     * choice of binding to the  `value` or `ngValue` property on the select's options.\n     *\n     * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n     *\n     * Note: We listen to the 'change' event because 'input' events aren't fired\n     * for selects in Firefox and IE:\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * \\@stable\n     */\n    var SelectControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function SelectControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.writeValue = function (value) {\n            this.value = value;\n            var /** @type {?} */ valueString = _buildValueString(this._getOptionId(value), value);\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (valueString) {\n                _this.value = valueString;\n                fn(_this._getOptionValue(valueString));\n            };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id), value))\n                    return id;\n            }\n            return null;\n        };\n        /**\n         * \\@internal\n         * @param {?} valueString\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var /** @type {?} */ id = _extractId(valueString);\n            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n        };\n        SelectControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return SelectControlValueAccessor;\n    }());\n    /**\n     * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * \\@howToUse\n     *\n     * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n     *\n     * \\@stable\n     */\n    var NgSelectOption = (function () {\n        /**\n         * @param {?} _element\n         * @param {?} _renderer\n         * @param {?} _select\n         */\n        function NgSelectOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (this._select)\n                this.id = this._select._registerOption();\n        }\n        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._select._optionMap.set(this.id, value);\n                this._setElementValue(_buildValueString(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                this._setElementValue(value);\n                if (this._select)\n                    this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        NgSelectOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /**\n         * @return {?}\n         */\n        NgSelectOption.prototype.ngOnDestroy = function () {\n            if (this._select) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectOption.ctorParameters = function () { return [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ]; };\n        NgSelectOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectOption;\n    }());\n\n    var /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * @param {?} id\n     * @param {?} value\n     * @return {?}\n     */\n    function _buildValueString$1(id, value) {\n        if (id == null)\n            return \"\" + value;\n        if (typeof value === 'string')\n            value = \"'\" + value + \"'\";\n        if (!isPrimitive(value))\n            value = 'Object';\n        return (id + \": \" + value).slice(0, 50);\n    }\n    /**\n     * @param {?} valueString\n     * @return {?}\n     */\n    function _extractId$1(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * The accessor for writing a value and listening to changes on a select element.\n     *\n     * \\@stable\n     */\n    var SelectMultipleControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n            var _this = this;\n            this.value = value;\n            var /** @type {?} */ optionSelectedStateSetter;\n            if (Array.isArray(value)) {\n                // convert values to ids\n                var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n            }\n            else {\n                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n            }\n            this._optionMap.forEach(optionSelectedStateSetter);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (_) {\n                var /** @type {?} */ selected = [];\n                if (_.hasOwnProperty('selectedOptions')) {\n                    var /** @type {?} */ options = _.selectedOptions;\n                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                        var /** @type {?} */ opt = options.item(i);\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n                else {\n                    var /** @type {?} */ options = (_.options);\n                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                        var /** @type {?} */ opt = options.item(i);\n                        if (opt.selected) {\n                            var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                            selected.push(val);\n                        }\n                    }\n                }\n                _this.value = selected;\n                fn(selected);\n            };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n            var /** @type {?} */ id = (this._idCounter++).toString();\n            this._optionMap.set(id, value);\n            return id;\n        };\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id)._value, value))\n                    return id;\n            }\n            return null;\n        };\n        /**\n         * \\@internal\n         * @param {?} valueString\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var /** @type {?} */ id = _extractId$1(valueString);\n            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n        };\n        SelectMultipleControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return SelectMultipleControlValueAccessor;\n    }());\n    /**\n     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * ### Example\n     *\n     * ```\n     * <select multiple name=\"city\" ngModel>\n     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n     * </select>\n     * ```\n     */\n    var NgSelectMultipleOption = (function () {\n        /**\n         * @param {?} _element\n         * @param {?} _renderer\n         * @param {?} _select\n         */\n        function NgSelectMultipleOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (this._select) {\n                this.id = this._select._registerOption(this);\n            }\n        }\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select) {\n                    this._value = value;\n                    this._setElementValue(_buildValueString$1(this.id, value));\n                    this._select.writeValue(this._select.value);\n                }\n                else {\n                    this._setElementValue(value);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /**\n         * \\@internal\n         * @param {?} selected\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n        };\n        /**\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n            if (this._select) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectMultipleOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectMultipleOption.ctorParameters = function () { return [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ]; };\n        NgSelectMultipleOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectMultipleOption;\n    }());\n\n    /**\n     * @param {?} name\n     * @param {?} parent\n     * @return {?}\n     */\n    function controlPath(name, parent) {\n        return parent.path.concat([name]);\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function setUpControl(control, dir) {\n        if (!control)\n            _throwError(dir, 'Cannot find control with');\n        if (!dir.valueAccessor)\n            _throwError(dir, 'No value accessor for form control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n        dir.valueAccessor.writeValue(control.value);\n        // view -> model\n        dir.valueAccessor.registerOnChange(function (newValue) {\n            dir.viewToModelUpdate(newValue);\n            control.markAsDirty();\n            control.setValue(newValue, { emitModelToViewChange: false });\n        });\n        // touched\n        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n        control.registerOnChange(function (newValue, emitModelEvent) {\n            // control -> view\n            dir.valueAccessor.writeValue(newValue);\n            // control -> ngModel\n            if (emitModelEvent)\n                dir.viewToModelUpdate(newValue);\n        });\n        if (dir.valueAccessor.setDisabledState) {\n            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n        }\n        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n        dir._rawValidators.forEach(function (validator) {\n            if (((validator)).registerOnValidatorChange)\n                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (((validator)).registerOnValidatorChange)\n                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function cleanUpControl(control, dir) {\n        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n        dir._rawValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange) {\n                validator.registerOnValidatorChange(null);\n            }\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange) {\n                validator.registerOnValidatorChange(null);\n            }\n        });\n        if (control)\n            control._clearChangeFns();\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function setUpFormContainer(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    }\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function _noControlError(dir) {\n        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n    }\n    /**\n     * @param {?} dir\n     * @param {?} message\n     * @return {?}\n     */\n    function _throwError(dir, message) {\n        var /** @type {?} */ messageEnd;\n        if (dir.path.length > 1) {\n            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n        }\n        else if (dir.path[0]) {\n            messageEnd = \"name: '\" + dir.path + \"'\";\n        }\n        else {\n            messageEnd = 'unspecified name attribute';\n        }\n        throw new Error(message + \" \" + messageEnd);\n    }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function composeValidators(validators) {\n        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n    }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function composeAsyncValidators(validators) {\n        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n            null;\n    }\n    /**\n     * @param {?} changes\n     * @param {?} viewModel\n     * @return {?}\n     */\n    function isPropertyUpdated(changes, viewModel) {\n        if (!changes.hasOwnProperty('model'))\n            return false;\n        var /** @type {?} */ change = changes['model'];\n        if (change.isFirstChange())\n            return true;\n        return !looseIdentical(viewModel, change.currentValue);\n    }\n    var /** @type {?} */ BUILTIN_ACCESSORS = [\n        CheckboxControlValueAccessor,\n        RangeValueAccessor,\n        NumberValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n    ];\n    /**\n     * @param {?} valueAccessor\n     * @return {?}\n     */\n    function isBuiltInAccessor(valueAccessor) {\n        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n    }\n    /**\n     * @param {?} dir\n     * @param {?} valueAccessors\n     * @return {?}\n     */\n    function selectValueAccessor(dir, valueAccessors) {\n        if (!valueAccessors)\n            return null;\n        var /** @type {?} */ defaultAccessor;\n        var /** @type {?} */ builtinAccessor;\n        var /** @type {?} */ customAccessor;\n        valueAccessors.forEach(function (v) {\n            if (v.constructor === DefaultValueAccessor) {\n                defaultAccessor = v;\n            }\n            else if (isBuiltInAccessor(v)) {\n                if (builtinAccessor)\n                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n                builtinAccessor = v;\n            }\n            else {\n                if (customAccessor)\n                    _throwError(dir, 'More than one custom value accessor matches form control with');\n                customAccessor = v;\n            }\n        });\n        if (customAccessor)\n            return customAccessor;\n        if (builtinAccessor)\n            return builtinAccessor;\n        if (defaultAccessor)\n            return defaultAccessor;\n        _throwError(dir, 'No valid value accessor for form control with');\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n     *\n     * \\@stable\n     */\n    var AbstractFormGroupDirective = (function (_super) {\n        __extends(AbstractFormGroupDirective, _super);\n        function AbstractFormGroupDirective() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormGroup(this);\n        };\n        /**\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormGroup(this);\n            }\n        };\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n            /**\n             * Get the {\\@link FormGroup} backing this binding.\n             * @return {?}\n             */\n            get: function () { return this.formDirective.getFormGroup(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n            /**\n             * Get the path to this control group.\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n            /**\n             * Get the {\\@link Form} to which this group belongs.\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n        return AbstractFormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var AbstractControlStatus = (function () {\n        /**\n         * @param {?} cd\n         */\n        function AbstractControlStatus(cd) {\n            this._cd = cd;\n        }\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.untouched : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.touched : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.pristine : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.dirty : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.valid : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.invalid : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.pending : false; },\n            enumerable: true,\n            configurable: true\n        });\n        return AbstractControlStatus;\n    }());\n    var /** @type {?} */ ngControlStatusHost = {\n        '[class.ng-untouched]': 'ngClassUntouched',\n        '[class.ng-touched]': 'ngClassTouched',\n        '[class.ng-pristine]': 'ngClassPristine',\n        '[class.ng-dirty]': 'ngClassDirty',\n        '[class.ng-valid]': 'ngClassValid',\n        '[class.ng-invalid]': 'ngClassInvalid',\n        '[class.ng-pending]': 'ngClassPending',\n    };\n    /**\n     * Directive automatically applied to Angular form controls that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * \\@stable\n     */\n    var NgControlStatus = (function (_super) {\n        __extends$3(NgControlStatus, _super);\n        /**\n         * @param {?} cd\n         */\n        function NgControlStatus(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatus.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n        ];\n        /** @nocollapse */\n        NgControlStatus.ctorParameters = function () { return [\n            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n        ]; };\n        return NgControlStatus;\n    }(AbstractControlStatus));\n    /**\n     * Directive automatically applied to Angular form groups that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * \\@stable\n     */\n    var NgControlStatusGroup = (function (_super) {\n        __extends$3(NgControlStatusGroup, _super);\n        /**\n         * @param {?} cd\n         */\n        function NgControlStatusGroup(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatusGroup.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                        host: ngControlStatusHost\n                    },] },\n        ];\n        /** @nocollapse */\n        NgControlStatusGroup.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n        ]; };\n        return NgControlStatusGroup;\n    }(AbstractControlStatus));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Use by directives and components to emit custom Events.\n     *\n     * ### Examples\n     *\n     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n     * title gets clicked:\n     *\n     * ```\n     * \\@Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n     *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * The events payload can be accessed by the parameter `$event` on the components output event\n     * handler:\n     *\n     * ```\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n     * https://github.com/jhusain/observable-spec\n     *\n     * Once a reference implementation of the spec is available, switch to it.\n     * \\@stable\n     */\n    var EventEmitter = (function (_super) {\n        __extends$5(EventEmitter, _super);\n        /**\n         * Creates an instance of [EventEmitter], which depending on [isAsync],\n         * delivers events synchronously or asynchronously.\n         * @param {?=} isAsync\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        /**\n         * @param {?=} generatorOrNext\n         * @param {?=} error\n         * @param {?=} complete\n         * @return {?}\n         */\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var /** @type {?} */ schedulerFn;\n            var /** @type {?} */ errorFn = function (err) { return null; };\n            var /** @type {?} */ completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                    function (value) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n     */\n    var /** @type {?} */ VALID = 'VALID';\n    /**\n     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n     */\n    var /** @type {?} */ INVALID = 'INVALID';\n    /**\n     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n     * errors are not yet available for the input value.\n     */\n    var /** @type {?} */ PENDING = 'PENDING';\n    /**\n     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n     * calculations of validity or value.\n     */\n    var /** @type {?} */ DISABLED = 'DISABLED';\n    /**\n     * @param {?} control\n     * @param {?} path\n     * @param {?} delimiter\n     * @return {?}\n     */\n    function _find(control, path, delimiter) {\n        if (path == null)\n            return null;\n        if (!(path instanceof Array)) {\n            path = ((path)).split(delimiter);\n        }\n        if (path instanceof Array && (path.length === 0))\n            return null;\n        return ((path)).reduce(function (v, name) {\n            if (v instanceof FormGroup) {\n                return v.controls[name] || null;\n            }\n            if (v instanceof FormArray) {\n                return v.at(/** @type {?} */ (name)) || null;\n            }\n            return null;\n        }, control);\n    }\n    /**\n     * @param {?} r\n     * @return {?}\n     */\n    function toObservable(r) {\n        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n    }\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function coerceToValidator(validator) {\n        return Array.isArray(validator) ? composeValidators(validator) : validator;\n    }\n    /**\n     * @param {?} asyncValidator\n     * @return {?}\n     */\n    function coerceToAsyncValidator(asyncValidator) {\n        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n    }\n    /**\n     * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n     * {\\@link FormArray}.\n     *\n     * It provides some of the shared behavior that all controls and groups of controls have, like\n     * running validators, calculating status, and resetting state. It also defines the properties\n     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n     * instantiated directly.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AbstractControl = (function () {\n        /**\n         * @param {?} validator\n         * @param {?} asyncValidator\n         */\n        function AbstractControl(validator, asyncValidator) {\n            this.validator = validator;\n            this.asyncValidator = asyncValidator;\n            /** @internal */\n            this._onCollectionChange = function () { };\n            this._pristine = true;\n            this._touched = false;\n            /** @internal */\n            this._onDisabledChange = [];\n        }\n        Object.defineProperty(AbstractControl.prototype, \"value\", {\n            /**\n             * The value of the control.\n             * @return {?}\n             */\n            get: function () { return this._value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"parent\", {\n            /**\n             * The parent control.\n             * @return {?}\n             */\n            get: function () { return this._parent; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"status\", {\n            /**\n             * The validation status of the control. There are four possible\n             * validation statuses:\n             *\n             * * **VALID**:  control has passed all validation checks\n             * * **INVALID**: control has failed at least one validation check\n             * * **PENDING**: control is in the midst of conducting a validation check\n             * * **DISABLED**: control is exempt from validation checks\n             *\n             * These statuses are mutually exclusive, so a control cannot be\n             * both valid AND invalid or invalid AND disabled.\n             * @return {?}\n             */\n            get: function () { return this._status; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n            /**\n             * A control is `valid` when its `status === VALID`.\n             *\n             * In order to have this status, the control must have passed all its\n             * validation checks.\n             * @return {?}\n             */\n            get: function () { return this._status === VALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n            /**\n             * A control is `invalid` when its `status === INVALID`.\n             *\n             * In order to have this status, the control must have failed\n             * at least one of its validation checks.\n             * @return {?}\n             */\n            get: function () { return this._status === INVALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n            /**\n             * A control is `pending` when its `status === PENDING`.\n             *\n             * In order to have this status, the control must be in the\n             * middle of conducting a validation check.\n             * @return {?}\n             */\n            get: function () { return this._status == PENDING; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n            /**\n             * A control is `disabled` when its `status === DISABLED`.\n             *\n             * Disabled controls are exempt from validation checks and\n             * are not included in the aggregate value of their ancestor\n             * controls.\n             * @return {?}\n             */\n            get: function () { return this._status === DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n            /**\n             * A control is `enabled` as long as its `status !== DISABLED`.\n             *\n             * In other words, it has a status of `VALID`, `INVALID`, or\n             * `PENDING`.\n             * @return {?}\n             */\n            get: function () { return this._status !== DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n            /**\n             * Returns any errors generated by failing validation. If there\n             * are no errors, it will return null.\n             * @return {?}\n             */\n            get: function () { return this._errors; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n            /**\n             * A control is `pristine` if the user has not yet changed\n             * the value in the UI.\n             *\n             * Note that programmatic changes to a control's value will\n             * *not* mark it dirty.\n             * @return {?}\n             */\n            get: function () { return this._pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n            /**\n             * A control is `dirty` if the user has changed the value\n             * in the UI.\n             *\n             * Note that programmatic changes to a control's value will\n             * *not* mark it dirty.\n             * @return {?}\n             */\n            get: function () { return !this.pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n            /**\n             * A control is marked `touched` once the user has triggered\n             * a `blur` event on it.\n             * @return {?}\n             */\n            get: function () { return this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n            /**\n             * A control is `untouched` if the user has not yet triggered\n             * a `blur` event on it.\n             * @return {?}\n             */\n            get: function () { return !this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n            /**\n             * Emits an event every time the value of the control changes, in\n             * the UI or programmatically.\n             * @return {?}\n             */\n            get: function () { return this._valueChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n            /**\n             * Emits an event every time the validation status of the control\n             * is re-calculated.\n             * @return {?}\n             */\n            get: function () { return this._statusChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Sets the synchronous validators that are active on this control.  Calling\n         * this will overwrite any existing sync validators.\n         * @param {?} newValidator\n         * @return {?}\n         */\n        AbstractControl.prototype.setValidators = function (newValidator) {\n            this.validator = coerceToValidator(newValidator);\n        };\n        /**\n         * Sets the async validators that are active on this control. Calling this\n         * will overwrite any existing async validators.\n         * @param {?} newValidator\n         * @return {?}\n         */\n        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n            this.asyncValidator = coerceToAsyncValidator(newValidator);\n        };\n        /**\n         * Empties out the sync validator list.\n         * @return {?}\n         */\n        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n        /**\n         * Empties out the async validator list.\n         * @return {?}\n         */\n        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n        /**\n         * Marks the control as `touched`.\n         *\n         * This will also mark all direct ancestors as `touched` to maintain\n         * the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = true;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `untouched`.\n         *\n         * If the control has any children, it will also mark all children as `untouched`\n         * to maintain the model, and re-calculate the `touched` status of all parent\n         * controls.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsUntouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = false;\n            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n            if (this._parent && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `dirty`.\n         *\n         * This will also mark all direct ancestors as `dirty` to maintain\n         * the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsDirty = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = false;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsDirty({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `pristine`.\n         *\n         * If the control has any children, it will also mark all children as `pristine`\n         * to maintain the model, and re-calculate the `pristine` status of all parent\n         * controls.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsPristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = true;\n            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n            if (this._parent && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `pending`.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsPending = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._status = PENDING;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsPending({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Disables the control. This means the control will be exempt from validation checks and\n         * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n         *\n         * If the control has children, all children will be disabled to maintain the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.disable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = DISABLED;\n            this._errors = null;\n            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n            this._updateValue();\n            if (emitEvent !== false) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n        };\n        /**\n         * Enables the control. This means the control will be included in validation checks and\n         * the aggregate value of its parent. Its status is re-calculated based on its value and\n         * its validators.\n         *\n         * If the control has children, all children will be enabled.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.enable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = VALID;\n            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n        };\n        /**\n         * @param {?} onlySelf\n         * @return {?}\n         */\n        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n            if (this._parent && !onlySelf) {\n                this._parent.updateValueAndValidity();\n                this._parent._updatePristine();\n                this._parent._updateTouched();\n            }\n        };\n        /**\n         * @param {?} parent\n         * @return {?}\n         */\n        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n        /**\n         * Sets the value of the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.setValue = function (value, options) { };\n        /**\n         * Patches the value of the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.patchValue = function (value, options) { };\n        /**\n         * Resets the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?=} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.reset = function (value, options) { };\n        /**\n         * Re-calculates the value and validation status of the control.\n         *\n         * By default, it will also update the value and validity of its ancestors.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._setInitialStatus();\n            this._updateValue();\n            if (this.enabled) {\n                this._errors = this._runValidator();\n                this._status = this._calculateStatus();\n                if (this._status === VALID || this._status === PENDING) {\n                    this._runAsyncValidator(emitEvent);\n                }\n            }\n            if (emitEvent !== false) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            if (this._parent && !onlySelf) {\n                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updateTreeValidity = function (_a) {\n            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._runValidator = function () {\n            return this.validator ? this.validator(this) : null;\n        };\n        /**\n         * @param {?} emitEvent\n         * @return {?}\n         */\n        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n            var _this = this;\n            if (this.asyncValidator) {\n                this._status = PENDING;\n                this._cancelExistingSubscription();\n                var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n                this._asyncValidationSubscription =\n                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._cancelExistingSubscription = function () {\n            if (this._asyncValidationSubscription) {\n                this._asyncValidationSubscription.unsubscribe();\n            }\n        };\n        /**\n         * Sets errors on a form control.\n         *\n         * This is used when validations are run manually by the user, rather than automatically.\n         *\n         * Calling `setErrors` will also update the validity of the parent control.\n         *\n         * ### Example\n         *\n         * ```\n         * const login = new FormControl(\"someLogin\");\n         * login.setErrors({\n         *   \"notUnique\": true\n         * });\n         *\n         * expect(login.valid).toEqual(false);\n         * expect(login.errors).toEqual({\"notUnique\": true});\n         *\n         * login.setValue(\"someOtherLogin\");\n         *\n         * expect(login.valid).toEqual(true);\n         * ```\n         * @param {?} errors\n         * @param {?=} __1\n         * @return {?}\n         */\n        AbstractControl.prototype.setErrors = function (errors, _a) {\n            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n            this._errors = errors;\n            this._updateControlsErrors(emitEvent !== false);\n        };\n        /**\n         * Retrieves a child control given the control's name or path.\n         *\n         * Paths can be passed in as an array or a string delimited by a dot.\n         *\n         * To get a control nested within a `person` sub-group:\n         *\n         * * `this.form.get('person.name');`\n         *\n         * -OR-\n         *\n         * * `this.form.get(['person', 'name']);`\n         * @param {?} path\n         * @return {?}\n         */\n        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n        /**\n         * Returns true if the control with the given path has the error specified. Otherwise\n         * returns null or undefined.\n         *\n         * If no path is given, it checks for the error on the present control.\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControl.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            var /** @type {?} */ control = path ? this.get(path) : this;\n            return control && control._errors ? control._errors[errorCode] : null;\n        };\n        /**\n         * Returns true if the control with the given path has the error specified. Otherwise\n         * returns false.\n         *\n         * If no path is given, it checks for the error on the present control.\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControl.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return !!this.getError(errorCode, path);\n        };\n        Object.defineProperty(AbstractControl.prototype, \"root\", {\n            /**\n             * Retrieves the top-level ancestor of this control.\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ x = this;\n                while (x._parent) {\n                    x = x._parent;\n                }\n                return x;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@internal\n         * @param {?} emitEvent\n         * @return {?}\n         */\n        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n            this._status = this._calculateStatus();\n            if (emitEvent) {\n                this._statusChanges.emit(this._status);\n            }\n            if (this._parent) {\n                this._parent._updateControlsErrors(emitEvent);\n            }\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        AbstractControl.prototype._initObservables = function () {\n            this._valueChanges = new EventEmitter();\n            this._statusChanges = new EventEmitter();\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._calculateStatus = function () {\n            if (this._allControlsDisabled())\n                return DISABLED;\n            if (this._errors)\n                return INVALID;\n            if (this._anyControlsHaveStatus(PENDING))\n                return PENDING;\n            if (this._anyControlsHaveStatus(INVALID))\n                return INVALID;\n            return VALID;\n        };\n        /**\n         * \\@internal\n         * @abstract\n         * @return {?}\n         */\n        AbstractControl.prototype._updateValue = function () { };\n        /**\n         * \\@internal\n         * @abstract\n         * @param {?} cb\n         * @return {?}\n         */\n        AbstractControl.prototype._forEachChild = function (cb) { };\n        /**\n         * \\@internal\n         * @abstract\n         * @param {?} condition\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControls = function (condition) { };\n        /**\n         * \\@internal\n         * @abstract\n         * @return {?}\n         */\n        AbstractControl.prototype._allControlsDisabled = function () { };\n        /**\n         * \\@internal\n         * @param {?} status\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n            return this._anyControls(function (control) { return control.status === status; });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsDirty = function () {\n            return this._anyControls(function (control) { return control.dirty; });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsTouched = function () {\n            return this._anyControls(function (control) { return control.touched; });\n        };\n        /**\n         * \\@internal\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updatePristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = !this._anyControlsDirty();\n            if (this._parent && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updateTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = this._anyControlsTouched();\n            if (this._parent && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} formState\n         * @return {?}\n         */\n        AbstractControl.prototype._isBoxedValue = function (formState) {\n            return typeof formState === 'object' && formState !== null &&\n                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n        };\n        /**\n         * \\@internal\n         * @param {?} fn\n         * @return {?}\n         */\n        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n        return AbstractControl;\n    }());\n    /**\n     * \\@whatItDoes Tracks the value and validation status of an individual form control.\n     *\n     * It is one of the three fundamental building blocks of Angular forms, along with\n     * {\\@link FormGroup} and {\\@link FormArray}.\n     *\n     * \\@howToUse\n     *\n     * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n     * first argument. Example:\n     *\n     * ```ts\n     * const ctrl = new FormControl('some value');\n     * console.log(ctrl.value);     // 'some value'\n     * ```\n     *\n     * You can also initialize the control with a form state object on instantiation,\n     * which includes both the value and whether or not the control is disabled.\n     * You can't use the value key without the disabled key; both are required\n     * to use this way of initialization.\n     *\n     * ```ts\n     * const ctrl = new FormControl({value: 'n/a', disabled: true});\n     * console.log(ctrl.value);     // 'n/a'\n     * console.log(ctrl.status);   // 'DISABLED'\n     * ```\n     *\n     * To include a sync validator (or an array of sync validators) with the control,\n     * pass it in as the second argument. Async validators are also supported, but\n     * have to be passed in separately as the third arg.\n     *\n     * ```ts\n     * const ctrl = new FormControl('', Validators.required);\n     * console.log(ctrl.value);     // ''\n     * console.log(ctrl.status);   // 'INVALID'\n     * ```\n     *\n     * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * \\@stable\n     */\n    var FormControl = (function (_super) {\n        __extends$6(FormControl, _super);\n        /**\n         * @param {?=} formState\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormControl(formState, validator, asyncValidator) {\n            if (formState === void 0) { formState = null; }\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n            /** @internal */\n            this._onChange = [];\n            this._applyFormState(formState);\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n            this._initObservables();\n        }\n        /**\n         * Set the value of the form control to `value`.\n         *\n         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n         * and not its parent component. This defaults to false.\n         *\n         * If `emitEvent` is `true`, this\n         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n         * to true (as it falls through to `updateValueAndValidity`).\n         *\n         * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n         * specified.\n         *\n         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n         * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormControl.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n            this._value = value;\n            if (this._onChange.length && emitModelToViewChange !== false) {\n                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });\n            }\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * Patches the value of a control.\n         *\n         * This function is functionally the same as {\\@link FormControl.setValue} at this level.\n         * It exists for symmetry with {\\@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n         * where it does behave differently.\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        FormControl.prototype.patchValue = function (value, options) {\n            if (options === void 0) { options = {}; }\n            this.setValue(value, options);\n        };\n        /**\n         * Resets the form control. This means by default:\n         *\n         * * it is marked as `pristine`\n         * * it is marked as `untouched`\n         * * value is set to null\n         *\n         * You can also reset to a specific form state by passing through a standalone\n         * value or a form state object that contains both a value and a disabled state\n         * (these are the only two properties that cannot be calculated).\n         *\n         * Ex:\n         *\n         * ```ts\n         * this.control.reset('Nancy');\n         *\n         * console.log(this.control.value);  // 'Nancy'\n         * ```\n         *\n         * OR\n         *\n         * ```\n         * this.control.reset({value: 'Nancy', disabled: true});\n         *\n         * console.log(this.control.value);  // 'Nancy'\n         * console.log(this.control.status);  // 'DISABLED'\n         * ```\n         * @param {?=} formState\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormControl.prototype.reset = function (formState, _a) {\n            if (formState === void 0) { formState = null; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._applyFormState(formState);\n            this.markAsPristine({ onlySelf: onlySelf });\n            this.markAsUntouched({ onlySelf: onlySelf });\n            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormControl.prototype._updateValue = function () { };\n        /**\n         * \\@internal\n         * @param {?} condition\n         * @return {?}\n         */\n        FormControl.prototype._anyControls = function (condition) { return false; };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n        /**\n         * Register a listener for change events.\n         * @param {?} fn\n         * @return {?}\n         */\n        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormControl.prototype._clearChangeFns = function () {\n            this._onChange = [];\n            this._onDisabledChange = [];\n            this._onCollectionChange = function () { };\n        };\n        /**\n         * Register a listener for disabled events.\n         * @param {?} fn\n         * @return {?}\n         */\n        FormControl.prototype.registerOnDisabledChange = function (fn) {\n            this._onDisabledChange.push(fn);\n        };\n        /**\n         * \\@internal\n         * @param {?} cb\n         * @return {?}\n         */\n        FormControl.prototype._forEachChild = function (cb) { };\n        /**\n         * @param {?} formState\n         * @return {?}\n         */\n        FormControl.prototype._applyFormState = function (formState) {\n            if (this._isBoxedValue(formState)) {\n                this._value = formState.value;\n                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                    this.enable({ onlySelf: true, emitEvent: false });\n            }\n            else {\n                this._value = formState;\n            }\n        };\n        return FormControl;\n    }(AbstractControl));\n    /**\n     * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n     * instances.\n     *\n     * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n     * with each control name as the key.  It calculates its status by reducing the statuses\n     * of its children. For example, if one of the controls in a group is invalid, the entire\n     * group becomes invalid.\n     *\n     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {\\@link FormControl} and {\\@link FormArray}.\n     *\n     * \\@howToUse\n     *\n     * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n     * argument. The key for each child will be the name under which it is registered.\n     *\n     * ### Example\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('Nancy', Validators.minLength(2)),\n     *   last: new FormControl('Drew'),\n     * });\n     *\n     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n     * console.log(form.status);  // 'VALID'\n     * ```\n     *\n     * You can also include group-level validators as the second arg, or group-level async\n     * validators as the third arg. These come in handy when you want to perform validation\n     * that considers the value of more than one child control.\n     *\n     * ### Example\n     *\n     * ```\n     * const form = new FormGroup({\n     *   password: new FormControl('', Validators.minLength(2)),\n     *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n     * }, passwordMatchValidator);\n     *\n     *\n     * function passwordMatchValidator(g: FormGroup) {\n     *    return g.get('password').value === g.get('passwordConfirm').value\n     *       ? null : {'mismatch': true};\n     * }\n     * ```\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * \\@stable\n     */\n    var FormGroup = (function (_super) {\n        __extends$6(FormGroup, _super);\n        /**\n         * @param {?} controls\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormGroup(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Registers a control with the group's list of controls.\n         *\n         * This method does not update value or validity of the control, so for\n         * most cases you'll want to use {\\@link FormGroup.addControl} instead.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.registerControl = function (name, control) {\n            if (this.controls[name])\n                return this.controls[name];\n            this.controls[name] = control;\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n            return control;\n        };\n        /**\n         * Add a control to this group.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.addControl = function (name, control) {\n            this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Remove a control from this group.\n         * @param {?} name\n         * @return {?}\n         */\n        FormGroup.prototype.removeControl = function (name) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            delete (this.controls[name]);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Replace an existing control.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.setControl = function (name, control) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            delete (this.controls[name]);\n            if (control)\n                this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Check whether there is an enabled control with the given name in the group.\n         *\n         * It will return false for disabled controls. If you'd like to check for\n         * existence in the group only, use {\\@link AbstractControl.get} instead.\n         * @param {?} controlName\n         * @return {?}\n         */\n        FormGroup.prototype.contains = function (controlName) {\n            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n        };\n        /**\n         *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n         *  the structure of the group, with control names as keys.\n         *\n         * This method performs strict checks, so it will throw an error if you try\n         * to set the value of a control that doesn't exist or if you exclude the\n         * value of a control.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const form = new FormGroup({\n         *     first: new FormControl(),\n         *     last: new FormControl()\n         *  });\n         *  console.log(form.value);   // {first: null, last: null}\n         *\n         *  form.setValue({first: 'Nancy', last: 'Drew'});\n         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n         *\n         *  ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._checkAllValuesPresent(value);\n            Object.keys(value).forEach(function (name) {\n                _this._throwIfControlMissing(name);\n                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n         *  names as keys, and will do its best to match the values to the correct controls\n         *  in the group.\n         *\n         *  It accepts both super-sets and sub-sets of the group without throwing an error.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const form = new FormGroup({\n         *     first: new FormControl(),\n         *     last: new FormControl()\n         *  });\n         *  console.log(form.value);   // {first: null, last: null}\n         *\n         *  form.patchValue({first: 'Nancy'});\n         *  console.log(form.value);   // {first: 'Nancy', last: null}\n         *\n         *  ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            Object.keys(value).forEach(function (name) {\n                if (_this.controls[name]) {\n                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * Resets the {\\@link FormGroup}. This means by default:\n         *\n         * * The group and all descendants are marked `pristine`\n         * * The group and all descendants are marked `untouched`\n         * * The value of all descendants will be null or null maps\n         *\n         * You can also reset to a specific form state by passing in a map of states\n         * that matches the structure of your form, with control names as keys. The state\n         * can be a standalone value or a form state object with both a value and a disabled\n         * status.\n         *\n         * ### Example\n         *\n         * ```ts\n         * this.form.reset({first: 'name', last: 'last name'});\n         *\n         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n         * ```\n         *\n         * - OR -\n         *\n         * ```\n         * this.form.reset({\n         *   first: {value: 'name', disabled: true},\n         *   last: 'last'\n         * });\n         *\n         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n         * console.log(this.form.get('first').status);  // 'DISABLED'\n         * ```\n         * @param {?=} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = {}; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._forEachChild(function (control, name) {\n                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n         *\n         * If you'd like to include all values regardless of disabled status, use this method.\n         * Otherwise, the `value` property is the best way to get the value of the group.\n         * @return {?}\n         */\n        FormGroup.prototype.getRawValue = function () {\n            return this._reduceChildren({}, function (acc, control, name) {\n                acc[name] = control.value;\n                return acc;\n            });\n        };\n        /**\n         * \\@internal\n         * @param {?} name\n         * @return {?}\n         */\n        FormGroup.prototype._throwIfControlMissing = function (name) {\n            if (!Object.keys(this.controls).length) {\n                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.controls[name]) {\n                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} cb\n         * @return {?}\n         */\n        FormGroup.prototype._forEachChild = function (cb) {\n            var _this = this;\n            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroup.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) {\n                control.setParent(_this);\n                control._registerOnCollectionChange(_this._onCollectionChange);\n            });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n        /**\n         * \\@internal\n         * @param {?} condition\n         * @return {?}\n         */\n        FormGroup.prototype._anyControls = function (condition) {\n            var _this = this;\n            var /** @type {?} */ res = false;\n            this._forEachChild(function (control, name) {\n                res = res || (_this.contains(name) && condition(control));\n            });\n            return res;\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroup.prototype._reduceValue = function () {\n            var _this = this;\n            return this._reduceChildren({}, function (acc, control, name) {\n                if (control.enabled || _this.disabled) {\n                    acc[name] = control.value;\n                }\n                return acc;\n            });\n        };\n        /**\n         * \\@internal\n         * @param {?} initValue\n         * @param {?} fn\n         * @return {?}\n         */\n        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n            var /** @type {?} */ res = initValue;\n            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n            return res;\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroup.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n                var controlName = _a[_i];\n                if (this.controls[controlName].enabled) {\n                    return false;\n                }\n            }\n            return Object.keys(this.controls).length > 0 || this.disabled;\n        };\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        FormGroup.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, name) {\n                if (value[name] === undefined) {\n                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n                }\n            });\n        };\n        return FormGroup;\n    }(AbstractControl));\n    /**\n     * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl}\n     * instances.\n     *\n     * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n     * It calculates its status by reducing the statuses of its children. For example, if one of\n     * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n     *\n     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {\\@link FormControl} and {\\@link FormGroup}.\n     *\n     * \\@howToUse\n     *\n     * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n     * argument.\n     *\n     * ### Example\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl('Nancy', Validators.minLength(2)),\n     *   new FormControl('Drew'),\n     * ]);\n     *\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * console.log(arr.status);  // 'VALID'\n     * ```\n     *\n     * You can also include array-level validators as the second arg, or array-level async\n     * validators as the third arg. These come in handy when you want to perform validation\n     * that considers the value of more than one child control.\n     *\n     * ### Adding or removing controls\n     *\n     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n     * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n     * the `FormArray` directly, as that will result in strange and unexpected behavior such\n     * as broken change detection.\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * \\@stable\n     */\n    var FormArray = (function (_super) {\n        __extends$6(FormArray, _super);\n        /**\n         * @param {?} controls\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormArray(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Get the {\\@link AbstractControl} at the given `index` in the array.\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype.at = function (index) { return this.controls[index]; };\n        /**\n         * Insert a new {\\@link AbstractControl} at the end of the array.\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.push = function (control) {\n            this.controls.push(control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n         * @param {?} index\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.insert = function (index, control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Remove the control at the given `index` in the array.\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype.removeAt = function (index) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            this.controls.splice(index, 1);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Replace an existing control.\n         * @param {?} index\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.setControl = function (index, control) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            this.controls.splice(index, 1);\n            if (control) {\n                this.controls.splice(index, 0, control);\n                this._registerControl(control);\n            }\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        Object.defineProperty(FormArray.prototype, \"length\", {\n            /**\n             * Length of the control array.\n             * @return {?}\n             */\n            get: function () { return this.controls.length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n         *  the structure of the control.\n         *\n         * This method performs strict checks, so it will throw an error if you try\n         * to set the value of a control that doesn't exist or if you exclude the\n         * value of a control.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const arr = new FormArray([\n         *     new FormControl(),\n         *     new FormControl()\n         *  ]);\n         *  console.log(arr.value);   // [null, null]\n         *\n         *  arr.setValue(['Nancy', 'Drew']);\n         *  console.log(arr.value);   // ['Nancy', 'Drew']\n         *  ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._checkAllValuesPresent(value);\n            value.forEach(function (newValue, index) {\n                _this._throwIfControlMissing(index);\n                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n         *  structure of the control, and will do its best to match the values to the correct\n         *  controls in the group.\n         *\n         *  It accepts both super-sets and sub-sets of the array without throwing an error.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const arr = new FormArray([\n         *     new FormControl(),\n         *     new FormControl()\n         *  ]);\n         *  console.log(arr.value);   // [null, null]\n         *\n         *  arr.patchValue(['Nancy']);\n         *  console.log(arr.value);   // ['Nancy', null]\n         *  ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            value.forEach(function (newValue, index) {\n                if (_this.at(index)) {\n                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * Resets the {\\@link FormArray}. This means by default:\n         *\n         * * The array and all descendants are marked `pristine`\n         * * The array and all descendants are marked `untouched`\n         * * The value of all descendants will be null or null maps\n         *\n         * You can also reset to a specific form state by passing in an array of states\n         * that matches the structure of the control. The state can be a standalone value\n         * or a form state object with both a value and a disabled status.\n         *\n         * ### Example\n         *\n         * ```ts\n         * this.arr.reset(['name', 'last name']);\n         *\n         * console.log(this.arr.value);  // ['name', 'last name']\n         * ```\n         *\n         * - OR -\n         *\n         * ```\n         * this.arr.reset([\n         *   {value: 'name', disabled: true},\n         *   'last'\n         * ]);\n         *\n         * console.log(this.arr.value);  // ['name', 'last name']\n         * console.log(this.arr.get(0).status);  // 'DISABLED'\n         * ```\n         * @param {?=} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = []; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._forEachChild(function (control, index) {\n                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         * The aggregate value of the array, including any disabled controls.\n         *\n         * If you'd like to include all values regardless of disabled status, use this method.\n         * Otherwise, the `value` property is the best way to get the value of the array.\n         * @return {?}\n         */\n        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n        /**\n         * \\@internal\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype._throwIfControlMissing = function (index) {\n            if (!this.controls.length) {\n                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.at(index)) {\n                throw new Error(\"Cannot find form control at index \" + index);\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} cb\n         * @return {?}\n         */\n        FormArray.prototype._forEachChild = function (cb) {\n            this.controls.forEach(function (control, index) { cb(control, index); });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormArray.prototype._updateValue = function () {\n            var _this = this;\n            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n        };\n        /**\n         * \\@internal\n         * @param {?} condition\n         * @return {?}\n         */\n        FormArray.prototype._anyControls = function (condition) {\n            return this.controls.some(function (control) { return control.enabled && condition(control); });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormArray.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) { return _this._registerControl(control); });\n        };\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        FormArray.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, i) {\n                if (value[i] === undefined) {\n                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n                }\n            });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormArray.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n                var control = _a[_i];\n                if (control.enabled)\n                    return false;\n            }\n            return this.controls.length > 0 || this.disabled;\n        };\n        /**\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype._registerControl = function (control) {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        };\n        return FormArray;\n    }(AbstractControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formDirectiveProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n    };\n    var /** @type {?} */ resolvedPromise = Promise.resolve(null);\n    /**\n     * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n     * to track aggregate form value and validation status.\n     *\n     * \\@howToUse\n     *\n     * As soon as you import the `FormsModule`, this directive becomes active by default on\n     * all `<form>` tags.  You don't need to add a special selector.\n     *\n     * You can export the directive into a local template variable using `ngForm` as the key\n     * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n     * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n     * will give you access to the aggregate value and validity status of the form, as well as\n     * user interaction properties like `dirty` and `touched`.\n     *\n     * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n     * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n     * sub-groups within the form.\n     *\n     * You can listen to the directive's `ngSubmit` event to be notified when the user has\n     * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n     * submission event.\n     *\n     * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * * **NgModule**: `FormsModule`\n     *\n     *  \\@stable\n     */\n    var NgForm = (function (_super) {\n        __extends$4(NgForm, _super);\n        /**\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function NgForm(validators, asyncValidators) {\n            _super.call(this);\n            this._submitted = false;\n            this.ngSubmit = new EventEmitter();\n            this.form =\n                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        }\n        Object.defineProperty(NgForm.prototype, \"submitted\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"controls\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form.controls; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.addControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                dir._control = (container.registerControl(dir.name, dir.control));\n                setUpControl(dir.control, dir);\n                dir.control.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.removeControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                if (container) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.addFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                var /** @type {?} */ group = new FormGroup({});\n                setUpFormContainer(group, dir);\n                container.registerControl(dir.name, group);\n                group.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.removeFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                if (container) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @param {?} value\n         * @return {?}\n         */\n        NgForm.prototype.updateModel = function (dir, value) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ ctrl = (_this.form.get(dir.path));\n                ctrl.setValue(value);\n            });\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n        /**\n         * @param {?} $event\n         * @return {?}\n         */\n        NgForm.prototype.onSubmit = function ($event) {\n            this._submitted = true;\n            this.ngSubmit.emit($event);\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        NgForm.prototype.onReset = function () { this.resetForm(); };\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        NgForm.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /**\n         * \\@internal\n         * @param {?} path\n         * @return {?}\n         */\n        NgForm.prototype._findContainer = function (path) {\n            path.pop();\n            return path.length ? (this.form.get(path)) : this.form;\n        };\n        NgForm.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                        providers: [formDirectiveProvider],\n                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                        outputs: ['ngSubmit'],\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgForm.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        return NgForm;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */ Examples = {\n        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n    };\n\n    var TemplateDrivenErrors = (function () {\n        function TemplateDrivenErrors() {\n        }\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.modelParentException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.formGroupNameException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.missingNameException = function () {\n            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.modelGroupParentException = function () {\n            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        return TemplateDrivenErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ modelGroupProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n    };\n    /**\n     * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n     *\n     * \\@howToUse\n     *\n     * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n     * within `<form>` tags).\n     *\n     * Use this directive if you'd like to create a sub-group within a form. This can\n     * come in handy if you want to validate a sub-group of your form separately from\n     * the rest of your form, or if some values in your domain model make more sense to\n     * consume together in a nested object.\n     *\n     * Pass in the name you'd like this sub-group to have and it will become the key\n     * for the sub-group in the form's full value. You can also export the directive into\n     * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n     *\n     * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * * **NgModule**: `FormsModule`\n     *\n     * \\@stable\n     */\n    var NgModelGroup = (function (_super) {\n        __extends$8(NgModelGroup, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function NgModelGroup(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        NgModelGroup.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelGroupParentException();\n            }\n        };\n        NgModelGroup.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n        ];\n        /** @nocollapse */\n        NgModelGroup.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        NgModelGroup.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n        };\n        return NgModelGroup;\n    }(AbstractFormGroupDirective));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formControlBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n    };\n    /**\n     * `ngModel` forces an additional change detection run when its inputs change:\n     * E.g.:\n     * ```\n     * <div>{{myModel.valid}}</div>\n     * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n     * ```\n     * I.e. `ngModel` can export itself on the element and then be used in the template.\n     * Normally, this would result in expressions before the `input` that use the exported directive\n     * to have and old value as they have been\n     * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n     * detection run.\n     *\n     * Notes:\n     * - this is just one extra run no matter how many `ngModel` have been changed.\n     * - this is a general problem when using `exportAs` for directives!\n     */\n    var /** @type {?} */ resolvedPromise$1 = Promise.resolve(null);\n    /**\n     * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n     * to a form control element.\n     *\n     * The {\\@link FormControl} instance will track the value, user interaction, and\n     * validation status of the control and keep the view synced with the model. If used\n     * within a parent form, the directive will also register itself with the form as a child\n     * control.\n     *\n     * \\@howToUse\n     *\n     * This directive can be used by itself or as part of a larger form. All you need is the\n     * `ngModel` selector to activate it.\n     *\n     * It accepts a domain model as an optional {\\@link \\@Input}. If you have a one-way binding\n     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n     * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n     * the domain model in your class as well.\n     *\n     * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n     * validity state), you can also export the directive into a local template variable using\n     * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n     * will fall through to the control anyway, so you can access them directly. You can see a\n     * full list of properties directly available in {\\@link AbstractControlDirective}.\n     *\n     * The following is an example of a simple standalone control using `ngModel`:\n     *\n     * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n     *\n     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n     * so that the control can be registered with the parent form under that name.\n     *\n     * It's worth noting that in the context of a parent form, you often can skip one-way or\n     * two-way binding because the parent form will sync the value for you. You can access\n     * its properties by exporting it into a local template variable using `ngForm` (ex:\n     * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n     *\n     * If you do need to populate initial values into your form, using a one-way binding for\n     * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n     * than the domain model's value on submit.\n     *\n     * Take a look at an example of using `ngModel` within a form:\n     *\n     * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n     *\n     * To see `ngModel` examples with different form control types, see:\n     *\n     * * Radio buttons: {\\@link RadioControlValueAccessor}\n     * * Selects: {\\@link SelectControlValueAccessor}\n     *\n     * **npm package**: `\\@angular/forms`\n     *\n     * **NgModule**: `FormsModule`\n     *\n     *  \\@stable\n     */\n    var NgModel = (function (_super) {\n        __extends$7(NgModel, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            /** @internal */\n            this._control = new FormControl();\n            /** @internal */\n            this._registered = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        NgModel.prototype.ngOnChanges = function (changes) {\n            this._checkForErrors();\n            if (!this._registered)\n                this._setUpControl();\n            if ('isDisabled' in changes) {\n                this._updateDisabled(changes);\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this._updateValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n        Object.defineProperty(NgModel.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        NgModel.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._setUpControl = function () {\n            this._isStandalone() ? this._setUpStandalone() :\n                this.formDirective.addControl(this);\n            this._registered = true;\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._isStandalone = function () {\n            return !this._parent || (this.options && this.options.standalone);\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._setUpStandalone = function () {\n            setUpControl(this._control, this);\n            this._control.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkForErrors = function () {\n            if (!this._isStandalone()) {\n                this._checkParentType();\n            }\n            this._checkName();\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                TemplateDrivenErrors.formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelParentException();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkName = function () {\n            if (this.options && this.options.name)\n                this.name = this.options.name;\n            if (!this._isStandalone() && !this.name) {\n                TemplateDrivenErrors.missingNameException();\n            }\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgModel.prototype._updateValue = function (value) {\n            var _this = this;\n            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n        };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        NgModel.prototype._updateDisabled = function (changes) {\n            var _this = this;\n            var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n            var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n            resolvedPromise$1.then(function () {\n                if (isDisabled && !_this.control.disabled) {\n                    _this.control.disable();\n                }\n                else if (!isDisabled && _this.control.disabled) {\n                    _this.control.enable();\n                }\n            });\n        };\n        NgModel.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n                        providers: [formControlBinding],\n                        exportAs: 'ngModel'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgModel.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        NgModel.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n        };\n        return NgModel;\n    }(NgControl));\n\n    var ReactiveErrors = (function () {\n        function ReactiveErrors() {\n        }\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.controlParentException = function () {\n            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.ngModelGroupException = function () {\n            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.missingFormException = function () {\n            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.groupParentException = function () {\n            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.arrayParentException = function () {\n            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.disabledAttrWarning = function () {\n            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n        };\n        return ReactiveErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formControlBinding$1 = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n    };\n    /**\n     * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n     *\n     * In other words, this directive ensures that any values written to the {\\@link FormControl}\n     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n     * any values written to the DOM element through user input will be reflected in the\n     * {\\@link FormControl} instance (view -> model).\n     *\n     * \\@howToUse\n     *\n     * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n     * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n     * {\\@link FormControlDirective}.\n     *\n     * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n     * it does not require that your {\\@link FormControl} instance be part of any parent\n     * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n     * exists above it.\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {\\@link FormControl} instance. See a full list of available properties in\n     * {\\@link AbstractControl}.\n     *\n     * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n     * or you can set it programmatically later using {\\@link AbstractControl.setValue} or\n     * {\\@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n     * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n     * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     *  \\@stable\n     */\n    var FormControlDirective = (function (_super) {\n        __extends$9(FormControlDirective, _super);\n        /**\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this.update = new EventEmitter();\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n            /**\n             * @param {?} isDisabled\n             * @return {?}\n             */\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlDirective.prototype.ngOnChanges = function (changes) {\n            if (this._isControlChanged(changes)) {\n                setUpControl(this.form, this);\n                if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                    this.valueAccessor.setDisabledState(true);\n                }\n                this.form.updateValueAndValidity({ emitEvent: false });\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.form.setValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlDirective.prototype._isControlChanged = function (changes) {\n            return changes.hasOwnProperty('form');\n        };\n        FormControlDirective.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n        ];\n        /** @nocollapse */\n        FormControlDirective.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        FormControlDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlDirective;\n    }(NgControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formDirectiveProvider$1 = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n    };\n    /**\n     * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n     *\n     * \\@howToUse\n     *\n     * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n     * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n     * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n     * and {\\@link FormArrayName} directives.\n     *\n     * **Set value**: You can set the form's initial value when instantiating the\n     * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n     * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue} methods.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n     * to the {\\@link FormGroup}'s {\\@link AbstractControl.valueChanges} event.  You can also listen to\n     * its {\\@link AbstractControl.statusChanges} event to be notified when the validation status is\n     * re-calculated.\n     *\n     * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n     * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n     * submission event.\n     *\n     * ### Example\n     *\n     * In this example, we create form controls for first name and last name.\n     *\n     * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n     *\n     * **npm package**: `\\@angular/forms`\n     *\n     * **NgModule**: {\\@link ReactiveFormsModule}\n     *\n     *  \\@stable\n     */\n    var FormGroupDirective = (function (_super) {\n        __extends$11(FormGroupDirective, _super);\n        /**\n         * @param {?} _validators\n         * @param {?} _asyncValidators\n         */\n        function FormGroupDirective(_validators, _asyncValidators) {\n            _super.call(this);\n            this._validators = _validators;\n            this._asyncValidators = _asyncValidators;\n            this._submitted = false;\n            this.directives = [];\n            this.form = null;\n            this.ngSubmit = new EventEmitter();\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n            this._checkFormPresent();\n            if (changes.hasOwnProperty('form')) {\n                this._updateValidators();\n                this._updateDomValue();\n                this._updateRegistrations();\n            }\n        };\n        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addControl = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpControl(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n            this.directives.push(dir);\n            return ctrl;\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addFormGroup = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addFormArray = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @param {?} value\n         * @return {?}\n         */\n        FormGroupDirective.prototype.updateModel = function (dir, value) {\n            var /** @type {?} */ ctrl = (this.form.get(dir.path));\n            ctrl.setValue(value);\n        };\n        /**\n         * @param {?} $event\n         * @return {?}\n         */\n        FormGroupDirective.prototype.onSubmit = function ($event) {\n            this._submitted = true;\n            this.ngSubmit.emit($event);\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        FormGroupDirective.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateDomValue = function () {\n            var _this = this;\n            this.directives.forEach(function (dir) {\n                var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n                if (dir._control !== newCtrl) {\n                    cleanUpControl(dir._control, dir);\n                    if (newCtrl)\n                        setUpControl(newCtrl, dir);\n                    dir._control = newCtrl;\n                }\n            });\n            this.form._updateTreeValidity({ emitEvent: false });\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateRegistrations = function () {\n            var _this = this;\n            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n            if (this._oldForm)\n                this._oldForm._registerOnCollectionChange(function () { });\n            this._oldForm = this.form;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateValidators = function () {\n            var /** @type {?} */ sync = composeValidators(this._validators);\n            this.form.validator = Validators.compose([this.form.validator, sync]);\n            var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._checkFormPresent = function () {\n            if (!this.form) {\n                ReactiveErrors.missingFormException();\n            }\n        };\n        FormGroupDirective.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroup]',\n                        providers: [formDirectiveProvider$1],\n                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        FormGroupDirective.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormGroupDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n            'ngSubmit': [{ type: _angular_core.Output },],\n        };\n        return FormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formGroupNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n    };\n    /**\n     * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n     *\n     * \\@howToUse\n     *\n     * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n     * will look for a {\\@link FormGroup} registered with that name in the parent\n     * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n     *\n     * Nested form groups can come in handy when you want to validate a sub-group of a\n     * form separately from the rest or when you'd like to group the values of certain\n     * controls into their own nested object.\n     *\n     * **Access the group**: You can access the associated {\\@link FormGroup} using the\n     * {\\@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n     *\n     * You can also access individual controls within the group using dot syntax.\n     * Ex: `this.form.get('name.first')`\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n     *\n     * **Set the value**: You can set an initial value for each child control when instantiating\n     * the {\\@link FormGroup}, or you can set it programmatically later using\n     * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the group, you can\n     * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n     * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     * \\@stable\n     */\n    var FormGroupName = (function (_super) {\n        __extends$12(FormGroupName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function FormGroupName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroupName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.groupParentException();\n            }\n        };\n        FormGroupName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormGroupName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormGroupName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n        };\n        return FormGroupName;\n    }(AbstractFormGroupDirective));\n    var /** @type {?} */ formArrayNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n    };\n    /**\n     * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n     *\n     * \\@howToUse\n     *\n     * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n     * will look for a {\\@link FormArray} registered with that name in the parent\n     * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n     *\n     * Nested form arrays can come in handy when you have a group of form controls but\n     * you're not sure how many there will be. Form arrays allow you to create new\n     * form controls dynamically.\n     *\n     * **Access the array**: You can access the associated {\\@link FormArray} using the\n     * {\\@link AbstractControl.get} method on the parent {\\@link FormGroup}.\n     * Ex: `this.form.get('cities')`.\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n     *\n     * **Set the value**: You can set an initial value for each child control when instantiating\n     * the {\\@link FormArray}, or you can set the value programmatically later using the\n     * {\\@link FormArray}'s {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}\n     * methods.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the array, you can\n     * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl.valueChanges} event.  You can also\n     * listen to its {\\@link AbstractControl.statusChanges} event to be notified when the validation\n     * status is re-calculated.\n     *\n     * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by\n     * calling its {\\@link FormArray.push} method.\n     *  Ex: `this.form.get('cities').push(new FormControl());`\n     *\n     * ### Example\n     *\n     * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     * \\@stable\n     */\n    var FormArrayName = (function (_super) {\n        __extends$12(FormArrayName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function FormArrayName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormArray(this);\n        };\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormArray(this);\n            }\n        };\n        Object.defineProperty(FormArrayName.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.formDirective.getFormArray(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._parent ? (this._parent.formDirective) : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.arrayParentException();\n            }\n        };\n        FormArrayName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormArrayName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormArrayName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n        };\n        return FormArrayName;\n    }(ControlContainer));\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    function _hasInvalidParent(parent) {\n        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n            !(parent instanceof FormArrayName);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ controlNameBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n    };\n    /**\n     * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n     * element by name.\n     *\n     * In other words, this directive ensures that any values written to the {\\@link FormControl}\n     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n     * any values written to the DOM element through user input will be reflected in the\n     * {\\@link FormControl} instance (view -> model).\n     *\n     * \\@howToUse\n     *\n     * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the {\\@link FormControl} instance you want to\n     * link, and will look for a {\\@link FormControl} registered with that name in the\n     * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n     *\n     * **Access the control**: You can access the {\\@link FormControl} associated with\n     * this directive by using the {\\@link AbstractControl.get} method.\n     * Ex: `this.form.get('first');`\n     *\n     * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n     * See a full list of available properties in {\\@link AbstractControl}.\n     *\n     *  **Set value**: You can set an initial value for the control when instantiating the\n     *  {\\@link FormControl}, or you can set it programmatically later using\n     *  {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n     * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n     * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * In this example, we create form controls for first name and last name.\n     *\n     * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n     *\n     * To see `formControlName` examples with different form control types, see:\n     *\n     * * Radio buttons: {\\@link RadioControlValueAccessor}\n     * * Selects: {\\@link SelectControlValueAccessor}\n     *\n     * **npm package**: `\\@angular/forms`\n     *\n     * **NgModule**: {\\@link ReactiveFormsModule}\n     *\n     *  \\@stable\n     */\n    var FormControlName = (function (_super) {\n        __extends$10(FormControlName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this._added = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n            /**\n             * @param {?} isDisabled\n             * @return {?}\n             */\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlName.prototype.ngOnChanges = function (changes) {\n            if (!this._added)\n                this._setUpControl();\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.viewModel = this.model;\n                this.formDirective.updateModel(this, this.model);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeControl(this);\n            }\n        };\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        Object.defineProperty(FormControlName.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype._checkParentType = function () {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                ReactiveErrors.ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                ReactiveErrors.controlParentException();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype._setUpControl = function () {\n            this._checkParentType();\n            this._control = this.formDirective.addControl(this);\n            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                this.valueAccessor.setDisabledState(true);\n            }\n            this._added = true;\n        };\n        FormControlName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n        ];\n        /** @nocollapse */\n        FormControlName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        FormControlName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlName;\n    }(NgControl));\n\n    var __extends$13 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n        multi: true\n    };\n    var /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxRequiredValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `required` validator to any controls marked with the\n     * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n     *\n     * ### Example\n     *\n     * ```\n     * <input name=\"fullName\" ngModel required>\n     * ```\n     *\n     * \\@stable\n     */\n    var RequiredValidator = (function () {\n        function RequiredValidator() {\n        }\n        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._required; },\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                this._required = value != null && value !== false && \"\" + value !== 'false';\n                if (this._onChange)\n                    this._onChange();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        RequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.required(c) : null;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        RequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                        providers: [REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required ? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        RequiredValidator.ctorParameters = function () { return []; };\n        RequiredValidator.propDecorators = {\n            'required': [{ type: _angular_core.Input },],\n        };\n        return RequiredValidator;\n    }());\n    /**\n     * A Directive that adds the `required` validator to checkbox controls marked with the\n     * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n     *\n     * ### Example\n     *\n     * ```\n     * <input type=\"checkbox\" name=\"active\" ngModel required>\n     * ```\n     *\n     * \\@experimental\n     */\n    var CheckboxRequiredValidator = (function (_super) {\n        __extends$13(CheckboxRequiredValidator, _super);\n        function CheckboxRequiredValidator() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        CheckboxRequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.requiredTrue(c) : null;\n        };\n        CheckboxRequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                        providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required ? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxRequiredValidator.ctorParameters = function () { return []; };\n        return CheckboxRequiredValidator;\n    }(RequiredValidator));\n    /**\n     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='min'}\n     */\n    var /** @type {?} */ MIN_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n     *\n     * \\@stable\n     */\n    var MinLengthValidator = (function () {\n        function MinLengthValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n            if ('minlength' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        MinLengthValidator.prototype.validate = function (c) {\n            return this.minlength == null ? null : this._validator(c);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        MinLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n        };\n        MinLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                        providers: [MIN_LENGTH_VALIDATOR],\n                        host: { '[attr.minlength]': 'minlength ? minlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MinLengthValidator.ctorParameters = function () { return []; };\n        MinLengthValidator.propDecorators = {\n            'minlength': [{ type: _angular_core.Input },],\n        };\n        return MinLengthValidator;\n    }());\n    /**\n     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='max'}\n     */\n    var /** @type {?} */ MAX_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n     * `formControl`,\n     * or control with `ngModel` that also has a `maxlength` attribute.\n     *\n     * \\@stable\n     */\n    var MaxLengthValidator = (function () {\n        function MaxLengthValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n            if ('maxlength' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.validate = function (c) {\n            return this.maxlength != null ? this._validator(c) : null;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        MaxLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n        };\n        MaxLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                        providers: [MAX_LENGTH_VALIDATOR],\n                        host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MaxLengthValidator.ctorParameters = function () { return []; };\n        MaxLengthValidator.propDecorators = {\n            'maxlength': [{ type: _angular_core.Input },],\n        };\n        return MaxLengthValidator;\n    }());\n    var /** @type {?} */ PATTERN_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `pattern` validator to any controls marked with the\n     * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n     * as the regex to validate Control value against.  Follows pattern attribute\n     * semantics; i.e. regex must match entire Control value.\n     *\n     * ### Example\n     *\n     * ```\n     * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n     * ```\n     * \\@stable\n     */\n    var PatternValidator = (function () {\n        function PatternValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        PatternValidator.prototype.ngOnChanges = function (changes) {\n            if ('pattern' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        PatternValidator.prototype.validate = function (c) { return this._validator(c); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n        PatternValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                        providers: [PATTERN_VALIDATOR],\n                        host: { '[attr.pattern]': 'pattern ? pattern : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        PatternValidator.ctorParameters = function () { return []; };\n        PatternValidator.propDecorators = {\n            'pattern': [{ type: _angular_core.Input },],\n        };\n        return PatternValidator;\n    }());\n\n    /**\n     * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n     *\n     * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n     * forms.\n     *\n     * \\@howToUse\n     *\n     * To use, inject `FormBuilder` into your component class. You can then call its methods\n     * directly.\n     *\n     * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n     *\n     *  * **npm package**: `\\@angular/forms`\n     *\n     *  * **NgModule**: {\\@link ReactiveFormsModule}\n     *\n     * \\@stable\n     */\n    var FormBuilder = (function () {\n        function FormBuilder() {\n        }\n        /**\n         * Construct a new {\\@link FormGroup} with the given map of configuration.\n         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n         *\n         * See the {\\@link FormGroup} constructor for more details.\n         * @param {?} controlsConfig\n         * @param {?=} extra\n         * @return {?}\n         */\n        FormBuilder.prototype.group = function (controlsConfig, extra) {\n            if (extra === void 0) { extra = null; }\n            var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n            var /** @type {?} */ validator = isPresent(extra) ? extra['validator'] : null;\n            var /** @type {?} */ asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;\n            return new FormGroup(controls, validator, asyncValidator);\n        };\n        /**\n         * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n         * `asyncValidator`.\n         *\n         * `formState` can either be a standalone value for the form control or an object\n         * that contains both a value and a disabled status.\n         *\n         * @param {?} formState\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         * @return {?}\n         */\n        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            return new FormControl(formState, validator, asyncValidator);\n        };\n        /**\n         * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n         * configuration, with the given optional `validator` and `asyncValidator`.\n         * @param {?} controlsConfig\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         * @return {?}\n         */\n        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n            var _this = this;\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n            return new FormArray(controls, validator, asyncValidator);\n        };\n        /**\n         * \\@internal\n         * @param {?} controlsConfig\n         * @return {?}\n         */\n        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n            var _this = this;\n            var /** @type {?} */ controls = {};\n            Object.keys(controlsConfig).forEach(function (controlName) {\n                controls[controlName] = _this._createControl(controlsConfig[controlName]);\n            });\n            return controls;\n        };\n        /**\n         * \\@internal\n         * @param {?} controlConfig\n         * @return {?}\n         */\n        FormBuilder.prototype._createControl = function (controlConfig) {\n            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n                controlConfig instanceof FormArray) {\n                return controlConfig;\n            }\n            else if (Array.isArray(controlConfig)) {\n                var /** @type {?} */ value = controlConfig[0];\n                var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n                var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n                return this.control(value, validator, asyncValidator);\n            }\n            else {\n                return this.control(controlConfig);\n            }\n        };\n        FormBuilder.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        FormBuilder.ctorParameters = function () { return []; };\n        return FormBuilder;\n    }());\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.4');\n\n    var /** @type {?} */ SHARED_FORM_DIRECTIVES = [\n        NgSelectOption,\n        NgSelectMultipleOption,\n        DefaultValueAccessor,\n        NumberValueAccessor,\n        RangeValueAccessor,\n        CheckboxControlValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n        NgControlStatus,\n        NgControlStatusGroup,\n        RequiredValidator,\n        MinLengthValidator,\n        MaxLengthValidator,\n        PatternValidator,\n        CheckboxRequiredValidator,\n    ];\n    var /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n    var /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n    /**\n     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n     */\n    var InternalFormsSharedModule = (function () {\n        function InternalFormsSharedModule() {\n        }\n        InternalFormsSharedModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: SHARED_FORM_DIRECTIVES,\n                        exports: SHARED_FORM_DIRECTIVES,\n                    },] },\n        ];\n        /** @nocollapse */\n        InternalFormsSharedModule.ctorParameters = function () { return []; };\n        return InternalFormsSharedModule;\n    }());\n\n    /**\n     * The ng module for forms.\n     * \\@stable\n     */\n    var FormsModule = (function () {\n        function FormsModule() {\n        }\n        FormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                        providers: [RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        FormsModule.ctorParameters = function () { return []; };\n        return FormsModule;\n    }());\n    /**\n     * The ng module for reactive forms.\n     * \\@stable\n     */\n    var ReactiveFormsModule = (function () {\n        function ReactiveFormsModule() {\n        }\n        ReactiveFormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                        providers: [FormBuilder, RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        ReactiveFormsModule.ctorParameters = function () { return []; };\n        return ReactiveFormsModule;\n    }());\n\n    exports.AbstractControlDirective = AbstractControlDirective;\n    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n    exports.ControlContainer = ControlContainer;\n    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n    exports.DefaultValueAccessor = DefaultValueAccessor;\n    exports.NgControl = NgControl;\n    exports.NgControlStatus = NgControlStatus;\n    exports.NgControlStatusGroup = NgControlStatusGroup;\n    exports.NgForm = NgForm;\n    exports.NgModel = NgModel;\n    exports.NgModelGroup = NgModelGroup;\n    exports.RadioControlValueAccessor = RadioControlValueAccessor;\n    exports.FormControlDirective = FormControlDirective;\n    exports.FormControlName = FormControlName;\n    exports.FormGroupDirective = FormGroupDirective;\n    exports.FormArrayName = FormArrayName;\n    exports.FormGroupName = FormGroupName;\n    exports.NgSelectOption = NgSelectOption;\n    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n    exports.CheckboxRequiredValidator = CheckboxRequiredValidator;\n    exports.MaxLengthValidator = MaxLengthValidator;\n    exports.MinLengthValidator = MinLengthValidator;\n    exports.PatternValidator = PatternValidator;\n    exports.RequiredValidator = RequiredValidator;\n    exports.FormBuilder = FormBuilder;\n    exports.AbstractControl = AbstractControl;\n    exports.FormArray = FormArray;\n    exports.FormControl = FormControl;\n    exports.FormGroup = FormGroup;\n    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n    exports.NG_VALIDATORS = NG_VALIDATORS;\n    exports.Validators = Validators;\n    exports.VERSION = VERSION;\n    exports.FormsModule = FormsModule;\n    exports.ReactiveFormsModule = ReactiveFormsModule;\n\n}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 387:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar ImageComponent = (function () {\r\n    function ImageComponent() {\r\n        this.imageWidth = 150;\r\n        this.imageHeight = 300;\r\n    }\r\n    return ImageComponent;\r\n}());\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Object)\r\n], ImageComponent.prototype, \"model\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Number)\r\n], ImageComponent.prototype, \"imageWidth\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Number)\r\n], ImageComponent.prototype, \"imageHeight\", void 0);\r\nImageComponent = __decorate([\r\n    core_1.Component({\r\n        selector: 'db-image',\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(388),\r\n        styles: [\r\n            __webpack_require__(389)\r\n        ]\r\n    })\r\n], ImageComponent);\r\nexports.ImageComponent = ImageComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL3NoYXJlZC9pbWFnZS5jb21wb25lbnQudHM/NmRlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElEYkltYWdlVXJsIH0gZnJvbSAnLi9pbWFnZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZGItaW1hZ2UnLFxyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZC50b1N0cmluZygpLFxyXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vaW1hZ2UuY29tcG9uZW50Lmh0bWwnKSxcclxuICAgIHN0eWxlczogW1xyXG4gICAgICAgIHJlcXVpcmUoJy4vaW1hZ2UuY29tcG9uZW50LmNzcycpXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbWFnZUNvbXBvbmVudCB7XHJcblxyXG4gICAgQElucHV0KCkgbW9kZWw6IElEYkltYWdlVXJsO1xyXG4gICAgQElucHV0KCkgaW1hZ2VXaWR0aDogbnVtYmVyID0gMTUwO1xyXG4gICAgQElucHV0KCkgaW1hZ2VIZWlnaHQ6IG51bWJlciA9IDMwMDtcclxuXHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL2FwcC9zaGFyZWQvaW1hZ2UuY29tcG9uZW50LnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFXQTtBQVJBO0FBV0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUpBO0FBQUE7O0FBQUE7QUFDQTtBQUFBOztBQUFBO0FBQ0E7QUFBQTs7QUFBQTtBQUpBO0FBUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 388:
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"row\\\">\\r\\n    <div>\\r\\n        <img [src]='model.imageUrl' [width]='imageWidth' [height]='imageHeight' />\\r\\n    </div>\\r\\n    <div id=\\\"desc\\\">{{model.description}}</div>\\r\\n</div>\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL3NoYXJlZC9pbWFnZS5jb21wb25lbnQuaHRtbD8yOTAyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcclxcbiAgICA8ZGl2PlxcclxcbiAgICAgICAgPGltZyBbc3JjXT0nbW9kZWwuaW1hZ2VVcmwnIFt3aWR0aF09J2ltYWdlV2lkdGgnIFtoZWlnaHRdPSdpbWFnZUhlaWdodCcgLz5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgaWQ9XFxcImRlc2NcXFwiPnt7bW9kZWwuZGVzY3JpcHRpb259fTwvZGl2PlxcclxcbjwvZGl2PlwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3NoYXJlZC9pbWFnZS5jb21wb25lbnQuaHRtbFxuLy8gbW9kdWxlIGlkID0gMzg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 389:
/***/ function(module, exports) {

	eval("module.exports = \"\\r\\n.row {\\r\\n    margin-top: 10px;\\r\\n    margin-bottom: 10px;\\r\\n}\\r\\n\\r\\nimg {\\r\\n    float: left;\\r\\n}\\r\\n\\r\\n#desc {\\r\\n    display: table-cell;\\r\\n    height: 300px;\\r\\n    margin-top: 10px;\\r\\n    vertical-align: middle;\\r\\n    padding-left: 15px;\\r\\n}\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL3NoYXJlZC9pbWFnZS5jb21wb25lbnQuY3NzPzVkYjYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIlxcclxcbi5yb3cge1xcclxcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5pbWcge1xcclxcbiAgICBmbG9hdDogbGVmdDtcXHJcXG59XFxyXFxuXFxyXFxuI2Rlc2Mge1xcclxcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xcclxcbiAgICBoZWlnaHQ6IDMwMHB4O1xcclxcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XFxyXFxufVwiXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc2hhcmVkL2ltYWdlLmNvbXBvbmVudC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDM4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 390:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar PagerComponent = (function () {\r\n    function PagerComponent(_route, _router) {\r\n        this._route = _route;\r\n        this._router = _router;\r\n    }\r\n    PagerComponent.prototype.goTo = function (id) {\r\n        this._router.navigate(['../', id], { relativeTo: this._route });\r\n    };\r\n    PagerComponent.prototype.isFirst = function () {\r\n        return this.currentId === this.previousId;\r\n    };\r\n    PagerComponent.prototype.isLast = function () {\r\n        return this.currentId === this.nextId;\r\n    };\r\n    return PagerComponent;\r\n}());\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", String)\r\n], PagerComponent.prototype, \"currentId\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", String)\r\n], PagerComponent.prototype, \"previousId\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", String)\r\n], PagerComponent.prototype, \"nextId\", void 0);\r\nPagerComponent = __decorate([\r\n    core_1.Component({\r\n        selector: 'db-pager',\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(391),\r\n        styles: [\r\n            __webpack_require__(392)\r\n        ]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [router_1.ActivatedRoute,\r\n        router_1.Router])\r\n], PagerComponent);\r\nexports.PagerComponent = PagerComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL3NoYXJlZC9wYWdlci5jb21wb25lbnQudHM/YjEzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZGItcGFnZXInLFxyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZC50b1N0cmluZygpLFxyXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vcGFnZXIuY29tcG9uZW50Lmh0bWwnKSxcclxuICAgIHN0eWxlczogW1xyXG4gICAgICAgIHJlcXVpcmUoJy4vcGFnZXIuY29tcG9uZW50LmNzcycpXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQYWdlckNvbXBvbmVudCB7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIGN1cnJlbnRJZDogc3RyaW5nXHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHByZXZpb3VzSWQ6IHN0cmluZztcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgbmV4dElkOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBfcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxyXG4gICAgICAgIHByaXZhdGUgX3JvdXRlcjogUm91dGVyXHJcbiAgICApIHsgfVxyXG5cclxuICAgIGdvVG8oaWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3JvdXRlci5uYXZpZ2F0ZShbJy4uLycsIGlkXSwge3JlbGF0aXZlVG86IHRoaXMuX3JvdXRlfSlcclxuICAgIH1cclxuXHJcbiAgICBpc0ZpcnN0KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRJZCA9PT0gdGhpcy5wcmV2aW91c0lkO1xyXG4gICAgfVxyXG5cclxuICAgIGlzTGFzdCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50SWQgPT09IHRoaXMubmV4dElkO1xyXG4gICAgfVxyXG5cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL3NoYXJlZC9wYWdlci5jb21wb25lbnQudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBVUE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUF6QkE7QUFEQTs7QUFDQTtBQUdBO0FBREE7O0FBQ0E7QUFHQTtBQURBOztBQUNBO0FBVEE7QUFSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYUE7QUFDQTtBQWJBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 391:
/***/ function(module, exports) {

	eval("module.exports = \"<div>\\r\\n    <a *ngIf=\\\"!isFirst()\\\" class='btn btn-info' (click)='goTo(previousId)'>\\r\\n        <i class='glyphicon glyphicon-chevron-left'></i>Précédent\\r\\n    </a>\\r\\n    <a *ngIf=\\\"!isLast()\\\" class='btn btn-info' (click)='goTo(nextId)'>\\r\\n        Suivant<i class='glyphicon glyphicon-chevron-right'></i>\\r\\n    </a>\\r\\n</div>\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL3NoYXJlZC9wYWdlci5jb21wb25lbnQuaHRtbD9mNTU1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2PlxcclxcbiAgICA8YSAqbmdJZj1cXFwiIWlzRmlyc3QoKVxcXCIgY2xhc3M9J2J0biBidG4taW5mbycgKGNsaWNrKT0nZ29UbyhwcmV2aW91c0lkKSc+XFxyXFxuICAgICAgICA8aSBjbGFzcz0nZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQnPjwvaT5QcsOpY8OpZGVudFxcclxcbiAgICA8L2E+XFxyXFxuICAgIDxhICpuZ0lmPVxcXCIhaXNMYXN0KClcXFwiIGNsYXNzPSdidG4gYnRuLWluZm8nIChjbGljayk9J2dvVG8obmV4dElkKSc+XFxyXFxuICAgICAgICBTdWl2YW50PGkgY2xhc3M9J2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodCc+PC9pPlxcclxcbiAgICA8L2E+XFxyXFxuPC9kaXY+XCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc2hhcmVkL3BhZ2VyLmNvbXBvbmVudC5odG1sXG4vLyBtb2R1bGUgaWQgPSAzOTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 392:
/***/ function(module, exports) {

	eval("module.exports = \"\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL3NoYXJlZC9wYWdlci5jb21wb25lbnQuY3NzPzI2YzQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIlwiXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc2hhcmVkL3BhZ2VyLmNvbXBvbmVudC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDM5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 393:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar book_routing_module_1 = __webpack_require__(394);\r\nvar book_list_component_1 = __webpack_require__(395);\r\nvar book_form_component_1 = __webpack_require__(398);\r\nvar book_details_component_1 = __webpack_require__(401);\r\nvar book_service_1 = __webpack_require__(101);\r\nvar shared_module_1 = __webpack_require__(385);\r\nvar core_module_1 = __webpack_require__(100);\r\nvar BookModule = (function () {\r\n    function BookModule() {\r\n    }\r\n    return BookModule;\r\n}());\r\nBookModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            core_module_1.CoreModule,\r\n            shared_module_1.SharedModule,\r\n            book_routing_module_1.BookRoutingModule\r\n        ],\r\n        declarations: [\r\n            book_list_component_1.BookListComponent,\r\n            book_form_component_1.BookFormComponent,\r\n            book_details_component_1.BookDetailsComponent\r\n        ],\r\n        providers: [\r\n            book_service_1.BookService\r\n        ]\r\n    })\r\n], BookModule);\r\nexports.BookModule = BookModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2subW9kdWxlLnRzPzlmNzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQm9va1JvdXRpbmdNb2R1bGUgfSBmcm9tICcuL2Jvb2stcm91dGluZy5tb2R1bGUnO1xyXG5pbXBvcnQgeyBCb29rTGlzdENvbXBvbmVudH0gZnJvbSAnLi9ib29rLWxpc3QuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQm9va0Zvcm1Db21wb25lbnQgfSBmcm9tICcuL2Jvb2stZm9ybS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBCb29rRGV0YWlsc0NvbXBvbmVudCB9IGZyb20gJy4vYm9vay1kZXRhaWxzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEJvb2tTZXJ2aWNlIH0gZnJvbSAnLi9ib29rLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTaGFyZWRNb2R1bGUgfSBmcm9tICcuLi9zaGFyZWQvc2hhcmVkLm1vZHVsZSc7XHJcbmltcG9ydCB7IENvcmVNb2R1bGUgfSBmcm9tICcuLi9jb3JlL2NvcmUubW9kdWxlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgQ29yZU1vZHVsZSxcclxuICAgICAgICBTaGFyZWRNb2R1bGUsXHJcbiAgICAgICAgQm9va1JvdXRpbmdNb2R1bGVcclxuICAgIF0sXHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBCb29rTGlzdENvbXBvbmVudCxcclxuICAgICAgICBCb29rRm9ybUNvbXBvbmVudCxcclxuICAgICAgICBCb29rRGV0YWlsc0NvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIEJvb2tTZXJ2aWNlXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCb29rTW9kdWxlIHtcclxuXHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL2FwcC9ib29rcy9ib29rLm1vZHVsZS50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFpQkE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUZBO0FBZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 394:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar book_list_component_1 = __webpack_require__(395);\r\nvar book_form_component_1 = __webpack_require__(398);\r\nvar book_details_component_1 = __webpack_require__(401);\r\nvar BookRoutingModule = (function () {\r\n    function BookRoutingModule() {\r\n    }\r\n    return BookRoutingModule;\r\n}());\r\nBookRoutingModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [\r\n            router_1.RouterModule.forChild([\r\n                { path: 'category/:category/books', component: book_list_component_1.BookListComponent },\r\n                { path: 'category/:category/books/edit', component: book_form_component_1.BookFormComponent },\r\n                { path: 'category/:category/books/:id', component: book_details_component_1.BookDetailsComponent },\r\n                { path: 'category/:category/books/:id/edit', component: book_form_component_1.BookFormComponent }\r\n            ])\r\n        ],\r\n        exports: [\r\n            router_1.RouterModule\r\n        ]\r\n    })\r\n], BookRoutingModule);\r\nexports.BookRoutingModule = BookRoutingModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2stcm91dGluZy5tb2R1bGUudHM/ZTUyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBCb29rTGlzdENvbXBvbmVudH0gZnJvbSAnLi9ib29rLWxpc3QuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQm9va0Zvcm1Db21wb25lbnQgfSBmcm9tICcuL2Jvb2stZm9ybS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBCb29rRGV0YWlsc0NvbXBvbmVudCB9IGZyb20gJy4vYm9vay1kZXRhaWxzLmNvbXBvbmVudCc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIFJvdXRlck1vZHVsZS5mb3JDaGlsZChbXHJcbiAgICAgICAgICAgIHsgcGF0aDogJ2NhdGVnb3J5LzpjYXRlZ29yeS9ib29rcycsIGNvbXBvbmVudDogQm9va0xpc3RDb21wb25lbnQgfSxcclxuICAgICAgICAgICAgeyBwYXRoOiAnY2F0ZWdvcnkvOmNhdGVnb3J5L2Jvb2tzL2VkaXQnLCBjb21wb25lbnQ6IEJvb2tGb3JtQ29tcG9uZW50IH0sXHJcbiAgICAgICAgICAgIHsgcGF0aDogJ2NhdGVnb3J5LzpjYXRlZ29yeS9ib29rcy86aWQnLCBjb21wb25lbnQ6IEJvb2tEZXRhaWxzQ29tcG9uZW50IH0sXHJcbiAgICAgICAgICAgIHsgcGF0aDogJ2NhdGVnb3J5LzpjYXRlZ29yeS9ib29rcy86aWQvZWRpdCcsIGNvbXBvbmVudDogQm9va0Zvcm1Db21wb25lbnQgfVxyXG4gICAgICAgIF0pXHJcbiAgICBdLFxyXG4gICAgZXhwb3J0czogW1xyXG4gICAgICAgIFJvdXRlck1vZHVsZVxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQm9va1JvdXRpbmdNb2R1bGUge1xyXG5cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL2Jvb2tzL2Jvb2stcm91dGluZy5tb2R1bGUudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUZBO0FBYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 395:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar book_service_1 = __webpack_require__(101);\r\nvar BookListComponent = (function () {\r\n    function BookListComponent(_bookService, _route, _router) {\r\n        this._bookService = _bookService;\r\n        this._route = _route;\r\n        this._router = _router;\r\n        this.pageTitle = \"Liste des livres\";\r\n        this.imageWidth = 160;\r\n        this.imageHeight = 250;\r\n    }\r\n    BookListComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        var category = this._route.snapshot.params['category'];\r\n        this._bookService\r\n            .getBooks(category)\r\n            .subscribe(function (books) { return _this.books = books; }, function (error) { return console.log(error); });\r\n    };\r\n    BookListComponent.prototype.onNew = function () {\r\n        this._router.navigate(['edit'], { relativeTo: this._route });\r\n    };\r\n    BookListComponent.prototype.onBack = function () {\r\n        this._router.navigate(['../'], { relativeTo: this._route });\r\n    };\r\n    return BookListComponent;\r\n}());\r\nBookListComponent = __decorate([\r\n    core_1.Component({\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(396),\r\n        styles: [__webpack_require__(397)]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [book_service_1.BookService,\r\n        router_1.ActivatedRoute,\r\n        router_1.Router])\r\n], BookListComponent);\r\nexports.BookListComponent = BookListComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2stbGlzdC5jb21wb25lbnQudHM/YzI4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgQm9va1NlcnZpY2UgfSBmcm9tICcuL2Jvb2suc2VydmljZSc7XHJcbmltcG9ydCB7IElCb29rIH0gZnJvbSAnLi9ib29rJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZC50b1N0cmluZygpLFxyXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vYm9vay1saXN0LmNvbXBvbmVudC5odG1sJyksXHJcbiAgICBzdHlsZXM6IFtyZXF1aXJlKCcuL2Jvb2stbGlzdC5jb21wb25lbnQuY3NzJyldXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCb29rTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgcHVibGljIHBhZ2VUaXRsZTogc3RyaW5nID0gXCJMaXN0ZSBkZXMgbGl2cmVzXCI7XHJcbiAgICBwdWJsaWMgYm9va3M6IElCb29rW107XHJcbiAgICBwdWJsaWMgaW1hZ2VXaWR0aDogbnVtYmVyID0gMTYwO1xyXG4gICAgcHVibGljIGltYWdlSGVpZ2h0OiBudW1iZXIgPSAyNTA7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBfYm9va1NlcnZpY2U6IEJvb2tTZXJ2aWNlLCBcclxuICAgICAgICBwcml2YXRlIF9yb3V0ZTogQWN0aXZhdGVkUm91dGUsXHJcbiAgICAgICAgcHJpdmF0ZSBfcm91dGVyOiBSb3V0ZXJcclxuICAgICl7fVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gdGhpcy5fcm91dGUuc25hcHNob3QucGFyYW1zWydjYXRlZ29yeSddO1xyXG5cclxuICAgICAgICB0aGlzLl9ib29rU2VydmljZVxyXG4gICAgICAgICAgICAgICAgLmdldEJvb2tzKGNhdGVnb3J5KVxyXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShcclxuICAgICAgICAgICAgICAgICAgICAoYm9va3M6IElCb29rW10pID0+IHRoaXMuYm9va3MgPSBib29rcyxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgb25OZXcoKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3JvdXRlci5uYXZpZ2F0ZShbJ2VkaXQnXSwge3JlbGF0aXZlVG86IHRoaXMuX3JvdXRlfSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgb25CYWNrKCk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLl9yb3V0ZXIubmF2aWdhdGUoWycuLi8nXSwge3JlbGF0aXZlVG86IHRoaXMuX3JvdXRlfSk7XHJcblxyXG4gICAgfVxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG5vZGVfbW9kdWxlcy9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi9hcHAvYm9va3MvYm9vay1saXN0LmNvbXBvbmVudC50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQVFBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQUVBO0FBQ0E7QUFNQTtBQUVBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQW5DQTtBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFWQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 396:
/***/ function(module, exports) {

	eval("module.exports = \"<h3>{{pageTitle}}</h3>\\r\\n\\r\\n<div class='row'>\\r\\n    <a class='btn btn-info' (click)='onNew()'>\\r\\n        <i class='glyphicon glyphicon-plus'></i> Ajouter un livre\\r\\n    </a>\\r\\n</div>\\r\\n<div class=\\\"grid\\\">\\r\\n    <div *ngFor=\\\"let book of books\\\" class=\\\"grid-list\\\">\\r\\n        <div class=\\\"module\\\">\\r\\n            <a [routerLink]=\\\"book.id\\\" routerLinkActive=\\\"true\\\"><span class=\\\"badge\\\"><h4>{{book.title}}</h4></span></a>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div class='row'>\\r\\n    <a class='btn btn-info' (click)='onBack()'>\\r\\n        <i class='glyphicon glyphicon-chevron-left'></i>Retour\\r\\n    </a>\\r\\n</div>\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2stbGlzdC5jb21wb25lbnQuaHRtbD84YTc5Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8aDM+e3twYWdlVGl0bGV9fTwvaDM+XFxyXFxuXFxyXFxuPGRpdiBjbGFzcz0ncm93Jz5cXHJcXG4gICAgPGEgY2xhc3M9J2J0biBidG4taW5mbycgKGNsaWNrKT0nb25OZXcoKSc+XFxyXFxuICAgICAgICA8aSBjbGFzcz0nZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzJz48L2k+IEFqb3V0ZXIgdW4gbGl2cmVcXHJcXG4gICAgPC9hPlxcclxcbjwvZGl2PlxcclxcbjxkaXYgY2xhc3M9XFxcImdyaWRcXFwiPlxcclxcbiAgICA8ZGl2ICpuZ0Zvcj1cXFwibGV0IGJvb2sgb2YgYm9va3NcXFwiIGNsYXNzPVxcXCJncmlkLWxpc3RcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kdWxlXFxcIj5cXHJcXG4gICAgICAgICAgICA8YSBbcm91dGVyTGlua109XFxcImJvb2suaWRcXFwiIHJvdXRlckxpbmtBY3RpdmU9XFxcInRydWVcXFwiPjxzcGFuIGNsYXNzPVxcXCJiYWRnZVxcXCI+PGg0Pnt7Ym9vay50aXRsZX19PC9oND48L3NwYW4+PC9hPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlxcclxcbjxkaXYgY2xhc3M9J3Jvdyc+XFxyXFxuICAgIDxhIGNsYXNzPSdidG4gYnRuLWluZm8nIChjbGljayk9J29uQmFjaygpJz5cXHJcXG4gICAgICAgIDxpIGNsYXNzPSdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCc+PC9pPlJldG91clxcclxcbiAgICA8L2E+XFxyXFxuPC9kaXY+XCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvYm9va3MvYm9vay1saXN0LmNvbXBvbmVudC5odG1sXG4vLyBtb2R1bGUgaWQgPSAzOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 397:
/***/ function(module, exports) {

	eval("module.exports = \"\\r\\nh3 {\\r\\n  text-align: left; \\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.grid {\\r\\n  margin: 0;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.grid-list {\\r\\n\\tfloat: left;\\r\\n}\\r\\n\\r\\n.module {\\r\\n\\tpadding: 20px;\\r\\n\\ttext-align: center;\\r\\n\\tborder-radius: 2px;\\r\\n}\\r\\n\\r\\n.module .badge {\\r\\n\\tmax-height: 120px;\\r\\n\\tmin-width: 150px;\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2stbGlzdC5jb21wb25lbnQuY3NzP2UyMzkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIlxcclxcbmgzIHtcXHJcXG4gIHRleHQtYWxpZ246IGxlZnQ7IFxcclxcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWQge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3JpZC1saXN0IHtcXHJcXG5cXHRmbG9hdDogbGVmdDtcXHJcXG59XFxyXFxuXFxyXFxuLm1vZHVsZSB7XFxyXFxuXFx0cGFkZGluZzogMjBweDtcXHJcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogMnB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kdWxlIC5iYWRnZSB7XFxyXFxuXFx0bWF4LWhlaWdodDogMTIwcHg7XFxyXFxuXFx0bWluLXdpZHRoOiAxNTBweDtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9ib29rcy9ib29rLWxpc3QuY29tcG9uZW50LmNzc1xuLy8gbW9kdWxlIGlkID0gMzk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 398:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar book_service_1 = __webpack_require__(101);\r\nvar category_service_1 = __webpack_require__(87);\r\nvar BookFormComponent = (function () {\r\n    function BookFormComponent(_bookService, _categoryService, _route, _router) {\r\n        this._bookService = _bookService;\r\n        this._categoryService = _categoryService;\r\n        this._route = _route;\r\n        this._router = _router;\r\n    }\r\n    BookFormComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this.categories = [\r\n            \"db\",\r\n            \"dbz\"\r\n        ];\r\n        this.category = this._route.snapshot.params['category'];\r\n        var id = this._route.snapshot.params['id'];\r\n        if (id) {\r\n            this._bookService\r\n                .getBook(this.category, id)\r\n                .subscribe(function (info) { return _this.model = Object.assign({}, info.book); }, function (error) { return console.log(error); });\r\n        }\r\n        else {\r\n            this.model = {\r\n                id: null,\r\n                category: this.category,\r\n                title: '',\r\n                description: '',\r\n                imageUrl: ''\r\n            };\r\n        }\r\n    };\r\n    BookFormComponent.prototype.onSubmit = function () {\r\n        var _this = this;\r\n        this._bookService\r\n            .save(this.category, this.model)\r\n            .subscribe(function (_) { return _this.onBack(); }, function (error) { return console.log(error); });\r\n    };\r\n    BookFormComponent.prototype.onBack = function () {\r\n        this._router.navigate(['../'], { relativeTo: this._route });\r\n    };\r\n    return BookFormComponent;\r\n}());\r\nBookFormComponent = __decorate([\r\n    core_1.Component({\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(399),\r\n        styles: [\r\n            __webpack_require__(400)\r\n        ]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [book_service_1.BookService,\r\n        category_service_1.CategoryService,\r\n        router_1.ActivatedRoute,\r\n        router_1.Router])\r\n], BookFormComponent);\r\nexports.BookFormComponent = BookFormComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2stZm9ybS5jb21wb25lbnQudHM/M2FkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgQm9va1NlcnZpY2UgfSBmcm9tICcuL2Jvb2suc2VydmljZSc7XHJcbmltcG9ydCB7IENhdGVnb3J5U2VydmljZSB9IGZyb20gJy4uL2NhdGVnb3JpZXMvY2F0ZWdvcnkuc2VydmljZSc7XHJcbmltcG9ydCB7IElCb29rLCBJQm9va0luZm8gfSBmcm9tICcuL2Jvb2snO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLnRvU3RyaW5nKCksXHJcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9ib29rLWZvcm0uY29tcG9uZW50Lmh0bWwnKSxcclxuICAgIHN0eWxlczogW1xyXG4gICAgICAgIHJlcXVpcmUoJy4vYm9vay1mb3JtLmNvbXBvbmVudC5jc3MnKVxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQm9va0Zvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIGNhdGVnb3JpZXM6IHN0cmluZ1tdO1xyXG4gICAgbW9kZWw6IElCb29rO1xyXG4gICAgY2F0ZWdvcnk6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIF9ib29rU2VydmljZTogQm9va1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBfY2F0ZWdvcnlTZXJ2aWNlOiBDYXRlZ29yeVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBfcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxyXG4gICAgICAgIHByaXZhdGUgX3JvdXRlcjogUm91dGVyXHJcbiAgICApIHt9XHJcblxyXG4gICAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLmNhdGVnb3JpZXMgPSBbXHJcbiAgICAgICAgICAgIFwiZGJcIixcclxuICAgICAgICAgICAgXCJkYnpcIlxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHRoaXMuY2F0ZWdvcnkgPSB0aGlzLl9yb3V0ZS5zbmFwc2hvdC5wYXJhbXNbJ2NhdGVnb3J5J107XHJcblxyXG4gICAgICAgIGxldCBpZCA9IHRoaXMuX3JvdXRlLnNuYXBzaG90LnBhcmFtc1snaWQnXTtcclxuXHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Jvb2tTZXJ2aWNlXHJcbiAgICAgICAgICAgICAgICAuZ2V0Qm9vayh0aGlzLmNhdGVnb3J5LCBpZClcclxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgICAgICAgICAgKGluZm86IElCb29rSW5mbykgPT4gdGhpcy5tb2RlbCA9IE9iamVjdC5hc3NpZ24oe30sIGluZm8uYm9vayksXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJycsXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXHJcbiAgICAgICAgICAgICAgICBpbWFnZVVybDogJydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25TdWJtaXQoKSB7XHJcbiAgICAgICAgdGhpcy5fYm9va1NlcnZpY2VcclxuICAgICAgICAgICAgICAgIC5zYXZlKHRoaXMuY2F0ZWdvcnksIHRoaXMubW9kZWwpXHJcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAgICAgICAgIChfKSA9PiB0aGlzLm9uQmFjaygpLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkJhY2soKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fcm91dGVyLm5hdmlnYXRlKFsnLi4vJ10sIHtyZWxhdGl2ZVRvOiB0aGlzLl9yb3V0ZX0pO1xyXG4gICAgfVxyXG5cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL2Jvb2tzL2Jvb2stZm9ybS5jb21wb25lbnQudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVVBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUF4REE7QUFQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 399:
/***/ function(module, exports) {

	eval("module.exports = \"<div class='container'>\\r\\n    <h1>Edition d'un livre</h1>\\r\\n\\r\\n    <form *ngIf=\\\"model\\\" (ngSubmit)=\\\"onSubmit()\\\" #bookForm=\\\"ngForm\\\" novalidate>\\r\\n        <div class='row'>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n                <label for=\\\"category\\\">Catégorie</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"category\\\" \\r\\n                        required\\r\\n                        disabled\\r\\n                        [(ngModel)]=\\\"model.category\\\"\\r\\n                        name=\\\"category\\\">\\r\\n                    <option *ngFor=\\\"let cat of categories\\\" [value]=\\\"cat\\\">{{cat}}</option>\\r\\n                </select>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class='row'>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n                <label for=\\\"title\\\">Titre</label>\\r\\n                <input  type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"title\\\" \\r\\n                        required\\r\\n                        [(ngModel)]=\\\"model.title\\\"\\r\\n                        name=\\\"title\\\"\\r\\n                        #title=\\\"ngModel\\\">\\r\\n                <div [hidden]=\\\"title.valid || title.pristine\\\"\\r\\n                    class=\\\"alert alert-danger\\\">\\r\\n                    Le titre est requis\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class='row'>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n                <label for=\\\"description\\\">Description</label>\\r\\n                <textarea class=\\\"form-control\\\" id=\\\"description\\\" \\r\\n                        required\\r\\n                        [(ngModel)]=\\\"model.description\\\"\\r\\n                        name=\\\"description\\\"></textarea>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class='row'>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n                <label for=\\\"imageUrl\\\">Url de l'image</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"imageUrl\\\" \\r\\n                        required\\r\\n                        [(ngModel)]=\\\"model.imageUrl\\\"\\r\\n                        name=\\\"imageUrl\\\">\\r\\n            </div>\\r\\n        </div>\\r\\n        <div>\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"!bookForm.form.valid\\\">Enregistrer</button>\\r\\n            <a class='btn btn-success' (click)='onBack()'>Retour</a>\\r\\n        </div>\\r\\n    </form>\\r\\n</div>\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2stZm9ybS5jb21wb25lbnQuaHRtbD84MGI0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPSdjb250YWluZXInPlxcclxcbiAgICA8aDE+RWRpdGlvbiBkJ3VuIGxpdnJlPC9oMT5cXHJcXG5cXHJcXG4gICAgPGZvcm0gKm5nSWY9XFxcIm1vZGVsXFxcIiAobmdTdWJtaXQpPVxcXCJvblN1Ym1pdCgpXFxcIiAjYm9va0Zvcm09XFxcIm5nRm9ybVxcXCIgbm92YWxpZGF0ZT5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9J3Jvdyc+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBjb2wtbGctNlxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcImNhdGVnb3J5XFxcIj5DYXTDqWdvcmllPC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBpZD1cXFwiY2F0ZWdvcnlcXFwiIFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWRcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cXFwibW9kZWwuY2F0ZWdvcnlcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cXFwiY2F0ZWdvcnlcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBjYXQgb2YgY2F0ZWdvcmllc1xcXCIgW3ZhbHVlXT1cXFwiY2F0XFxcIj57e2NhdH19PC9vcHRpb24+XFxyXFxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPSdyb3cnPlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXAgY29sLWxnLTZcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJ0aXRsZVxcXCI+VGl0cmU8L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICA8aW5wdXQgIHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJ0aXRsZVxcXCIgXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cXFwibW9kZWwudGl0bGVcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cXFwidGl0bGVcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgI3RpdGxlPVxcXCJuZ01vZGVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwidGl0bGUudmFsaWQgfHwgdGl0bGUucHJpc3RpbmVcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIExlIHRpdHJlIGVzdCByZXF1aXNcXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9J3Jvdyc+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBjb2wtbGctNlxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcImRlc2NyaXB0aW9uXFxcIj5EZXNjcmlwdGlvbjwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBpZD1cXFwiZGVzY3JpcHRpb25cXFwiIFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgWyhuZ01vZGVsKV09XFxcIm1vZGVsLmRlc2NyaXB0aW9uXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XFxcImRlc2NyaXB0aW9uXFxcIj48L3RleHRhcmVhPlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPSdyb3cnPlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXAgY29sLWxnLTZcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJpbWFnZVVybFxcXCI+VXJsIGRlIGwnaW1hZ2U8L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgaWQ9XFxcImltYWdlVXJsXFxcIiBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsobmdNb2RlbCldPVxcXCJtb2RlbC5pbWFnZVVybFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVxcXCJpbWFnZVVybFxcXCI+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXY+XFxyXFxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJzdWJtaXRcXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIFtkaXNhYmxlZF09XFxcIiFib29rRm9ybS5mb3JtLnZhbGlkXFxcIj5FbnJlZ2lzdHJlcjwvYnV0dG9uPlxcclxcbiAgICAgICAgICAgIDxhIGNsYXNzPSdidG4gYnRuLXN1Y2Nlc3MnIChjbGljayk9J29uQmFjaygpJz5SZXRvdXI8L2E+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgPC9mb3JtPlxcclxcbjwvZGl2PlwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2Jvb2tzL2Jvb2stZm9ybS5jb21wb25lbnQuaHRtbFxuLy8gbW9kdWxlIGlkID0gMzk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 400:
/***/ function(module, exports) {

	eval("module.exports = \".ng-valid[required], .ng-valid.required {\\r\\n    border-left: 5px solid #42A948;\\r\\n}\\r\\n\\r\\n.ng-invalid:not(form)  {\\r\\n  border-left: 5px solid #a94442;\\r\\n}\\r\\n\\r\\ntextarea {\\r\\n  height: 100px;\\r\\n}\\r\\n\\r\\n.btn {\\r\\n  min-width: 100px;\\r\\n}\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2stZm9ybS5jb21wb25lbnQuY3NzPzc3ODgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIi5uZy12YWxpZFtyZXF1aXJlZF0sIC5uZy12YWxpZC5yZXF1aXJlZCB7XFxyXFxuICAgIGJvcmRlci1sZWZ0OiA1cHggc29saWQgIzQyQTk0ODtcXHJcXG59XFxyXFxuXFxyXFxuLm5nLWludmFsaWQ6bm90KGZvcm0pICB7XFxyXFxuICBib3JkZXItbGVmdDogNXB4IHNvbGlkICNhOTQ0NDI7XFxyXFxufVxcclxcblxcclxcbnRleHRhcmVhIHtcXHJcXG4gIGhlaWdodDogMTAwcHg7XFxyXFxufVxcclxcblxcclxcbi5idG4ge1xcclxcbiAgbWluLXdpZHRoOiAxMDBweDtcXHJcXG59XCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9ib29rcy9ib29rLWZvcm0uY29tcG9uZW50LmNzc1xuLy8gbW9kdWxlIGlkID0gNDAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 401:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nvar book_service_1 = __webpack_require__(101);\r\nvar BookDetailsComponent = (function () {\r\n    function BookDetailsComponent(_service, _route, _router) {\r\n        this._service = _service;\r\n        this._route = _route;\r\n        this._router = _router;\r\n        this.imageWidth = 160;\r\n        this.imageHeight = 250;\r\n    }\r\n    BookDetailsComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this._route.params\r\n            .switchMap(function (params) { return _this._service.getBook(params['category'], params['id']); })\r\n            .subscribe(function (info) {\r\n            _this.previousId = info.previousId;\r\n            _this.nextId = info.nextId;\r\n            _this.book = info.book;\r\n        }, function (error) { return console.log(error); });\r\n    };\r\n    BookDetailsComponent.prototype.onBack = function () {\r\n        this._router.navigate(['../'], { relativeTo: this._route });\r\n    };\r\n    BookDetailsComponent.prototype.onEdit = function () {\r\n        this._router.navigate(['edit'], { relativeTo: this._route });\r\n    };\r\n    return BookDetailsComponent;\r\n}());\r\nBookDetailsComponent = __decorate([\r\n    core_1.Component({\r\n        moduleId: module.id.toString(),\r\n        template: __webpack_require__(402),\r\n        styles: [\r\n            __webpack_require__(403)\r\n        ]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [book_service_1.BookService,\r\n        router_1.ActivatedRoute,\r\n        router_1.Router])\r\n], BookDetailsComponent);\r\nexports.BookDetailsComponent = BookDetailsComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2stZGV0YWlscy5jb21wb25lbnQudHM/OWEwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyLCBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBCb29rU2VydmljZSB9IGZyb20gJy4vYm9vay5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSUJvb2ssIElCb29rSW5mbyB9IGZyb20gJy4vYm9vayc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQudG9TdHJpbmcoKSxcclxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL2Jvb2stZGV0YWlscy5jb21wb25lbnQuaHRtbCcpLFxyXG4gICAgc3R5bGVzOiBbXHJcbiAgICAgICAgcmVxdWlyZSgnLi9ib29rLWRldGFpbHMuY29tcG9uZW50LmNzcycpXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCb29rRGV0YWlsc0NvbXBvbmVudCB7XHJcblxyXG4gICAgYm9vazogSUJvb2s7XHJcbiAgICBpbWFnZVdpZHRoOiBudW1iZXIgPSAxNjA7XHJcbiAgICBpbWFnZUhlaWdodDogbnVtYmVyID0gMjUwO1xyXG4gICAgcHJldmlvdXNJZDogc3RyaW5nO1xyXG4gICAgbmV4dElkOiBzdHJpbmdcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIF9zZXJ2aWNlOiBCb29rU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIF9yb3V0ZTogQWN0aXZhdGVkUm91dGUsXHJcbiAgICAgICAgcHJpdmF0ZSBfcm91dGVyOiBSb3V0ZXJcclxuICAgICkge31cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgdGhpcy5fcm91dGUucGFyYW1zXHJcbiAgICAgICAgICAgIC5zd2l0Y2hNYXAoKHBhcmFtczogUGFyYW1zKSA9PiB0aGlzLl9zZXJ2aWNlLmdldEJvb2socGFyYW1zWydjYXRlZ29yeSddLCBwYXJhbXNbJ2lkJ10pKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAgICAgKGluZm86IElCb29rSW5mbykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNJZCA9IGluZm8ucHJldmlvdXNJZDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRJZCA9IGluZm8ubmV4dElkO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9vayA9IGluZm8uYm9va1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvbkJhY2soKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fcm91dGVyLm5hdmlnYXRlKFsnLi4vJ10sIHtyZWxhdGl2ZVRvOiB0aGlzLl9yb3V0ZX0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRWRpdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9yb3V0ZXIubmF2aWdhdGUoWydlZGl0J10sIHtyZWxhdGl2ZVRvOiB0aGlzLl9yb3V0ZX0pO1xyXG4gICAgfVxyXG5cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vYXBwL2Jvb2tzL2Jvb2stZGV0YWlscy5jb21wb25lbnQudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFVQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBUkE7QUFDQTtBQVFBO0FBRUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBckNBO0FBUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFYQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 402:
/***/ function(module, exports) {

	eval("module.exports = \"<div *ngIf=\\\"book\\\">\\r\\n    <h3>Fiche détaillée de {{book.title}}</h3>\\r\\n    <div>\\r\\n        <a class='btn btn-info' (click)='onBack()'>\\r\\n            <i class='glyphicon glyphicon-chevron-left'></i> Retour à la liste\\r\\n        </a>\\r\\n        <a class='btn btn-info' (click)='onEdit()'>\\r\\n            <i class='glyphicon glyphicon-pencil'></i> Modifier\\r\\n        </a>\\r\\n    </div>\\r\\n    <div>\\r\\n         <db-image [model]='book' [imageWidth]=\\\"imageWidth\\\" [imageHeight]=\\\"imageHeight\\\"></db-image>\\r\\n    </div>\\r\\n    <db-pager [currentId]=\\\"book.id\\\" [previousId]=\\\"previousId\\\" [nextId]=\\\"nextId\\\"></db-pager>\\r\\n</div>\\r\\n\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2stZGV0YWlscy5jb21wb25lbnQuaHRtbD81NjUxIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2ICpuZ0lmPVxcXCJib29rXFxcIj5cXHJcXG4gICAgPGgzPkZpY2hlIGTDqXRhaWxsw6llIGRlIHt7Ym9vay50aXRsZX19PC9oMz5cXHJcXG4gICAgPGRpdj5cXHJcXG4gICAgICAgIDxhIGNsYXNzPSdidG4gYnRuLWluZm8nIChjbGljayk9J29uQmFjaygpJz5cXHJcXG4gICAgICAgICAgICA8aSBjbGFzcz0nZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnQnPjwvaT4gUmV0b3VyIMOgIGxhIGxpc3RlXFxyXFxuICAgICAgICA8L2E+XFxyXFxuICAgICAgICA8YSBjbGFzcz0nYnRuIGJ0bi1pbmZvJyAoY2xpY2spPSdvbkVkaXQoKSc+XFxyXFxuICAgICAgICAgICAgPGkgY2xhc3M9J2dseXBoaWNvbiBnbHlwaGljb24tcGVuY2lsJz48L2k+IE1vZGlmaWVyXFxyXFxuICAgICAgICA8L2E+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2PlxcclxcbiAgICAgICAgIDxkYi1pbWFnZSBbbW9kZWxdPSdib29rJyBbaW1hZ2VXaWR0aF09XFxcImltYWdlV2lkdGhcXFwiIFtpbWFnZUhlaWdodF09XFxcImltYWdlSGVpZ2h0XFxcIj48L2RiLWltYWdlPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRiLXBhZ2VyIFtjdXJyZW50SWRdPVxcXCJib29rLmlkXFxcIiBbcHJldmlvdXNJZF09XFxcInByZXZpb3VzSWRcXFwiIFtuZXh0SWRdPVxcXCJuZXh0SWRcXFwiPjwvZGItcGFnZXI+XFxyXFxuPC9kaXY+XFxyXFxuXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvYm9va3MvYm9vay1kZXRhaWxzLmNvbXBvbmVudC5odG1sXG4vLyBtb2R1bGUgaWQgPSA0MDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 403:
/***/ function(module, exports) {

	eval("module.exports = \"\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2Jvb2tzL2Jvb2stZGV0YWlscy5jb21wb25lbnQuY3NzP2M1YTQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIlwiXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvYm9va3MvYm9vay1kZXRhaWxzLmNvbXBvbmVudC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDQwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 404:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar router_1 = __webpack_require__(42);\r\nexports.routes = [\r\n    { path: '', redirectTo: 'welcome', pathMatch: 'full' }\r\n];\r\nvar AppRoutingModule = (function () {\r\n    function AppRoutingModule() {\r\n    }\r\n    return AppRoutingModule;\r\n}());\r\nAppRoutingModule = __decorate([\r\n    core_1.NgModule({\r\n        imports: [router_1.RouterModule.forRoot(exports.routes)],\r\n        exports: [router_1.RouterModule]\r\n    })\r\n], AppRoutingModule);\r\nexports.AppRoutingModule = AppRoutingModule;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2FwcC1yb3V0aW5nLm1vZHVsZS50cz80YWFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlcywgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbmV4cG9ydCBjb25zdCByb3V0ZXM6IFJvdXRlcyA9IFtcclxuICAgIHsgcGF0aDogJycsIHJlZGlyZWN0VG86ICd3ZWxjb21lJywgcGF0aE1hdGNoOiAnZnVsbCd9XHJcbl07XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgaW1wb3J0czogW1JvdXRlck1vZHVsZS5mb3JSb290KHJvdXRlcyldLFxyXG4gICAgZXhwb3J0czogW1JvdXRlck1vZHVsZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEFwcFJvdXRpbmdNb2R1bGUge1xyXG4gICAgXHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL2FwcC9hcHAtcm91dGluZy5tb2R1bGUudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBTUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUZBO0FBSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 405:
/***/ function(module, exports) {

	eval("\"use strict\";\r\nvar InMemoryDbUniverseService = (function () {\r\n    function InMemoryDbUniverseService() {\r\n    }\r\n    InMemoryDbUniverseService.prototype.createDb = function () {\r\n        var charactersdb = this.getDbCharacters();\r\n        var charactersdbz = this.getDbzCharacters();\r\n        var booksdb = this.getDbBooks();\r\n        var booksdbz = this.getDbzBooks();\r\n        return {\r\n            charactersdb: charactersdb,\r\n            charactersdbz: charactersdbz,\r\n            booksdb: booksdb,\r\n            booksdbz: booksdbz\r\n        };\r\n    };\r\n    InMemoryDbUniverseService.prototype.getDbCharacters = function () {\r\n        return [\r\n            {\r\n                \"id\": \"515275eb-a311-4cc3-c428-151d091cd9b7\",\r\n                \"category\": \"db\",\r\n                \"imageUrl\": \"http://vignette1.wikia.nocookie.net/joke-battles/images/f/f2/Yamcha_render_by_anthonyjmo-d9tmtfh.png/revision/latest?cb=20160909123653\",\r\n                \"name\": \"Yamcha\",\r\n                \"description\": \"Yamcha est un redoutable guerrier capable de terrasser les adversaires les plus terribles grâce à sa technique dévastatrice : la botte secrète du loup. Accompagné de son acolyte Pual, il parcourt le désert à la recherche de voyageurs à détrousser.\\nCe jeune homme particulièrement séduisant souffre cependant d'une timidité maladive qui lui fait perdre tous ses moyens dès qu'il se trouve en face d'une fille.\\nIl abandonnera sa vie de bandit du désert pour accompagner Goku et vaincre sa peur de la gent féminine.\\nIl décidera ensuite d'aller en ville parfaire ses techniques de combat et il participera même au Championnat du Monde des arts martiaux.\"\r\n            },\r\n            {\r\n                \"id\": \"37e7dbaa-c6da-3107-67e6-3e91af769450\",\r\n                \"category\": \"db\",\r\n                \"imageUrl\": \"http://vignette1.wikia.nocookie.net/3__/images/8/8d/Goku2.jpg.png/revision/latest?cb=20140917091017&path-prefix=300-heroes\",\r\n                \"name\": \"Songoku\",\r\n                \"description\": \"Goku est un jeune garçon au cœur pur doté d’une queue de singe et d’une force extraordinaire.\\nSeule petite ombre au tableau : il a tendance à se transformer en gorille géant lorsqu’il regarde la pleine lune.\\nGoku ne se sépare jamais du bâton que lui a laissé son grand-père adoptif, Gohan, et qui a le pouvoir de changer de taille sur commande. Sa panoplie va s’étoffer par la suite avec le nuage magique offert par Tortue Géniale, qui lui permettra de parcourir des distances formidables en un rien de temps.\\nAu fil de ses aventures, Goku va gagner en expérience pour devenir le plus puissant guerrier de la terre.\\nIl apprendra notamment à maîtriser à la perfection la technique du Kamehameha, qui permet de concentrer sa force intérieure pour propulser des boules d’énergie destructrices.\"\r\n            },\r\n            {\r\n                \"id\": \"65e324cb-1f24-780a-e6a1-690e39b68d58\",\r\n                \"category\": \"db\",\r\n                \"imageUrl\": \"http://t0.gstatic.com/images?q=tbn:ANd9GcQ6t6fnkmF4KxL1FWi7oaGbBAoN1-P2asbz31JISQ2g0q8iFiT68LIDr5c\",\r\n                \"name\": \"Chichi\",\r\n                \"description\": \"Fille de Gyûmaô, Chichi rencontre Goku alors qu’elle n’est encore qu’une enfant. Elle n’en demeure pas moins, déjà à l’époque, une guerrière redoutable, ce qu’apprendra à ses dépens le premier dinosaure à essayer de la manger.\"\r\n            },\r\n        ];\r\n    };\r\n    InMemoryDbUniverseService.prototype.getDbBooks = function () {\r\n        return [\r\n            {\r\n                \"id\": \"1e9f24e5-2277-507b-54e4-0f829ff76143\",\r\n                \"category\": \"db\",\r\n                \"title\": \"Tome 1\",\r\n                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723434621-G.jpg\",\r\n                \"description\": \"Tome 1\"\r\n            },\r\n            {\r\n                \"id\": \"203a4686-b22a-86ad-44d2-483aa9c5a111\",\r\n                \"category\": \"db\",\r\n                \"title\": \"Tome 2\",\r\n                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723434638-G.jpg\",\r\n                \"description\": \"Tome 2\"\r\n            }\r\n        ];\r\n    };\r\n    InMemoryDbUniverseService.prototype.getDbzCharacters = function () {\r\n        return [\r\n            {\r\n                \"id\": \"65e324cb-1f24-780a-e6a1-690e39b68d58\",\r\n                \"category\": \"dbz\",\r\n                \"imageUrl\": \"http://vignette1.wikia.nocookie.net/villains/images/e/e3/Scouter_vegeta.png/revision/latest?cb=20130802141754\",\r\n                \"name\": \"Vegeta\",\r\n                \"description\": \"Vegeta est un Saïyen de sang royal. Il est le fils du Roi Vegeta qui régnait sur la planète du même nom avant que celle-ci ne soit détruite par Freezer.\\nIl débarque sur Terre avec Nappa après la défaite de Raditz avec la ferme intention de se débarrasser de Goku et de s’emparer des Dragon Ball.\\nFier et ombrageux, il sera le rival incessant de Goku, mais aussi un de ses plus proches compagnons.\\nContre toute attente, il se rapprochera plus tard de Bulma avec qui il aura un fils, Trunks, puis une fille, Bra.\\n\"\r\n            }\r\n        ];\r\n    };\r\n    InMemoryDbUniverseService.prototype.getDbzBooks = function () {\r\n        return [\r\n            {\r\n                \"id\": \"d82878d-2a52-b90d-b6b7-6d525a8fe06c\",\r\n                \"category\": \"dbz\",\r\n                \"title\": \"Tome 41\",\r\n                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723449380-G.jpg\",\r\n                \"description\": \"Tome 41\"\r\n            },\r\n            {\r\n                \"id\": \"5434ce77-218b-8b2b-d95e-7aea191775a9\",\r\n                \"category\": \"dbz\",\r\n                \"title\": \"Tome 23\",\r\n                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723449205-G.jpg\",\r\n                \"description\": \"Tome 23\"\r\n            }\r\n        ];\r\n    };\r\n    return InMemoryDbUniverseService;\r\n}());\r\nexports.InMemoryDbUniverseService = InMemoryDbUniverseService;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 406:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar character_service_1 = __webpack_require__(85);\r\nvar book_service_1 = __webpack_require__(101);\r\nvar category_service_1 = __webpack_require__(87);\r\nvar CoreService = (function () {\r\n    function CoreService(_characterService, _bookService, _categoryService) {\r\n        this._characterService = _characterService;\r\n        this._bookService = _bookService;\r\n        this._categoryService = _categoryService;\r\n    }\r\n    CoreService.prototype.load = function () {\r\n        var _this = this;\r\n        return this._categoryService\r\n            .getCategories()\r\n            .subscribe(function (categories) {\r\n            _this._characterService.init(categories);\r\n            _this._bookService.init(categories);\r\n        });\r\n    };\r\n    return CoreService;\r\n}());\r\nCoreService = __decorate([\r\n    core_1.Injectable(),\r\n    __metadata(\"design:paramtypes\", [character_service_1.CharacterService,\r\n        book_service_1.BookService,\r\n        category_service_1.CategoryService])\r\n], CoreService);\r\nexports.CoreService = CoreService;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBwL2NvcmUvY29yZS5zZXJ2aWNlLnRzPzdmOWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgQ2hhcmFjdGVyU2VydmljZSB9IGZyb20gJy4uL2NoYXJhY3RlcnMvY2hhcmFjdGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCb29rU2VydmljZSB9IGZyb20gJy4uL2Jvb2tzL2Jvb2suc2VydmljZSc7XHJcbmltcG9ydCB7IENhdGVnb3J5U2VydmljZSB9IGZyb20gJy4uL2NhdGVnb3JpZXMvY2F0ZWdvcnkuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDb3JlU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBfY2hhcmFjdGVyU2VydmljZTogQ2hhcmFjdGVyU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIF9ib29rU2VydmljZTogQm9va1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBfY2F0ZWdvcnlTZXJ2aWNlOiBDYXRlZ29yeVNlcnZpY2VcclxuICAgICkgeyB9XHJcblxyXG4gICAgcHVibGljIGxvYWQoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jYXRlZ29yeVNlcnZpY2VcclxuICAgICAgICAgICAgLmdldENhdGVnb3JpZXMoKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChjYXRlZ29yaWVzOiBzdHJpbmdbXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhcmFjdGVyU2VydmljZS5pbml0KGNhdGVnb3JpZXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYm9va1NlcnZpY2UuaW5pdChjYXRlZ29yaWVzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG5vZGVfbW9kdWxlcy9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi9hcHAvY29yZS9jb3JlLnNlcnZpY2UudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFsQkE7QUFEQTtBQUlBO0FBQ0E7QUFDQTtBQUxBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }

});