{"version":3,"sources":["webpack:///app.818b8e4b91c85e35e726.js","webpack:///./app/main.ts","webpack:///./app/app.module.ts","webpack:///./~/@angular/http/bundles/http.umd.js","webpack:///./~/angular2-in-memory-web-api/index.js","webpack:///./~/angular2-in-memory-web-api/http-status-codes.js","webpack:///./~/angular2-in-memory-web-api/in-memory-backend.service.js","webpack:///./app/app.component.ts","webpack:///./app/app.component.html","webpack:///./app/app.component.css","webpack:///./app/welcome/welcome.module.ts","webpack:///./app/welcome/welcome-routing.module.ts","webpack:///./~/@angular/router/bundles/router.umd.js","webpack:///./app/welcome/welcome.component.ts","webpack:///./app/welcome/welcome.component.html","webpack:///./app/welcome/welcome.component.css","webpack:///./app/categories/category.module.ts","webpack:///./app/categories/category.component.ts","webpack:///./app/categories/category.component.html","webpack:///./app/categories/category.component.css","webpack:///./app/categories/category-routing.module.ts","webpack:///./app/categories/category-guard.service.ts","webpack:///./app/characters/character.module.ts","webpack:///./app/characters/character-routing.module.ts","webpack:///./app/characters/character-list.component.ts","webpack:///./app/characters/character.service.ts","webpack:///./~/angular2-uuid/index.js","webpack:///./app/categories/category.service.ts","webpack:///./app/characters/character-list.component.html","webpack:///./app/characters/character-list.component.css","webpack:///./app/characters/character-details.component.ts","webpack:///./app/characters/character-details.component.html","webpack:///./app/characters/character-details.component.css","webpack:///./app/characters/character-form.component.ts","webpack:///./app/characters/character-form.component.html","webpack:///./app/characters/character-form.component.css","webpack:///./app/core/core.module.ts","webpack:///./app/books/book.service.ts","webpack:///./app/shared/shared.module.ts","webpack:///./~/@angular/forms/bundles/forms.umd.js","webpack:///./app/shared/image.component.ts","webpack:///./app/shared/image.component.html","webpack:///./app/shared/image.component.css","webpack:///./app/shared/pager.component.ts","webpack:///./app/shared/pager.component.html","webpack:///./app/shared/pager.component.css","webpack:///./app/books/book.module.ts","webpack:///./app/books/book-routing.module.ts","webpack:///./app/books/book-list.component.ts","webpack:///./app/books/book-list.component.html","webpack:///./app/books/book-list.component.css","webpack:///./app/books/book-form.component.ts","webpack:///./app/books/book-form.component.html","webpack:///./app/books/book-form.component.css","webpack:///./app/books/book-details.component.ts","webpack:///./app/books/book-details.component.html","webpack:///./app/books/book-details.component.css","webpack:///./app/app-routing.module.ts","webpack:///./app/inmemorydata.service.ts","webpack:///./app/core/core.service.ts"],"names":["webpackJsonp","0","module","exports","__webpack_require__","platform_browser_dynamic_1","app_module_1","platformBrowserDynamic","bootstrapModule","AppModule","23","loadData","service","load","__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","core_1","http_1","angular2_in_memory_web_api_1","app_component_1","welcome_module_1","category_module_1","book_module_1","app_routing_module_1","inmemorydata_service_1","core_module_1","core_service_1","NgModule","imports","HttpModule","WelcomeModule","CategoryModule","BookModule","AppRoutingModule","InMemoryWebApiModule","forRoot","InMemoryDbUniverseService","CoreModule","declarations","AppComponent","bootstrap","providers","CoreService","provide","APP_INITIALIZER","useFactory","deps","multi","24","global","factory","_angular_core","rxjs_Observable","_angular_platformBrowser","normalizeMethodName","method","toUpperCase","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","Error","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","strLen","charCodeAt","buffer","paramParser","rawParams","map","Map","params","split","forEach","param","eqIdx","indexOf","_a","slice","val","list","get","push","set","standardEncoding","v","encodeURIComponent","replace","_getJsonpConnections","w","window","_jsonpConnections","JSONP_HOME","httpRequest","backend","request","createConnection","response","mergeOptions","defaultOpts","providedOpts","url","newOptions","merge","RequestOptions","search","headers","body","withCredentials","responseType","_createDefaultCookieXSRFStrategy","CookieXSRFStrategy","httpFactory","xhrBackend","requestOptions","Http","jsonpFactory","jsonpBackend","Jsonp","BrowserXhr","prototype","build","XMLHttpRequest","type","Injectable","ctorParameters","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","_this","_headers","_normalizedNames","values","name","value","append","keys","Array","isArray","delete","fromResponseHeaderString","headersString","line","index","name_1","trim","getAll","lcName","toLowerCase","fn","has","from","join","mayBeSetNormalizedName","toJSON","serialized","apply","entries","__extends$1","__extends","b","__","constructor","p","hasOwnProperty","create","ResponseOptions","_b","status","statusText","options","BaseResponseOptions","_super","call","ConnectionBackend","Connection","XSRFStrategy","configureRequest","req","isSuccess","QueryEncoder","encodeKey","k","encodeValue","URLSearchParams","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","searchParams","replaceAll","toString","paramsList","Body","json","_body","parse","text","String","fromCharCode","stringify","arrayBuffer","blob","__extends$2","Response","responseOptions","ok","_nextRequestId","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","connections","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","finished","data","JSONPConnection_","_dom","baseResponseOptions","_finished","TypeError","Observable","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","responseOptions_1","error","_responseData","next","complete","onError","message","addEventListener","removeEventListener","JSONPBackend","JSONPBackend_","_browserJSONP","_baseResponseOptions","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","responseText","err","setDetectedContentType","setRequestHeader","getBody","abort","contentType","_cookieName","_headerName","xsrfToken","__platform_browser_private__","getDOM","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","__extends$3","BaseRequestOptions","__extends$5","Request","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","noop","__extends$4","_backend","_defaultOptions","responseObservable","post","put","patch","head","defaultOptions","args","useClass","JsonpModule","VERSION","Version","25","__export","m","__metadata","metadata","in_memory_backend_service_2","dbCreator","InMemoryBackendService","SEED_DATA","InMemoryBackendConfig","useValue","ngModule","26","STATUS","CONTINUE","SWITCHING_PROTOCOLS","OK","CREATED","ACCEPTED","NON_AUTHORITATIVE_INFORMATION","NO_CONTENT","RESET_CONTENT","PARTIAL_CONTENT","MULTIPLE_CHOICES","MOVED_PERMANTENTLY","FOUND","SEE_OTHER","NOT_MODIFIED","USE_PROXY","TEMPORARY_REDIRECT","BAD_REQUEST","UNAUTHORIZED","PAYMENT_REQUIRED","FORBIDDEN","NOT_FOUND","METHOD_NOT_ALLOWED","NOT_ACCEPTABLE","PROXY_AUTHENTICATION_REQUIRED","REQUEST_TIMEOUT","CONFLICT","GONE","LENGTH_REQUIRED","PRECONDITION_FAILED","PAYLOAD_TO_LARGE","URI_TOO_LONG","UNSUPPORTED_MEDIA_TYPE","RANGE_NOT_SATISFIABLE","EXPECTATION_FAILED","IM_A_TEAPOT","UPGRADE_REQUIRED","INTERNAL_SERVER_ERROR","NOT_IMPLEMENTED","BAD_GATEWAY","SERVICE_UNAVAILABLE","GATEWAY_TIMEOUT","HTTP_VERSION_NOT_SUPPORTED","PROCESSING","MULTI_STATUS","IM_USED","PERMANENT_REDIRECT","UNPROCESSABLE_ENTRY","LOCKED","FAILED_DEPENDENCY","PRECONDITION_REQUIRED","TOO_MANY_REQUESTS","REQUEST_HEADER_FIELDS_TOO_LARGE","UNAVAILABLE_FOR_LEGAL_REASONS","VARIANT_ALSO_NEGOTIATES","INSUFFICIENT_STORAGE","NETWORK_AUTHENTICATION_REQUIRED","STATUS_CODE_INFO","100","code","description","spec_title","spec_href","101","200","201","202","203","204","205","206","300","301","302","303","304","305","307","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","426","500","501","502","503","504","505","102","207","226","308","422","423","424","428","429","431","451","506","507","511","27","__param","paramIndex","decorator","Observable_1","http_status_codes_1","OpaqueToken","config","assign","defaultResponseOptions","delay","delete404","seedData","resetDb","loc","getLocation","host","rootPath","pathname","res","handleRequest","parseUrl","base","collectionName","resourceUrl","query","collection","db","reqInfo","Content-Type","parseId","commands","createErrorResponse","setStatusText","applyQuery","conditions","rx","RegExp","decodeURI","len","filter","row","cond","command","exists","removeById","findById","find","item","genId","maxId","reduce","prev","Math","max","href","l","findIndex","isNumberId","idNum","parseFloat","isNaN","drop","urlRoot","protocol","path","substr","msg","existingIx","ix","splice","createDb","statusCode","Inject","Optional","37","pageTitle","Component","selector","moduleId","template","styles","38","39","40","common_1","welcome_routing_module_1","welcome_component_1","CommonModule","WelcomeRoutingModule","WelcomeComponent","41","router_1","RouterModule","forChild","component","42","_angular_common","rxjs_BehaviorSubject","rxjs_Subject","rxjs_observable_from","rxjs_observable_of","rxjs_operator_concatMap","rxjs_operator_every","rxjs_operator_first","rxjs_operator_map","rxjs_operator_mergeMap","rxjs_operator_reduce","rxjs_operator_catch","rxjs_operator_concatAll","rxjs_util_EmptyError","rxjs_observable_fromPromise","rxjs_operator_mergeAll","rxjs_operator_filter","defaultUrlMatcher","segments","segmentGroup","route","parts","posParams","consumed","currentIndex","current","isPosParam","startsWith","pathMatch","hasChildren","shallowEqualArrays","a","shallowEqual","k1","k2","flatten","j","last","m1","m2","attr","prop","waitForMap","obj","waitFor","PRIMARY_OUTLET","_","concatted$","concatAll","of","last$","andObservables","observables","merged$","mergeAll","every","result","wrapIntoObservable","Promise","fromPromise","createEmptyUrlTree","UrlTree","UrlSegmentGroup","containsTree","container","containee","exact","equalQueryParams","queryParams","equalSegmentGroups","root","containsQueryParams","containsSegmentGroup","equalPath","numberOfChildren","children","containsSegmentGroupHelper","containeePaths","equalSegments","parameters","mapChildrenIntoArray","segment","child","childOutlet","concat","serializePaths","serializePath","serializeSegment","primary","children_1","encode","s","decode","decodeURIComponent","serializeParams","pairs","first","second","serializeQueryParams","strParams","Pair","matchSegments","str","SEGMENT_RE","lastIndex","match","matchQueryParams","QUERY_PARAM_RE","matchUrlQueryParamValue","QUERY_PARAM_VALUE_RE","noMatch","obs","NoMatch","absoluteRedirect","newTree","AbsoluteRedirect","namedOutletsRedirect","redirectTo","canLoadFails","NavigationCancelingError","applyRedirects","injector","configLoader","urlSerializer","urlTree","ApplyRedirects","runGuards","canLoad","guard","matched","consumedSegments","lastChild","positionalParamSegments","matcher","slicedSegments","containsEmptyPathRedirectsWithNamedOutlets","createChildrenForEmptySegments","mergeTrivialChildren","containsEmptyPathRedirects","addEmptySegmentsToChildrenIfNeeded","routes","_i","routes_1","emptyPathRedirect","getOutlet$1","primarySegmentGroup","routes_2","undefined","outlet","validateConfig","parentPath","fullPath","getFullPath","validateNode","loadChildren","charAt","exp","currentRoute","findNode","expected","cc","findPath","collected","cloned","createEmptyState","rootComponent","snapshot","createEmptyStateSnapshot","emptyUrl","BehaviorSubject","UrlSegment","emptyParams","emptyData","emptyQueryParams","fragment","activated","ActivatedRoute","RouterState","TreeNode","ActivatedRouteSnapshot","RouterStateSnapshot","inheritedParamsDataResolve","pathToRoot","pathFromRoot","inhertingStartingFrom","parent_1","routeConfig","curr","resolve","_resolvedData","setRouterStateSnapshot","state","_routerState","serializeNode","advanceActivatedRoute","currentSnapshot","_futureSnapshot","equalParamsAndUrlSegments","createRouterState","routeReuseStrategy","prevState","createNode","_root","shouldReuseRoute","createOrReuseChildren","retrieve","tree","setFutureSnapshotsOfActivatedRoutes","createActivatedRoute","createUrlTree","nav","computeNavigation","toRoot","startingPosition","findStartingPosition","processChildren","updateSegmentGroupChildren","updateSegmentGroup","isMatrixParams","outlets","segmentPath","oldSegmentGroup","newSegmentGroup","replaceSegment","oldSegment","newSegment","outletName","Navigation","numberOfDoubleDots","isAbsolute","cmd","cmdIdx","outlets_1","urlPart","partIndex","Position","_lastPathIndex","_urlSegment","modifier","createPositionApplyingDoubleDots","group","g","ci","dd","parent","getPath","getOutlets","startIndex","prefixedWith","slicedCommands","commandIndex","pathIndex","createNewSegmentGroup","outlets_2","currentCommandIndex","currentPathIndex","compare","paths","createNewSegmentChildren","recognize","rootComponentType","Recognizer","sortActivatedRouteSnapshots","nodes","sort","localeCompare","getChildConfig","_loadedConfig","match$1","NoMatch$1","checkOutletNameUniqueness","names","n","routeWithSameOutletName","getSourceSegmentGroup","_sourceSegment","getPathIndexShift","_segmentIndexShift","split$1","containsEmptyPathMatchesWithNamedOutlets","createChildrenForEmptyPaths","containsEmptyPathMatches","addEmptyPathsToChildrenIfNeeded","emptyPathMatch","getOutlet$2","primarySegment","getData","getResolve","defaultErrorHandler","advanceActivatedRouteNodeAndItsChildren","parentLoadedConfig","_routeConfig","closestLoadedConfig","nodeChildrenAsMap","getOutlet","outletMap","_outlets","componentName","validateCommands","attrBoolValue","routerNgProbeToken","NgProbeToken","Router","provideLocationStrategy","platformLocationStrategy","baseHref","useHash","HashLocationStrategy","PathLocationStrategy","provideForRootGuard","router","provideRoutes","ANALYZE_FOR_ENTRY_COMPONENTS","ROUTES","setupRouter","ref","location","loader","compiler","opts","urlHandlingStrategy","errorHandler","enableTracing","dom_1","events","subscribe","e","logGroup","log","logGroupEnd","rootRoute","routerState","initialRouterNavigation","preloader","bootstrappedComponentRef","components","resetRootComponentType","componentTypes","setUpPreloading","initialNavigation","setUpLocationChangeListener","provideRouterInitializer","ROUTER_INITIALIZER","ApplicationRef","RouterPreloader","ROUTER_CONFIGURATION","APP_BOOTSTRAP_LISTENER","useExisting","stack","LoadedRouterConfig","factoryResolver","injectorFactory","RouterConfigLoader","parentInjector","loadModuleFactory","componentFactoryResolver","offlineMode_1","Compiler","mergeMap","t","compileModuleAsync","DefaultUrlSerializer","serialize","enumerable","configurable","UrlSerializer","UrlParser","parseRootSegment","parseQueryParams","parseFragment","encodeURI","remaining","peekStartsWith","capture","parseChildren","parseSegments","parseParens","matrixParams","parseMatrixParams","parseQueryParam","parseParam","valueMatch","decodedKey","decodedVal","currentVal","allowPrimary","allowRedirects","expanded$","expandSegmentGroup","urlTrees$","rootSegmentGroup","_catch","noMatchError","mapped$","rootCandidate","expandChildren","expandSegment","routes$","processedRoutes$","expandSegmentAgainstRoute","concattedProcessedRoutes$","first$","EmptyError","noLeftoversInUrl","matchSegmentAgainstRoute","expandSegmentAgainstRouteUsingRedirect","expandWildCardWithParamsAgainstRouteUsingRedirect","expandRegularSegmentAgainstRouteUsingRedirect","applyRedirectCommands","lineralizeSegments","newSegments","rawSegmentGroup","consumedSegments_1","rawSlicedSegments_1","childConfig$","routerConfig","childInjector","childConfig","cs","shouldLoad","applyRedirectCreatreUrlTree","newRoot","createSegmentGroup","createQueryParams","redirectToParams","actualParams","updatedSegments","createSegments","redirectToSegments","actualSegments","findPosParam","findOrReturn","redirectToUrlSegment","pos","idx","actualSegments_1","Tree","firstChild","siblings","futureSnapshot","urlSegment","lastPathIndex","_resolve","cmdWithOutlet","processSegmentGroup","freeze","rootNode","routeState","inheriteParamsAndData","routeNode","processSegment","config_1","processSegmentAgainstRoute","rawSegment","snapshot_1","rawSlicedSegments","RouterOutletMap","registerOutlet","removeOutlet","UrlHandlingStrategy","shouldProcessUrl","extract","newUrlPart","rawUrl","DefaultUrlHandlingStrategy","wholeUrl","NavigationStart","NavigationEnd","urlAfterRedirects","NavigationCancel","reason","NavigationError","RoutesRecognized","DefaultRouteReuseStrategy","shouldDetach","store","detachedTree","shouldAttach","future","navigations","routerEvents","Subject","navigationId","navigated","resetConfig","currentUrlTree","rawUrlTree","currentRouterState","processNavigations","navigateByUrl","replaceUrl","locationSubscription","Zone","wrap","change","source","setTimeout","scheduleNavigation","serializeUrl","ngOnDestroy","dispose","unsubscribe","relativeTo","preserveQueryParams","preserveFragment","q","f","extras","skipLocationChange","navigate","removeEmptyProps","isActive","concatMap","executeScheduledNavigation","promise","catch","lastNavigation","reject","rej","urlTransition","then","runNavigate","shouldPreventPushState","shouldReplaceUrl","precreatedState","go","resolvePromise","rejectPromise","urlAndSnapshot$","appliedUrl","redirectsApplied$","preActivation","navigationIsSuccessful","preactivationTraverse$","PreActivation","traverse","preactivationCheckGuards","checkGuards","shouldActivate","preactivationResolveData$","resolveData","routerState$","storedState","storedUrl","isCurrentPathEqualTo","replaceState","ActivateRoutes","activate","resetUrlToCurrentUrlTree","ee","CanActivate","CanDeactivate","checks","parentOutletMap","futureRoot","currRoot","traverseChildRoutes","checks$","runningChecks$","runCanActivateChild","runCanActivate","s2","runCanDeactivate","runResolve","futureNode","currNode","futurePath","prevChildren","traverseRoutes","deactiveRouteAndItsChildren","isActivated","canActivate","observable","getToken","canActivateChildGuards","reverse","extractCanActivateChild","guards","canActivateChild","canDeactivate","canDeactivate$","resolveNode","resolvedData","resolver","token","futureState","currState","deactivateChildRoutes","activateChildRoutes","deactivateRoutes","activateRoutes","stored","attach","componentRef","placeComponentIntoOutlet","resolved","locationInjector","ComponentFactoryResolver","locationFactoryResolver","ReflectiveInjector","detachAndStoreRouteSubtree","deactiveRouteAndOutlet","detach","childOutletMap","deactivate","RouterLink","onClick","Directive","propDecorators","Input","routerLink","HostListener","RouterLinkWithHref","locationStrategy","subscription","updateTargetUrlAndHref","ngOnChanges","changes","button","ctrlKey","metaKey","prepareExternalUrl","LocationStrategy","HostBinding","RouterLinkActive","element","renderer","cdr","classes","active","routerLinkActiveOptions","update","ngAfterContentInit","links","linksWithHrefs","hasActiveLinks","setElementClass","nativeElement","detectChanges","isLinkActive","link","some","exportAs","ElementRef","Renderer","ChangeDetectorRef","ContentChildren","descendants","routerLinkActive","RouterOutlet","activateEvents","EventEmitter","deactivateEvents","instance","_activatedRoute","activatedRoute","insert","hostView","destroy","emit","resolveComponentFactory","inj","fromResolvedProviders","createComponent","changeDetectorRef","ViewContainerRef","Attribute","Output","RouteReuseStrategy","handle","PreloadingStrategy","preload","PreloadAllModules","NoPreloading","moduleLoader","preloadingStrategy","processRoutes","preloadConfig","loaded","NgModuleFactoryLoader","Injector","ROUTER_DIRECTIVES","ROUTER_FORROOT_GUARD","ROUTER_PROVIDERS","Location","SystemJsNgModuleLoader","SkipSelf","PlatformLocation","APP_BASE_HREF","__router_private__","73","74","75","76","category_component_1","category_routing_module_1","character_module_1","category_guard_service_1","CategoryRoutingModule","CharacterModule","CategoryComponent","CategoryGuard","77","78","79","80","81","_router","category","82","character_routing_module_1","character_list_component_1","character_details_component_1","character_form_component_1","shared_module_1","SharedModule","CharacterRoutingModule","CharacterListComponent","CharacterDetailsComponent","CharacterFormComponent","83","84","character_service_1","_service","_route","ngOnInit","getCharacters","switchMap","characters","console","onNew","onBack","CharacterService","85","angular2_uuid_1","BehaviorSubject_1","category_service_1","_http","_categoryService","init","categories","_data","_values","defer","getUrl","getCharacter","character","previousId","getPreviousId","nextId","getNextId","save","handleError","UUID","throw","ids","CategoryService","86","crypto","buf","getRandomValues","pad4","random4","num","ret","floor","random","87","getCategories","90","91","92","imageWidth","imageHeight","info","onEdit","95","96","97","model","imageUrl","onSubmit","98","99","book_service_1","BookService","rxjs_1","_url","getBooks","books","getBook","book","385","platform_browser_1","forms_1","image_component_1","pager_component_1","BrowserModule","ImageComponent","PagerComponent","FormsModule","386","rxjs_operator_toPromise","isPresent","isBlank","looseIdentical","isJsObject","o","isPrimitive","isEmptyInputValue","_convertToPromise","isPromise","toPromise","_executeValidators","control","validators","_executeAsyncValidators","_mergeErrors","arrayOfErrors","errors","StringMapWrapper","normalizeValidator","validator","validate","normalizeAsyncValidator","unimplemented","_buildValueString","_extractId","valueString","_buildValueString$1","_extractId$1","controlPath","setUpControl","dir","_throwError","valueAccessor","Validators","compose","asyncValidator","composeAsync","writeValue","registerOnChange","newValue","viewToModelUpdate","markAsDirty","setValue","emitModelToViewChange","registerOnTouched","markAsTouched","emitModelEvent","setDisabledState","registerOnDisabledChange","isDisabled","_rawValidators","registerOnValidatorChange","updateValueAndValidity","_rawAsyncValidators","cleanUpControl","_noControlError","_clearChangeFns","setUpFormContainer","messageEnd","composeValidators","composeAsyncValidators","isPropertyUpdated","viewModel","isFirstChange","currentValue","isBuiltInAccessor","BUILTIN_ACCESSORS","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","DefaultValueAccessor","_find","delimiter","FormGroup","controls","FormArray","at","toObservable","coerceToValidator","coerceToAsyncValidator","_hasInvalidParent","FormGroupName","FormGroupDirective","FormArrayName","AbstractControlDirective","valid","invalid","pending","pristine","dirty","touched","untouched","disabled","enabled","statusChanges","valueChanges","reset","hasError","errorCode","getError","ControlContainer","_c","equals","ListWrapper","findLast","arr","condition","removeAll","items","remove","el","flat","flatItem","__core_private__","NG_VALIDATORS","NG_ASYNC_VALIDATORS","required","requiredTrue","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","nullValidator","regex","regexStr","requiredPattern","actualValue","presentValidators","promises","all","NG_VALUE_ACCESSOR","CHECKBOX_VALUE_ACCESSOR","forwardRef","CheckboxControlValueAccessor","_renderer","_elementRef","onChange","onTouched","setElementProperty","(change)","(blur)","DEFAULT_VALUE_ACCESSOR","normalizedValue","(input)","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","NgControl","_parent","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","RadioControlRegistry","_accessors","add","accessor","select","_isSameGroup","fireUncheck","controlPair","_control","_registry","_injector","_checkName","_state","_fn","formControlName","_throwNameError","RANGE_VALUE_ACCESSOR","RangeValueAccessor","SELECT_VALUE_ACCESSOR","SelectControlValueAccessor","_optionMap","_idCounter","_getOptionId","_getOptionValue","_registerOption","NgSelectOption","_element","_select","_setElementValue","Host","ngValue","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","optionSelectedStateSetter","ids_1","opt","_setSelected","selected","selectedOptions","_value","NgSelectMultipleOption","AbstractFormGroupDirective","_checkParentType","formDirective","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","AbstractControlStatus","cd","_cd","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","NgControlStatus","Self","NgControlStatusGroup","isAsync","__isAsync","generatorOrNext","schedulerFn","errorFn","completeFn","__extends$6","VALID","INVALID","PENDING","DISABLED","AbstractControl","_onCollectionChange","_pristine","_touched","_onDisabledChange","_status","_errors","_valueChanges","_statusChanges","setValidators","newValidator","setAsyncValidators","clearValidators","clearAsyncValidators","onlySelf","markAsUntouched","_forEachChild","_updateTouched","markAsPristine","_updatePristine","markAsPending","disable","emitEvent","_updateValue","_updateAncestors","changeFn","enable","setParent","patchValue","_setInitialStatus","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","_cancelExistingSubscription","_asyncValidationSubscription","setErrors","_updateControlsErrors","x","_initObservables","_anyControlsHaveStatus","cb","_anyControls","_anyControlsDirty","_anyControlsTouched","_isBoxedValue","formState","_registerOnCollectionChange","FormControl","_onChange","_applyFormState","emitViewToModelChange","_setUpControls","registerControl","addControl","removeControl","setControl","contains","controlName","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","_reduceValue","initValue","_registerControl","removeAt","formDirectiveProvider","NgForm","resolvedPromise","asyncValidators","_submitted","ngSubmit","form","_findContainer","getControl","updateModel","$event","onReset","resetForm","pop","(submit)","(reset)","outputs","Examples","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","TemplateDrivenErrors","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","__extends$8","modelGroupProvider","NgModelGroup","__extends$7","formControlBinding","NgModel","resolvedPromise$1","_registered","_checkForErrors","_setUpControl","_updateDisabled","_isStandalone","_setUpStandalone","standalone","disabledValue","ReactiveErrors","controlParentException","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","warn","__extends$9","formControlBinding$1","FormControlDirective","_isControlChanged","__extends$11","formDirectiveProvider$1","directives","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","addFormArray","removeFormArray","getFormArray","newCtrl","_oldForm","sync","async","__extends$12","formGroupNameProvider","formArrayNameProvider","__extends$10","controlNameBinding","FormControlName","_added","__extends$13","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","_required","[attr.required]","MIN_LENGTH_VALIDATOR","MinLengthValidator","_createValidator","_validator","parseInt","[attr.minlength]","MAX_LENGTH_VALIDATOR","MaxLengthValidator","[attr.maxlength]","PATTERN_VALIDATOR","PatternValidator","[attr.pattern]","FormBuilder","controlsConfig","extra","_reduceControls","array","_createControl","controlConfig","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","InternalFormsSharedModule","ReactiveFormsModule","387","Number","388","389","390","goTo","isFirst","currentId","isLast","391","392","393","book_routing_module_1","book_list_component_1","book_form_component_1","book_details_component_1","BookRoutingModule","BookListComponent","BookFormComponent","BookDetailsComponent","394","395","_bookService","396","397","398","title","399","charactersdb","getDbCharacters","charactersdbz","getDbzCharacters","booksdb","getDbBooks","booksdbz","getDbzBooks","_characterService"],"mappings":"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","file":"app.818b8e4b91c85e35e726.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar platform_browser_dynamic_1 = __webpack_require__(1);\r\n\tvar app_module_1 = __webpack_require__(23);\r\n\tplatform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);\r\n\n\n/***/ },\n\n/***/ 23:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(24);\r\n\tvar angular2_in_memory_web_api_1 = __webpack_require__(25);\r\n\tvar app_component_1 = __webpack_require__(37);\r\n\tvar welcome_module_1 = __webpack_require__(40);\r\n\tvar category_module_1 = __webpack_require__(76);\r\n\tvar book_module_1 = __webpack_require__(393);\r\n\tvar app_routing_module_1 = __webpack_require__(404);\r\n\tvar inmemorydata_service_1 = __webpack_require__(405);\r\n\tvar core_module_1 = __webpack_require__(100);\r\n\tvar core_service_1 = __webpack_require__(406);\r\n\tfunction loadData(service) {\r\n\t    return function () { return service.load(); };\r\n\t}\r\n\tvar AppModule = (function () {\r\n\t    function AppModule() {\r\n\t    }\r\n\t    return AppModule;\r\n\t}());\r\n\tAppModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            http_1.HttpModule,\r\n\t            welcome_module_1.WelcomeModule,\r\n\t            category_module_1.CategoryModule,\r\n\t            book_module_1.BookModule,\r\n\t            app_routing_module_1.AppRoutingModule,\r\n\t            angular2_in_memory_web_api_1.InMemoryWebApiModule.forRoot(inmemorydata_service_1.InMemoryDbUniverseService),\r\n\t            core_module_1.CoreModule\r\n\t        ],\r\n\t        declarations: [\r\n\t            app_component_1.AppComponent\r\n\t        ],\r\n\t        bootstrap: [app_component_1.AppComponent],\r\n\t        providers: [\r\n\t            core_service_1.CoreService,\r\n\t            {\r\n\t                provide: core_1.APP_INITIALIZER,\r\n\t                useFactory: loadData,\r\n\t                deps: [core_service_1.CoreService],\r\n\t                multi: true\r\n\t            }\r\n\t        ]\r\n\t    })\r\n\t], AppModule);\r\n\texports.AppModule = AppModule;\r\n\n\n/***/ },\n\n/***/ 24:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @license Angular v2.4.4\n\t * (c) 2010-2016 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(3), __webpack_require__(5), __webpack_require__(21)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', '@angular/platform-browser'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}),global.ng.core,global.Rx,global.ng.platformBrowser));\n\t}(this, function (exports,_angular_core,rxjs_Observable,_angular_platformBrowser) { 'use strict';\n\t\n\t    /**\n\t     * A backend for http that uses the `XMLHttpRequest` browser API.\n\t     *\n\t     * Take care not to evaluate this in non-browser contexts.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var BrowserXhr = (function () {\n\t        function BrowserXhr() {\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };\n\t        BrowserXhr.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        BrowserXhr.ctorParameters = function () { return []; };\n\t        return BrowserXhr;\n\t    }());\n\t\n\t    var RequestMethod = {};\n\t    RequestMethod.Get = 0;\n\t    RequestMethod.Post = 1;\n\t    RequestMethod.Put = 2;\n\t    RequestMethod.Delete = 3;\n\t    RequestMethod.Options = 4;\n\t    RequestMethod.Head = 5;\n\t    RequestMethod.Patch = 6;\n\t    RequestMethod[RequestMethod.Get] = \"Get\";\n\t    RequestMethod[RequestMethod.Post] = \"Post\";\n\t    RequestMethod[RequestMethod.Put] = \"Put\";\n\t    RequestMethod[RequestMethod.Delete] = \"Delete\";\n\t    RequestMethod[RequestMethod.Options] = \"Options\";\n\t    RequestMethod[RequestMethod.Head] = \"Head\";\n\t    RequestMethod[RequestMethod.Patch] = \"Patch\";\n\t    var ReadyState = {};\n\t    ReadyState.Unsent = 0;\n\t    ReadyState.Open = 1;\n\t    ReadyState.HeadersReceived = 2;\n\t    ReadyState.Loading = 3;\n\t    ReadyState.Done = 4;\n\t    ReadyState.Cancelled = 5;\n\t    ReadyState[ReadyState.Unsent] = \"Unsent\";\n\t    ReadyState[ReadyState.Open] = \"Open\";\n\t    ReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\n\t    ReadyState[ReadyState.Loading] = \"Loading\";\n\t    ReadyState[ReadyState.Done] = \"Done\";\n\t    ReadyState[ReadyState.Cancelled] = \"Cancelled\";\n\t    var ResponseType = {};\n\t    ResponseType.Basic = 0;\n\t    ResponseType.Cors = 1;\n\t    ResponseType.Default = 2;\n\t    ResponseType.Error = 3;\n\t    ResponseType.Opaque = 4;\n\t    ResponseType[ResponseType.Basic] = \"Basic\";\n\t    ResponseType[ResponseType.Cors] = \"Cors\";\n\t    ResponseType[ResponseType.Default] = \"Default\";\n\t    ResponseType[ResponseType.Error] = \"Error\";\n\t    ResponseType[ResponseType.Opaque] = \"Opaque\";\n\t    var ContentType = {};\n\t    ContentType.NONE = 0;\n\t    ContentType.JSON = 1;\n\t    ContentType.FORM = 2;\n\t    ContentType.FORM_DATA = 3;\n\t    ContentType.TEXT = 4;\n\t    ContentType.BLOB = 5;\n\t    ContentType.ARRAY_BUFFER = 6;\n\t    ContentType[ContentType.NONE] = \"NONE\";\n\t    ContentType[ContentType.JSON] = \"JSON\";\n\t    ContentType[ContentType.FORM] = \"FORM\";\n\t    ContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\n\t    ContentType[ContentType.TEXT] = \"TEXT\";\n\t    ContentType[ContentType.BLOB] = \"BLOB\";\n\t    ContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n\t    var ResponseContentType = {};\n\t    ResponseContentType.Text = 0;\n\t    ResponseContentType.Json = 1;\n\t    ResponseContentType.ArrayBuffer = 2;\n\t    ResponseContentType.Blob = 3;\n\t    ResponseContentType[ResponseContentType.Text] = \"Text\";\n\t    ResponseContentType[ResponseContentType.Json] = \"Json\";\n\t    ResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\n\t    ResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\t\n\t    /**\n\t     * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n\t     * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n\t     *\n\t     * The only known difference between this `Headers` implementation and the spec is the\n\t     * lack of an `entries` method.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * import {Headers} from '\\@angular/http';\n\t     *\n\t     * var firstHeaders = new Headers();\n\t     * firstHeaders.append('Content-Type', 'image/jpeg');\n\t     * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n\t     *\n\t     * // Create headers from Plain Old JavaScript Object\n\t     * var secondHeaders = new Headers({\n\t     *   'X-My-Custom-Header': 'Angular'\n\t     * });\n\t     * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n\t     *\n\t     * var thirdHeaders = new Headers(secondHeaders);\n\t     * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var Headers = (function () {\n\t        /**\n\t         * @param {?=} headers\n\t         */\n\t        function Headers(headers) {\n\t            var _this = this;\n\t            /** @internal header names are lower case */\n\t            this._headers = new Map();\n\t            /** @internal map lower case names to actual names */\n\t            this._normalizedNames = new Map();\n\t            if (!headers) {\n\t                return;\n\t            }\n\t            if (headers instanceof Headers) {\n\t                headers.forEach(function (values, name) {\n\t                    values.forEach(function (value) { return _this.append(name, value); });\n\t                });\n\t                return;\n\t            }\n\t            Object.keys(headers).forEach(function (name) {\n\t                var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n\t                _this.delete(name);\n\t                values.forEach(function (value) { return _this.append(name, value); });\n\t            });\n\t        }\n\t        /**\n\t         * Returns a new Headers instance from the given DOMString of Response Headers\n\t         * @param {?} headersString\n\t         * @return {?}\n\t         */\n\t        Headers.fromResponseHeaderString = function (headersString) {\n\t            var /** @type {?} */ headers = new Headers();\n\t            headersString.split('\\n').forEach(function (line) {\n\t                var /** @type {?} */ index = line.indexOf(':');\n\t                if (index > 0) {\n\t                    var /** @type {?} */ name_1 = line.slice(0, index);\n\t                    var /** @type {?} */ value = line.slice(index + 1).trim();\n\t                    headers.set(name_1, value);\n\t                }\n\t            });\n\t            return headers;\n\t        };\n\t        /**\n\t         * Appends a header to existing list of header values for a given header name.\n\t         * @param {?} name\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.append = function (name, value) {\n\t            var /** @type {?} */ values = this.getAll(name);\n\t            if (values === null) {\n\t                this.set(name, value);\n\t            }\n\t            else {\n\t                values.push(value);\n\t            }\n\t        };\n\t        /**\n\t         * Deletes all header values for the given name.\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.delete = function (name) {\n\t            var /** @type {?} */ lcName = name.toLowerCase();\n\t            this._normalizedNames.delete(lcName);\n\t            this._headers.delete(lcName);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.forEach = function (fn) {\n\t            var _this = this;\n\t            this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n\t        };\n\t        /**\n\t         * Returns first header that matches given name.\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.get = function (name) {\n\t            var /** @type {?} */ values = this.getAll(name);\n\t            if (values === null) {\n\t                return null;\n\t            }\n\t            return values.length > 0 ? values[0] : null;\n\t        };\n\t        /**\n\t         * Checks for existence of header by given name.\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n\t        /**\n\t         * Returns the names of the headers\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n\t        /**\n\t         * Sets or overrides header value for given name.\n\t         * @param {?} name\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.set = function (name, value) {\n\t            if (Array.isArray(value)) {\n\t                if (value.length) {\n\t                    this._headers.set(name.toLowerCase(), [value.join(',')]);\n\t                }\n\t            }\n\t            else {\n\t                this._headers.set(name.toLowerCase(), [value]);\n\t            }\n\t            this.mayBeSetNormalizedName(name);\n\t        };\n\t        /**\n\t         * Returns values of all headers.\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.toJSON = function () {\n\t            var _this = this;\n\t            var /** @type {?} */ serialized = {};\n\t            this._headers.forEach(function (values, name) {\n\t                var /** @type {?} */ split = [];\n\t                values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n\t                serialized[_this._normalizedNames.get(name)] = split;\n\t            });\n\t            return serialized;\n\t        };\n\t        /**\n\t         * Returns list of header values for a given name.\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.getAll = function (name) {\n\t            return this.has(name) ? this._headers.get(name.toLowerCase()) : null;\n\t        };\n\t        /**\n\t         * This method is not implemented.\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Headers.prototype.mayBeSetNormalizedName = function (name) {\n\t            var /** @type {?} */ lcName = name.toLowerCase();\n\t            if (!this._normalizedNames.has(lcName)) {\n\t                this._normalizedNames.set(lcName, name);\n\t            }\n\t        };\n\t        return Headers;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$1 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Creates a response options object to be optionally provided when instantiating a\n\t     * {\\@link Response}.\n\t     *\n\t     * This class is based on the `ResponseInit` description in the [Fetch\n\t     * Spec](https://fetch.spec.whatwg.org/#responseinit).\n\t     *\n\t     * All values are null by default. Typical defaults can be found in the\n\t     * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n\t     *\n\t     * This class may be used in tests to build {\\@link Response Responses} for\n\t     * mock responses (see {\\@link MockBackend}).\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n\t     *\n\t     * ```typescript\n\t     * import {ResponseOptions, Response} from '\\@angular/http';\n\t     *\n\t     * var options = new ResponseOptions({\n\t     *   body: '{\"name\":\"Jeff\"}'\n\t     * });\n\t     * var res = new Response(options);\n\t     *\n\t     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var ResponseOptions = (function () {\n\t        /**\n\t         * @param {?=} __0\n\t         */\n\t        function ResponseOptions(_a) {\n\t            var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;\n\t            this.body = body != null ? body : null;\n\t            this.status = status != null ? status : null;\n\t            this.headers = headers != null ? headers : null;\n\t            this.statusText = statusText != null ? statusText : null;\n\t            this.type = type != null ? type : null;\n\t            this.url = url != null ? url : null;\n\t        }\n\t        /**\n\t         * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n\t         * override\n\t         * existing values. This method will not change the values of the instance on which it is being\n\t         * called.\n\t         *\n\t         * This may be useful when sharing a base `ResponseOptions` object inside tests,\n\t         * where certain properties may change from test to test.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n\t         *\n\t         * ```typescript\n\t         * import {ResponseOptions, Response} from '\\@angular/http';\n\t         *\n\t         * var options = new ResponseOptions({\n\t         *   body: {name: 'Jeff'}\n\t         * });\n\t         * var res = new Response(options.merge({\n\t         *   url: 'https://google.com'\n\t         * }));\n\t         * console.log('options.url:', options.url); // null\n\t         * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n\t         * console.log('res.url:', res.url); // https://google.com\n\t         * ```\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        ResponseOptions.prototype.merge = function (options) {\n\t            return new ResponseOptions({\n\t                body: options && options.body != null ? options.body : this.body,\n\t                status: options && options.status != null ? options.status : this.status,\n\t                headers: options && options.headers != null ? options.headers : this.headers,\n\t                statusText: options && options.statusText != null ? options.statusText : this.statusText,\n\t                type: options && options.type != null ? options.type : this.type,\n\t                url: options && options.url != null ? options.url : this.url,\n\t            });\n\t        };\n\t        return ResponseOptions;\n\t    }());\n\t    /**\n\t     * Subclass of {\\@link ResponseOptions}, with default values.\n\t     *\n\t     * Default values:\n\t     *  * status: 200\n\t     *  * headers: empty {\\@link Headers} object\n\t     *\n\t     * This class could be extended and bound to the {\\@link ResponseOptions} class\n\t     * when configuring an {\\@link Injector}, in order to override the default options\n\t     * used by {\\@link Http} to create {\\@link Response Responses}.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n\t     *\n\t     * ```typescript\n\t     * import {provide} from '\\@angular/core';\n\t     * import {bootstrap} from '\\@angular/platform-browser/browser';\n\t     * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n\t     * '\\@angular/http';\n\t     * import {App} from './myapp';\n\t     *\n\t     * class MyOptions extends BaseResponseOptions {\n\t     *   headers:Headers = new Headers({network: 'github'});\n\t     * }\n\t     *\n\t     * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n\t     * ```\n\t     *\n\t     * The options could also be extended when manually creating a {\\@link Response}\n\t     * object.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n\t     *\n\t     * ```\n\t     * import {BaseResponseOptions, Response} from '\\@angular/http';\n\t     *\n\t     * var options = new BaseResponseOptions();\n\t     * var res = new Response(options.merge({\n\t     *   body: 'Angular',\n\t     *   headers: new Headers({framework: 'angular'})\n\t     * }));\n\t     * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n\t     * console.log('res.text():', res.text()); // Angular;\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var BaseResponseOptions = (function (_super) {\n\t        __extends$1(BaseResponseOptions, _super);\n\t        function BaseResponseOptions() {\n\t            _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });\n\t        }\n\t        BaseResponseOptions.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        BaseResponseOptions.ctorParameters = function () { return []; };\n\t        return BaseResponseOptions;\n\t    }(ResponseOptions));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * Abstract class from which real backends are derived.\n\t     *\n\t     * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n\t     * {\\@link Request}.\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var ConnectionBackend = (function () {\n\t        function ConnectionBackend() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} request\n\t         * @return {?}\n\t         */\n\t        ConnectionBackend.prototype.createConnection = function (request) { };\n\t        return ConnectionBackend;\n\t    }());\n\t    /**\n\t     * Abstract class from which real connections are derived.\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var Connection = (function () {\n\t        function Connection() {\n\t        }\n\t        return Connection;\n\t    }());\n\t    /**\n\t     * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var XSRFStrategy = (function () {\n\t        function XSRFStrategy() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} req\n\t         * @return {?}\n\t         */\n\t        XSRFStrategy.prototype.configureRequest = function (req) { };\n\t        return XSRFStrategy;\n\t    }());\n\t\n\t    /**\n\t     * @param {?} method\n\t     * @return {?}\n\t     */\n\t    function normalizeMethodName(method) {\n\t        if (typeof method !== 'string')\n\t            return method;\n\t        switch (method.toUpperCase()) {\n\t            case 'GET':\n\t                return RequestMethod.Get;\n\t            case 'POST':\n\t                return RequestMethod.Post;\n\t            case 'PUT':\n\t                return RequestMethod.Put;\n\t            case 'DELETE':\n\t                return RequestMethod.Delete;\n\t            case 'OPTIONS':\n\t                return RequestMethod.Options;\n\t            case 'HEAD':\n\t                return RequestMethod.Head;\n\t            case 'PATCH':\n\t                return RequestMethod.Patch;\n\t        }\n\t        throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n\t    }\n\t    var /** @type {?} */ isSuccess = function (status) { return (status >= 200 && status < 300); };\n\t    /**\n\t     * @param {?} xhr\n\t     * @return {?}\n\t     */\n\t    function getResponseURL(xhr) {\n\t        if ('responseURL' in xhr) {\n\t            return xhr.responseURL;\n\t        }\n\t        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n\t            return xhr.getResponseHeader('X-Request-URL');\n\t        }\n\t        return;\n\t    }\n\t    /**\n\t     * @param {?} input\n\t     * @return {?}\n\t     */\n\t    function stringToArrayBuffer(input) {\n\t        var /** @type {?} */ view = new Uint16Array(input.length);\n\t        for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n\t            view[i] = input.charCodeAt(i);\n\t        }\n\t        return view.buffer;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     * @param {?=} rawParams\n\t     * @return {?}\n\t     */\n\t    function paramParser(rawParams) {\n\t        if (rawParams === void 0) { rawParams = ''; }\n\t        var /** @type {?} */ map = new Map();\n\t        if (rawParams.length > 0) {\n\t            var /** @type {?} */ params = rawParams.split('&');\n\t            params.forEach(function (param) {\n\t                var /** @type {?} */ eqIdx = param.indexOf('=');\n\t                var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n\t                var /** @type {?} */ list = map.get(key) || [];\n\t                list.push(val);\n\t                map.set(key, list);\n\t            });\n\t        }\n\t        return map;\n\t    }\n\t    /**\n\t     * \\@experimental\n\t     *\n\t     */\n\t    var QueryEncoder = (function () {\n\t        function QueryEncoder() {\n\t        }\n\t        /**\n\t         * @param {?} k\n\t         * @return {?}\n\t         */\n\t        QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n\t        /**\n\t         * @param {?} v\n\t         * @return {?}\n\t         */\n\t        QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n\t        return QueryEncoder;\n\t    }());\n\t    /**\n\t     * @param {?} v\n\t     * @return {?}\n\t     */\n\t    function standardEncoding(v) {\n\t        return encodeURIComponent(v)\n\t            .replace(/%40/gi, '@')\n\t            .replace(/%3A/gi, ':')\n\t            .replace(/%24/gi, '$')\n\t            .replace(/%2C/gi, ',')\n\t            .replace(/%3B/gi, ';')\n\t            .replace(/%2B/gi, '+')\n\t            .replace(/%3D/gi, '=')\n\t            .replace(/%3F/gi, '?')\n\t            .replace(/%2F/gi, '/');\n\t    }\n\t    /**\n\t     * Map-like representation of url search parameters, based on\n\t     * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n\t     * with several extensions for merging URLSearchParams objects:\n\t     *   - setAll()\n\t     *   - appendAll()\n\t     *   - replaceAll()\n\t     *\n\t     * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n\t     * which is used to serialize parameters before making a request. By default,\n\t     * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n\t     * and then un-encodes certain characters that are allowed to be part of the query\n\t     * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n\t     *\n\t     * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n\t     *\n\t     * If the set of allowed query characters is not acceptable for a particular backend,\n\t     * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n\t     *\n\t     * ```\n\t     * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n\t     * class MyQueryEncoder extends QueryEncoder {\n\t     *   encodeKey(k: string): string {\n\t     *     return myEncodingFunction(k);\n\t     *   }\n\t     *\n\t     *   encodeValue(v: string): string {\n\t     *     return myEncodingFunction(v);\n\t     *   }\n\t     * }\n\t     *\n\t     * let params = new URLSearchParams('', new MyQueryEncoder());\n\t     * ```\n\t     * \\@experimental\n\t     */\n\t    var URLSearchParams = (function () {\n\t        /**\n\t         * @param {?=} rawParams\n\t         * @param {?=} queryEncoder\n\t         */\n\t        function URLSearchParams(rawParams, queryEncoder) {\n\t            if (rawParams === void 0) { rawParams = ''; }\n\t            if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n\t            this.rawParams = rawParams;\n\t            this.queryEncoder = queryEncoder;\n\t            this.paramsMap = paramParser(rawParams);\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.clone = function () {\n\t            var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n\t            clone.appendAll(this);\n\t            return clone;\n\t        };\n\t        /**\n\t         * @param {?} param\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n\t        /**\n\t         * @param {?} param\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.get = function (param) {\n\t            var /** @type {?} */ storedParam = this.paramsMap.get(param);\n\t            return Array.isArray(storedParam) ? storedParam[0] : null;\n\t        };\n\t        /**\n\t         * @param {?} param\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n\t        /**\n\t         * @param {?} param\n\t         * @param {?} val\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.set = function (param, val) {\n\t            if (val === void 0 || val === null) {\n\t                this.delete(param);\n\t                return;\n\t            }\n\t            var /** @type {?} */ list = this.paramsMap.get(param) || [];\n\t            list.length = 0;\n\t            list.push(val);\n\t            this.paramsMap.set(param, list);\n\t        };\n\t        /**\n\t         * @param {?} searchParams\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.setAll = function (searchParams) {\n\t            var _this = this;\n\t            searchParams.paramsMap.forEach(function (value, param) {\n\t                var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n\t                list.length = 0;\n\t                list.push(value[0]);\n\t                _this.paramsMap.set(param, list);\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} param\n\t         * @param {?} val\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.append = function (param, val) {\n\t            if (val === void 0 || val === null)\n\t                return;\n\t            var /** @type {?} */ list = this.paramsMap.get(param) || [];\n\t            list.push(val);\n\t            this.paramsMap.set(param, list);\n\t        };\n\t        /**\n\t         * @param {?} searchParams\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.appendAll = function (searchParams) {\n\t            var _this = this;\n\t            searchParams.paramsMap.forEach(function (value, param) {\n\t                var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n\t                for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n\t                    list.push(value[i]);\n\t                }\n\t                _this.paramsMap.set(param, list);\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} searchParams\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.replaceAll = function (searchParams) {\n\t            var _this = this;\n\t            searchParams.paramsMap.forEach(function (value, param) {\n\t                var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n\t                list.length = 0;\n\t                for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n\t                    list.push(value[i]);\n\t                }\n\t                _this.paramsMap.set(param, list);\n\t            });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.toString = function () {\n\t            var _this = this;\n\t            var /** @type {?} */ paramsList = [];\n\t            this.paramsMap.forEach(function (values, k) {\n\t                values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n\t            });\n\t            return paramsList.join('&');\n\t        };\n\t        /**\n\t         * @param {?} param\n\t         * @return {?}\n\t         */\n\t        URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n\t        return URLSearchParams;\n\t    }());\n\t\n\t    /**\n\t     * HTTP request body used by both {\\@link Request} and {\\@link Response}\n\t     * https://fetch.spec.whatwg.org/#body\n\t     * @abstract\n\t     */\n\t    var Body = (function () {\n\t        function Body() {\n\t        }\n\t        /**\n\t         * Attempts to return body as parsed `JSON` object, or raises an exception.\n\t         * @return {?}\n\t         */\n\t        Body.prototype.json = function () {\n\t            if (typeof this._body === 'string') {\n\t                return JSON.parse(/** @type {?} */ (this._body));\n\t            }\n\t            if (this._body instanceof ArrayBuffer) {\n\t                return JSON.parse(this.text());\n\t            }\n\t            return this._body;\n\t        };\n\t        /**\n\t         * Returns the body as a string, presuming `toString()` can be called on the response body.\n\t         * @return {?}\n\t         */\n\t        Body.prototype.text = function () {\n\t            if (this._body instanceof URLSearchParams) {\n\t                return this._body.toString();\n\t            }\n\t            if (this._body instanceof ArrayBuffer) {\n\t                return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n\t            }\n\t            if (this._body == null) {\n\t                return '';\n\t            }\n\t            if (typeof this._body === 'object') {\n\t                return JSON.stringify(this._body, null, 2);\n\t            }\n\t            return this._body.toString();\n\t        };\n\t        /**\n\t         * Return the body as an ArrayBuffer\n\t         * @return {?}\n\t         */\n\t        Body.prototype.arrayBuffer = function () {\n\t            if (this._body instanceof ArrayBuffer) {\n\t                return (this._body);\n\t            }\n\t            return stringToArrayBuffer(this.text());\n\t        };\n\t        /**\n\t         * Returns the request's body as a Blob, assuming that body exists.\n\t         * @return {?}\n\t         */\n\t        Body.prototype.blob = function () {\n\t            if (this._body instanceof Blob) {\n\t                return (this._body);\n\t            }\n\t            if (this._body instanceof ArrayBuffer) {\n\t                return new Blob([this._body]);\n\t            }\n\t            throw new Error('The request body isn\\'t either a blob or an array buffer');\n\t        };\n\t        return Body;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$2 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Creates `Response` instances from provided values.\n\t     *\n\t     * Though this object isn't\n\t     * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n\t     * add data to a view.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n\t     * ```\n\t     *\n\t     * The Response's interface is inspired by the Response constructor defined in the [Fetch\n\t     * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n\t     * can be accessed many times. There are other differences in the implementation, but this is the\n\t     * most significant.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var Response = (function (_super) {\n\t        __extends$2(Response, _super);\n\t        /**\n\t         * @param {?} responseOptions\n\t         */\n\t        function Response(responseOptions) {\n\t            _super.call(this);\n\t            this._body = responseOptions.body;\n\t            this.status = responseOptions.status;\n\t            this.ok = (this.status >= 200 && this.status <= 299);\n\t            this.statusText = responseOptions.statusText;\n\t            this.headers = responseOptions.headers;\n\t            this.type = responseOptions.type;\n\t            this.url = responseOptions.url;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Response.prototype.toString = function () {\n\t            return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n\t        };\n\t        return Response;\n\t    }(Body));\n\t\n\t    var /** @type {?} */ _nextRequestId = 0;\n\t    var /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\n\t    var /** @type {?} */ _jsonpConnections = null;\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _getJsonpConnections() {\n\t        var /** @type {?} */ w = typeof window == 'object' ? window : {};\n\t        if (_jsonpConnections === null) {\n\t            _jsonpConnections = w[JSONP_HOME] = {};\n\t        }\n\t        return _jsonpConnections;\n\t    }\n\t    var BrowserJsonp = (function () {\n\t        function BrowserJsonp() {\n\t        }\n\t        /**\n\t         * @param {?} url\n\t         * @return {?}\n\t         */\n\t        BrowserJsonp.prototype.build = function (url) {\n\t            var /** @type {?} */ node = document.createElement('script');\n\t            node.src = url;\n\t            return node;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n\t        /**\n\t         * @param {?} id\n\t         * @return {?}\n\t         */\n\t        BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n\t        /**\n\t         * @param {?} id\n\t         * @param {?} connection\n\t         * @return {?}\n\t         */\n\t        BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n\t            var /** @type {?} */ connections = _getJsonpConnections();\n\t            connections[id] = connection;\n\t        };\n\t        /**\n\t         * @param {?} id\n\t         * @return {?}\n\t         */\n\t        BrowserJsonp.prototype.removeConnection = function (id) {\n\t            var /** @type {?} */ connections = _getJsonpConnections();\n\t            connections[id] = null;\n\t        };\n\t        /**\n\t         * @param {?} node\n\t         * @return {?}\n\t         */\n\t        BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n\t        /**\n\t         * @param {?} node\n\t         * @return {?}\n\t         */\n\t        BrowserJsonp.prototype.cleanup = function (node) {\n\t            if (node.parentNode) {\n\t                node.parentNode.removeChild(/** @type {?} */ ((node)));\n\t            }\n\t        };\n\t        BrowserJsonp.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        BrowserJsonp.ctorParameters = function () { return []; };\n\t        return BrowserJsonp;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\t    var /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n\t    /**\n\t     * Abstract base class for an in-flight JSONP request.\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var JSONPConnection = (function () {\n\t        function JSONPConnection() {\n\t        }\n\t        /**\n\t         * Callback called when the JSONP request completes, to notify the application\n\t         * of the new data.\n\t         * @abstract\n\t         * @param {?=} data\n\t         * @return {?}\n\t         */\n\t        JSONPConnection.prototype.finished = function (data) { };\n\t        return JSONPConnection;\n\t    }());\n\t    var JSONPConnection_ = (function (_super) {\n\t        __extends(JSONPConnection_, _super);\n\t        /**\n\t         * @param {?} req\n\t         * @param {?} _dom\n\t         * @param {?=} baseResponseOptions\n\t         */\n\t        function JSONPConnection_(req, _dom, baseResponseOptions) {\n\t            var _this = this;\n\t            _super.call(this);\n\t            this._dom = _dom;\n\t            this.baseResponseOptions = baseResponseOptions;\n\t            this._finished = false;\n\t            if (req.method !== RequestMethod.Get) {\n\t                throw new TypeError(JSONP_ERR_WRONG_METHOD);\n\t            }\n\t            this.request = req;\n\t            this.response = new rxjs_Observable.Observable(function (responseObserver) {\n\t                _this.readyState = ReadyState.Loading;\n\t                var id = _this._id = _dom.nextRequestID();\n\t                _dom.exposeConnection(id, _this);\n\t                // Workaround Dart\n\t                // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n\t                var callback = _dom.requestCallback(_this._id);\n\t                var url = req.url;\n\t                if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n\t                    url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n\t                }\n\t                else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n\t                    url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n\t                }\n\t                var script = _this._script = _dom.build(url);\n\t                var onLoad = function (event) {\n\t                    if (_this.readyState === ReadyState.Cancelled)\n\t                        return;\n\t                    _this.readyState = ReadyState.Done;\n\t                    _dom.cleanup(script);\n\t                    if (!_this._finished) {\n\t                        var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n\t                        if (baseResponseOptions) {\n\t                            responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n\t                        }\n\t                        responseObserver.error(new Response(responseOptions_1));\n\t                        return;\n\t                    }\n\t                    var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n\t                    if (_this.baseResponseOptions) {\n\t                        responseOptions = _this.baseResponseOptions.merge(responseOptions);\n\t                    }\n\t                    responseObserver.next(new Response(responseOptions));\n\t                    responseObserver.complete();\n\t                };\n\t                var onError = function (error) {\n\t                    if (_this.readyState === ReadyState.Cancelled)\n\t                        return;\n\t                    _this.readyState = ReadyState.Done;\n\t                    _dom.cleanup(script);\n\t                    var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n\t                    if (baseResponseOptions) {\n\t                        responseOptions = baseResponseOptions.merge(responseOptions);\n\t                    }\n\t                    responseObserver.error(new Response(responseOptions));\n\t                };\n\t                script.addEventListener('load', onLoad);\n\t                script.addEventListener('error', onError);\n\t                _dom.send(script);\n\t                return function () {\n\t                    _this.readyState = ReadyState.Cancelled;\n\t                    script.removeEventListener('load', onLoad);\n\t                    script.removeEventListener('error', onError);\n\t                    _this._dom.cleanup(script);\n\t                };\n\t            });\n\t        }\n\t        /**\n\t         * @param {?=} data\n\t         * @return {?}\n\t         */\n\t        JSONPConnection_.prototype.finished = function (data) {\n\t            // Don't leak connections\n\t            this._finished = true;\n\t            this._dom.removeConnection(this._id);\n\t            if (this.readyState === ReadyState.Cancelled)\n\t                return;\n\t            this._responseData = data;\n\t        };\n\t        return JSONPConnection_;\n\t    }(JSONPConnection));\n\t    /**\n\t     * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var JSONPBackend = (function (_super) {\n\t        __extends(JSONPBackend, _super);\n\t        function JSONPBackend() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        return JSONPBackend;\n\t    }(ConnectionBackend));\n\t    var JSONPBackend_ = (function (_super) {\n\t        __extends(JSONPBackend_, _super);\n\t        /**\n\t         * @param {?} _browserJSONP\n\t         * @param {?} _baseResponseOptions\n\t         */\n\t        function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n\t            _super.call(this);\n\t            this._browserJSONP = _browserJSONP;\n\t            this._baseResponseOptions = _baseResponseOptions;\n\t        }\n\t        /**\n\t         * @param {?} request\n\t         * @return {?}\n\t         */\n\t        JSONPBackend_.prototype.createConnection = function (request) {\n\t            return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n\t        };\n\t        JSONPBackend_.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        JSONPBackend_.ctorParameters = function () { return [\n\t            { type: BrowserJsonp, },\n\t            { type: ResponseOptions, },\n\t        ]; };\n\t        return JSONPBackend_;\n\t    }(JSONPBackend));\n\t\n\t    var /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\t    /**\n\t     * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n\t     * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n\t     * request.\n\t     *\n\t     * This class would typically not be created or interacted with directly inside applications, though\n\t     * the {\\@link MockConnection} may be interacted with in tests.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var XHRConnection = (function () {\n\t        /**\n\t         * @param {?} req\n\t         * @param {?} browserXHR\n\t         * @param {?=} baseResponseOptions\n\t         */\n\t        function XHRConnection(req, browserXHR, baseResponseOptions) {\n\t            var _this = this;\n\t            this.request = req;\n\t            this.response = new rxjs_Observable.Observable(function (responseObserver) {\n\t                var _xhr = browserXHR.build();\n\t                _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n\t                if (req.withCredentials != null) {\n\t                    _xhr.withCredentials = req.withCredentials;\n\t                }\n\t                // load event handler\n\t                var onLoad = function () {\n\t                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n\t                    var status = _xhr.status === 1223 ? 204 : _xhr.status;\n\t                    var body = null;\n\t                    // HTTP 204 means no content\n\t                    if (status !== 204) {\n\t                        // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n\t                        // response/responseType properties were introduced in ResourceLoader Level2 spec\n\t                        // (supported by IE10)\n\t                        body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\t                        // Implicitly strip a potential XSSI prefix.\n\t                        if (typeof body === 'string') {\n\t                            body = body.replace(XSSI_PREFIX, '');\n\t                        }\n\t                    }\n\t                    // fix status code when it is 0 (0 status is undocumented).\n\t                    // Occurs when accessing file resources or on Android 4.1 stock browser\n\t                    // while retrieving files from application cache.\n\t                    if (status === 0) {\n\t                        status = body ? 200 : 0;\n\t                    }\n\t                    var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n\t                    // IE 9 does not provide the way to get URL of response\n\t                    var url = getResponseURL(_xhr) || req.url;\n\t                    var statusText = _xhr.statusText || 'OK';\n\t                    var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n\t                    if (baseResponseOptions != null) {\n\t                        responseOptions = baseResponseOptions.merge(responseOptions);\n\t                    }\n\t                    var response = new Response(responseOptions);\n\t                    response.ok = isSuccess(status);\n\t                    if (response.ok) {\n\t                        responseObserver.next(response);\n\t                        // TODO(gdi2290): defer complete if array buffer until done\n\t                        responseObserver.complete();\n\t                        return;\n\t                    }\n\t                    responseObserver.error(response);\n\t                };\n\t                // error event handler\n\t                var onError = function (err) {\n\t                    var responseOptions = new ResponseOptions({\n\t                        body: err,\n\t                        type: ResponseType.Error,\n\t                        status: _xhr.status,\n\t                        statusText: _xhr.statusText,\n\t                    });\n\t                    if (baseResponseOptions != null) {\n\t                        responseOptions = baseResponseOptions.merge(responseOptions);\n\t                    }\n\t                    responseObserver.error(new Response(responseOptions));\n\t                };\n\t                _this.setDetectedContentType(req, _xhr);\n\t                if (req.headers == null) {\n\t                    req.headers = new Headers();\n\t                }\n\t                if (!req.headers.has('Accept')) {\n\t                    req.headers.append('Accept', 'application/json, text/plain, */*');\n\t                }\n\t                req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n\t                // Select the correct buffer type to store the response\n\t                if (req.responseType != null && _xhr.responseType != null) {\n\t                    switch (req.responseType) {\n\t                        case ResponseContentType.ArrayBuffer:\n\t                            _xhr.responseType = 'arraybuffer';\n\t                            break;\n\t                        case ResponseContentType.Json:\n\t                            _xhr.responseType = 'json';\n\t                            break;\n\t                        case ResponseContentType.Text:\n\t                            _xhr.responseType = 'text';\n\t                            break;\n\t                        case ResponseContentType.Blob:\n\t                            _xhr.responseType = 'blob';\n\t                            break;\n\t                        default:\n\t                            throw new Error('The selected responseType is not supported');\n\t                    }\n\t                }\n\t                _xhr.addEventListener('load', onLoad);\n\t                _xhr.addEventListener('error', onError);\n\t                _xhr.send(_this.request.getBody());\n\t                return function () {\n\t                    _xhr.removeEventListener('load', onLoad);\n\t                    _xhr.removeEventListener('error', onError);\n\t                    _xhr.abort();\n\t                };\n\t            });\n\t        }\n\t        /**\n\t         * @param {?} req\n\t         * @param {?} _xhr\n\t         * @return {?}\n\t         */\n\t        XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n\t            // Skip if a custom Content-Type header is provided\n\t            if (req.headers != null && req.headers.get('Content-Type') != null) {\n\t                return;\n\t            }\n\t            // Set the detected content type\n\t            switch (req.contentType) {\n\t                case ContentType.NONE:\n\t                    break;\n\t                case ContentType.JSON:\n\t                    _xhr.setRequestHeader('content-type', 'application/json');\n\t                    break;\n\t                case ContentType.FORM:\n\t                    _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n\t                    break;\n\t                case ContentType.TEXT:\n\t                    _xhr.setRequestHeader('content-type', 'text/plain');\n\t                    break;\n\t                case ContentType.BLOB:\n\t                    var /** @type {?} */ blob = req.blob();\n\t                    if (blob.type) {\n\t                        _xhr.setRequestHeader('content-type', blob.type);\n\t                    }\n\t                    break;\n\t            }\n\t        };\n\t        return XHRConnection;\n\t    }());\n\t    /**\n\t     * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n\t     * using a cookie. See {\\@link https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)}\n\t     * for more information on XSRF.\n\t     *\n\t     * Applications can configure custom cookie and header names by binding an instance of this class\n\t     * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n\t     * details.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var CookieXSRFStrategy = (function () {\n\t        /**\n\t         * @param {?=} _cookieName\n\t         * @param {?=} _headerName\n\t         */\n\t        function CookieXSRFStrategy(_cookieName, _headerName) {\n\t            if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n\t            if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n\t            this._cookieName = _cookieName;\n\t            this._headerName = _headerName;\n\t        }\n\t        /**\n\t         * @param {?} req\n\t         * @return {?}\n\t         */\n\t        CookieXSRFStrategy.prototype.configureRequest = function (req) {\n\t            var /** @type {?} */ xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);\n\t            if (xsrfToken) {\n\t                req.headers.set(this._headerName, xsrfToken);\n\t            }\n\t        };\n\t        return CookieXSRFStrategy;\n\t    }());\n\t    /**\n\t     * Creates {\\@link XHRConnection} instances.\n\t     *\n\t     * This class would typically not be used by end users, but could be\n\t     * overridden if a different backend implementation should be used,\n\t     * such as in a node backend.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n\t     * \\@Component({\n\t     *   viewProviders: [\n\t     *     HTTP_PROVIDERS,\n\t     *     {provide: Http, useFactory: (backend, options) => {\n\t     *       return new Http(backend, options);\n\t     *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n\t     * })\n\t     * class MyComponent {\n\t     *   constructor(http:Http) {\n\t     *     http.request('people.json').subscribe(res => this.people = res.json());\n\t     *   }\n\t     * }\n\t     * ```\n\t     * \\@experimental\n\t     */\n\t    var XHRBackend = (function () {\n\t        /**\n\t         * @param {?} _browserXHR\n\t         * @param {?} _baseResponseOptions\n\t         * @param {?} _xsrfStrategy\n\t         */\n\t        function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n\t            this._browserXHR = _browserXHR;\n\t            this._baseResponseOptions = _baseResponseOptions;\n\t            this._xsrfStrategy = _xsrfStrategy;\n\t        }\n\t        /**\n\t         * @param {?} request\n\t         * @return {?}\n\t         */\n\t        XHRBackend.prototype.createConnection = function (request) {\n\t            this._xsrfStrategy.configureRequest(request);\n\t            return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n\t        };\n\t        XHRBackend.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        XHRBackend.ctorParameters = function () { return [\n\t            { type: BrowserXhr, },\n\t            { type: ResponseOptions, },\n\t            { type: XSRFStrategy, },\n\t        ]; };\n\t        return XHRBackend;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$3 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Creates a request options object to be optionally provided when instantiating a\n\t     * {\\@link Request}.\n\t     *\n\t     * This class is based on the `RequestInit` description in the [Fetch\n\t     * Spec](https://fetch.spec.whatwg.org/#requestinit).\n\t     *\n\t     * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n\t     * class, which sub-classes `RequestOptions`.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n\t     *\n\t     * ```typescript\n\t     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n\t     *\n\t     * var options = new RequestOptions({\n\t     *   method: RequestMethod.Post,\n\t     *   url: 'https://google.com'\n\t     * });\n\t     * var req = new Request(options);\n\t     * console.log('req.method:', RequestMethod[req.method]); // Post\n\t     * console.log('options.url:', options.url); // https://google.com\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var RequestOptions = (function () {\n\t        /**\n\t         * @param {?=} __0\n\t         */\n\t        function RequestOptions(_a) {\n\t            var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType;\n\t            this.method = method != null ? normalizeMethodName(method) : null;\n\t            this.headers = headers != null ? headers : null;\n\t            this.body = body != null ? body : null;\n\t            this.url = url != null ? url : null;\n\t            this.search =\n\t                search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;\n\t            this.withCredentials = withCredentials != null ? withCredentials : null;\n\t            this.responseType = responseType != null ? responseType : null;\n\t        }\n\t        /**\n\t         * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n\t         * existing values. This method will not change the values of the instance on which it is being\n\t         * called.\n\t         *\n\t         * Note that `headers` and `search` will override existing values completely if present in\n\t         * the `options` object. If these values should be merged, it should be done prior to calling\n\t         * `merge` on the `RequestOptions` instance.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n\t         *\n\t         * ```typescript\n\t         * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n\t         *\n\t         * var options = new RequestOptions({\n\t         *   method: RequestMethod.Post\n\t         * });\n\t         * var req = new Request(options.merge({\n\t         *   url: 'https://google.com'\n\t         * }));\n\t         * console.log('req.method:', RequestMethod[req.method]); // Post\n\t         * console.log('options.url:', options.url); // null\n\t         * console.log('req.url:', req.url); // https://google.com\n\t         * ```\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        RequestOptions.prototype.merge = function (options) {\n\t            return new RequestOptions({\n\t                method: options && options.method != null ? options.method : this.method,\n\t                headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n\t                body: options && options.body != null ? options.body : this.body,\n\t                url: options && options.url != null ? options.url : this.url,\n\t                search: options && options.search != null ?\n\t                    (typeof options.search === 'string' ? new URLSearchParams(options.search) :\n\t                        options.search.clone()) :\n\t                    this.search,\n\t                withCredentials: options && options.withCredentials != null ? options.withCredentials :\n\t                    this.withCredentials,\n\t                responseType: options && options.responseType != null ? options.responseType :\n\t                    this.responseType\n\t            });\n\t        };\n\t        return RequestOptions;\n\t    }());\n\t    /**\n\t     * Subclass of {\\@link RequestOptions}, with default values.\n\t     *\n\t     * Default values:\n\t     *  * method: {\\@link RequestMethod RequestMethod.Get}\n\t     *  * headers: empty {\\@link Headers} object\n\t     *\n\t     * This class could be extended and bound to the {\\@link RequestOptions} class\n\t     * when configuring an {\\@link Injector}, in order to override the default options\n\t     * used by {\\@link Http} to create and send {\\@link Request Requests}.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\n\t     *\n\t     * ```typescript\n\t     * import {provide} from '\\@angular/core';\n\t     * import {bootstrap} from '\\@angular/platform-browser/browser';\n\t     * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\\@angular/http';\n\t     * import {App} from './myapp';\n\t     *\n\t     * class MyOptions extends BaseRequestOptions {\n\t     *   search: string = 'coreTeam=true';\n\t     * }\n\t     *\n\t     * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n\t     * ```\n\t     *\n\t     * The options could also be extended when manually creating a {\\@link Request}\n\t     * object.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\n\t     *\n\t     * ```\n\t     * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n\t     *\n\t     * var options = new BaseRequestOptions();\n\t     * var req = new Request(options.merge({\n\t     *   method: RequestMethod.Post,\n\t     *   url: 'https://google.com'\n\t     * }));\n\t     * console.log('req.method:', RequestMethod[req.method]); // Post\n\t     * console.log('options.url:', options.url); // null\n\t     * console.log('req.url:', req.url); // https://google.com\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var BaseRequestOptions = (function (_super) {\n\t        __extends$3(BaseRequestOptions, _super);\n\t        function BaseRequestOptions() {\n\t            _super.call(this, { method: RequestMethod.Get, headers: new Headers() });\n\t        }\n\t        BaseRequestOptions.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        BaseRequestOptions.ctorParameters = function () { return []; };\n\t        return BaseRequestOptions;\n\t    }(RequestOptions));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$5 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Creates `Request` instances from provided values.\n\t     *\n\t     * The Request's interface is inspired by the Request constructor defined in the [Fetch\n\t     * Spec](https://fetch.spec.whatwg.org/#request-class),\n\t     * but is considered a static value whose body can be accessed many times. There are other\n\t     * differences in the implementation, but this is the most significant.\n\t     *\n\t     * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n\t     * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n\t     * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n\t     * where it may be useful to generate a `Request` with arbitrary headers and search params.\n\t     *\n\t     * ```typescript\n\t     * import {Injectable, Injector} from '\\@angular/core';\n\t     * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n\t     *\n\t     * \\@Injectable()\n\t     * class AutoAuthenticator {\n\t     *   constructor(public http:Http) {}\n\t     *   request(url:string) {\n\t     *     return this.http.request(new Request({\n\t     *       method: RequestMethod.Get,\n\t     *       url: url,\n\t     *       search: 'password=123'\n\t     *     }));\n\t     *   }\n\t     * }\n\t     *\n\t     * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n\t     * var authenticator = injector.get(AutoAuthenticator);\n\t     * authenticator.request('people.json').subscribe(res => {\n\t     *   //URL should have included '?password=123'\n\t     *   console.log('people', res.json());\n\t     * });\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var Request = (function (_super) {\n\t        __extends$5(Request, _super);\n\t        /**\n\t         * @param {?} requestOptions\n\t         */\n\t        function Request(requestOptions) {\n\t            _super.call(this);\n\t            // TODO: assert that url is present\n\t            var url = requestOptions.url;\n\t            this.url = requestOptions.url;\n\t            if (requestOptions.search) {\n\t                var search = requestOptions.search.toString();\n\t                if (search.length > 0) {\n\t                    var prefix = '?';\n\t                    if (this.url.indexOf('?') != -1) {\n\t                        prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n\t                    }\n\t                    // TODO: just delete search-query-looking string in url?\n\t                    this.url = url + prefix + search;\n\t                }\n\t            }\n\t            this._body = requestOptions.body;\n\t            this.method = normalizeMethodName(requestOptions.method);\n\t            // TODO(jeffbcross): implement behavior\n\t            // Defaults to 'omit', consistent with browser\n\t            this.headers = new Headers(requestOptions.headers);\n\t            this.contentType = this.detectContentType();\n\t            this.withCredentials = requestOptions.withCredentials;\n\t            this.responseType = requestOptions.responseType;\n\t        }\n\t        /**\n\t         * Returns the content type enum based on header options.\n\t         * @return {?}\n\t         */\n\t        Request.prototype.detectContentType = function () {\n\t            switch (this.headers.get('content-type')) {\n\t                case 'application/json':\n\t                    return ContentType.JSON;\n\t                case 'application/x-www-form-urlencoded':\n\t                    return ContentType.FORM;\n\t                case 'multipart/form-data':\n\t                    return ContentType.FORM_DATA;\n\t                case 'text/plain':\n\t                case 'text/html':\n\t                    return ContentType.TEXT;\n\t                case 'application/octet-stream':\n\t                    return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n\t                default:\n\t                    return this.detectContentTypeFromBody();\n\t            }\n\t        };\n\t        /**\n\t         * Returns the content type of request's body based on its type.\n\t         * @return {?}\n\t         */\n\t        Request.prototype.detectContentTypeFromBody = function () {\n\t            if (this._body == null) {\n\t                return ContentType.NONE;\n\t            }\n\t            else if (this._body instanceof URLSearchParams) {\n\t                return ContentType.FORM;\n\t            }\n\t            else if (this._body instanceof FormData) {\n\t                return ContentType.FORM_DATA;\n\t            }\n\t            else if (this._body instanceof Blob$1) {\n\t                return ContentType.BLOB;\n\t            }\n\t            else if (this._body instanceof ArrayBuffer$1) {\n\t                return ContentType.ARRAY_BUFFER;\n\t            }\n\t            else if (this._body && typeof this._body === 'object') {\n\t                return ContentType.JSON;\n\t            }\n\t            else {\n\t                return ContentType.TEXT;\n\t            }\n\t        };\n\t        /**\n\t         * Returns the request's body according to its type. If body is undefined, return\n\t         * null.\n\t         * @return {?}\n\t         */\n\t        Request.prototype.getBody = function () {\n\t            switch (this.contentType) {\n\t                case ContentType.JSON:\n\t                    return this.text();\n\t                case ContentType.FORM:\n\t                    return this.text();\n\t                case ContentType.FORM_DATA:\n\t                    return this._body;\n\t                case ContentType.TEXT:\n\t                    return this.text();\n\t                case ContentType.BLOB:\n\t                    return this.blob();\n\t                case ContentType.ARRAY_BUFFER:\n\t                    return this.arrayBuffer();\n\t                default:\n\t                    return null;\n\t            }\n\t        };\n\t        return Request;\n\t    }(Body));\n\t    var /** @type {?} */ noop = function () { };\n\t    var /** @type {?} */ w = typeof window == 'object' ? window : noop;\n\t    var /** @type {?} */ FormData = ((w) /** TODO #9100 */)['FormData'] || noop;\n\t    var /** @type {?} */ Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;\n\t    var /** @type {?} */ ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$4 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * @param {?} backend\n\t     * @param {?} request\n\t     * @return {?}\n\t     */\n\t    function httpRequest(backend, request) {\n\t        return backend.createConnection(request).response;\n\t    }\n\t    /**\n\t     * @param {?} defaultOpts\n\t     * @param {?} providedOpts\n\t     * @param {?} method\n\t     * @param {?} url\n\t     * @return {?}\n\t     */\n\t    function mergeOptions(defaultOpts, providedOpts, method, url) {\n\t        var /** @type {?} */ newOptions = defaultOpts;\n\t        if (providedOpts) {\n\t            // Hack so Dart can used named parameters\n\t            return newOptions.merge(new RequestOptions({\n\t                method: providedOpts.method || method,\n\t                url: providedOpts.url || url,\n\t                search: providedOpts.search,\n\t                headers: providedOpts.headers,\n\t                body: providedOpts.body,\n\t                withCredentials: providedOpts.withCredentials,\n\t                responseType: providedOpts.responseType\n\t            }));\n\t        }\n\t        return newOptions.merge(new RequestOptions({ method: method, url: url }));\n\t    }\n\t    /**\n\t     * Performs http requests using `XMLHttpRequest` as the default backend.\n\t     *\n\t     * `Http` is available as an injectable class, with methods to perform http requests. Calling\n\t     * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n\t     * response is received.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n\t     * import 'rxjs/add/operator/map'\n\t     * \\@Component({\n\t     *   selector: 'http-app',\n\t     *   viewProviders: [HTTP_PROVIDERS],\n\t     *   templateUrl: 'people.html'\n\t     * })\n\t     * class PeopleComponent {\n\t     *   constructor(http: Http) {\n\t     *     http.get('people.json')\n\t     *       // Call map on the response observable to get the parsed people object\n\t     *       .map(res => res.json())\n\t     *       // Subscribe to the observable to get the parsed people object and attach it to the\n\t     *       // component\n\t     *       .subscribe(people => this.people = people);\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n\t     * ```\n\t     *\n\t     * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n\t     * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n\t     * the {\\@link XHRBackend} provider, as in the following example:\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * import {BaseRequestOptions, Http} from '\\@angular/http';\n\t     * import {MockBackend} from '\\@angular/http/testing';\n\t     * var injector = Injector.resolveAndCreate([\n\t     *   BaseRequestOptions,\n\t     *   MockBackend,\n\t     *   {provide: Http, useFactory:\n\t     *       function(backend, defaultOptions) {\n\t     *         return new Http(backend, defaultOptions);\n\t     *       },\n\t     *       deps: [MockBackend, BaseRequestOptions]}\n\t     * ]);\n\t     * var http = injector.get(Http);\n\t     * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var Http = (function () {\n\t        /**\n\t         * @param {?} _backend\n\t         * @param {?} _defaultOptions\n\t         */\n\t        function Http(_backend, _defaultOptions) {\n\t            this._backend = _backend;\n\t            this._defaultOptions = _defaultOptions;\n\t        }\n\t        /**\n\t         * Performs any type of http request. First argument is required, and can either be a url or\n\t         * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n\t         * object can be provided as the 2nd argument. The options object will be merged with the values\n\t         * of {\\@link BaseRequestOptions} before performing the request.\n\t         * @param {?} url\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        Http.prototype.request = function (url, options) {\n\t            var /** @type {?} */ responseObservable;\n\t            if (typeof url === 'string') {\n\t                responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n\t            }\n\t            else if (url instanceof Request) {\n\t                responseObservable = httpRequest(this._backend, url);\n\t            }\n\t            else {\n\t                throw new Error('First argument must be a url string or Request instance.');\n\t            }\n\t            return responseObservable;\n\t        };\n\t        /**\n\t         * Performs a request with `get` http method.\n\t         * @param {?} url\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        Http.prototype.get = function (url, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `post` http method.\n\t         * @param {?} url\n\t         * @param {?} body\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        Http.prototype.post = function (url, body, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `put` http method.\n\t         * @param {?} url\n\t         * @param {?} body\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        Http.prototype.put = function (url, body, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `delete` http method.\n\t         * @param {?} url\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        Http.prototype.delete = function (url, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `patch` http method.\n\t         * @param {?} url\n\t         * @param {?} body\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        Http.prototype.patch = function (url, body, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `head` http method.\n\t         * @param {?} url\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        Http.prototype.head = function (url, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `options` http method.\n\t         * @param {?} url\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        Http.prototype.options = function (url, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n\t        };\n\t        Http.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        Http.ctorParameters = function () { return [\n\t            { type: ConnectionBackend, },\n\t            { type: RequestOptions, },\n\t        ]; };\n\t        return Http;\n\t    }());\n\t    /**\n\t     * \\@experimental\n\t     */\n\t    var Jsonp = (function (_super) {\n\t        __extends$4(Jsonp, _super);\n\t        /**\n\t         * @param {?} backend\n\t         * @param {?} defaultOptions\n\t         */\n\t        function Jsonp(backend, defaultOptions) {\n\t            _super.call(this, backend, defaultOptions);\n\t        }\n\t        /**\n\t         * Performs any type of http request. First argument is required, and can either be a url or\n\t         * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n\t         * object can be provided as the 2nd argument. The options object will be merged with the values\n\t         * of {\\@link BaseRequestOptions} before performing the request.\n\t         *\n\t         * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n\t         * supported by all current browsers. Because JSONP creates a `<script>` element with\n\t         * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n\t         * source could expose your application to XSS risks. Data exposed by JSONP may also be\n\t         * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n\t         * future security issues (e.g. content sniffing).  For more detail, see the\n\t         * [Security Guide](http://g.co/ng/security).\n\t         * @param {?} url\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        Jsonp.prototype.request = function (url, options) {\n\t            var /** @type {?} */ responseObservable;\n\t            if (typeof url === 'string') {\n\t                url =\n\t                    new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n\t            }\n\t            if (url instanceof Request) {\n\t                if (url.method !== RequestMethod.Get) {\n\t                    throw new Error('JSONP requests must use GET request method.');\n\t                }\n\t                responseObservable = httpRequest(this._backend, url);\n\t            }\n\t            else {\n\t                throw new Error('First argument must be a url string or Request instance.');\n\t            }\n\t            return responseObservable;\n\t        };\n\t        Jsonp.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        Jsonp.ctorParameters = function () { return [\n\t            { type: ConnectionBackend, },\n\t            { type: RequestOptions, },\n\t        ]; };\n\t        return Jsonp;\n\t    }(Http));\n\t\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _createDefaultCookieXSRFStrategy() {\n\t        return new CookieXSRFStrategy();\n\t    }\n\t    /**\n\t     * @param {?} xhrBackend\n\t     * @param {?} requestOptions\n\t     * @return {?}\n\t     */\n\t    function httpFactory(xhrBackend, requestOptions) {\n\t        return new Http(xhrBackend, requestOptions);\n\t    }\n\t    /**\n\t     * @param {?} jsonpBackend\n\t     * @param {?} requestOptions\n\t     * @return {?}\n\t     */\n\t    function jsonpFactory(jsonpBackend, requestOptions) {\n\t        return new Jsonp(jsonpBackend, requestOptions);\n\t    }\n\t    /**\n\t     * The module that includes http's providers\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var HttpModule = (function () {\n\t        function HttpModule() {\n\t        }\n\t        HttpModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        providers: [\n\t                            // TODO(pascal): use factory type annotations once supported in DI\n\t                            // issue: https://github.com/angular/angular/issues/3183\n\t                            { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n\t                            BrowserXhr,\n\t                            { provide: RequestOptions, useClass: BaseRequestOptions },\n\t                            { provide: ResponseOptions, useClass: BaseResponseOptions },\n\t                            XHRBackend,\n\t                            { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n\t                        ],\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        HttpModule.ctorParameters = function () { return []; };\n\t        return HttpModule;\n\t    }());\n\t    /**\n\t     * The module that includes jsonp's providers\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var JsonpModule = (function () {\n\t        function JsonpModule() {\n\t        }\n\t        JsonpModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        providers: [\n\t                            // TODO(pascal): use factory type annotations once supported in DI\n\t                            // issue: https://github.com/angular/angular/issues/3183\n\t                            { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n\t                            BrowserJsonp,\n\t                            { provide: RequestOptions, useClass: BaseRequestOptions },\n\t                            { provide: ResponseOptions, useClass: BaseResponseOptions },\n\t                            { provide: JSONPBackend, useClass: JSONPBackend_ },\n\t                        ],\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        JsonpModule.ctorParameters = function () { return []; };\n\t        return JsonpModule;\n\t    }());\n\t\n\t    /**\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.4');\n\t\n\t    exports.BrowserXhr = BrowserXhr;\n\t    exports.JSONPBackend = JSONPBackend;\n\t    exports.JSONPConnection = JSONPConnection;\n\t    exports.CookieXSRFStrategy = CookieXSRFStrategy;\n\t    exports.XHRBackend = XHRBackend;\n\t    exports.XHRConnection = XHRConnection;\n\t    exports.BaseRequestOptions = BaseRequestOptions;\n\t    exports.RequestOptions = RequestOptions;\n\t    exports.BaseResponseOptions = BaseResponseOptions;\n\t    exports.ResponseOptions = ResponseOptions;\n\t    exports.ReadyState = ReadyState;\n\t    exports.RequestMethod = RequestMethod;\n\t    exports.ResponseContentType = ResponseContentType;\n\t    exports.ResponseType = ResponseType;\n\t    exports.Headers = Headers;\n\t    exports.Http = Http;\n\t    exports.Jsonp = Jsonp;\n\t    exports.HttpModule = HttpModule;\n\t    exports.JsonpModule = JsonpModule;\n\t    exports.Connection = Connection;\n\t    exports.ConnectionBackend = ConnectionBackend;\n\t    exports.XSRFStrategy = XSRFStrategy;\n\t    exports.Request = Request;\n\t    exports.Response = Response;\n\t    exports.QueryEncoder = QueryEncoder;\n\t    exports.URLSearchParams = URLSearchParams;\n\t    exports.VERSION = VERSION;\n\t\n\t}));\n\n/***/ },\n\n/***/ 25:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(26));\r\n\t__export(__webpack_require__(27));\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(24);\r\n\tvar in_memory_backend_service_2 = __webpack_require__(27);\r\n\tvar InMemoryWebApiModule = (function () {\r\n\t    function InMemoryWebApiModule() {\r\n\t    }\r\n\t    /**\r\n\t    *  Prepare in-memory-web-api in the root/boot application module\r\n\t    *  with class that implements InMemoryDbService and creates an in-memory database.\r\n\t    *\r\n\t    * @param {Type} dbCreator - Class that creates seed data for in-memory database. Must implement InMemoryDbService.\r\n\t    * @param {InMemoryBackendConfigArgs} [options]\r\n\t    *\r\n\t    * @example\r\n\t    * InMemoryWebApiModule.forRoot(dbCreator);\r\n\t    * InMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\r\n\t    */\r\n\t    InMemoryWebApiModule.forRoot = function (dbCreator, options) {\r\n\t        var providers = [\r\n\t            { provide: http_1.XHRBackend, useClass: in_memory_backend_service_2.InMemoryBackendService },\r\n\t            { provide: in_memory_backend_service_2.SEED_DATA, useClass: dbCreator }\r\n\t        ];\r\n\t        if (options) {\r\n\t            providers.push({ provide: in_memory_backend_service_2.InMemoryBackendConfig, useValue: options });\r\n\t        }\r\n\t        return {\r\n\t            ngModule: InMemoryWebApiModule,\r\n\t            providers: providers\r\n\t        };\r\n\t    };\r\n\t    InMemoryWebApiModule = __decorate([\r\n\t        core_1.NgModule({}), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], InMemoryWebApiModule);\r\n\t    return InMemoryWebApiModule;\r\n\t}());\r\n\texports.InMemoryWebApiModule = InMemoryWebApiModule;\r\n\t//# sourceMappingURL=index.js.map\n\n/***/ },\n\n/***/ 26:\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\texports.STATUS = {\r\n\t    CONTINUE: 100,\r\n\t    SWITCHING_PROTOCOLS: 101,\r\n\t    OK: 200,\r\n\t    CREATED: 201,\r\n\t    ACCEPTED: 202,\r\n\t    NON_AUTHORITATIVE_INFORMATION: 203,\r\n\t    NO_CONTENT: 204,\r\n\t    RESET_CONTENT: 205,\r\n\t    PARTIAL_CONTENT: 206,\r\n\t    MULTIPLE_CHOICES: 300,\r\n\t    MOVED_PERMANTENTLY: 301,\r\n\t    FOUND: 302,\r\n\t    SEE_OTHER: 303,\r\n\t    NOT_MODIFIED: 304,\r\n\t    USE_PROXY: 305,\r\n\t    TEMPORARY_REDIRECT: 307,\r\n\t    BAD_REQUEST: 400,\r\n\t    UNAUTHORIZED: 401,\r\n\t    PAYMENT_REQUIRED: 402,\r\n\t    FORBIDDEN: 403,\r\n\t    NOT_FOUND: 404,\r\n\t    METHOD_NOT_ALLOWED: 405,\r\n\t    NOT_ACCEPTABLE: 406,\r\n\t    PROXY_AUTHENTICATION_REQUIRED: 407,\r\n\t    REQUEST_TIMEOUT: 408,\r\n\t    CONFLICT: 409,\r\n\t    GONE: 410,\r\n\t    LENGTH_REQUIRED: 411,\r\n\t    PRECONDITION_FAILED: 412,\r\n\t    PAYLOAD_TO_LARGE: 413,\r\n\t    URI_TOO_LONG: 414,\r\n\t    UNSUPPORTED_MEDIA_TYPE: 415,\r\n\t    RANGE_NOT_SATISFIABLE: 416,\r\n\t    EXPECTATION_FAILED: 417,\r\n\t    IM_A_TEAPOT: 418,\r\n\t    UPGRADE_REQUIRED: 426,\r\n\t    INTERNAL_SERVER_ERROR: 500,\r\n\t    NOT_IMPLEMENTED: 501,\r\n\t    BAD_GATEWAY: 502,\r\n\t    SERVICE_UNAVAILABLE: 503,\r\n\t    GATEWAY_TIMEOUT: 504,\r\n\t    HTTP_VERSION_NOT_SUPPORTED: 505,\r\n\t    PROCESSING: 102,\r\n\t    MULTI_STATUS: 207,\r\n\t    IM_USED: 226,\r\n\t    PERMANENT_REDIRECT: 308,\r\n\t    UNPROCESSABLE_ENTRY: 422,\r\n\t    LOCKED: 423,\r\n\t    FAILED_DEPENDENCY: 424,\r\n\t    PRECONDITION_REQUIRED: 428,\r\n\t    TOO_MANY_REQUESTS: 429,\r\n\t    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\r\n\t    UNAVAILABLE_FOR_LEGAL_REASONS: 451,\r\n\t    VARIANT_ALSO_NEGOTIATES: 506,\r\n\t    INSUFFICIENT_STORAGE: 507,\r\n\t    NETWORK_AUTHENTICATION_REQUIRED: 511\r\n\t};\r\n\t/*tslint:disable:quotemark max-line-length one-line */\r\n\texports.STATUS_CODE_INFO = {\r\n\t    \"100\": {\r\n\t        \"code\": 100,\r\n\t        \"text\": \"Continue\",\r\n\t        \"description\": \"\\\"The initial part of a request has been received and has not yet been rejected by the server.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.2.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.2.1\"\r\n\t    },\r\n\t    \"101\": {\r\n\t        \"code\": 101,\r\n\t        \"text\": \"Switching Protocols\",\r\n\t        \"description\": \"\\\"The server understands and is willing to comply with the client's request, via the Upgrade header field, for a change in the application protocol being used on this connection.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.2.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.2.2\"\r\n\t    },\r\n\t    \"200\": {\r\n\t        \"code\": 200,\r\n\t        \"text\": \"OK\",\r\n\t        \"description\": \"\\\"The request has succeeded.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.1\"\r\n\t    },\r\n\t    \"201\": {\r\n\t        \"code\": 201,\r\n\t        \"text\": \"Created\",\r\n\t        \"description\": \"\\\"The request has been fulfilled and has resulted in one or more new resources being created.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.2\"\r\n\t    },\r\n\t    \"202\": {\r\n\t        \"code\": 202,\r\n\t        \"text\": \"Accepted\",\r\n\t        \"description\": \"\\\"The request has been accepted for processing, but the processing has not been completed.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.3\"\r\n\t    },\r\n\t    \"203\": {\r\n\t        \"code\": 203,\r\n\t        \"text\": \"Non-Authoritative Information\",\r\n\t        \"description\": \"\\\"The request was successful but the enclosed payload has been modified from that of the origin server's 200 (OK) response by a transforming proxy.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.4\"\r\n\t    },\r\n\t    \"204\": {\r\n\t        \"code\": 204,\r\n\t        \"text\": \"No Content\",\r\n\t        \"description\": \"\\\"The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.5\"\r\n\t    },\r\n\t    \"205\": {\r\n\t        \"code\": 205,\r\n\t        \"text\": \"Reset Content\",\r\n\t        \"description\": \"\\\"The server has fulfilled the request and desires that the user agent reset the \\\"document view\\\", which caused the request to be sent, to its original state as received from the origin server.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.6\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.6\"\r\n\t    },\r\n\t    \"206\": {\r\n\t        \"code\": 206,\r\n\t        \"text\": \"Partial Content\",\r\n\t        \"description\": \"\\\"The server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the requests's Range header field.\\\"\",\r\n\t        \"spec_title\": \"RFC7233#4.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7233#section-4.1\"\r\n\t    },\r\n\t    \"300\": {\r\n\t        \"code\": 300,\r\n\t        \"text\": \"Multiple Choices\",\r\n\t        \"description\": \"\\\"The target resource has more than one representation, each with its own more specific identifier, and information about the alternatives is being provided so that the user (or user agent) can select a preferred representation by redirecting its request to one or more of those identifiers.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.4.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.1\"\r\n\t    },\r\n\t    \"301\": {\r\n\t        \"code\": 301,\r\n\t        \"text\": \"Moved Permanently\",\r\n\t        \"description\": \"\\\"The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.4.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.2\"\r\n\t    },\r\n\t    \"302\": {\r\n\t        \"code\": 302,\r\n\t        \"text\": \"Found\",\r\n\t        \"description\": \"\\\"The target resource resides temporarily under a different URI.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.4.3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.3\"\r\n\t    },\r\n\t    \"303\": {\r\n\t        \"code\": 303,\r\n\t        \"text\": \"See Other\",\r\n\t        \"description\": \"\\\"The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, that is intended to provide an indirect response to the original request.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.4.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.4\"\r\n\t    },\r\n\t    \"304\": {\r\n\t        \"code\": 304,\r\n\t        \"text\": \"Not Modified\",\r\n\t        \"description\": \"\\\"A conditional GET request has been received and would have resulted in a 200 (OK) response if it were not for the fact that the condition has evaluated to false.\\\"\",\r\n\t        \"spec_title\": \"RFC7232#4.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7232#section-4.1\"\r\n\t    },\r\n\t    \"305\": {\r\n\t        \"code\": 305,\r\n\t        \"text\": \"Use Proxy\",\r\n\t        \"description\": \"*deprecated*\",\r\n\t        \"spec_title\": \"RFC7231#6.4.5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.5\"\r\n\t    },\r\n\t    \"307\": {\r\n\t        \"code\": 307,\r\n\t        \"text\": \"Temporary Redirect\",\r\n\t        \"description\": \"\\\"The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.4.7\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.7\"\r\n\t    },\r\n\t    \"400\": {\r\n\t        \"code\": 400,\r\n\t        \"text\": \"Bad Request\",\r\n\t        \"description\": \"\\\"The server cannot or will not process the request because the received syntax is invalid, nonsensical, or exceeds some limitation on what the server is willing to process.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.1\"\r\n\t    },\r\n\t    \"401\": {\r\n\t        \"code\": 401,\r\n\t        \"text\": \"Unauthorized\",\r\n\t        \"description\": \"\\\"The request has not been applied because it lacks valid authentication credentials for the target resource.\\\"\",\r\n\t        \"spec_title\": \"RFC7235#6.3.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7235#section-3.1\"\r\n\t    },\r\n\t    \"402\": {\r\n\t        \"code\": 402,\r\n\t        \"text\": \"Payment Required\",\r\n\t        \"description\": \"*reserved*\",\r\n\t        \"spec_title\": \"RFC7231#6.5.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.2\"\r\n\t    },\r\n\t    \"403\": {\r\n\t        \"code\": 403,\r\n\t        \"text\": \"Forbidden\",\r\n\t        \"description\": \"\\\"The server understood the request but refuses to authorize it.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.3\"\r\n\t    },\r\n\t    \"404\": {\r\n\t        \"code\": 404,\r\n\t        \"text\": \"Not Found\",\r\n\t        \"description\": \"\\\"The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.4\"\r\n\t    },\r\n\t    \"405\": {\r\n\t        \"code\": 405,\r\n\t        \"text\": \"Method Not Allowed\",\r\n\t        \"description\": \"\\\"The method specified in the request-line is known by the origin server but not supported by the target resource.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.5\"\r\n\t    },\r\n\t    \"406\": {\r\n\t        \"code\": 406,\r\n\t        \"text\": \"Not Acceptable\",\r\n\t        \"description\": \"\\\"The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.6\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.6\"\r\n\t    },\r\n\t    \"407\": {\r\n\t        \"code\": 407,\r\n\t        \"text\": \"Proxy Authentication Required\",\r\n\t        \"description\": \"\\\"The client needs to authenticate itself in order to use a proxy.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.3.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.2\"\r\n\t    },\r\n\t    \"408\": {\r\n\t        \"code\": 408,\r\n\t        \"text\": \"Request Timeout\",\r\n\t        \"description\": \"\\\"The server did not receive a complete request message within the time that it was prepared to wait.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.7\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.7\"\r\n\t    },\r\n\t    \"409\": {\r\n\t        \"code\": 409,\r\n\t        \"text\": \"Conflict\",\r\n\t        \"description\": \"\\\"The request could not be completed due to a conflict with the current state of the resource.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.8\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.8\"\r\n\t    },\r\n\t    \"410\": {\r\n\t        \"code\": 410,\r\n\t        \"text\": \"Gone\",\r\n\t        \"description\": \"\\\"Access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.9\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.9\"\r\n\t    },\r\n\t    \"411\": {\r\n\t        \"code\": 411,\r\n\t        \"text\": \"Length Required\",\r\n\t        \"description\": \"\\\"The server refuses to accept the request without a defined Content-Length.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.10\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.10\"\r\n\t    },\r\n\t    \"412\": {\r\n\t        \"code\": 412,\r\n\t        \"text\": \"Precondition Failed\",\r\n\t        \"description\": \"\\\"One or more preconditions given in the request header fields evaluated to false when tested on the server.\\\"\",\r\n\t        \"spec_title\": \"RFC7232#4.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7232#section-4.2\"\r\n\t    },\r\n\t    \"413\": {\r\n\t        \"code\": 413,\r\n\t        \"text\": \"Payload Too Large\",\r\n\t        \"description\": \"\\\"The server is refusing to process a request because the request payload is larger than the server is willing or able to process.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.11\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.11\"\r\n\t    },\r\n\t    \"414\": {\r\n\t        \"code\": 414,\r\n\t        \"text\": \"URI Too Long\",\r\n\t        \"description\": \"\\\"The server is refusing to service the request because the request-target is longer than the server is willing to interpret.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.12\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.12\"\r\n\t    },\r\n\t    \"415\": {\r\n\t        \"code\": 415,\r\n\t        \"text\": \"Unsupported Media Type\",\r\n\t        \"description\": \"\\\"The origin server is refusing to service the request because the payload is in a format not supported by the target resource for this method.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.13\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.13\"\r\n\t    },\r\n\t    \"416\": {\r\n\t        \"code\": 416,\r\n\t        \"text\": \"Range Not Satisfiable\",\r\n\t        \"description\": \"\\\"None of the ranges in the request's Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.\\\"\",\r\n\t        \"spec_title\": \"RFC7233#4.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7233#section-4.4\"\r\n\t    },\r\n\t    \"417\": {\r\n\t        \"code\": 417,\r\n\t        \"text\": \"Expectation Failed\",\r\n\t        \"description\": \"\\\"The expectation given in the request's Expect header field could not be met by at least one of the inbound servers.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.14\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.14\"\r\n\t    },\r\n\t    \"418\": {\r\n\t        \"code\": 418,\r\n\t        \"text\": \"I'm a teapot\",\r\n\t        \"description\": \"\\\"1988 April Fools Joke. Returned by tea pots requested to brew coffee.\\\"\",\r\n\t        \"spec_title\": \"RFC 2324\",\r\n\t        \"spec_href\": \"https://tools.ietf.org/html/rfc2324\"\r\n\t    },\r\n\t    \"426\": {\r\n\t        \"code\": 426,\r\n\t        \"text\": \"Upgrade Required\",\r\n\t        \"description\": \"\\\"The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.5.15\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.15\"\r\n\t    },\r\n\t    \"500\": {\r\n\t        \"code\": 500,\r\n\t        \"text\": \"Internal Server Error\",\r\n\t        \"description\": \"\\\"The server encountered an unexpected condition that prevented it from fulfilling the request.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.1\"\r\n\t    },\r\n\t    \"501\": {\r\n\t        \"code\": 501,\r\n\t        \"text\": \"Not Implemented\",\r\n\t        \"description\": \"\\\"The server does not support the functionality required to fulfill the request.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.2\"\r\n\t    },\r\n\t    \"502\": {\r\n\t        \"code\": 502,\r\n\t        \"text\": \"Bad Gateway\",\r\n\t        \"description\": \"\\\"The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.3\"\r\n\t    },\r\n\t    \"503\": {\r\n\t        \"code\": 503,\r\n\t        \"text\": \"Service Unavailable\",\r\n\t        \"description\": \"\\\"The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.4\"\r\n\t    },\r\n\t    \"504\": {\r\n\t        \"code\": 504,\r\n\t        \"text\": \"Gateway Time-out\",\r\n\t        \"description\": \"\\\"The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.5\"\r\n\t    },\r\n\t    \"505\": {\r\n\t        \"code\": 505,\r\n\t        \"text\": \"HTTP Version Not Supported\",\r\n\t        \"description\": \"\\\"The server does not support, or refuses to support, the protocol version that was used in the request message.\\\"\",\r\n\t        \"spec_title\": \"RFC7231#6.6.6\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.6\"\r\n\t    },\r\n\t    \"102\": {\r\n\t        \"code\": 102,\r\n\t        \"text\": \"Processing\",\r\n\t        \"description\": \"\\\"An interim response to inform the client that the server has accepted the complete request, but has not yet completed it.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.1\"\r\n\t    },\r\n\t    \"207\": {\r\n\t        \"code\": 207,\r\n\t        \"text\": \"Multi-Status\",\r\n\t        \"description\": \"\\\"Status for multiple independent operations.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.2\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.2\"\r\n\t    },\r\n\t    \"226\": {\r\n\t        \"code\": 226,\r\n\t        \"text\": \"IM Used\",\r\n\t        \"description\": \"\\\"The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\\\"\",\r\n\t        \"spec_title\": \"RFC3229#10.4.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc3229#section-10.4.1\"\r\n\t    },\r\n\t    \"308\": {\r\n\t        \"code\": 308,\r\n\t        \"text\": \"Permanent Redirect\",\r\n\t        \"description\": \"\\\"The target resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs. [...] This status code is similar to 301 Moved Permanently (Section 7.3.2 of rfc7231), except that it does not allow rewriting the request method from POST to GET.\\\"\",\r\n\t        \"spec_title\": \"RFC7238\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc7238\"\r\n\t    },\r\n\t    \"422\": {\r\n\t        \"code\": 422,\r\n\t        \"text\": \"Unprocessable Entity\",\r\n\t        \"description\": \"\\\"The server understands the content type of the request entity (hence a 415(Unsupported Media Type) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.3\"\r\n\t    },\r\n\t    \"423\": {\r\n\t        \"code\": 423,\r\n\t        \"text\": \"Locked\",\r\n\t        \"description\": \"\\\"The source or destination resource of a method is locked.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.4\"\r\n\t    },\r\n\t    \"424\": {\r\n\t        \"code\": 424,\r\n\t        \"text\": \"Failed Dependency\",\r\n\t        \"description\": \"\\\"The method could not be performed on the resource because the requested action depended on another action and that action failed.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.5\"\r\n\t    },\r\n\t    \"428\": {\r\n\t        \"code\": 428,\r\n\t        \"text\": \"Precondition Required\",\r\n\t        \"description\": \"\\\"The origin server requires the request to be conditional.\\\"\",\r\n\t        \"spec_title\": \"RFC6585#3\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-3\"\r\n\t    },\r\n\t    \"429\": {\r\n\t        \"code\": 429,\r\n\t        \"text\": \"Too Many Requests\",\r\n\t        \"description\": \"\\\"The user has sent too many requests in a given amount of time (\\\"rate limiting\\\").\\\"\",\r\n\t        \"spec_title\": \"RFC6585#4\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-4\"\r\n\t    },\r\n\t    \"431\": {\r\n\t        \"code\": 431,\r\n\t        \"text\": \"Request Header Fields Too Large\",\r\n\t        \"description\": \"\\\"The server is unwilling to process the request because its header fields are too large.\\\"\",\r\n\t        \"spec_title\": \"RFC6585#5\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-5\"\r\n\t    },\r\n\t    \"451\": {\r\n\t        \"code\": 451,\r\n\t        \"text\": \"Unavailable For Legal Reasons\",\r\n\t        \"description\": \"\\\"The server is denying access to the resource in response to a legal demand.\\\"\",\r\n\t        \"spec_title\": \"draft-ietf-httpbis-legally-restricted-status\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/draft-ietf-httpbis-legally-restricted-status\"\r\n\t    },\r\n\t    \"506\": {\r\n\t        \"code\": 506,\r\n\t        \"text\": \"Variant Also Negotiates\",\r\n\t        \"description\": \"\\\"The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.\\\"\",\r\n\t        \"spec_title\": \"RFC2295#8.1\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2295#section-8.1\"\r\n\t    },\r\n\t    \"507\": {\r\n\t        \"code\": 507,\r\n\t        \"text\": \"Insufficient Storage\",\r\n\t        \"description\": \"\\The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.\\\"\",\r\n\t        \"spec_title\": \"RFC5218#10.6\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.6\"\r\n\t    },\r\n\t    \"511\": {\r\n\t        \"code\": 511,\r\n\t        \"text\": \"Network Authentication Required\",\r\n\t        \"description\": \"\\\"The client needs to authenticate to gain network access.\\\"\",\r\n\t        \"spec_title\": \"RFC6585#6\",\r\n\t        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-6\"\r\n\t    }\r\n\t};\r\n\t//# sourceMappingURL=http-status-codes.js.map\n\n/***/ },\n\n/***/ 27:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n\t    return function (target, key) { decorator(target, key, paramIndex); }\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(24);\r\n\tvar Observable_1 = __webpack_require__(5);\r\n\t__webpack_require__(28);\r\n\tvar http_status_codes_1 = __webpack_require__(26);\r\n\t/**\r\n\t* Class that creates seed data for in-memory database\r\n\t* Must implement InMemoryDbService.\r\n\t*/\r\n\texports.SEED_DATA = new core_1.OpaqueToken('seedData');\r\n\t/**\r\n\t*  InMemoryBackendService configuration options\r\n\t*  Usage:\r\n\t*    provide(InMemoryBackendConfig, {useValue: {delay:600}}),\r\n\t*/\r\n\tvar InMemoryBackendConfig = (function () {\r\n\t    function InMemoryBackendConfig(config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        Object.assign(this, {\r\n\t            defaultResponseOptions: new http_1.BaseResponseOptions(),\r\n\t            delay: 500,\r\n\t            delete404: false\r\n\t        }, config);\r\n\t    }\r\n\t    return InMemoryBackendConfig;\r\n\t}());\r\n\texports.InMemoryBackendConfig = InMemoryBackendConfig;\r\n\texports.isSuccess = function (status) { return (status >= 200 && status < 300); };\r\n\t/**\r\n\t * Simulate the behavior of a RESTy web api\r\n\t * backed by the simple in-memory data store provided by the injected InMemoryDataService service.\r\n\t * Conforms mostly to behavior described here:\r\n\t * http://www.restapitutorial.com/lessons/httpmethods.html\r\n\t *\r\n\t * ### Usage\r\n\t *\r\n\t * Create InMemoryDataService class the implements InMemoryDataService.\r\n\t * Register both this service and the seed data as in:\r\n\t * ```\r\n\t * // other imports\r\n\t * import { HTTPPROVIDERS, XHRBackend } from 'angular2/http';\r\n\t * import { InMemoryBackendConfig, InMemoryBackendService, SEEDDATA } from '../in-memory-backend/in-memory-backend.service';\r\n\t * import { InMemoryStoryService } from '../api/in-memory-story.service';\r\n\t *\r\n\t * @Component({\r\n\t *   selector: ...,\r\n\t *   templateUrl: ...,\r\n\t *   providers: [\r\n\t *     HTTPPROVIDERS,\r\n\t *     provide(XHRBackend, { useClass: InMemoryBackendService }),\r\n\t *     provide(SEEDDATA, { useClass: InMemoryStoryService }),\r\n\t *     provide(InMemoryBackendConfig, { useValue: { delay: 600 } }),\r\n\t *   ]\r\n\t * })\r\n\t * export class AppComponent { ... }\r\n\t * ```\r\n\t */\r\n\tvar InMemoryBackendService = (function () {\r\n\t    function InMemoryBackendService(seedData, config) {\r\n\t        this.seedData = seedData;\r\n\t        this.config = new InMemoryBackendConfig();\r\n\t        this.resetDb();\r\n\t        var loc = this.getLocation('./');\r\n\t        this.config.host = loc.host;\r\n\t        this.config.rootPath = loc.pathname;\r\n\t        Object.assign(this.config, config);\r\n\t    }\r\n\t    InMemoryBackendService.prototype.createConnection = function (req) {\r\n\t        var res = this.handleRequest(req);\r\n\t        var response = new Observable_1.Observable(function (responseObserver) {\r\n\t            if (exports.isSuccess(res.status)) {\r\n\t                responseObserver.next(res);\r\n\t                responseObserver.complete();\r\n\t            }\r\n\t            else {\r\n\t                responseObserver.error(res);\r\n\t            }\r\n\t            return function () { }; // unsubscribe function\r\n\t        });\r\n\t        response = response.delay(this.config.delay || 500);\r\n\t        return {\r\n\t            readyState: http_1.ReadyState.Done,\r\n\t            request: req,\r\n\t            response: response\r\n\t        };\r\n\t    };\r\n\t    ////  protected /////\r\n\t    /**\r\n\t     * Process Request and return an Http Response object\r\n\t     * in the manner of a RESTy web api.\r\n\t     *\r\n\t     * Expect URI pattern in the form :base/:collectionName/:id?\r\n\t     * Examples:\r\n\t     *   // for store with a 'characters' collection\r\n\t     *   GET api/characters          // all characters\r\n\t     *   GET api/characters/42       // the character with id=42\r\n\t     *   GET api/characters?name=^j  // 'j' is a regex; returns characters whose name contains 'j' or 'J'\r\n\t     *   GET api/characters.json/42  // ignores the \".json\"\r\n\t     *\r\n\t     *   POST commands/resetDb  // resets the \"database\"\r\n\t     */\r\n\t    InMemoryBackendService.prototype.handleRequest = function (req) {\r\n\t        var _a = this.parseUrl(req.url), base = _a.base, collectionName = _a.collectionName, id = _a.id, resourceUrl = _a.resourceUrl, query = _a.query;\r\n\t        var collection = this.db[collectionName];\r\n\t        var reqInfo = {\r\n\t            req: req,\r\n\t            base: base,\r\n\t            collection: collection,\r\n\t            collectionName: collectionName,\r\n\t            headers: new http_1.Headers({ 'Content-Type': 'application/json' }),\r\n\t            id: this.parseId(collection, id),\r\n\t            query: query,\r\n\t            resourceUrl: resourceUrl\r\n\t        };\r\n\t        var options;\r\n\t        try {\r\n\t            if ('commands' === reqInfo.base.toLowerCase()) {\r\n\t                options = this.commands(reqInfo);\r\n\t            }\r\n\t            else if (reqInfo.collection) {\r\n\t                switch (req.method) {\r\n\t                    case http_1.RequestMethod.Get:\r\n\t                        options = this.get(reqInfo);\r\n\t                        break;\r\n\t                    case http_1.RequestMethod.Post:\r\n\t                        options = this.post(reqInfo);\r\n\t                        break;\r\n\t                    case http_1.RequestMethod.Put:\r\n\t                        options = this.put(reqInfo);\r\n\t                        break;\r\n\t                    case http_1.RequestMethod.Delete:\r\n\t                        options = this.delete(reqInfo);\r\n\t                        break;\r\n\t                    default:\r\n\t                        options = this.createErrorResponse(http_status_codes_1.STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\r\n\t                        break;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                options = this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\r\n\t            }\r\n\t        }\r\n\t        catch (error) {\r\n\t            var err = error.message || error;\r\n\t            options = this.createErrorResponse(http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\r\n\t        }\r\n\t        options = this.setStatusText(options);\r\n\t        if (this.config.defaultResponseOptions) {\r\n\t            options = this.config.defaultResponseOptions.merge(options);\r\n\t        }\r\n\t        return new http_1.Response(options);\r\n\t    };\r\n\t    /**\r\n\t     * Apply query/search parameters as a filter over the collection\r\n\t     * This impl only supports RegExp queries on string properties of the collection\r\n\t     * ANDs the conditions together\r\n\t     */\r\n\t    InMemoryBackendService.prototype.applyQuery = function (collection, query) {\r\n\t        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\r\n\t        var conditions = [];\r\n\t        query.paramsMap.forEach(function (value, name) {\r\n\t            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), 'i') }); });\r\n\t        });\r\n\t        var len = conditions.length;\r\n\t        if (!len) {\r\n\t            return collection;\r\n\t        }\r\n\t        // AND the RegExp conditions\r\n\t        return collection.filter(function (row) {\r\n\t            var ok = true;\r\n\t            var i = len;\r\n\t            while (ok && i) {\r\n\t                i -= 1;\r\n\t                var cond = conditions[i];\r\n\t                ok = cond.rx.test(row[cond.name]);\r\n\t            }\r\n\t            return ok;\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.clone = function (data) {\r\n\t        return JSON.parse(JSON.stringify(data));\r\n\t    };\r\n\t    /**\r\n\t     * When the `base`=\"commands\", the `collectionName` is the command\r\n\t     * Example URLs:\r\n\t     *   commands/resetdb   // Reset the \"database\" to its original state\r\n\t     *   commands/config (GET) // Return this service's config object\r\n\t     *   commands/config (!GET) // Update the config (e.g. delay)\r\n\t     *\r\n\t     * Usage:\r\n\t     *   http.post('commands/resetdb', null);\r\n\t     *   http.get('commands/config');\r\n\t     *   http.post('commands/config', '{\"delay\":1000}');\r\n\t     */\r\n\t    InMemoryBackendService.prototype.commands = function (reqInfo) {\r\n\t        var command = reqInfo.collectionName.toLowerCase();\r\n\t        var method = reqInfo.req.method;\r\n\t        var options;\r\n\t        switch (command) {\r\n\t            case 'resetdb':\r\n\t                this.resetDb();\r\n\t                options = new http_1.ResponseOptions({ status: http_status_codes_1.STATUS.OK });\r\n\t                break;\r\n\t            case 'config':\r\n\t                if (method === http_1.RequestMethod.Get) {\r\n\t                    options = new http_1.ResponseOptions({\r\n\t                        body: this.clone(this.config),\r\n\t                        status: http_status_codes_1.STATUS.OK\r\n\t                    });\r\n\t                }\r\n\t                else {\r\n\t                    // Be nice ... any other method is a config update\r\n\t                    var body = JSON.parse(reqInfo.req.text() || '{}');\r\n\t                    Object.assign(this.config, body);\r\n\t                    options = new http_1.ResponseOptions({ status: http_status_codes_1.STATUS.NO_CONTENT });\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                options = this.createErrorResponse(http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\r\n\t        }\r\n\t        return options;\r\n\t    };\r\n\t    InMemoryBackendService.prototype.createErrorResponse = function (status, message) {\r\n\t        return new http_1.ResponseOptions({\r\n\t            body: { 'error': \"\" + message },\r\n\t            headers: new http_1.Headers({ 'Content-Type': 'application/json' }),\r\n\t            status: status\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.delete = function (_a) {\r\n\t        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers;\r\n\t        if (!id) {\r\n\t            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\r\n\t        }\r\n\t        var exists = this.removeById(collection, id);\r\n\t        return new http_1.ResponseOptions({\r\n\t            headers: headers,\r\n\t            status: (exists || !this.config.delete404) ? http_status_codes_1.STATUS.NO_CONTENT : http_status_codes_1.STATUS.NOT_FOUND\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.findById = function (collection, id) {\r\n\t        return collection.find(function (item) { return item.id === id; });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.genId = function (collection) {\r\n\t        // assumes numeric ids\r\n\t        var maxId = 0;\r\n\t        collection.reduce(function (prev, item) {\r\n\t            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\r\n\t        }, null);\r\n\t        return maxId + 1;\r\n\t    };\r\n\t    InMemoryBackendService.prototype.get = function (_a) {\r\n\t        var id = _a.id, query = _a.query, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers;\r\n\t        var data = collection;\r\n\t        if (id) {\r\n\t            data = this.findById(collection, id);\r\n\t        }\r\n\t        else if (query) {\r\n\t            data = this.applyQuery(collection, query);\r\n\t        }\r\n\t        if (!data) {\r\n\t            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\r\n\t        }\r\n\t        return new http_1.ResponseOptions({\r\n\t            body: { data: this.clone(data) },\r\n\t            headers: headers,\r\n\t            status: http_status_codes_1.STATUS.OK\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.getLocation = function (href) {\r\n\t        var l = document.createElement('a');\r\n\t        l.href = href;\r\n\t        return l;\r\n\t    };\r\n\t    ;\r\n\t    InMemoryBackendService.prototype.indexOf = function (collection, id) {\r\n\t        return collection.findIndex(function (item) { return item.id === id; });\r\n\t    };\r\n\t    // tries to parse id as number if collection item.id is a number.\r\n\t    // returns the original param id otherwise.\r\n\t    InMemoryBackendService.prototype.parseId = function (collection, id) {\r\n\t        if (!id) {\r\n\t            return null;\r\n\t        }\r\n\t        var isNumberId = collection[0] && typeof collection[0].id === 'number';\r\n\t        if (isNumberId) {\r\n\t            var idNum = parseFloat(id);\r\n\t            return isNaN(idNum) ? id : idNum;\r\n\t        }\r\n\t        return id;\r\n\t    };\r\n\t    InMemoryBackendService.prototype.parseUrl = function (url) {\r\n\t        try {\r\n\t            var loc = this.getLocation(url);\r\n\t            var drop = this.config.rootPath.length;\r\n\t            var urlRoot = '';\r\n\t            if (loc.host !== this.config.host) {\r\n\t                // url for a server on a different host!\r\n\t                // assume it's collection is actually here too.\r\n\t                drop = 1; // the leading slash\r\n\t                urlRoot = loc.protocol + '//' + loc.host + '/';\r\n\t            }\r\n\t            var path = loc.pathname.substring(drop);\r\n\t            var _a = path.split('/'), base = _a[0], collectionName = _a[1], id = _a[2];\r\n\t            var resourceUrl = urlRoot + base + '/' + collectionName + '/';\r\n\t            collectionName = collectionName.split('.')[0]; // ignore anything after the '.', e.g., '.json'\r\n\t            var query = loc.search && new http_1.URLSearchParams(loc.search.substr(1));\r\n\t            return { base: base, id: id, collectionName: collectionName, resourceUrl: resourceUrl, query: query };\r\n\t        }\r\n\t        catch (err) {\r\n\t            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\r\n\t            throw new Error(msg);\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService.prototype.post = function (_a) {\r\n\t        var collection = _a.collection, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl;\r\n\t        var item = JSON.parse(req.text());\r\n\t        if (!item.id) {\r\n\t            item.id = id || this.genId(collection);\r\n\t        }\r\n\t        // ignore the request id, if any. Alternatively,\r\n\t        // could reject request if id differs from item.id\r\n\t        id = item.id;\r\n\t        var existingIx = this.indexOf(collection, id);\r\n\t        if (existingIx > -1) {\r\n\t            collection[existingIx] = item;\r\n\t            return new http_1.ResponseOptions({\r\n\t                headers: headers,\r\n\t                status: http_status_codes_1.STATUS.NO_CONTENT\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            collection.push(item);\r\n\t            headers.set('Location', resourceUrl + '/' + id);\r\n\t            return new http_1.ResponseOptions({\r\n\t                headers: headers,\r\n\t                body: { data: this.clone(item) },\r\n\t                status: http_status_codes_1.STATUS.CREATED\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService.prototype.put = function (_a) {\r\n\t        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n\t        var item = JSON.parse(req.text());\r\n\t        if (!id) {\r\n\t            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\r\n\t        }\r\n\t        if (id !== item.id) {\r\n\t            return this.createErrorResponse(http_status_codes_1.STATUS.BAD_REQUEST, \"\\\"\" + collectionName + \"\\\" id does not match item.id\");\r\n\t        }\r\n\t        var existingIx = this.indexOf(collection, id);\r\n\t        if (existingIx > -1) {\r\n\t            collection[existingIx] = item;\r\n\t            return new http_1.ResponseOptions({\r\n\t                headers: headers,\r\n\t                status: http_status_codes_1.STATUS.NO_CONTENT // successful; no content\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            collection.push(item);\r\n\t            return new http_1.ResponseOptions({\r\n\t                body: { data: this.clone(item) },\r\n\t                headers: headers,\r\n\t                status: http_status_codes_1.STATUS.CREATED\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService.prototype.removeById = function (collection, id) {\r\n\t        var ix = this.indexOf(collection, id);\r\n\t        if (ix > -1) {\r\n\t            collection.splice(ix, 1);\r\n\t            return true;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    /**\r\n\t     * Reset the \"database\" to its original state\r\n\t     */\r\n\t    InMemoryBackendService.prototype.resetDb = function () {\r\n\t        this.db = this.seedData.createDb();\r\n\t    };\r\n\t    InMemoryBackendService.prototype.setStatusText = function (options) {\r\n\t        try {\r\n\t            var statusCode = http_status_codes_1.STATUS_CODE_INFO[options.status];\r\n\t            options['statusText'] = statusCode ? statusCode.text : 'Unknown Status';\r\n\t            return options;\r\n\t        }\r\n\t        catch (err) {\r\n\t            return new http_1.ResponseOptions({\r\n\t                status: http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR,\r\n\t                statusText: 'Invalid Server Operation'\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService = __decorate([\r\n\t        __param(0, core_1.Inject(exports.SEED_DATA)),\r\n\t        __param(1, core_1.Inject(InMemoryBackendConfig)),\r\n\t        __param(1, core_1.Optional()), \r\n\t        __metadata('design:paramtypes', [Object, Object])\r\n\t    ], InMemoryBackendService);\r\n\t    return InMemoryBackendService;\r\n\t}());\r\n\texports.InMemoryBackendService = InMemoryBackendService;\r\n\t//# sourceMappingURL=in-memory-backend.service.js.map\n\n/***/ },\n\n/***/ 37:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar AppComponent = (function () {\r\n\t    function AppComponent() {\r\n\t        this.pageTitle = \"Bienvenue dans l'univers de Dragon Ball\";\r\n\t    }\r\n\t    return AppComponent;\r\n\t}());\r\n\tAppComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        selector: 'db-app',\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(38),\r\n\t        styles: [__webpack_require__(39)]\r\n\t    })\r\n\t], AppComponent);\r\n\texports.AppComponent = AppComponent;\r\n\n\n/***/ },\n\n/***/ 38:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=container> <div class=header-bar></div> <nav> <a [routerlink]='[\\\"/\\\"]' routerlinkactive=active>Home</a> <a [routerlink]='[\\\"category\\\", \\\"db\\\"]' routerlinkactive=active>Dragon Ball</a> <a [routerlink]='[\\\"category\\\", \\\"dbz\\\"]' routerlinkactive=active>Dragon Ball Z</a> </nav> <router-outlet></router-outlet> </div>\";\n\n/***/ },\n\n/***/ 39:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"/*@media (min-width: 768px) {\\r\\n  .sidebar-nav .navbar .navbar-collapse {\\r\\n    padding: 0;\\r\\n    max-height: none;\\r\\n  }\\r\\n  .sidebar-nav .navbar ul {\\r\\n    float: none;\\r\\n    display: block;\\r\\n  }\\r\\n  .sidebar-nav .navbar li {\\r\\n    float: none;\\r\\n    display: block;\\r\\n  }\\r\\n  .sidebar-nav .navbar li a {\\r\\n    padding-top: 12px;\\r\\n    padding-bottom: 12px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.content {\\r\\n  height: 600px;\\r\\n  width: 400px;\\r\\n}*/\\r\\n\\r\\nh1 {\\r\\n  font-size: 1.2em;\\r\\n  color: #999;\\r\\n  color: #555;\\r\\n  margin-bottom: 0;\\r\\n}\\r\\nh2 {\\r\\n  font-size: 2em;\\r\\n  margin-top: 0;\\r\\n  padding-top: 0;\\r\\n}\\r\\nnav a {\\r\\n  padding: 5px 10px;\\r\\n  text-decoration: none;\\r\\n  margin-top: 10px;\\r\\n  display: inline-block;\\r\\n  background-color: #eee;\\r\\n  border-radius: 4px;\\r\\n}\\r\\nnav a:visited, a:link {\\r\\n  color: #607D8B;\\r\\n}\\r\\nnav a:hover {\\r\\n  color: #039be5;\\r\\n  background-color: #CFD8DC;\\r\\n}\\r\\nnav a.router-link-active {\\r\\n  color: #039be5;\\r\\n}\\r\\n.header-bar {\\r\\n  background-color: rgb(0,120,215);\\r\\n  height: 4px;\\r\\n  margin-top: 10px;\\r\\n  margin-bottom: 10px;\\r\\n}\"\n\n/***/ },\n\n/***/ 40:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar common_1 = __webpack_require__(22);\r\n\tvar welcome_routing_module_1 = __webpack_require__(41);\r\n\tvar welcome_component_1 = __webpack_require__(73);\r\n\tvar WelcomeModule = (function () {\r\n\t    function WelcomeModule() {\r\n\t    }\r\n\t    return WelcomeModule;\r\n\t}());\r\n\tWelcomeModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            common_1.CommonModule,\r\n\t            welcome_routing_module_1.WelcomeRoutingModule\r\n\t        ],\r\n\t        declarations: [\r\n\t            welcome_component_1.WelcomeComponent\r\n\t        ],\r\n\t        exports: [\r\n\t            welcome_component_1.WelcomeComponent\r\n\t        ]\r\n\t    })\r\n\t], WelcomeModule);\r\n\texports.WelcomeModule = WelcomeModule;\r\n\n\n/***/ },\n\n/***/ 41:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar welcome_component_1 = __webpack_require__(73);\r\n\tvar WelcomeRoutingModule = (function () {\r\n\t    function WelcomeRoutingModule() {\r\n\t    }\r\n\t    return WelcomeRoutingModule;\r\n\t}());\r\n\tWelcomeRoutingModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            router_1.RouterModule.forChild([\r\n\t                { path: 'welcome', component: welcome_component_1.WelcomeComponent }\r\n\t            ])\r\n\t        ],\r\n\t        exports: [\r\n\t            router_1.RouterModule\r\n\t        ]\r\n\t    })\r\n\t], WelcomeRoutingModule);\r\n\texports.WelcomeRoutingModule = WelcomeRoutingModule;\r\n\n\n/***/ },\n\n/***/ 42:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @license Angular v3.4.4\n\t * (c) 2010-2016 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(22), __webpack_require__(3), __webpack_require__(43), __webpack_require__(4), __webpack_require__(44), __webpack_require__(56), __webpack_require__(57), __webpack_require__(62), __webpack_require__(63), __webpack_require__(65), __webpack_require__(58), __webpack_require__(66), __webpack_require__(5), __webpack_require__(67), __webpack_require__(68), __webpack_require__(64), __webpack_require__(70), __webpack_require__(71), __webpack_require__(69), __webpack_require__(21), __webpack_require__(72)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core', 'rxjs/BehaviorSubject', 'rxjs/Subject', 'rxjs/observable/from', 'rxjs/observable/of', 'rxjs/operator/concatMap', 'rxjs/operator/every', 'rxjs/operator/first', 'rxjs/operator/map', 'rxjs/operator/mergeMap', 'rxjs/operator/reduce', 'rxjs/Observable', 'rxjs/operator/catch', 'rxjs/operator/concatAll', 'rxjs/util/EmptyError', 'rxjs/observable/fromPromise', 'rxjs/operator/last', 'rxjs/operator/mergeAll', '@angular/platform-browser', 'rxjs/operator/filter'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.router = global.ng.router || {}),global.ng.common,global.ng.core,global.Rx,global.Rx,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.ng.platformBrowser,global.Rx.Observable.prototype));\n\t}(this, function (exports,_angular_common,_angular_core,rxjs_BehaviorSubject,rxjs_Subject,rxjs_observable_from,rxjs_observable_of,rxjs_operator_concatMap,rxjs_operator_every,rxjs_operator_first,rxjs_operator_map,rxjs_operator_mergeMap,rxjs_operator_reduce,rxjs_Observable,rxjs_operator_catch,rxjs_operator_concatAll,rxjs_util_EmptyError,rxjs_observable_fromPromise,l,rxjs_operator_mergeAll,_angular_platformBrowser,rxjs_operator_filter) { 'use strict';\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * @whatItDoes Name of the primary outlet.\n\t     *\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ PRIMARY_OUTLET = 'primary';\n\t    var NavigationCancelingError = (function (_super) {\n\t        __extends(NavigationCancelingError, _super);\n\t        /**\n\t         * @param {?} message\n\t         */\n\t        function NavigationCancelingError(message) {\n\t            _super.call(this, message);\n\t            this.message = message;\n\t            this.stack = (new Error(message)).stack;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NavigationCancelingError.prototype.toString = function () { return this.message; };\n\t        return NavigationCancelingError;\n\t    }(Error));\n\t    /**\n\t     * @param {?} segments\n\t     * @param {?} segmentGroup\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function defaultUrlMatcher(segments, segmentGroup, route) {\n\t        var /** @type {?} */ path = route.path;\n\t        var /** @type {?} */ parts = path.split('/');\n\t        var /** @type {?} */ posParams = {};\n\t        var /** @type {?} */ consumed = [];\n\t        var /** @type {?} */ currentIndex = 0;\n\t        for (var /** @type {?} */ i = 0; i < parts.length; ++i) {\n\t            if (currentIndex >= segments.length)\n\t                return null;\n\t            var /** @type {?} */ current = segments[currentIndex];\n\t            var /** @type {?} */ p = parts[i];\n\t            var /** @type {?} */ isPosParam = p.startsWith(':');\n\t            if (!isPosParam && p !== current.path)\n\t                return null;\n\t            if (isPosParam) {\n\t                posParams[p.substring(1)] = current;\n\t            }\n\t            consumed.push(current);\n\t            currentIndex++;\n\t        }\n\t        if (route.pathMatch === 'full' &&\n\t            (segmentGroup.hasChildren() || currentIndex < segments.length)) {\n\t            return null;\n\t        }\n\t        else {\n\t            return { consumed: consumed, posParams: posParams };\n\t        }\n\t    }\n\t\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function shallowEqualArrays(a, b) {\n\t        if (a.length !== b.length)\n\t            return false;\n\t        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n\t            if (!shallowEqual(a[i], b[i]))\n\t                return false;\n\t        }\n\t        return true;\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function shallowEqual(a, b) {\n\t        var /** @type {?} */ k1 = Object.keys(a);\n\t        var /** @type {?} */ k2 = Object.keys(b);\n\t        if (k1.length != k2.length) {\n\t            return false;\n\t        }\n\t        var /** @type {?} */ key;\n\t        for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n\t            key = k1[i];\n\t            if (a[key] !== b[key]) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @return {?}\n\t     */\n\t    function flatten(a) {\n\t        var /** @type {?} */ target = [];\n\t        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n\t            for (var /** @type {?} */ j = 0; j < a[i].length; ++j) {\n\t                target.push(a[i][j]);\n\t            }\n\t        }\n\t        return target;\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @return {?}\n\t     */\n\t    function last(a) {\n\t        return a.length > 0 ? a[a.length - 1] : null;\n\t    }\n\t    /**\n\t     * @param {?} m1\n\t     * @param {?} m2\n\t     * @return {?}\n\t     */\n\t    function merge(m1, m2) {\n\t        var /** @type {?} */ m = {};\n\t        for (var attr in m1) {\n\t            if (m1.hasOwnProperty(attr)) {\n\t                m[attr] = m1[attr];\n\t            }\n\t        }\n\t        for (var attr in m2) {\n\t            if (m2.hasOwnProperty(attr)) {\n\t                m[attr] = m2[attr];\n\t            }\n\t        }\n\t        return m;\n\t    }\n\t    /**\n\t     * @param {?} map\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    function forEach(map, callback) {\n\t        for (var prop in map) {\n\t            if (map.hasOwnProperty(prop)) {\n\t                callback(map[prop], prop);\n\t            }\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function waitForMap(obj, fn) {\n\t        var /** @type {?} */ waitFor = [];\n\t        var /** @type {?} */ res = {};\n\t        forEach(obj, function (a, k) {\n\t            if (k === PRIMARY_OUTLET) {\n\t                waitFor.push(rxjs_operator_map.map.call(fn(k, a), function (_) {\n\t                    res[k] = _;\n\t                    return _;\n\t                }));\n\t            }\n\t        });\n\t        forEach(obj, function (a, k) {\n\t            if (k !== PRIMARY_OUTLET) {\n\t                waitFor.push(rxjs_operator_map.map.call(fn(k, a), function (_) {\n\t                    res[k] = _;\n\t                    return _;\n\t                }));\n\t            }\n\t        });\n\t        if (waitFor.length > 0) {\n\t            var /** @type {?} */ concatted$ = rxjs_operator_concatAll.concatAll.call(rxjs_observable_of.of.apply(void 0, waitFor));\n\t            var /** @type {?} */ last$ = l.last.call(concatted$);\n\t            return rxjs_operator_map.map.call(last$, function () { return res; });\n\t        }\n\t        return rxjs_observable_of.of(res);\n\t    }\n\t    /**\n\t     * @param {?} observables\n\t     * @return {?}\n\t     */\n\t    function andObservables(observables) {\n\t        var /** @type {?} */ merged$ = rxjs_operator_mergeAll.mergeAll.call(observables);\n\t        return rxjs_operator_every.every.call(merged$, function (result) { return result === true; });\n\t    }\n\t    /**\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function wrapIntoObservable(value) {\n\t        if (value instanceof rxjs_Observable.Observable) {\n\t            return value;\n\t        }\n\t        if (value instanceof Promise) {\n\t            return rxjs_observable_fromPromise.fromPromise(value);\n\t        }\n\t        return rxjs_observable_of.of(value);\n\t    }\n\t\n\t    /**\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ ROUTES = new _angular_core.OpaqueToken('ROUTES');\n\t    var LoadedRouterConfig = (function () {\n\t        /**\n\t         * @param {?} routes\n\t         * @param {?} injector\n\t         * @param {?} factoryResolver\n\t         * @param {?} injectorFactory\n\t         */\n\t        function LoadedRouterConfig(routes, injector, factoryResolver, injectorFactory) {\n\t            this.routes = routes;\n\t            this.injector = injector;\n\t            this.factoryResolver = factoryResolver;\n\t            this.injectorFactory = injectorFactory;\n\t        }\n\t        return LoadedRouterConfig;\n\t    }());\n\t    var RouterConfigLoader = (function () {\n\t        /**\n\t         * @param {?} loader\n\t         * @param {?} compiler\n\t         */\n\t        function RouterConfigLoader(loader, compiler) {\n\t            this.loader = loader;\n\t            this.compiler = compiler;\n\t        }\n\t        /**\n\t         * @param {?} parentInjector\n\t         * @param {?} loadChildren\n\t         * @return {?}\n\t         */\n\t        RouterConfigLoader.prototype.load = function (parentInjector, loadChildren) {\n\t            return rxjs_operator_map.map.call(this.loadModuleFactory(loadChildren), function (r) {\n\t                var /** @type {?} */ ref = r.create(parentInjector);\n\t                var /** @type {?} */ injectorFactory = function (parent) { return r.create(parent).injector; };\n\t                return new LoadedRouterConfig(flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver, injectorFactory);\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} loadChildren\n\t         * @return {?}\n\t         */\n\t        RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {\n\t            var _this = this;\n\t            if (typeof loadChildren === 'string') {\n\t                return rxjs_observable_fromPromise.fromPromise(this.loader.load(loadChildren));\n\t            }\n\t            else {\n\t                var /** @type {?} */ offlineMode_1 = this.compiler instanceof _angular_core.Compiler;\n\t                return rxjs_operator_mergeMap.mergeMap.call(wrapIntoObservable(loadChildren()), function (t) { return offlineMode_1 ? rxjs_observable_of.of(/** @type {?} */ (t)) : rxjs_observable_fromPromise.fromPromise(_this.compiler.compileModuleAsync(t)); });\n\t            }\n\t        };\n\t        return RouterConfigLoader;\n\t    }());\n\t\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function createEmptyUrlTree() {\n\t        return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n\t    }\n\t    /**\n\t     * @param {?} container\n\t     * @param {?} containee\n\t     * @param {?} exact\n\t     * @return {?}\n\t     */\n\t    function containsTree(container, containee, exact) {\n\t        if (exact) {\n\t            return equalQueryParams(container.queryParams, containee.queryParams) &&\n\t                equalSegmentGroups(container.root, containee.root);\n\t        }\n\t        return containsQueryParams(container.queryParams, containee.queryParams) &&\n\t            containsSegmentGroup(container.root, containee.root);\n\t    }\n\t    /**\n\t     * @param {?} container\n\t     * @param {?} containee\n\t     * @return {?}\n\t     */\n\t    function equalQueryParams(container, containee) {\n\t        return shallowEqual(container, containee);\n\t    }\n\t    /**\n\t     * @param {?} container\n\t     * @param {?} containee\n\t     * @return {?}\n\t     */\n\t    function equalSegmentGroups(container, containee) {\n\t        if (!equalPath(container.segments, containee.segments))\n\t            return false;\n\t        if (container.numberOfChildren !== containee.numberOfChildren)\n\t            return false;\n\t        for (var c in containee.children) {\n\t            if (!container.children[c])\n\t                return false;\n\t            if (!equalSegmentGroups(container.children[c], containee.children[c]))\n\t                return false;\n\t        }\n\t        return true;\n\t    }\n\t    /**\n\t     * @param {?} container\n\t     * @param {?} containee\n\t     * @return {?}\n\t     */\n\t    function containsQueryParams(container, containee) {\n\t        return Object.keys(containee).length <= Object.keys(container).length &&\n\t            Object.keys(containee).every(function (key) { return containee[key] === container[key]; });\n\t    }\n\t    /**\n\t     * @param {?} container\n\t     * @param {?} containee\n\t     * @return {?}\n\t     */\n\t    function containsSegmentGroup(container, containee) {\n\t        return containsSegmentGroupHelper(container, containee, containee.segments);\n\t    }\n\t    /**\n\t     * @param {?} container\n\t     * @param {?} containee\n\t     * @param {?} containeePaths\n\t     * @return {?}\n\t     */\n\t    function containsSegmentGroupHelper(container, containee, containeePaths) {\n\t        if (container.segments.length > containeePaths.length) {\n\t            var /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\n\t            if (!equalPath(current, containeePaths))\n\t                return false;\n\t            if (containee.hasChildren())\n\t                return false;\n\t            return true;\n\t        }\n\t        else if (container.segments.length === containeePaths.length) {\n\t            if (!equalPath(container.segments, containeePaths))\n\t                return false;\n\t            for (var c in containee.children) {\n\t                if (!container.children[c])\n\t                    return false;\n\t                if (!containsSegmentGroup(container.children[c], containee.children[c]))\n\t                    return false;\n\t            }\n\t            return true;\n\t        }\n\t        else {\n\t            var /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\n\t            var /** @type {?} */ next = containeePaths.slice(container.segments.length);\n\t            if (!equalPath(container.segments, current))\n\t                return false;\n\t            if (!container.children[PRIMARY_OUTLET])\n\t                return false;\n\t            return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n\t        }\n\t    }\n\t    /**\n\t     * \\@whatItDoes Represents the parsed URL.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * ```\n\t     * \\@Component({templateUrl:'template.html'})\n\t     * class MyComponent {\n\t     *   constructor(router: Router) {\n\t     *     const tree: UrlTree =\n\t     *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n\t     *     const f = tree.fragment; // return 'fragment'\n\t     *     const q = tree.queryParams; // returns {debug: 'true'}\n\t     *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n\t     *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n\t     *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n\t     *     g.children['support'].segments; // return 1 segment 'help'\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * \\@description\n\t     *\n\t     * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n\t     * serialized tree.\n\t     * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n\t     *\n\t     * \\@stable\n\t     */\n\t    var UrlTree = (function () {\n\t        /**\n\t         * \\@internal\n\t         * @param {?} root\n\t         * @param {?} queryParams\n\t         * @param {?} fragment\n\t         */\n\t        function UrlTree(root, queryParams, fragment) {\n\t            this.root = root;\n\t            this.queryParams = queryParams;\n\t            this.fragment = fragment;\n\t        }\n\t        /**\n\t         * \\@docsNotRequired\n\t         * @return {?}\n\t         */\n\t        UrlTree.prototype.toString = function () { return new DefaultUrlSerializer().serialize(this); };\n\t        return UrlTree;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Represents the parsed URL segment group.\n\t     *\n\t     * See {\\@link UrlTree} for more information.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var UrlSegmentGroup = (function () {\n\t        /**\n\t         * @param {?} segments\n\t         * @param {?} children\n\t         */\n\t        function UrlSegmentGroup(segments, children) {\n\t            var _this = this;\n\t            this.segments = segments;\n\t            this.children = children;\n\t            /** The parent node in the url tree */\n\t            this.parent = null;\n\t            forEach(children, function (v, k) { return v.parent = _this; });\n\t        }\n\t        /**\n\t         * Wether the segment has child segments\n\t         * @return {?}\n\t         */\n\t        UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };\n\t        Object.defineProperty(UrlSegmentGroup.prototype, \"numberOfChildren\", {\n\t            /**\n\t             * Number of child segments\n\t             * @return {?}\n\t             */\n\t            get: function () { return Object.keys(this.children).length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * \\@docsNotRequired\n\t         * @return {?}\n\t         */\n\t        UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };\n\t        return UrlSegmentGroup;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Represents a single URL segment.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * ```\n\t     * \\@Component({templateUrl:'template.html'})\n\t     * class MyComponent {\n\t     *   constructor(router: Router) {\n\t     *     const tree: UrlTree = router.parseUrl('/team;id=33');\n\t     *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n\t     *     const s: UrlSegment[] = g.segments;\n\t     *     s[0].path; // returns 'team'\n\t     *     s[0].parameters; // returns {id: 33}\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * \\@description\n\t     *\n\t     * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n\t     * parameters associated with the segment.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var UrlSegment = (function () {\n\t        /**\n\t         * @param {?} path\n\t         * @param {?} parameters\n\t         */\n\t        function UrlSegment(path, parameters) {\n\t            this.path = path;\n\t            this.parameters = parameters;\n\t        }\n\t        /**\n\t         * \\@docsNotRequired\n\t         * @return {?}\n\t         */\n\t        UrlSegment.prototype.toString = function () { return serializePath(this); };\n\t        return UrlSegment;\n\t    }());\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function equalSegments(a, b) {\n\t        if (a.length !== b.length)\n\t            return false;\n\t        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n\t            if (a[i].path !== b[i].path)\n\t                return false;\n\t            if (!shallowEqual(a[i].parameters, b[i].parameters))\n\t                return false;\n\t        }\n\t        return true;\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function equalPath(a, b) {\n\t        if (a.length !== b.length)\n\t            return false;\n\t        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n\t            if (a[i].path !== b[i].path)\n\t                return false;\n\t        }\n\t        return true;\n\t    }\n\t    /**\n\t     * @param {?} segment\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function mapChildrenIntoArray(segment, fn) {\n\t        var /** @type {?} */ res = [];\n\t        forEach(segment.children, function (child, childOutlet) {\n\t            if (childOutlet === PRIMARY_OUTLET) {\n\t                res = res.concat(fn(child, childOutlet));\n\t            }\n\t        });\n\t        forEach(segment.children, function (child, childOutlet) {\n\t            if (childOutlet !== PRIMARY_OUTLET) {\n\t                res = res.concat(fn(child, childOutlet));\n\t            }\n\t        });\n\t        return res;\n\t    }\n\t    /**\n\t     * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n\t     *\n\t     * \\@description The url serialization strategy is customizable. You can\n\t     * make all URLs case insensitive by providing a custom UrlSerializer.\n\t     *\n\t     * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var UrlSerializer = (function () {\n\t        function UrlSerializer() {\n\t        }\n\t        /**\n\t         * Parse a url into a {\\@link UrlTree}\n\t         * @abstract\n\t         * @param {?} url\n\t         * @return {?}\n\t         */\n\t        UrlSerializer.prototype.parse = function (url) { };\n\t        /**\n\t         * Converts a {\\@link UrlTree} into a url\n\t         * @abstract\n\t         * @param {?} tree\n\t         * @return {?}\n\t         */\n\t        UrlSerializer.prototype.serialize = function (tree) { };\n\t        return UrlSerializer;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n\t     *\n\t     * \\@description\n\t     *\n\t     * Example URLs:\n\t     *\n\t     * ```\n\t     * /inbox/33(popup:compose)\n\t     * /inbox/33;open=true/messages/44\n\t     * ```\n\t     *\n\t     * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n\t     * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n\t     * specify route specific parameters.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var DefaultUrlSerializer = (function () {\n\t        function DefaultUrlSerializer() {\n\t        }\n\t        /**\n\t         * Parses a url into a {\\@link UrlTree}\n\t         * @param {?} url\n\t         * @return {?}\n\t         */\n\t        DefaultUrlSerializer.prototype.parse = function (url) {\n\t            var /** @type {?} */ p = new UrlParser(url);\n\t            return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n\t        };\n\t        /**\n\t         * Converts a {\\@link UrlTree} into a url\n\t         * @param {?} tree\n\t         * @return {?}\n\t         */\n\t        DefaultUrlSerializer.prototype.serialize = function (tree) {\n\t            var /** @type {?} */ segment = \"/\" + serializeSegment(tree.root, true);\n\t            var /** @type {?} */ query = serializeQueryParams(tree.queryParams);\n\t            var /** @type {?} */ fragment = tree.fragment !== null && tree.fragment !== undefined ? \"#\" + encodeURI(tree.fragment) : '';\n\t            return \"\" + segment + query + fragment;\n\t        };\n\t        return DefaultUrlSerializer;\n\t    }());\n\t    /**\n\t     * @param {?} segment\n\t     * @return {?}\n\t     */\n\t    function serializePaths(segment) {\n\t        return segment.segments.map(function (p) { return serializePath(p); }).join('/');\n\t    }\n\t    /**\n\t     * @param {?} segment\n\t     * @param {?} root\n\t     * @return {?}\n\t     */\n\t    function serializeSegment(segment, root) {\n\t        if (segment.hasChildren() && root) {\n\t            var /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\n\t                serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n\t                '';\n\t            var /** @type {?} */ children_1 = [];\n\t            forEach(segment.children, function (v, k) {\n\t                if (k !== PRIMARY_OUTLET) {\n\t                    children_1.push(k + \":\" + serializeSegment(v, false));\n\t                }\n\t            });\n\t            if (children_1.length > 0) {\n\t                return primary + \"(\" + children_1.join('//') + \")\";\n\t            }\n\t            else {\n\t                return \"\" + primary;\n\t            }\n\t        }\n\t        else if (segment.hasChildren() && !root) {\n\t            var /** @type {?} */ children = mapChildrenIntoArray(segment, function (v, k) {\n\t                if (k === PRIMARY_OUTLET) {\n\t                    return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n\t                }\n\t                else {\n\t                    return [(k + \":\" + serializeSegment(v, false))];\n\t                }\n\t            });\n\t            return serializePaths(segment) + \"/(\" + children.join('//') + \")\";\n\t        }\n\t        else {\n\t            return serializePaths(segment);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} s\n\t     * @return {?}\n\t     */\n\t    function encode(s) {\n\t        return encodeURIComponent(s);\n\t    }\n\t    /**\n\t     * @param {?} s\n\t     * @return {?}\n\t     */\n\t    function decode(s) {\n\t        return decodeURIComponent(s);\n\t    }\n\t    /**\n\t     * @param {?} path\n\t     * @return {?}\n\t     */\n\t    function serializePath(path) {\n\t        return \"\" + encode(path.path) + serializeParams(path.parameters);\n\t    }\n\t    /**\n\t     * @param {?} params\n\t     * @return {?}\n\t     */\n\t    function serializeParams(params) {\n\t        return pairs(params).map(function (p) { return (\";\" + encode(p.first) + \"=\" + encode(p.second)); }).join('');\n\t    }\n\t    /**\n\t     * @param {?} params\n\t     * @return {?}\n\t     */\n\t    function serializeQueryParams(params) {\n\t        var /** @type {?} */ strParams = Object.keys(params).map(function (name) {\n\t            var /** @type {?} */ value = params[name];\n\t            return Array.isArray(value) ? value.map(function (v) { return (encode(name) + \"=\" + encode(v)); }).join('&') :\n\t                encode(name) + \"=\" + encode(value);\n\t        });\n\t        return strParams.length ? \"?\" + strParams.join(\"&\") : '';\n\t    }\n\t    var Pair = (function () {\n\t        /**\n\t         * @param {?} first\n\t         * @param {?} second\n\t         */\n\t        function Pair(first, second) {\n\t            this.first = first;\n\t            this.second = second;\n\t        }\n\t        return Pair;\n\t    }());\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function pairs(obj) {\n\t        var /** @type {?} */ res = [];\n\t        for (var prop in obj) {\n\t            if (obj.hasOwnProperty(prop)) {\n\t                res.push(new Pair(prop, obj[prop]));\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    var /** @type {?} */ SEGMENT_RE = /^[^\\/()?;=&#]+/;\n\t    /**\n\t     * @param {?} str\n\t     * @return {?}\n\t     */\n\t    function matchSegments(str) {\n\t        SEGMENT_RE.lastIndex = 0;\n\t        var /** @type {?} */ match = str.match(SEGMENT_RE);\n\t        return match ? match[0] : '';\n\t    }\n\t    var /** @type {?} */ QUERY_PARAM_RE = /^[^=?&#]+/;\n\t    /**\n\t     * @param {?} str\n\t     * @return {?}\n\t     */\n\t    function matchQueryParams(str) {\n\t        QUERY_PARAM_RE.lastIndex = 0;\n\t        var /** @type {?} */ match = str.match(SEGMENT_RE);\n\t        return match ? match[0] : '';\n\t    }\n\t    var /** @type {?} */ QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n\t    /**\n\t     * @param {?} str\n\t     * @return {?}\n\t     */\n\t    function matchUrlQueryParamValue(str) {\n\t        QUERY_PARAM_VALUE_RE.lastIndex = 0;\n\t        var /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\n\t        return match ? match[0] : '';\n\t    }\n\t    var UrlParser = (function () {\n\t        /**\n\t         * @param {?} url\n\t         */\n\t        function UrlParser(url) {\n\t            this.url = url;\n\t            this.remaining = url;\n\t        }\n\t        /**\n\t         * @param {?} str\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };\n\t        /**\n\t         * @param {?} str\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.capture = function (str) {\n\t            if (!this.remaining.startsWith(str)) {\n\t                throw new Error(\"Expected \\\"\" + str + \"\\\".\");\n\t            }\n\t            this.remaining = this.remaining.substring(str.length);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.parseRootSegment = function () {\n\t            if (this.remaining.startsWith('/')) {\n\t                this.capture('/');\n\t            }\n\t            if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {\n\t                return new UrlSegmentGroup([], {});\n\t            }\n\t            return new UrlSegmentGroup([], this.parseChildren());\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.parseChildren = function () {\n\t            if (this.remaining.length == 0) {\n\t                return {};\n\t            }\n\t            if (this.peekStartsWith('/')) {\n\t                this.capture('/');\n\t            }\n\t            var /** @type {?} */ paths = [];\n\t            if (!this.peekStartsWith('(')) {\n\t                paths.push(this.parseSegments());\n\t            }\n\t            while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n\t                this.capture('/');\n\t                paths.push(this.parseSegments());\n\t            }\n\t            var /** @type {?} */ children = {};\n\t            if (this.peekStartsWith('/(')) {\n\t                this.capture('/');\n\t                children = this.parseParens(true);\n\t            }\n\t            var /** @type {?} */ res = {};\n\t            if (this.peekStartsWith('(')) {\n\t                res = this.parseParens(false);\n\t            }\n\t            if (paths.length > 0 || Object.keys(children).length > 0) {\n\t                res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);\n\t            }\n\t            return res;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.parseSegments = function () {\n\t            var /** @type {?} */ path = matchSegments(this.remaining);\n\t            if (path === '' && this.peekStartsWith(';')) {\n\t                throw new Error(\"Empty path url segment cannot have parameters: '\" + this.remaining + \"'.\");\n\t            }\n\t            this.capture(path);\n\t            var /** @type {?} */ matrixParams = {};\n\t            if (this.peekStartsWith(';')) {\n\t                matrixParams = this.parseMatrixParams();\n\t            }\n\t            return new UrlSegment(decode(path), matrixParams);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.parseQueryParams = function () {\n\t            var /** @type {?} */ params = {};\n\t            if (this.peekStartsWith('?')) {\n\t                this.capture('?');\n\t                this.parseQueryParam(params);\n\t                while (this.remaining.length > 0 && this.peekStartsWith('&')) {\n\t                    this.capture('&');\n\t                    this.parseQueryParam(params);\n\t                }\n\t            }\n\t            return params;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.parseFragment = function () {\n\t            if (this.peekStartsWith('#')) {\n\t                return decodeURI(this.remaining.substring(1));\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.parseMatrixParams = function () {\n\t            var /** @type {?} */ params = {};\n\t            while (this.remaining.length > 0 && this.peekStartsWith(';')) {\n\t                this.capture(';');\n\t                this.parseParam(params);\n\t            }\n\t            return params;\n\t        };\n\t        /**\n\t         * @param {?} params\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.parseParam = function (params) {\n\t            var /** @type {?} */ key = matchSegments(this.remaining);\n\t            if (!key) {\n\t                return;\n\t            }\n\t            this.capture(key);\n\t            var /** @type {?} */ value = '';\n\t            if (this.peekStartsWith('=')) {\n\t                this.capture('=');\n\t                var /** @type {?} */ valueMatch = matchSegments(this.remaining);\n\t                if (valueMatch) {\n\t                    value = valueMatch;\n\t                    this.capture(value);\n\t                }\n\t            }\n\t            params[decode(key)] = decode(value);\n\t        };\n\t        /**\n\t         * @param {?} params\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.parseQueryParam = function (params) {\n\t            var /** @type {?} */ key = matchQueryParams(this.remaining);\n\t            if (!key) {\n\t                return;\n\t            }\n\t            this.capture(key);\n\t            var /** @type {?} */ value = '';\n\t            if (this.peekStartsWith('=')) {\n\t                this.capture('=');\n\t                var /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\n\t                if (valueMatch) {\n\t                    value = valueMatch;\n\t                    this.capture(value);\n\t                }\n\t            }\n\t            var /** @type {?} */ decodedKey = decode(key);\n\t            var /** @type {?} */ decodedVal = decode(value);\n\t            if (params.hasOwnProperty(decodedKey)) {\n\t                // Append to existing values\n\t                var /** @type {?} */ currentVal = params[decodedKey];\n\t                if (!Array.isArray(currentVal)) {\n\t                    currentVal = [currentVal];\n\t                    params[decodedKey] = currentVal;\n\t                }\n\t                currentVal.push(decodedVal);\n\t            }\n\t            else {\n\t                // Create a new value\n\t                params[decodedKey] = decodedVal;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} allowPrimary\n\t         * @return {?}\n\t         */\n\t        UrlParser.prototype.parseParens = function (allowPrimary) {\n\t            var /** @type {?} */ segments = {};\n\t            this.capture('(');\n\t            while (!this.peekStartsWith(')') && this.remaining.length > 0) {\n\t                var /** @type {?} */ path = matchSegments(this.remaining);\n\t                var /** @type {?} */ next = this.remaining[path.length];\n\t                // if is is not one of these characters, then the segment was unescaped\n\t                // or the group was not closed\n\t                if (next !== '/' && next !== ')' && next !== ';') {\n\t                    throw new Error(\"Cannot parse url '\" + this.url + \"'\");\n\t                }\n\t                var /** @type {?} */ outletName = void 0;\n\t                if (path.indexOf(':') > -1) {\n\t                    outletName = path.substr(0, path.indexOf(':'));\n\t                    this.capture(outletName);\n\t                    this.capture(':');\n\t                }\n\t                else if (allowPrimary) {\n\t                    outletName = PRIMARY_OUTLET;\n\t                }\n\t                var /** @type {?} */ children = this.parseChildren();\n\t                segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n\t                    new UrlSegmentGroup([], children);\n\t                if (this.peekStartsWith('//')) {\n\t                    this.capture('//');\n\t                }\n\t            }\n\t            this.capture(')');\n\t            return segments;\n\t        };\n\t        return UrlParser;\n\t    }());\n\t\n\t    var NoMatch = (function () {\n\t        /**\n\t         * @param {?=} segmentGroup\n\t         */\n\t        function NoMatch(segmentGroup) {\n\t            if (segmentGroup === void 0) { segmentGroup = null; }\n\t            this.segmentGroup = segmentGroup;\n\t        }\n\t        return NoMatch;\n\t    }());\n\t    var AbsoluteRedirect = (function () {\n\t        /**\n\t         * @param {?} urlTree\n\t         */\n\t        function AbsoluteRedirect(urlTree) {\n\t            this.urlTree = urlTree;\n\t        }\n\t        return AbsoluteRedirect;\n\t    }());\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @return {?}\n\t     */\n\t    function noMatch(segmentGroup) {\n\t        return new rxjs_Observable.Observable(function (obs) { return obs.error(new NoMatch(segmentGroup)); });\n\t    }\n\t    /**\n\t     * @param {?} newTree\n\t     * @return {?}\n\t     */\n\t    function absoluteRedirect(newTree) {\n\t        return new rxjs_Observable.Observable(function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });\n\t    }\n\t    /**\n\t     * @param {?} redirectTo\n\t     * @return {?}\n\t     */\n\t    function namedOutletsRedirect(redirectTo) {\n\t        return new rxjs_Observable.Observable(function (obs) { return obs.error(new Error(\"Only absolute redirects can have named outlets. redirectTo: '\" + redirectTo + \"'\")); });\n\t    }\n\t    /**\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function canLoadFails(route) {\n\t        return new rxjs_Observable.Observable(function (obs) { return obs.error(new NavigationCancelingError(\"Cannot load children because the guard of the route \\\"path: '\" + route.path + \"'\\\" returned false\")); });\n\t    }\n\t    /**\n\t     * @param {?} injector\n\t     * @param {?} configLoader\n\t     * @param {?} urlSerializer\n\t     * @param {?} urlTree\n\t     * @param {?} config\n\t     * @return {?}\n\t     */\n\t    function applyRedirects(injector, configLoader, urlSerializer, urlTree, config) {\n\t        return new ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config).apply();\n\t    }\n\t    var ApplyRedirects = (function () {\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} configLoader\n\t         * @param {?} urlSerializer\n\t         * @param {?} urlTree\n\t         * @param {?} config\n\t         */\n\t        function ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config) {\n\t            this.injector = injector;\n\t            this.configLoader = configLoader;\n\t            this.urlSerializer = urlSerializer;\n\t            this.urlTree = urlTree;\n\t            this.config = config;\n\t            this.allowRedirects = true;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.apply = function () {\n\t            var _this = this;\n\t            var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);\n\t            var /** @type {?} */ urlTrees$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, _this.urlTree.fragment); });\n\t            return rxjs_operator_catch._catch.call(urlTrees$, function (e) {\n\t                if (e instanceof AbsoluteRedirect) {\n\t                    // after an absolute redirect we do not apply any more redirects!\n\t                    _this.allowRedirects = false;\n\t                    // we need to run matching, so we can fetch all lazy-loaded modules\n\t                    return _this.match(e.urlTree);\n\t                }\n\t                else if (e instanceof NoMatch) {\n\t                    throw _this.noMatchError(e);\n\t                }\n\t                else {\n\t                    throw e;\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} tree\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.match = function (tree) {\n\t            var _this = this;\n\t            var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.injector, this.config, tree.root, PRIMARY_OUTLET);\n\t            var /** @type {?} */ mapped$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) {\n\t                return _this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment);\n\t            });\n\t            return rxjs_operator_catch._catch.call(mapped$, function (e) {\n\t                if (e instanceof NoMatch) {\n\t                    throw _this.noMatchError(e);\n\t                }\n\t                else {\n\t                    throw e;\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} e\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.noMatchError = function (e) {\n\t            return new Error(\"Cannot match any routes. URL Segment: '\" + e.segmentGroup + \"'\");\n\t        };\n\t        /**\n\t         * @param {?} rootCandidate\n\t         * @param {?} queryParams\n\t         * @param {?} fragment\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {\n\t            var /** @type {?} */ root = rootCandidate.segments.length > 0 ?\n\t                new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :\n\t                rootCandidate;\n\t            return new UrlTree(root, queryParams, fragment);\n\t            var _a;\n\t        };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} routes\n\t         * @param {?} segmentGroup\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.expandSegmentGroup = function (injector, routes, segmentGroup, outlet) {\n\t            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n\t                return rxjs_operator_map.map.call(this.expandChildren(injector, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });\n\t            }\n\t            else {\n\t                return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} routes\n\t         * @param {?} segmentGroup\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.expandChildren = function (injector, routes, segmentGroup) {\n\t            var _this = this;\n\t            return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(injector, routes, child, childOutlet); });\n\t        };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} segmentGroup\n\t         * @param {?} routes\n\t         * @param {?} segments\n\t         * @param {?} outlet\n\t         * @param {?} allowRedirects\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.expandSegment = function (injector, segmentGroup, routes, segments, outlet, allowRedirects) {\n\t            var _this = this;\n\t            var /** @type {?} */ routes$ = rxjs_observable_of.of.apply(void 0, routes);\n\t            var /** @type {?} */ processedRoutes$ = rxjs_operator_map.map.call(routes$, function (r) {\n\t                var /** @type {?} */ expanded$ = _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects);\n\t                return rxjs_operator_catch._catch.call(expanded$, function (e) {\n\t                    if (e instanceof NoMatch)\n\t                        return rxjs_observable_of.of(null);\n\t                    else\n\t                        throw e;\n\t                });\n\t            });\n\t            var /** @type {?} */ concattedProcessedRoutes$ = rxjs_operator_concatAll.concatAll.call(processedRoutes$);\n\t            var /** @type {?} */ first$ = rxjs_operator_first.first.call(concattedProcessedRoutes$, function (s) { return !!s; });\n\t            return rxjs_operator_catch._catch.call(first$, function (e, _) {\n\t                if (e instanceof rxjs_util_EmptyError.EmptyError) {\n\t                    if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n\t                        return rxjs_observable_of.of(new UrlSegmentGroup([], {}));\n\t                    }\n\t                    else {\n\t                        throw new NoMatch(segmentGroup);\n\t                    }\n\t                }\n\t                else {\n\t                    throw e;\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} segmentGroup\n\t         * @param {?} segments\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {\n\t            return segments.length === 0 && !segmentGroup.children[outlet];\n\t        };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} segmentGroup\n\t         * @param {?} routes\n\t         * @param {?} route\n\t         * @param {?} paths\n\t         * @param {?} outlet\n\t         * @param {?} allowRedirects\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.expandSegmentAgainstRoute = function (injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {\n\t            if (getOutlet$1(route) !== outlet)\n\t                return noMatch(segmentGroup);\n\t            if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))\n\t                return noMatch(segmentGroup);\n\t            if (route.redirectTo === undefined) {\n\t                return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);\n\t            }\n\t            else {\n\t                return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} segmentGroup\n\t         * @param {?} routes\n\t         * @param {?} route\n\t         * @param {?} segments\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {\n\t            if (route.path === '**') {\n\t                return this.expandWildCardWithParamsAgainstRouteUsingRedirect(injector, routes, route, outlet);\n\t            }\n\t            else {\n\t                return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} routes\n\t         * @param {?} route\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (injector, routes, route, outlet) {\n\t            var _this = this;\n\t            var /** @type {?} */ newTree = this.applyRedirectCommands([], route.redirectTo, {});\n\t            if (route.redirectTo.startsWith('/')) {\n\t                return absoluteRedirect(newTree);\n\t            }\n\t            else {\n\t                return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {\n\t                    var /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\n\t                    return _this.expandSegment(injector, group, routes, newSegments, outlet, false);\n\t                });\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} segmentGroup\n\t         * @param {?} routes\n\t         * @param {?} route\n\t         * @param {?} segments\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {\n\t            var _this = this;\n\t            var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;\n\t            if (!matched)\n\t                return noMatch(segmentGroup);\n\t            var /** @type {?} */ newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, /** @type {?} */ (positionalParamSegments));\n\t            if (route.redirectTo.startsWith('/')) {\n\t                return absoluteRedirect(newTree);\n\t            }\n\t            else {\n\t                return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {\n\t                    return _this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\n\t                });\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} rawSegmentGroup\n\t         * @param {?} route\n\t         * @param {?} segments\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.matchSegmentAgainstRoute = function (injector, rawSegmentGroup, route, segments) {\n\t            var _this = this;\n\t            if (route.path === '**') {\n\t                if (route.loadChildren) {\n\t                    return rxjs_operator_map.map.call(this.configLoader.load(injector, route.loadChildren), function (r) {\n\t                        ((route))._loadedConfig = r;\n\t                        return new UrlSegmentGroup(segments, {});\n\t                    });\n\t                }\n\t                else {\n\t                    return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));\n\t                }\n\t            }\n\t            else {\n\t                var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments_1 = _a.consumedSegments, lastChild = _a.lastChild;\n\t                if (!matched)\n\t                    return noMatch(rawSegmentGroup);\n\t                var /** @type {?} */ rawSlicedSegments_1 = segments.slice(lastChild);\n\t                var /** @type {?} */ childConfig$ = this.getChildConfig(injector, route);\n\t                return rxjs_operator_mergeMap.mergeMap.call(childConfig$, function (routerConfig) {\n\t                    var /** @type {?} */ childInjector = routerConfig.injector;\n\t                    var /** @type {?} */ childConfig = routerConfig.routes;\n\t                    var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;\n\t                    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n\t                        var /** @type {?} */ expanded$ = _this.expandChildren(childInjector, childConfig, segmentGroup);\n\t                        return rxjs_operator_map.map.call(expanded$, function (children) { return new UrlSegmentGroup(consumedSegments_1, children); });\n\t                    }\n\t                    else if (childConfig.length === 0 && slicedSegments.length === 0) {\n\t                        return rxjs_observable_of.of(new UrlSegmentGroup(consumedSegments_1, {}));\n\t                    }\n\t                    else {\n\t                        var /** @type {?} */ expanded$ = _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n\t                        return rxjs_operator_map.map.call(expanded$, function (cs) { return new UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children); });\n\t                    }\n\t                });\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} route\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.getChildConfig = function (injector, route) {\n\t            var _this = this;\n\t            if (route.children) {\n\t                return rxjs_observable_of.of(new LoadedRouterConfig(route.children, injector, null, null));\n\t            }\n\t            else if (route.loadChildren) {\n\t                return rxjs_operator_mergeMap.mergeMap.call(runGuards(injector, route), function (shouldLoad) {\n\t                    if (shouldLoad) {\n\t                        if (((route))._loadedConfig) {\n\t                            return rxjs_observable_of.of(((route))._loadedConfig);\n\t                        }\n\t                        else {\n\t                            return rxjs_operator_map.map.call(_this.configLoader.load(injector, route.loadChildren), function (r) {\n\t                                ((route))._loadedConfig = r;\n\t                                return r;\n\t                            });\n\t                        }\n\t                    }\n\t                    else {\n\t                        return canLoadFails(route);\n\t                    }\n\t                });\n\t            }\n\t            else {\n\t                return rxjs_observable_of.of(new LoadedRouterConfig([], injector, null, null));\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} route\n\t         * @param {?} urlTree\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {\n\t            var /** @type {?} */ res = [];\n\t            var /** @type {?} */ c = urlTree.root;\n\t            while (true) {\n\t                res = res.concat(c.segments);\n\t                if (c.numberOfChildren === 0) {\n\t                    return rxjs_observable_of.of(res);\n\t                }\n\t                else if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n\t                    return namedOutletsRedirect(route.redirectTo);\n\t                }\n\t                else {\n\t                    c = c.children[PRIMARY_OUTLET];\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} segments\n\t         * @param {?} redirectTo\n\t         * @param {?} posParams\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {\n\t            var /** @type {?} */ t = this.urlSerializer.parse(redirectTo);\n\t            return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n\t        };\n\t        /**\n\t         * @param {?} redirectTo\n\t         * @param {?} urlTree\n\t         * @param {?} segments\n\t         * @param {?} posParams\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {\n\t            var /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n\t            return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n\t        };\n\t        /**\n\t         * @param {?} redirectToParams\n\t         * @param {?} actualParams\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {\n\t            var /** @type {?} */ res = {};\n\t            forEach(redirectToParams, function (v, k) {\n\t                if (v.startsWith(':')) {\n\t                    res[k] = actualParams[v.substring(1)];\n\t                }\n\t                else {\n\t                    res[k] = v;\n\t                }\n\t            });\n\t            return res;\n\t        };\n\t        /**\n\t         * @param {?} redirectTo\n\t         * @param {?} group\n\t         * @param {?} segments\n\t         * @param {?} posParams\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {\n\t            var _this = this;\n\t            var /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\t            var /** @type {?} */ children = {};\n\t            forEach(group.children, function (child, name) {\n\t                children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);\n\t            });\n\t            return new UrlSegmentGroup(updatedSegments, children);\n\t        };\n\t        /**\n\t         * @param {?} redirectTo\n\t         * @param {?} redirectToSegments\n\t         * @param {?} actualSegments\n\t         * @param {?} posParams\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {\n\t            var _this = this;\n\t            return redirectToSegments.map(function (s) { return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :\n\t                _this.findOrReturn(s, actualSegments); });\n\t        };\n\t        /**\n\t         * @param {?} redirectTo\n\t         * @param {?} redirectToUrlSegment\n\t         * @param {?} posParams\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {\n\t            var /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\n\t            if (!pos)\n\t                throw new Error(\"Cannot redirect to '\" + redirectTo + \"'. Cannot find '\" + redirectToUrlSegment.path + \"'.\");\n\t            return pos;\n\t        };\n\t        /**\n\t         * @param {?} redirectToUrlSegment\n\t         * @param {?} actualSegments\n\t         * @return {?}\n\t         */\n\t        ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {\n\t            var /** @type {?} */ idx = 0;\n\t            for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {\n\t                var s = actualSegments_1[_i];\n\t                if (s.path === redirectToUrlSegment.path) {\n\t                    actualSegments.splice(idx);\n\t                    return s;\n\t                }\n\t                idx++;\n\t            }\n\t            return redirectToUrlSegment;\n\t        };\n\t        return ApplyRedirects;\n\t    }());\n\t    /**\n\t     * @param {?} injector\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function runGuards(injector, route) {\n\t        var /** @type {?} */ canLoad = route.canLoad;\n\t        if (!canLoad || canLoad.length === 0)\n\t            return rxjs_observable_of.of(true);\n\t        var /** @type {?} */ obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canLoad), function (c) {\n\t            var /** @type {?} */ guard = injector.get(c);\n\t            if (guard.canLoad) {\n\t                return wrapIntoObservable(guard.canLoad(route));\n\t            }\n\t            else {\n\t                return wrapIntoObservable(guard(route));\n\t            }\n\t        });\n\t        return andObservables(obs);\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} route\n\t     * @param {?} segments\n\t     * @return {?}\n\t     */\n\t    function match(segmentGroup, route, segments) {\n\t        var /** @type {?} */ noMatch = { matched: false, consumedSegments: /** @type {?} */ ([]), lastChild: 0, positionalParamSegments: {} };\n\t        if (route.path === '') {\n\t            if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n\t                return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n\t            }\n\t            else {\n\t                return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n\t            }\n\t        }\n\t        var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n\t        var /** @type {?} */ res = matcher(segments, segmentGroup, route);\n\t        if (!res)\n\t            return noMatch;\n\t        return {\n\t            matched: true,\n\t            consumedSegments: res.consumed,\n\t            lastChild: res.consumed.length,\n\t            positionalParamSegments: res.posParams\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} consumedSegments\n\t     * @param {?} slicedSegments\n\t     * @param {?} config\n\t     * @return {?}\n\t     */\n\t    function split(segmentGroup, consumedSegments, slicedSegments, config) {\n\t        if (slicedSegments.length > 0 &&\n\t            containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n\t            var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n\t            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\n\t        }\n\t        else if (slicedSegments.length === 0 &&\n\t            containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n\t            var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n\t            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };\n\t        }\n\t        else {\n\t            return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} s\n\t     * @return {?}\n\t     */\n\t    function mergeTrivialChildren(s) {\n\t        if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n\t            var /** @type {?} */ c = s.children[PRIMARY_OUTLET];\n\t            return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n\t        }\n\t        else {\n\t            return s;\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} slicedSegments\n\t     * @param {?} routes\n\t     * @param {?} children\n\t     * @return {?}\n\t     */\n\t    function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n\t        var /** @type {?} */ res = {};\n\t        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n\t            var r = routes_1[_i];\n\t            if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {\n\t                res[getOutlet$1(r)] = new UrlSegmentGroup([], {});\n\t            }\n\t        }\n\t        return merge(children, res);\n\t    }\n\t    /**\n\t     * @param {?} routes\n\t     * @param {?} primarySegmentGroup\n\t     * @return {?}\n\t     */\n\t    function createChildrenForEmptySegments(routes, primarySegmentGroup) {\n\t        var /** @type {?} */ res = {};\n\t        res[PRIMARY_OUTLET] = primarySegmentGroup;\n\t        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n\t            var r = routes_2[_i];\n\t            if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {\n\t                res[getOutlet$1(r)] = new UrlSegmentGroup([], {});\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} slicedSegments\n\t     * @param {?} routes\n\t     * @return {?}\n\t     */\n\t    function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n\t        return routes\n\t            .filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r) &&\n\t            getOutlet$1(r) !== PRIMARY_OUTLET; })\n\t            .length > 0;\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} slicedSegments\n\t     * @param {?} routes\n\t     * @return {?}\n\t     */\n\t    function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {\n\t        return routes.filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r); }).length > 0;\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} slicedSegments\n\t     * @param {?} r\n\t     * @return {?}\n\t     */\n\t    function emptyPathRedirect(segmentGroup, slicedSegments, r) {\n\t        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n\t            return false;\n\t        return r.path === '' && r.redirectTo !== undefined;\n\t    }\n\t    /**\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function getOutlet$1(route) {\n\t        return route.outlet ? route.outlet : PRIMARY_OUTLET;\n\t    }\n\t\n\t    /**\n\t     * @param {?} config\n\t     * @param {?=} parentPath\n\t     * @return {?}\n\t     */\n\t    function validateConfig(config, parentPath) {\n\t        if (parentPath === void 0) { parentPath = ''; }\n\t        // forEach doesn't iterate undefined values\n\t        for (var /** @type {?} */ i = 0; i < config.length; i++) {\n\t            var /** @type {?} */ route = config[i];\n\t            var /** @type {?} */ fullPath = getFullPath(parentPath, route);\n\t            validateNode(route, fullPath);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} route\n\t     * @param {?} fullPath\n\t     * @return {?}\n\t     */\n\t    function validateNode(route, fullPath) {\n\t        if (!route) {\n\t            throw new Error(\"\\n      Invalid configuration of route '\" + fullPath + \"': Encountered undefined route.\\n      The reason might be an extra comma.\\n       \\n      Example: \\n      const routes: Routes = [\\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\\n        { path: 'detail/:id', component: HeroDetailComponent }\\n      ];\\n    \");\n\t        }\n\t        if (Array.isArray(route)) {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': Array cannot be specified\");\n\t        }\n\t        if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': a componentless route cannot have a named outlet set\");\n\t        }\n\t        if (route.redirectTo && route.children) {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and children cannot be used together\");\n\t        }\n\t        if (route.redirectTo && route.loadChildren) {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and loadChildren cannot be used together\");\n\t        }\n\t        if (route.children && route.loadChildren) {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': children and loadChildren cannot be used together\");\n\t        }\n\t        if (route.redirectTo && route.component) {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and component cannot be used together\");\n\t        }\n\t        if (route.path && route.matcher) {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path and matcher cannot be used together\");\n\t        }\n\t        if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"'. One of the following must be provided: component, redirectTo, children or loadChildren\");\n\t        }\n\t        if (route.path === void 0 && route.matcher === void 0) {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': routes must have either a path or a matcher specified\");\n\t        }\n\t        if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path cannot start with a slash\");\n\t        }\n\t        if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n\t            var /** @type {?} */ exp = \"The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.\";\n\t            throw new Error(\"Invalid configuration of route '{path: \\\"\" + fullPath + \"\\\", redirectTo: \\\"\" + route.redirectTo + \"\\\"}': please provide 'pathMatch'. \" + exp);\n\t        }\n\t        if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n\t            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': pathMatch can only be set to 'prefix' or 'full'\");\n\t        }\n\t        if (route.children) {\n\t            validateConfig(route.children, fullPath);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} parentPath\n\t     * @param {?} currentRoute\n\t     * @return {?}\n\t     */\n\t    function getFullPath(parentPath, currentRoute) {\n\t        if (!currentRoute) {\n\t            return parentPath;\n\t        }\n\t        if (!parentPath && !currentRoute.path) {\n\t            return '';\n\t        }\n\t        else if (parentPath && !currentRoute.path) {\n\t            return parentPath + \"/\";\n\t        }\n\t        else if (!parentPath && currentRoute.path) {\n\t            return currentRoute.path;\n\t        }\n\t        else {\n\t            return parentPath + \"/\" + currentRoute.path;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var Tree = (function () {\n\t        /**\n\t         * @param {?} root\n\t         */\n\t        function Tree(root) {\n\t            this._root = root;\n\t        }\n\t        Object.defineProperty(Tree.prototype, \"root\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._root.value; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * \\@internal\n\t         * @param {?} t\n\t         * @return {?}\n\t         */\n\t        Tree.prototype.parent = function (t) {\n\t            var /** @type {?} */ p = this.pathFromRoot(t);\n\t            return p.length > 1 ? p[p.length - 2] : null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} t\n\t         * @return {?}\n\t         */\n\t        Tree.prototype.children = function (t) {\n\t            var /** @type {?} */ n = findNode(t, this._root);\n\t            return n ? n.children.map(function (t) { return t.value; }) : [];\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} t\n\t         * @return {?}\n\t         */\n\t        Tree.prototype.firstChild = function (t) {\n\t            var /** @type {?} */ n = findNode(t, this._root);\n\t            return n && n.children.length > 0 ? n.children[0].value : null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} t\n\t         * @return {?}\n\t         */\n\t        Tree.prototype.siblings = function (t) {\n\t            var /** @type {?} */ p = findPath(t, this._root, []);\n\t            if (p.length < 2)\n\t                return [];\n\t            var /** @type {?} */ c = p[p.length - 2].children.map(function (c) { return c.value; });\n\t            return c.filter(function (cc) { return cc !== t; });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} t\n\t         * @return {?}\n\t         */\n\t        Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root, []).map(function (s) { return s.value; }); };\n\t        return Tree;\n\t    }());\n\t    /**\n\t     * @param {?} expected\n\t     * @param {?} c\n\t     * @return {?}\n\t     */\n\t    function findNode(expected, c) {\n\t        if (expected === c.value)\n\t            return c;\n\t        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {\n\t            var cc = _a[_i];\n\t            var /** @type {?} */ r = findNode(expected, cc);\n\t            if (r)\n\t                return r;\n\t        }\n\t        return null;\n\t    }\n\t    /**\n\t     * @param {?} expected\n\t     * @param {?} c\n\t     * @param {?} collected\n\t     * @return {?}\n\t     */\n\t    function findPath(expected, c, collected) {\n\t        collected.push(c);\n\t        if (expected === c.value)\n\t            return collected;\n\t        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {\n\t            var cc = _a[_i];\n\t            var /** @type {?} */ cloned = collected.slice(0);\n\t            var /** @type {?} */ r = findPath(expected, cc, cloned);\n\t            if (r.length > 0)\n\t                return r;\n\t        }\n\t        return [];\n\t    }\n\t    var TreeNode = (function () {\n\t        /**\n\t         * @param {?} value\n\t         * @param {?} children\n\t         */\n\t        function TreeNode(value, children) {\n\t            this.value = value;\n\t            this.children = children;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TreeNode.prototype.toString = function () { return \"TreeNode(\" + this.value + \")\"; };\n\t        return TreeNode;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$1 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * \\@whatItDoes Represents the state of the router.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * ```\n\t     * \\@Component({templateUrl:'template.html'})\n\t     * class MyComponent {\n\t     *   constructor(router: Router) {\n\t     *     const state: RouterState = router.routerState;\n\t     *     const root: ActivatedRoute = state.root;\n\t     *     const child = root.firstChild;\n\t     *     const id: Observable<string> = child.params.map(p => p.id);\n\t     *     //...\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * \\@description\n\t     * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n\t     * segments,\n\t     * the extracted parameters, and the resolved data.\n\t     *\n\t     * See {\\@link ActivatedRoute} for more information.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RouterState = (function (_super) {\n\t        __extends$1(RouterState, _super);\n\t        /**\n\t         * \\@internal\n\t         * @param {?} root\n\t         * @param {?} snapshot\n\t         */\n\t        function RouterState(root, snapshot) {\n\t            _super.call(this, root);\n\t            this.snapshot = snapshot;\n\t            setRouterStateSnapshot(this, root);\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterState.prototype.toString = function () { return this.snapshot.toString(); };\n\t        return RouterState;\n\t    }(Tree));\n\t    /**\n\t     * @param {?} urlTree\n\t     * @param {?} rootComponent\n\t     * @return {?}\n\t     */\n\t    function createEmptyState(urlTree, rootComponent) {\n\t        var /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n\t        var /** @type {?} */ emptyUrl = new rxjs_BehaviorSubject.BehaviorSubject([new UrlSegment('', {})]);\n\t        var /** @type {?} */ emptyParams = new rxjs_BehaviorSubject.BehaviorSubject({});\n\t        var /** @type {?} */ emptyData = new rxjs_BehaviorSubject.BehaviorSubject({});\n\t        var /** @type {?} */ emptyQueryParams = new rxjs_BehaviorSubject.BehaviorSubject({});\n\t        var /** @type {?} */ fragment = new rxjs_BehaviorSubject.BehaviorSubject('');\n\t        var /** @type {?} */ activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n\t        activated.snapshot = snapshot.root;\n\t        return new RouterState(new TreeNode(activated, []), snapshot);\n\t    }\n\t    /**\n\t     * @param {?} urlTree\n\t     * @param {?} rootComponent\n\t     * @return {?}\n\t     */\n\t    function createEmptyStateSnapshot(urlTree, rootComponent) {\n\t        var /** @type {?} */ emptyParams = {};\n\t        var /** @type {?} */ emptyData = {};\n\t        var /** @type {?} */ emptyQueryParams = {};\n\t        var /** @type {?} */ fragment = '';\n\t        var /** @type {?} */ activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\n\t        return new RouterStateSnapshot('', new TreeNode(activated, []));\n\t    }\n\t    /**\n\t     * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n\t     * outlet.\n\t     * An `ActivatedRoute` can also be used to traverse the router state tree.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * ```\n\t     * \\@Component({...})\n\t     * class MyComponent {\n\t     *   constructor(route: ActivatedRoute) {\n\t     *     const id: Observable<string> = route.params.map(p => p.id);\n\t     *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n\t     *     // route.data includes both `data` and `resolve`\n\t     *     const user = route.data.map(d => d.user);\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * \\@stable\n\t     */\n\t    var ActivatedRoute = (function () {\n\t        /**\n\t         * \\@internal\n\t         * @param {?} url\n\t         * @param {?} params\n\t         * @param {?} queryParams\n\t         * @param {?} fragment\n\t         * @param {?} data\n\t         * @param {?} outlet\n\t         * @param {?} component\n\t         * @param {?} futureSnapshot\n\t         */\n\t        function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {\n\t            this.url = url;\n\t            this.params = params;\n\t            this.queryParams = queryParams;\n\t            this.fragment = fragment;\n\t            this.data = data;\n\t            this.outlet = outlet;\n\t            this.component = component;\n\t            this._futureSnapshot = futureSnapshot;\n\t        }\n\t        Object.defineProperty(ActivatedRoute.prototype, \"routeConfig\", {\n\t            /**\n\t             * The configuration used to match this route\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._futureSnapshot.routeConfig; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ActivatedRoute.prototype, \"root\", {\n\t            /**\n\t             * The root of the router state\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routerState.root; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ActivatedRoute.prototype, \"parent\", {\n\t            /**\n\t             * The parent of this route in the router state tree\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routerState.parent(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ActivatedRoute.prototype, \"firstChild\", {\n\t            /**\n\t             * The first child of this route in the router state tree\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routerState.firstChild(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ActivatedRoute.prototype, \"children\", {\n\t            /**\n\t             * The children of this route in the router state tree\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routerState.children(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ActivatedRoute.prototype, \"pathFromRoot\", {\n\t            /**\n\t             * The path from the root of the router state tree to this route\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routerState.pathFromRoot(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ActivatedRoute.prototype.toString = function () {\n\t            return this.snapshot ? this.snapshot.toString() : \"Future(\" + this._futureSnapshot + \")\";\n\t        };\n\t        return ActivatedRoute;\n\t    }());\n\t    /**\n\t     * \\@internal\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function inheritedParamsDataResolve(route) {\n\t        var /** @type {?} */ pathToRoot = route.pathFromRoot;\n\t        var /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\n\t        while (inhertingStartingFrom >= 1) {\n\t            var /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\n\t            var /** @type {?} */ parent_1 = pathToRoot[inhertingStartingFrom - 1];\n\t            // current route is an empty path => inherits its parent's params and data\n\t            if (current.routeConfig && current.routeConfig.path === '') {\n\t                inhertingStartingFrom--;\n\t            }\n\t            else if (!parent_1.component) {\n\t                inhertingStartingFrom--;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {\n\t            var /** @type {?} */ params = merge(res.params, curr.params);\n\t            var /** @type {?} */ data = merge(res.data, curr.data);\n\t            var /** @type {?} */ resolve = merge(res.resolve, curr._resolvedData);\n\t            return { params: params, data: data, resolve: resolve };\n\t        }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));\n\t    }\n\t    /**\n\t     * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n\t     * outlet\n\t     * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n\t     * state tree.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * ```\n\t     * \\@Component({templateUrl:'./my-component.html'})\n\t     * class MyComponent {\n\t     *   constructor(route: ActivatedRoute) {\n\t     *     const id: string = route.snapshot.params.id;\n\t     *     const url: string = route.snapshot.url.join('');\n\t     *     const user = route.snapshot.data.user;\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * \\@stable\n\t     */\n\t    var ActivatedRouteSnapshot = (function () {\n\t        /**\n\t         * \\@internal\n\t         * @param {?} url\n\t         * @param {?} params\n\t         * @param {?} queryParams\n\t         * @param {?} fragment\n\t         * @param {?} data\n\t         * @param {?} outlet\n\t         * @param {?} component\n\t         * @param {?} routeConfig\n\t         * @param {?} urlSegment\n\t         * @param {?} lastPathIndex\n\t         * @param {?} resolve\n\t         */\n\t        function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {\n\t            this.url = url;\n\t            this.params = params;\n\t            this.queryParams = queryParams;\n\t            this.fragment = fragment;\n\t            this.data = data;\n\t            this.outlet = outlet;\n\t            this.component = component;\n\t            this._routeConfig = routeConfig;\n\t            this._urlSegment = urlSegment;\n\t            this._lastPathIndex = lastPathIndex;\n\t            this._resolve = resolve;\n\t        }\n\t        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"routeConfig\", {\n\t            /**\n\t             * The configuration used to match this route\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routeConfig; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"root\", {\n\t            /**\n\t             * The root of the router state\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routerState.root; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"parent\", {\n\t            /**\n\t             * The parent of this route in the router state tree\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routerState.parent(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"firstChild\", {\n\t            /**\n\t             * The first child of this route in the router state tree\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routerState.firstChild(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"children\", {\n\t            /**\n\t             * The children of this route in the router state tree\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routerState.children(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"pathFromRoot\", {\n\t            /**\n\t             * The path from the root of the router state tree to this route\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._routerState.pathFromRoot(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ActivatedRouteSnapshot.prototype.toString = function () {\n\t            var /** @type {?} */ url = this.url.map(function (segment) { return segment.toString(); }).join('/');\n\t            var /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';\n\t            return \"Route(url:'\" + url + \"', path:'\" + matched + \"')\";\n\t        };\n\t        return ActivatedRouteSnapshot;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Represents the state of the router at a moment in time.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * ```\n\t     * \\@Component({templateUrl:'template.html'})\n\t     * class MyComponent {\n\t     *   constructor(router: Router) {\n\t     *     const state: RouterState = router.routerState;\n\t     *     const snapshot: RouterStateSnapshot = state.snapshot;\n\t     *     const root: ActivatedRouteSnapshot = snapshot.root;\n\t     *     const child = root.firstChild;\n\t     *     const id: Observable<string> = child.params.map(p => p.id);\n\t     *     //...\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * \\@description\n\t     * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n\t     * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RouterStateSnapshot = (function (_super) {\n\t        __extends$1(RouterStateSnapshot, _super);\n\t        /**\n\t         * \\@internal\n\t         * @param {?} url\n\t         * @param {?} root\n\t         */\n\t        function RouterStateSnapshot(url, root) {\n\t            _super.call(this, root);\n\t            this.url = url;\n\t            setRouterStateSnapshot(this, root);\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };\n\t        return RouterStateSnapshot;\n\t    }(Tree));\n\t    /**\n\t     * @param {?} state\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    function setRouterStateSnapshot(state, node) {\n\t        node.value._routerState = state;\n\t        node.children.forEach(function (c) { return setRouterStateSnapshot(state, c); });\n\t    }\n\t    /**\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    function serializeNode(node) {\n\t        var /** @type {?} */ c = node.children.length > 0 ? \" { \" + node.children.map(serializeNode).join(\", \") + \" } \" : '';\n\t        return \"\" + node.value + c;\n\t    }\n\t    /**\n\t     * The expectation is that the activate route is created with the right set of parameters.\n\t     * So we push new values into the observables only when they are not the initial values.\n\t     * And we detect that by checking if the snapshot field is set.\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function advanceActivatedRoute(route) {\n\t        if (route.snapshot) {\n\t            var /** @type {?} */ currentSnapshot = route.snapshot;\n\t            route.snapshot = route._futureSnapshot;\n\t            if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {\n\t                ((route.queryParams)).next(route._futureSnapshot.queryParams);\n\t            }\n\t            if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {\n\t                ((route.fragment)).next(route._futureSnapshot.fragment);\n\t            }\n\t            if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {\n\t                ((route.params)).next(route._futureSnapshot.params);\n\t            }\n\t            if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {\n\t                ((route.url)).next(route._futureSnapshot.url);\n\t            }\n\t            if (!equalParamsAndUrlSegments(currentSnapshot, route._futureSnapshot)) {\n\t                ((route.data)).next(route._futureSnapshot.data);\n\t            }\n\t        }\n\t        else {\n\t            route.snapshot = route._futureSnapshot;\n\t            // this is for resolved data\n\t            ((route.data)).next(route._futureSnapshot.data);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function equalParamsAndUrlSegments(a, b) {\n\t        return shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n\t    }\n\t\n\t    /**\n\t     * @param {?} routeReuseStrategy\n\t     * @param {?} curr\n\t     * @param {?} prevState\n\t     * @return {?}\n\t     */\n\t    function createRouterState(routeReuseStrategy, curr, prevState) {\n\t        var /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n\t        return new RouterState(root, curr);\n\t    }\n\t    /**\n\t     * @param {?} routeReuseStrategy\n\t     * @param {?} curr\n\t     * @param {?=} prevState\n\t     * @return {?}\n\t     */\n\t    function createNode(routeReuseStrategy, curr, prevState) {\n\t        // reuse an activated route that is currently displayed on the screen\n\t        if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n\t            var /** @type {?} */ value = prevState.value;\n\t            value._futureSnapshot = curr.value;\n\t            var /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n\t            return new TreeNode(value, children);\n\t        }\n\t        else if (routeReuseStrategy.retrieve(curr.value)) {\n\t            var /** @type {?} */ tree = ((routeReuseStrategy.retrieve(curr.value))).route;\n\t            setFutureSnapshotsOfActivatedRoutes(curr, tree);\n\t            return tree;\n\t        }\n\t        else {\n\t            var /** @type {?} */ value = createActivatedRoute(curr.value);\n\t            var /** @type {?} */ children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });\n\t            return new TreeNode(value, children);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} curr\n\t     * @param {?} result\n\t     * @return {?}\n\t     */\n\t    function setFutureSnapshotsOfActivatedRoutes(curr, result) {\n\t        if (curr.value.routeConfig !== result.value.routeConfig) {\n\t            throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n\t        }\n\t        if (curr.children.length !== result.children.length) {\n\t            throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n\t        }\n\t        result.value._futureSnapshot = curr.value;\n\t        for (var /** @type {?} */ i = 0; i < curr.children.length; ++i) {\n\t            setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} routeReuseStrategy\n\t     * @param {?} curr\n\t     * @param {?} prevState\n\t     * @return {?}\n\t     */\n\t    function createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n\t        return curr.children.map(function (child) {\n\t            for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {\n\t                var p = _a[_i];\n\t                if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n\t                    return createNode(routeReuseStrategy, child, p);\n\t                }\n\t            }\n\t            return createNode(routeReuseStrategy, child);\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} c\n\t     * @return {?}\n\t     */\n\t    function createActivatedRoute(c) {\n\t        return new ActivatedRoute(new rxjs_BehaviorSubject.BehaviorSubject(c.url), new rxjs_BehaviorSubject.BehaviorSubject(c.params), new rxjs_BehaviorSubject.BehaviorSubject(c.queryParams), new rxjs_BehaviorSubject.BehaviorSubject(c.fragment), new rxjs_BehaviorSubject.BehaviorSubject(c.data), c.outlet, c.component, c);\n\t    }\n\t\n\t    /**\n\t     * @param {?} route\n\t     * @param {?} urlTree\n\t     * @param {?} commands\n\t     * @param {?} queryParams\n\t     * @param {?} fragment\n\t     * @return {?}\n\t     */\n\t    function createUrlTree(route, urlTree, commands, queryParams, fragment) {\n\t        if (commands.length === 0) {\n\t            return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n\t        }\n\t        var /** @type {?} */ nav = computeNavigation(commands);\n\t        if (nav.toRoot()) {\n\t            return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n\t        }\n\t        var /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\n\t        var /** @type {?} */ segmentGroup = startingPosition.processChildren ?\n\t            updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n\t            updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n\t        return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n\t    }\n\t    /**\n\t     * @param {?} command\n\t     * @return {?}\n\t     */\n\t    function isMatrixParams(command) {\n\t        return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n\t    }\n\t    /**\n\t     * @param {?} oldSegmentGroup\n\t     * @param {?} newSegmentGroup\n\t     * @param {?} urlTree\n\t     * @param {?} queryParams\n\t     * @param {?} fragment\n\t     * @return {?}\n\t     */\n\t    function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\n\t        if (urlTree.root === oldSegmentGroup) {\n\t            return new UrlTree(newSegmentGroup, stringify(queryParams), fragment);\n\t        }\n\t        return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams), fragment);\n\t    }\n\t    /**\n\t     * @param {?} current\n\t     * @param {?} oldSegment\n\t     * @param {?} newSegment\n\t     * @return {?}\n\t     */\n\t    function replaceSegment(current, oldSegment, newSegment) {\n\t        var /** @type {?} */ children = {};\n\t        forEach(current.children, function (c, outletName) {\n\t            if (c === oldSegment) {\n\t                children[outletName] = newSegment;\n\t            }\n\t            else {\n\t                children[outletName] = replaceSegment(c, oldSegment, newSegment);\n\t            }\n\t        });\n\t        return new UrlSegmentGroup(current.segments, children);\n\t    }\n\t    var Navigation = (function () {\n\t        /**\n\t         * @param {?} isAbsolute\n\t         * @param {?} numberOfDoubleDots\n\t         * @param {?} commands\n\t         */\n\t        function Navigation(isAbsolute, numberOfDoubleDots, commands) {\n\t            this.isAbsolute = isAbsolute;\n\t            this.numberOfDoubleDots = numberOfDoubleDots;\n\t            this.commands = commands;\n\t            if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n\t                throw new Error('Root segment cannot have matrix parameters');\n\t            }\n\t            var cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });\n\t            if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n\t                throw new Error('{outlets:{}} has to be the last command');\n\t            }\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Navigation.prototype.toRoot = function () {\n\t            return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n\t        };\n\t        return Navigation;\n\t    }());\n\t    /**\n\t     * Transforms commands to a normalized `Navigation`\n\t     * @param {?} commands\n\t     * @return {?}\n\t     */\n\t    function computeNavigation(commands) {\n\t        if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n\t            return new Navigation(true, 0, commands);\n\t        }\n\t        var /** @type {?} */ numberOfDoubleDots = 0;\n\t        var /** @type {?} */ isAbsolute = false;\n\t        var /** @type {?} */ res = commands.reduce(function (res, cmd, cmdIdx) {\n\t            if (typeof cmd === 'object' && cmd != null) {\n\t                if (cmd.outlets) {\n\t                    var /** @type {?} */ outlets_1 = {};\n\t                    forEach(cmd.outlets, function (commands, name) {\n\t                        outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;\n\t                    });\n\t                    return res.concat([{ outlets: outlets_1 }]);\n\t                }\n\t                if (cmd.segmentPath) {\n\t                    return res.concat([cmd.segmentPath]);\n\t                }\n\t            }\n\t            if (!(typeof cmd === 'string')) {\n\t                return res.concat([cmd]);\n\t            }\n\t            if (cmdIdx === 0) {\n\t                cmd.split('/').forEach(function (urlPart, partIndex) {\n\t                    if (partIndex == 0 && urlPart === '.') {\n\t                    }\n\t                    else if (partIndex == 0 && urlPart === '') {\n\t                        isAbsolute = true;\n\t                    }\n\t                    else if (urlPart === '..') {\n\t                        numberOfDoubleDots++;\n\t                    }\n\t                    else if (urlPart != '') {\n\t                        res.push(urlPart);\n\t                    }\n\t                });\n\t                return res;\n\t            }\n\t            return res.concat([cmd]);\n\t        }, []);\n\t        return new Navigation(isAbsolute, numberOfDoubleDots, res);\n\t    }\n\t    var Position = (function () {\n\t        /**\n\t         * @param {?} segmentGroup\n\t         * @param {?} processChildren\n\t         * @param {?} index\n\t         */\n\t        function Position(segmentGroup, processChildren, index) {\n\t            this.segmentGroup = segmentGroup;\n\t            this.processChildren = processChildren;\n\t            this.index = index;\n\t        }\n\t        return Position;\n\t    }());\n\t    /**\n\t     * @param {?} nav\n\t     * @param {?} tree\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function findStartingPosition(nav, tree, route) {\n\t        if (nav.isAbsolute) {\n\t            return new Position(tree.root, true, 0);\n\t        }\n\t        if (route.snapshot._lastPathIndex === -1) {\n\t            return new Position(route.snapshot._urlSegment, true, 0);\n\t        }\n\t        var /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n\t        var /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\n\t        return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n\t    }\n\t    /**\n\t     * @param {?} group\n\t     * @param {?} index\n\t     * @param {?} numberOfDoubleDots\n\t     * @return {?}\n\t     */\n\t    function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n\t        var /** @type {?} */ g = group;\n\t        var /** @type {?} */ ci = index;\n\t        var /** @type {?} */ dd = numberOfDoubleDots;\n\t        while (dd > ci) {\n\t            dd -= ci;\n\t            g = g.parent;\n\t            if (!g) {\n\t                throw new Error('Invalid number of \\'../\\'');\n\t            }\n\t            ci = g.segments.length;\n\t        }\n\t        return new Position(g, false, ci - dd);\n\t    }\n\t    /**\n\t     * @param {?} command\n\t     * @return {?}\n\t     */\n\t    function getPath(command) {\n\t        if (typeof command === 'object' && command != null && command.outlets) {\n\t            return command.outlets[PRIMARY_OUTLET];\n\t        }\n\t        return \"\" + command;\n\t    }\n\t    /**\n\t     * @param {?} commands\n\t     * @return {?}\n\t     */\n\t    function getOutlets(commands) {\n\t        if (!(typeof commands[0] === 'object'))\n\t            return (_a = {}, _a[PRIMARY_OUTLET] = commands, _a);\n\t        if (commands[0].outlets === undefined)\n\t            return (_b = {}, _b[PRIMARY_OUTLET] = commands, _b);\n\t        return commands[0].outlets;\n\t        var _a, _b;\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} startIndex\n\t     * @param {?} commands\n\t     * @return {?}\n\t     */\n\t    function updateSegmentGroup(segmentGroup, startIndex, commands) {\n\t        if (!segmentGroup) {\n\t            segmentGroup = new UrlSegmentGroup([], {});\n\t        }\n\t        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n\t            return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n\t        }\n\t        var /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\n\t        var /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\n\t        if (m.match && m.pathIndex < segmentGroup.segments.length) {\n\t            var /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n\t            g.children[PRIMARY_OUTLET] =\n\t                new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n\t            return updateSegmentGroupChildren(g, 0, slicedCommands);\n\t        }\n\t        else if (m.match && slicedCommands.length === 0) {\n\t            return new UrlSegmentGroup(segmentGroup.segments, {});\n\t        }\n\t        else if (m.match && !segmentGroup.hasChildren()) {\n\t            return createNewSegmentGroup(segmentGroup, startIndex, commands);\n\t        }\n\t        else if (m.match) {\n\t            return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n\t        }\n\t        else {\n\t            return createNewSegmentGroup(segmentGroup, startIndex, commands);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} startIndex\n\t     * @param {?} commands\n\t     * @return {?}\n\t     */\n\t    function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n\t        if (commands.length === 0) {\n\t            return new UrlSegmentGroup(segmentGroup.segments, {});\n\t        }\n\t        else {\n\t            var /** @type {?} */ outlets_2 = getOutlets(commands);\n\t            var /** @type {?} */ children_1 = {};\n\t            forEach(outlets_2, function (commands, outlet) {\n\t                if (commands !== null) {\n\t                    children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n\t                }\n\t            });\n\t            forEach(segmentGroup.children, function (child, childOutlet) {\n\t                if (outlets_2[childOutlet] === undefined) {\n\t                    children_1[childOutlet] = child;\n\t                }\n\t            });\n\t            return new UrlSegmentGroup(segmentGroup.segments, children_1);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} startIndex\n\t     * @param {?} commands\n\t     * @return {?}\n\t     */\n\t    function prefixedWith(segmentGroup, startIndex, commands) {\n\t        var /** @type {?} */ currentCommandIndex = 0;\n\t        var /** @type {?} */ currentPathIndex = startIndex;\n\t        var /** @type {?} */ noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\n\t        while (currentPathIndex < segmentGroup.segments.length) {\n\t            if (currentCommandIndex >= commands.length)\n\t                return noMatch;\n\t            var /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\n\t            var /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\n\t            var /** @type {?} */ next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\t            if (currentPathIndex > 0 && curr === undefined)\n\t                break;\n\t            if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n\t                if (!compare(curr, next, path))\n\t                    return noMatch;\n\t                currentCommandIndex += 2;\n\t            }\n\t            else {\n\t                if (!compare(curr, {}, path))\n\t                    return noMatch;\n\t                currentCommandIndex++;\n\t            }\n\t            currentPathIndex++;\n\t        }\n\t        return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} startIndex\n\t     * @param {?} commands\n\t     * @return {?}\n\t     */\n\t    function createNewSegmentGroup(segmentGroup, startIndex, commands) {\n\t        var /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\n\t        var /** @type {?} */ i = 0;\n\t        while (i < commands.length) {\n\t            if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n\t                var /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\n\t                return new UrlSegmentGroup(paths, children);\n\t            }\n\t            // if we start with an object literal, we need to reuse the path part from the segment\n\t            if (i === 0 && isMatrixParams(commands[0])) {\n\t                var /** @type {?} */ p = segmentGroup.segments[startIndex];\n\t                paths.push(new UrlSegment(p.path, commands[0]));\n\t                i++;\n\t                continue;\n\t            }\n\t            var /** @type {?} */ curr = getPath(commands[i]);\n\t            var /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\n\t            if (curr && next && isMatrixParams(next)) {\n\t                paths.push(new UrlSegment(curr, stringify(next)));\n\t                i += 2;\n\t            }\n\t            else {\n\t                paths.push(new UrlSegment(curr, {}));\n\t                i++;\n\t            }\n\t        }\n\t        return new UrlSegmentGroup(paths, {});\n\t    }\n\t    /**\n\t     * @param {?} outlets\n\t     * @return {?}\n\t     */\n\t    function createNewSegmentChildren(outlets) {\n\t        var /** @type {?} */ children = {};\n\t        forEach(outlets, function (commands, outlet) {\n\t            if (commands !== null) {\n\t                children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n\t            }\n\t        });\n\t        return children;\n\t    }\n\t    /**\n\t     * @param {?} params\n\t     * @return {?}\n\t     */\n\t    function stringify(params) {\n\t        var /** @type {?} */ res = {};\n\t        forEach(params, function (v, k) { return res[k] = \"\" + v; });\n\t        return res;\n\t    }\n\t    /**\n\t     * @param {?} path\n\t     * @param {?} params\n\t     * @param {?} segment\n\t     * @return {?}\n\t     */\n\t    function compare(path, params, segment) {\n\t        return path == segment.path && shallowEqual(params, segment.parameters);\n\t    }\n\t\n\t    var NoMatch$1 = (function () {\n\t        function NoMatch() {\n\t        }\n\t        return NoMatch;\n\t    }());\n\t    /**\n\t     * @param {?} rootComponentType\n\t     * @param {?} config\n\t     * @param {?} urlTree\n\t     * @param {?} url\n\t     * @return {?}\n\t     */\n\t    function recognize(rootComponentType, config, urlTree, url) {\n\t        return new Recognizer(rootComponentType, config, urlTree, url).recognize();\n\t    }\n\t    var Recognizer = (function () {\n\t        /**\n\t         * @param {?} rootComponentType\n\t         * @param {?} config\n\t         * @param {?} urlTree\n\t         * @param {?} url\n\t         */\n\t        function Recognizer(rootComponentType, config, urlTree, url) {\n\t            this.rootComponentType = rootComponentType;\n\t            this.config = config;\n\t            this.urlTree = urlTree;\n\t            this.url = url;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Recognizer.prototype.recognize = function () {\n\t            try {\n\t                var /** @type {?} */ rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;\n\t                var /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n\t                var /** @type {?} */ root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n\t                var /** @type {?} */ rootNode = new TreeNode(root, children);\n\t                var /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\n\t                this.inheriteParamsAndData(routeState._root);\n\t                return rxjs_observable_of.of(routeState);\n\t            }\n\t            catch (e) {\n\t                return new rxjs_Observable.Observable(function (obs) { return obs.error(e); });\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} routeNode\n\t         * @return {?}\n\t         */\n\t        Recognizer.prototype.inheriteParamsAndData = function (routeNode) {\n\t            var _this = this;\n\t            var /** @type {?} */ route = routeNode.value;\n\t            var /** @type {?} */ i = inheritedParamsDataResolve(route);\n\t            route.params = Object.freeze(i.params);\n\t            route.data = Object.freeze(i.data);\n\t            routeNode.children.forEach(function (n) { return _this.inheriteParamsAndData(n); });\n\t        };\n\t        /**\n\t         * @param {?} config\n\t         * @param {?} segmentGroup\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {\n\t            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n\t                return this.processChildren(config, segmentGroup);\n\t            }\n\t            else {\n\t                return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} config\n\t         * @param {?} segmentGroup\n\t         * @return {?}\n\t         */\n\t        Recognizer.prototype.processChildren = function (config, segmentGroup) {\n\t            var _this = this;\n\t            var /** @type {?} */ children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });\n\t            checkOutletNameUniqueness(children);\n\t            sortActivatedRouteSnapshots(children);\n\t            return children;\n\t        };\n\t        /**\n\t         * @param {?} config\n\t         * @param {?} segmentGroup\n\t         * @param {?} segments\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {\n\t            for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {\n\t                var r = config_1[_i];\n\t                try {\n\t                    return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n\t                }\n\t                catch (e) {\n\t                    if (!(e instanceof NoMatch$1))\n\t                        throw e;\n\t                }\n\t            }\n\t            if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n\t                return [];\n\t            }\n\t            else {\n\t                throw new NoMatch$1();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} segmentGroup\n\t         * @param {?} segments\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {\n\t            return segments.length === 0 && !segmentGroup.children[outlet];\n\t        };\n\t        /**\n\t         * @param {?} route\n\t         * @param {?} rawSegment\n\t         * @param {?} segments\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {\n\t            if (route.redirectTo)\n\t                throw new NoMatch$1();\n\t            if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet)\n\t                throw new NoMatch$1();\n\t            if (route.path === '**') {\n\t                var /** @type {?} */ params = segments.length > 0 ? last(segments).parameters : {};\n\t                var /** @type {?} */ snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n\t                return [new TreeNode(snapshot_1, [])];\n\t            }\n\t            var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;\n\t            var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n\t            var /** @type {?} */ childConfig = getChildConfig(route);\n\t            var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;\n\t            var /** @type {?} */ snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n\t            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n\t                var /** @type {?} */ children = this.processChildren(childConfig, segmentGroup);\n\t                return [new TreeNode(snapshot, children)];\n\t            }\n\t            else if (childConfig.length === 0 && slicedSegments.length === 0) {\n\t                return [new TreeNode(snapshot, [])];\n\t            }\n\t            else {\n\t                var /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n\t                return [new TreeNode(snapshot, children)];\n\t            }\n\t        };\n\t        return Recognizer;\n\t    }());\n\t    /**\n\t     * @param {?} nodes\n\t     * @return {?}\n\t     */\n\t    function sortActivatedRouteSnapshots(nodes) {\n\t        nodes.sort(function (a, b) {\n\t            if (a.value.outlet === PRIMARY_OUTLET)\n\t                return -1;\n\t            if (b.value.outlet === PRIMARY_OUTLET)\n\t                return 1;\n\t            return a.value.outlet.localeCompare(b.value.outlet);\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function getChildConfig(route) {\n\t        if (route.children) {\n\t            return route.children;\n\t        }\n\t        else if (route.loadChildren) {\n\t            return ((route))._loadedConfig.routes;\n\t        }\n\t        else {\n\t            return [];\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} route\n\t     * @param {?} segments\n\t     * @return {?}\n\t     */\n\t    function match$1(segmentGroup, route, segments) {\n\t        if (route.path === '') {\n\t            if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n\t                throw new NoMatch$1();\n\t            }\n\t            else {\n\t                return { consumedSegments: [], lastChild: 0, parameters: {} };\n\t            }\n\t        }\n\t        var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n\t        var /** @type {?} */ res = matcher(segments, segmentGroup, route);\n\t        if (!res)\n\t            throw new NoMatch$1();\n\t        var /** @type {?} */ posParams = {};\n\t        forEach(res.posParams, function (v, k) { posParams[k] = v.path; });\n\t        var /** @type {?} */ parameters = merge(posParams, res.consumed[res.consumed.length - 1].parameters);\n\t        return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };\n\t    }\n\t    /**\n\t     * @param {?} nodes\n\t     * @return {?}\n\t     */\n\t    function checkOutletNameUniqueness(nodes) {\n\t        var /** @type {?} */ names = {};\n\t        nodes.forEach(function (n) {\n\t            var /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\n\t            if (routeWithSameOutletName) {\n\t                var /** @type {?} */ p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');\n\t                var /** @type {?} */ c = n.value.url.map(function (s) { return s.toString(); }).join('/');\n\t                throw new Error(\"Two segments cannot have the same outlet name: '\" + p + \"' and '\" + c + \"'.\");\n\t            }\n\t            names[n.value.outlet] = n.value;\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @return {?}\n\t     */\n\t    function getSourceSegmentGroup(segmentGroup) {\n\t        var /** @type {?} */ s = segmentGroup;\n\t        while (s._sourceSegment) {\n\t            s = s._sourceSegment;\n\t        }\n\t        return s;\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @return {?}\n\t     */\n\t    function getPathIndexShift(segmentGroup) {\n\t        var /** @type {?} */ s = segmentGroup;\n\t        var /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n\t        while (s._sourceSegment) {\n\t            s = s._sourceSegment;\n\t            res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n\t        }\n\t        return res - 1;\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} consumedSegments\n\t     * @param {?} slicedSegments\n\t     * @param {?} config\n\t     * @return {?}\n\t     */\n\t    function split$1(segmentGroup, consumedSegments, slicedSegments, config) {\n\t        if (slicedSegments.length > 0 &&\n\t            containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n\t            var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n\t            s._sourceSegment = segmentGroup;\n\t            s._segmentIndexShift = consumedSegments.length;\n\t            return { segmentGroup: s, slicedSegments: [] };\n\t        }\n\t        else if (slicedSegments.length === 0 &&\n\t            containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n\t            var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n\t            s._sourceSegment = segmentGroup;\n\t            s._segmentIndexShift = consumedSegments.length;\n\t            return { segmentGroup: s, slicedSegments: slicedSegments };\n\t        }\n\t        else {\n\t            var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n\t            s._sourceSegment = segmentGroup;\n\t            s._segmentIndexShift = consumedSegments.length;\n\t            return { segmentGroup: s, slicedSegments: slicedSegments };\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} slicedSegments\n\t     * @param {?} routes\n\t     * @param {?} children\n\t     * @return {?}\n\t     */\n\t    function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n\t        var /** @type {?} */ res = {};\n\t        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n\t            var r = routes_1[_i];\n\t            if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {\n\t                var /** @type {?} */ s = new UrlSegmentGroup([], {});\n\t                s._sourceSegment = segmentGroup;\n\t                s._segmentIndexShift = segmentGroup.segments.length;\n\t                res[getOutlet$2(r)] = s;\n\t            }\n\t        }\n\t        return merge(children, res);\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} consumedSegments\n\t     * @param {?} routes\n\t     * @param {?} primarySegment\n\t     * @return {?}\n\t     */\n\t    function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\n\t        var /** @type {?} */ res = {};\n\t        res[PRIMARY_OUTLET] = primarySegment;\n\t        primarySegment._sourceSegment = segmentGroup;\n\t        primarySegment._segmentIndexShift = consumedSegments.length;\n\t        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n\t            var r = routes_2[_i];\n\t            if (r.path === '' && getOutlet$2(r) !== PRIMARY_OUTLET) {\n\t                var /** @type {?} */ s = new UrlSegmentGroup([], {});\n\t                s._sourceSegment = segmentGroup;\n\t                s._segmentIndexShift = consumedSegments.length;\n\t                res[getOutlet$2(r)] = s;\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} slicedSegments\n\t     * @param {?} routes\n\t     * @return {?}\n\t     */\n\t    function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n\t        return routes\n\t            .filter(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) &&\n\t            getOutlet$2(r) !== PRIMARY_OUTLET; })\n\t            .length > 0;\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} slicedSegments\n\t     * @param {?} routes\n\t     * @return {?}\n\t     */\n\t    function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n\t        return routes.filter(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); }).length > 0;\n\t    }\n\t    /**\n\t     * @param {?} segmentGroup\n\t     * @param {?} slicedSegments\n\t     * @param {?} r\n\t     * @return {?}\n\t     */\n\t    function emptyPathMatch(segmentGroup, slicedSegments, r) {\n\t        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n\t            return false;\n\t        return r.path === '' && r.redirectTo === undefined;\n\t    }\n\t    /**\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function getOutlet$2(route) {\n\t        return route.outlet ? route.outlet : PRIMARY_OUTLET;\n\t    }\n\t    /**\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function getData(route) {\n\t        return route.data ? route.data : {};\n\t    }\n\t    /**\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function getResolve(route) {\n\t        return route.resolve ? route.resolve : {};\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * \\@whatItDoes Contains all the router outlets created in a component.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RouterOutletMap = (function () {\n\t        function RouterOutletMap() {\n\t            /** @internal */\n\t            this._outlets = {};\n\t        }\n\t        /**\n\t         * Adds an outlet to this map.\n\t         * @param {?} name\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        RouterOutletMap.prototype.registerOutlet = function (name, outlet) { this._outlets[name] = outlet; };\n\t        /**\n\t         * Removes an outlet from this map.\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        RouterOutletMap.prototype.removeOutlet = function (name) { this._outlets[name] = undefined; };\n\t        return RouterOutletMap;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * \\@whatItDoes Provides a way to migrate Angular 1 applications to Angular 2.\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var UrlHandlingStrategy = (function () {\n\t        function UrlHandlingStrategy() {\n\t        }\n\t        /**\n\t         * Tells the router if this URL should be processed.\n\t         *\n\t         * When it returns true, the router will execute the regular navigation.\n\t         * When it returns false, the router will set the router state to an empty state.\n\t         * As a result, all the active components will be destroyed.\n\t         *\n\t         * @abstract\n\t         * @param {?} url\n\t         * @return {?}\n\t         */\n\t        UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };\n\t        /**\n\t         * Extracts the part of the URL that should be handled by the router.\n\t         * The rest of the URL will remain untouched.\n\t         * @abstract\n\t         * @param {?} url\n\t         * @return {?}\n\t         */\n\t        UrlHandlingStrategy.prototype.extract = function (url) { };\n\t        /**\n\t         * Merges the URL fragment with the rest of the URL.\n\t         * @abstract\n\t         * @param {?} newUrlPart\n\t         * @param {?} rawUrl\n\t         * @return {?}\n\t         */\n\t        UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };\n\t        return UrlHandlingStrategy;\n\t    }());\n\t    /**\n\t     * \\@experimental\n\t     */\n\t    var DefaultUrlHandlingStrategy = (function () {\n\t        function DefaultUrlHandlingStrategy() {\n\t        }\n\t        /**\n\t         * @param {?} url\n\t         * @return {?}\n\t         */\n\t        DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };\n\t        /**\n\t         * @param {?} url\n\t         * @return {?}\n\t         */\n\t        DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };\n\t        /**\n\t         * @param {?} newUrlPart\n\t         * @param {?} wholeUrl\n\t         * @return {?}\n\t         */\n\t        DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };\n\t        return DefaultUrlHandlingStrategy;\n\t    }());\n\t\n\t    /**\n\t     * \\@whatItDoes Represents an event triggered when a navigation starts.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var NavigationStart = (function () {\n\t        /**\n\t         * @param {?} id\n\t         * @param {?} url\n\t         */\n\t        function NavigationStart(id, url) {\n\t            this.id = id;\n\t            this.url = url;\n\t        }\n\t        /**\n\t         * \\@docsNotRequired\n\t         * @return {?}\n\t         */\n\t        NavigationStart.prototype.toString = function () { return \"NavigationStart(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n\t        return NavigationStart;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var NavigationEnd = (function () {\n\t        /**\n\t         * @param {?} id\n\t         * @param {?} url\n\t         * @param {?} urlAfterRedirects\n\t         */\n\t        function NavigationEnd(id, url, urlAfterRedirects) {\n\t            this.id = id;\n\t            this.url = url;\n\t            this.urlAfterRedirects = urlAfterRedirects;\n\t        }\n\t        /**\n\t         * \\@docsNotRequired\n\t         * @return {?}\n\t         */\n\t        NavigationEnd.prototype.toString = function () {\n\t            return \"NavigationEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"')\";\n\t        };\n\t        return NavigationEnd;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var NavigationCancel = (function () {\n\t        /**\n\t         * @param {?} id\n\t         * @param {?} url\n\t         * @param {?} reason\n\t         */\n\t        function NavigationCancel(id, url, reason) {\n\t            this.id = id;\n\t            this.url = url;\n\t            this.reason = reason;\n\t        }\n\t        /**\n\t         * \\@docsNotRequired\n\t         * @return {?}\n\t         */\n\t        NavigationCancel.prototype.toString = function () { return \"NavigationCancel(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n\t        return NavigationCancel;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var NavigationError = (function () {\n\t        /**\n\t         * @param {?} id\n\t         * @param {?} url\n\t         * @param {?} error\n\t         */\n\t        function NavigationError(id, url, error) {\n\t            this.id = id;\n\t            this.url = url;\n\t            this.error = error;\n\t        }\n\t        /**\n\t         * \\@docsNotRequired\n\t         * @return {?}\n\t         */\n\t        NavigationError.prototype.toString = function () {\n\t            return \"NavigationError(id: \" + this.id + \", url: '\" + this.url + \"', error: \" + this.error + \")\";\n\t        };\n\t        return NavigationError;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Represents an event triggered when routes are recognized.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RoutesRecognized = (function () {\n\t        /**\n\t         * @param {?} id\n\t         * @param {?} url\n\t         * @param {?} urlAfterRedirects\n\t         * @param {?} state\n\t         */\n\t        function RoutesRecognized(id, url, urlAfterRedirects, state) {\n\t            this.id = id;\n\t            this.url = url;\n\t            this.urlAfterRedirects = urlAfterRedirects;\n\t            this.state = state;\n\t        }\n\t        /**\n\t         * \\@docsNotRequired\n\t         * @return {?}\n\t         */\n\t        RoutesRecognized.prototype.toString = function () {\n\t            return \"RoutesRecognized(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n\t        };\n\t        return RoutesRecognized;\n\t    }());\n\t    /**\n\t     * @param {?} error\n\t     * @return {?}\n\t     */\n\t    function defaultErrorHandler(error) {\n\t        throw error;\n\t    }\n\t    /**\n\t     * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n\t     */\n\t    var DefaultRouteReuseStrategy = (function () {\n\t        function DefaultRouteReuseStrategy() {\n\t        }\n\t        /**\n\t         * @param {?} route\n\t         * @return {?}\n\t         */\n\t        DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) { return false; };\n\t        /**\n\t         * @param {?} route\n\t         * @param {?} detachedTree\n\t         * @return {?}\n\t         */\n\t        DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) { };\n\t        /**\n\t         * @param {?} route\n\t         * @return {?}\n\t         */\n\t        DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) { return false; };\n\t        /**\n\t         * @param {?} route\n\t         * @return {?}\n\t         */\n\t        DefaultRouteReuseStrategy.prototype.retrieve = function (route) { return null; };\n\t        /**\n\t         * @param {?} future\n\t         * @param {?} curr\n\t         * @return {?}\n\t         */\n\t        DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {\n\t            return future.routeConfig === curr.routeConfig;\n\t        };\n\t        return DefaultRouteReuseStrategy;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n\t     *\n\t     * See {\\@link Routes} for more details and examples.\n\t     *\n\t     * \\@ngModule RouterModule\n\t     *\n\t     * \\@stable\n\t     */\n\t    var Router = (function () {\n\t        /**\n\t         * @param {?} rootComponentType\n\t         * @param {?} urlSerializer\n\t         * @param {?} outletMap\n\t         * @param {?} location\n\t         * @param {?} injector\n\t         * @param {?} loader\n\t         * @param {?} compiler\n\t         * @param {?} config\n\t         */\n\t        function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {\n\t            this.rootComponentType = rootComponentType;\n\t            this.urlSerializer = urlSerializer;\n\t            this.outletMap = outletMap;\n\t            this.location = location;\n\t            this.injector = injector;\n\t            this.config = config;\n\t            this.navigations = new rxjs_BehaviorSubject.BehaviorSubject(null);\n\t            this.routerEvents = new rxjs_Subject.Subject();\n\t            this.navigationId = 0;\n\t            /**\n\t             * Error handler that is invoked when a navigation errors.\n\t             *\n\t             * See {@link ErrorHandler} for more information.\n\t             */\n\t            this.errorHandler = defaultErrorHandler;\n\t            /**\n\t             * Indicates if at least one navigation happened.\n\t             */\n\t            this.navigated = false;\n\t            /**\n\t             * Extracts and merges URLs. Used for Angular 1 to Angular 2 migrations.\n\t             */\n\t            this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\n\t            this.routeReuseStrategy = new DefaultRouteReuseStrategy();\n\t            this.resetConfig(config);\n\t            this.currentUrlTree = createEmptyUrlTree();\n\t            this.rawUrlTree = this.currentUrlTree;\n\t            this.configLoader = new RouterConfigLoader(loader, compiler);\n\t            this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n\t            this.processNavigations();\n\t        }\n\t        /**\n\t         * \\@internal\n\t         * TODO: this should be removed once the constructor of the router made internal\n\t         * @param {?} rootComponentType\n\t         * @return {?}\n\t         */\n\t        Router.prototype.resetRootComponentType = function (rootComponentType) {\n\t            this.rootComponentType = rootComponentType;\n\t            // TODO: vsavkin router 4.0 should make the root component set to null\n\t            // this will simplify the lifecycle of the router.\n\t            this.currentRouterState.root.component = this.rootComponentType;\n\t        };\n\t        /**\n\t         * Sets up the location change listener and performs the initial navigation.\n\t         * @return {?}\n\t         */\n\t        Router.prototype.initialNavigation = function () {\n\t            this.setUpLocationChangeListener();\n\t            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\n\t        };\n\t        /**\n\t         * Sets up the location change listener.\n\t         * @return {?}\n\t         */\n\t        Router.prototype.setUpLocationChangeListener = function () {\n\t            var _this = this;\n\t            // Zone.current.wrap is needed because of the issue with RxJS scheduler,\n\t            // which does not work properly with zone.js in IE and Safari\n\t            if (!this.locationSubscription) {\n\t                this.locationSubscription = (this.location.subscribe(Zone.current.wrap(function (change) {\n\t                    var /** @type {?} */ rawUrlTree = _this.urlSerializer.parse(change['url']);\n\t                    var /** @type {?} */ source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n\t                    setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, { replaceUrl: true }); }, 0);\n\t                })));\n\t            }\n\t        };\n\t        Object.defineProperty(Router.prototype, \"routerState\", {\n\t            /**\n\t             * The current route state\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.currentRouterState; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(Router.prototype, \"url\", {\n\t            /**\n\t             * The current url\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.serializeUrl(this.currentUrlTree); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(Router.prototype, \"events\", {\n\t            /**\n\t             * An observable of router events\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.routerEvents; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * Resets the configuration used for navigation and generating links.\n\t         *\n\t         * ### Usage\n\t         *\n\t         * ```\n\t         * router.resetConfig([\n\t         *  { path: 'team/:id', component: TeamCmp, children: [\n\t         *    { path: 'simple', component: SimpleCmp },\n\t         *    { path: 'user/:name', component: UserCmp }\n\t         *  ]}\n\t         * ]);\n\t         * ```\n\t         * @param {?} config\n\t         * @return {?}\n\t         */\n\t        Router.prototype.resetConfig = function (config) {\n\t            validateConfig(config);\n\t            this.config = config;\n\t        };\n\t        /**\n\t         * \\@docsNotRequired\n\t         * @return {?}\n\t         */\n\t        Router.prototype.ngOnDestroy = function () { this.dispose(); };\n\t        /**\n\t         * Disposes of the router\n\t         * @return {?}\n\t         */\n\t        Router.prototype.dispose = function () {\n\t            if (this.locationSubscription) {\n\t                this.locationSubscription.unsubscribe();\n\t                this.locationSubscription = null;\n\t            }\n\t        };\n\t        /**\n\t         * Applies an array of commands to the current url tree and creates a new url tree.\n\t         *\n\t         * When given an activate route, applies the given commands starting from the route.\n\t         * When not given a route, applies the given command starting from the root.\n\t         *\n\t         * ### Usage\n\t         *\n\t         * ```\n\t         * // create /team/33/user/11\n\t         * router.createUrlTree(['/team', 33, 'user', 11]);\n\t         *\n\t         * // create /team/33;expand=true/user/11\n\t         * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n\t         *\n\t         * // you can collapse static segments like this (this works only with the first passed-in value):\n\t         * router.createUrlTree(['/team/33/user', userId]);\n\t         *\n\t         * // If the first segment can contain slashes, and you do not want the router to split it, you\n\t         * // can do the following:\n\t         *\n\t         * router.createUrlTree([{segmentPath: '/one/two'}]);\n\t         *\n\t         * // create /team/33/(user/11//right:chat)\n\t         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n\t         *\n\t         * // remove the right secondary node\n\t         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n\t         *\n\t         * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n\t         *\n\t         * // navigate to /team/33/user/11/details\n\t         * router.createUrlTree(['details'], {relativeTo: route});\n\t         *\n\t         * // navigate to /team/33/user/22\n\t         * router.createUrlTree(['../22'], {relativeTo: route});\n\t         *\n\t         * // navigate to /team/44/user/22\n\t         * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n\t         * ```\n\t         * @param {?} commands\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        Router.prototype.createUrlTree = function (commands, _a) {\n\t            var _b = _a === void 0 ? {} : _a, relativeTo = _b.relativeTo, queryParams = _b.queryParams, fragment = _b.fragment, preserveQueryParams = _b.preserveQueryParams, preserveFragment = _b.preserveFragment;\n\t            var /** @type {?} */ a = relativeTo || this.routerState.root;\n\t            var /** @type {?} */ q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;\n\t            var /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n\t            return createUrlTree(a, this.currentUrlTree, commands, q, f);\n\t        };\n\t        /**\n\t         * Navigate based on the provided url. This navigation is always absolute.\n\t         *\n\t         * Returns a promise that:\n\t         * - resolves to 'true' when navigation succeeds,\n\t         * - resolves to 'false' when navigation fails,\n\t         * - is rejected when an error happens.\n\t         *\n\t         * ### Usage\n\t         *\n\t         * ```\n\t         * router.navigateByUrl(\"/team/33/user/11\");\n\t         *\n\t         * // Navigate without updating the URL\n\t         * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n\t         * ```\n\t         *\n\t         * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n\t         * and does not apply any delta to the current one.\n\t         * @param {?} url\n\t         * @param {?=} extras\n\t         * @return {?}\n\t         */\n\t        Router.prototype.navigateByUrl = function (url, extras) {\n\t            if (extras === void 0) { extras = { skipLocationChange: false }; }\n\t            if (url instanceof UrlTree) {\n\t                return this.scheduleNavigation(this.urlHandlingStrategy.merge(url, this.rawUrlTree), 'imperative', extras);\n\t            }\n\t            var /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n\t            return this.scheduleNavigation(this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree), 'imperative', extras);\n\t        };\n\t        /**\n\t         * Navigate based on the provided array of commands and a starting point.\n\t         * If no starting route is provided, the navigation is absolute.\n\t         *\n\t         * Returns a promise that:\n\t         * - resolves to 'true' when navigation succeeds,\n\t         * - resolves to 'false' when navigation fails,\n\t         * - is rejected when an error happens.\n\t         *\n\t         * ### Usage\n\t         *\n\t         * ```\n\t         * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n\t         *\n\t         * // Navigate without updating the URL\n\t         * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n\t         * ```\n\t         *\n\t         * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n\t         * URL.\n\t         * @param {?} commands\n\t         * @param {?=} extras\n\t         * @return {?}\n\t         */\n\t        Router.prototype.navigate = function (commands, extras) {\n\t            if (extras === void 0) { extras = { skipLocationChange: false }; }\n\t            validateCommands(commands);\n\t            if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {\n\t                extras.queryParams = this.removeEmptyProps(extras.queryParams);\n\t            }\n\t            return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n\t        };\n\t        /**\n\t         * Serializes a {\\@link UrlTree} into a string\n\t         * @param {?} url\n\t         * @return {?}\n\t         */\n\t        Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };\n\t        /**\n\t         * Parses a string into a {\\@link UrlTree}\n\t         * @param {?} url\n\t         * @return {?}\n\t         */\n\t        Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };\n\t        /**\n\t         * Returns whether the url is activated\n\t         * @param {?} url\n\t         * @param {?} exact\n\t         * @return {?}\n\t         */\n\t        Router.prototype.isActive = function (url, exact) {\n\t            if (url instanceof UrlTree) {\n\t                return containsTree(this.currentUrlTree, url, exact);\n\t            }\n\t            else {\n\t                var /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n\t                return containsTree(this.currentUrlTree, urlTree, exact);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} params\n\t         * @return {?}\n\t         */\n\t        Router.prototype.removeEmptyProps = function (params) {\n\t            return Object.keys(params).reduce(function (result, key) {\n\t                var /** @type {?} */ value = params[key];\n\t                if (value !== null && value !== undefined) {\n\t                    result[key] = value;\n\t                }\n\t                return result;\n\t            }, {});\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Router.prototype.processNavigations = function () {\n\t            var _this = this;\n\t            rxjs_operator_concatMap.concatMap\n\t                .call(this.navigations, function (nav) {\n\t                if (nav) {\n\t                    _this.executeScheduledNavigation(nav);\n\t                    // a failed navigation should not stop the router from processing\n\t                    // further navigations => the catch\n\t                    return nav.promise.catch(function () { });\n\t                }\n\t                else {\n\t                    return (rxjs_observable_of.of(null));\n\t                }\n\t            })\n\t                .subscribe(function () { });\n\t        };\n\t        /**\n\t         * @param {?} rawUrl\n\t         * @param {?} source\n\t         * @param {?} extras\n\t         * @return {?}\n\t         */\n\t        Router.prototype.scheduleNavigation = function (rawUrl, source, extras) {\n\t            var /** @type {?} */ lastNavigation = this.navigations.value;\n\t            // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n\t            // and that navigation results in 'replaceState' that leads to the same URL,\n\t            // we should skip those.\n\t            if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n\t                lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n\t                return null; // return value is not used\n\t            }\n\t            // Because of a bug in IE and Edge, the location class fires two events (popstate and\n\t            // hashchange)\n\t            // every single time. The second one should be ignored. Otherwise, the URL will flicker.\n\t            if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n\t                lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n\t                return null; // return value is not used\n\t            }\n\t            var /** @type {?} */ resolve = null;\n\t            var /** @type {?} */ reject = null;\n\t            var /** @type {?} */ promise = new Promise(function (res, rej) {\n\t                resolve = res;\n\t                reject = rej;\n\t            });\n\t            var /** @type {?} */ id = ++this.navigationId;\n\t            this.navigations.next({ id: id, source: source, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });\n\t            // Make sure that the error is propagated even though `processNavigations` catch\n\t            // handler does not rethrow\n\t            return promise.catch(function (e) { return Promise.reject(e); });\n\t        };\n\t        /**\n\t         * @param {?} __0\n\t         * @return {?}\n\t         */\n\t        Router.prototype.executeScheduledNavigation = function (_a) {\n\t            var _this = this;\n\t            var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;\n\t            var /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\n\t            var /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n\t            if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n\t                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n\t                Promise.resolve()\n\t                    .then(function (_) { return _this.runNavigate(url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null); })\n\t                    .then(resolve, reject);\n\t            }\n\t            else if (urlTransition && this.rawUrlTree &&\n\t                this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n\t                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n\t                Promise.resolve()\n\t                    .then(function (_) { return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot); })\n\t                    .then(resolve, reject);\n\t            }\n\t            else {\n\t                this.rawUrlTree = rawUrl;\n\t                resolve(null);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} url\n\t         * @param {?} rawUrl\n\t         * @param {?} shouldPreventPushState\n\t         * @param {?} shouldReplaceUrl\n\t         * @param {?} id\n\t         * @param {?} precreatedState\n\t         * @return {?}\n\t         */\n\t        Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {\n\t            var _this = this;\n\t            if (id !== this.navigationId) {\n\t                this.location.go(this.urlSerializer.serialize(this.currentUrlTree));\n\t                this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), \"Navigation ID \" + id + \" is not equal to the current navigation id \" + this.navigationId));\n\t                return Promise.resolve(false);\n\t            }\n\t            return new Promise(function (resolvePromise, rejectPromise) {\n\t                // create an observable of the url and route state snapshot\n\t                // this operation do not result in any side effects\n\t                var /** @type {?} */ urlAndSnapshot$;\n\t                if (!precreatedState) {\n\t                    var /** @type {?} */ redirectsApplied$ = applyRedirects(_this.injector, _this.configLoader, _this.urlSerializer, url, _this.config);\n\t                    urlAndSnapshot$ = rxjs_operator_mergeMap.mergeMap.call(redirectsApplied$, function (appliedUrl) {\n\t                        return rxjs_operator_map.map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {\n\t                            _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));\n\t                            return { appliedUrl: appliedUrl, snapshot: snapshot };\n\t                        });\n\t                    });\n\t                }\n\t                else {\n\t                    urlAndSnapshot$ = rxjs_observable_of.of({ appliedUrl: url, snapshot: precreatedState });\n\t                }\n\t                // run preactivation: guards and data resolvers\n\t                var /** @type {?} */ preActivation;\n\t                var /** @type {?} */ preactivationTraverse$ = rxjs_operator_map.map.call(urlAndSnapshot$, function (_a) {\n\t                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;\n\t                    preActivation =\n\t                        new PreActivation(snapshot, _this.currentRouterState.snapshot, _this.injector);\n\t                    preActivation.traverse(_this.outletMap);\n\t                    return { appliedUrl: appliedUrl, snapshot: snapshot };\n\t                });\n\t                var /** @type {?} */ preactivationCheckGuards = rxjs_operator_mergeMap.mergeMap.call(preactivationTraverse$, function (_a) {\n\t                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;\n\t                    if (_this.navigationId !== id)\n\t                        return rxjs_observable_of.of(false);\n\t                    return rxjs_operator_map.map.call(preActivation.checkGuards(), function (shouldActivate) {\n\t                        return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };\n\t                    });\n\t                });\n\t                var /** @type {?} */ preactivationResolveData$ = rxjs_operator_mergeMap.mergeMap.call(preactivationCheckGuards, function (p) {\n\t                    if (_this.navigationId !== id)\n\t                        return rxjs_observable_of.of(false);\n\t                    if (p.shouldActivate) {\n\t                        return rxjs_operator_map.map.call(preActivation.resolveData(), function () { return p; });\n\t                    }\n\t                    else {\n\t                        return rxjs_observable_of.of(p);\n\t                    }\n\t                });\n\t                // create router state\n\t                // this operation has side effects => route state is being affected\n\t                var /** @type {?} */ routerState$ = rxjs_operator_map.map.call(preactivationResolveData$, function (_a) {\n\t                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;\n\t                    if (shouldActivate) {\n\t                        var /** @type {?} */ state = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);\n\t                        return { appliedUrl: appliedUrl, state: state, shouldActivate: shouldActivate };\n\t                    }\n\t                    else {\n\t                        return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };\n\t                    }\n\t                });\n\t                // applied the new router state\n\t                // this operation has side effects\n\t                var /** @type {?} */ navigationIsSuccessful;\n\t                var /** @type {?} */ storedState = _this.currentRouterState;\n\t                var /** @type {?} */ storedUrl = _this.currentUrlTree;\n\t                routerState$\n\t                    .forEach(function (_a) {\n\t                    var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;\n\t                    if (!shouldActivate || id !== _this.navigationId) {\n\t                        navigationIsSuccessful = false;\n\t                        return;\n\t                    }\n\t                    _this.currentUrlTree = appliedUrl;\n\t                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);\n\t                    _this.currentRouterState = state;\n\t                    if (!shouldPreventPushState) {\n\t                        var /** @type {?} */ path = _this.urlSerializer.serialize(_this.rawUrlTree);\n\t                        if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {\n\t                            _this.location.replaceState(path);\n\t                        }\n\t                        else {\n\t                            _this.location.go(path);\n\t                        }\n\t                    }\n\t                    new ActivateRoutes(_this.routeReuseStrategy, state, storedState)\n\t                        .activate(_this.outletMap);\n\t                    navigationIsSuccessful = true;\n\t                })\n\t                    .then(function () {\n\t                    _this.navigated = true;\n\t                    if (navigationIsSuccessful) {\n\t                        _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));\n\t                        resolvePromise(true);\n\t                    }\n\t                    else {\n\t                        _this.resetUrlToCurrentUrlTree();\n\t                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));\n\t                        resolvePromise(false);\n\t                    }\n\t                }, function (e) {\n\t                    if (e instanceof NavigationCancelingError) {\n\t                        _this.resetUrlToCurrentUrlTree();\n\t                        _this.navigated = true;\n\t                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));\n\t                        resolvePromise(false);\n\t                    }\n\t                    else {\n\t                        _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));\n\t                        try {\n\t                            resolvePromise(_this.errorHandler(e));\n\t                        }\n\t                        catch (ee) {\n\t                            rejectPromise(ee);\n\t                        }\n\t                    }\n\t                    _this.currentRouterState = storedState;\n\t                    _this.currentUrlTree = storedUrl;\n\t                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);\n\t                    _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));\n\t                });\n\t            });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Router.prototype.resetUrlToCurrentUrlTree = function () {\n\t            var /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n\t            this.location.replaceState(path);\n\t        };\n\t        return Router;\n\t    }());\n\t    var CanActivate = (function () {\n\t        /**\n\t         * @param {?} path\n\t         */\n\t        function CanActivate(path) {\n\t            this.path = path;\n\t        }\n\t        Object.defineProperty(CanActivate.prototype, \"route\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.path[this.path.length - 1]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return CanActivate;\n\t    }());\n\t    var CanDeactivate = (function () {\n\t        /**\n\t         * @param {?} component\n\t         * @param {?} route\n\t         */\n\t        function CanDeactivate(component, route) {\n\t            this.component = component;\n\t            this.route = route;\n\t        }\n\t        return CanDeactivate;\n\t    }());\n\t    var PreActivation = (function () {\n\t        /**\n\t         * @param {?} future\n\t         * @param {?} curr\n\t         * @param {?} injector\n\t         */\n\t        function PreActivation(future, curr, injector) {\n\t            this.future = future;\n\t            this.curr = curr;\n\t            this.injector = injector;\n\t            this.checks = [];\n\t        }\n\t        /**\n\t         * @param {?} parentOutletMap\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.traverse = function (parentOutletMap) {\n\t            var /** @type {?} */ futureRoot = this.future._root;\n\t            var /** @type {?} */ currRoot = this.curr ? this.curr._root : null;\n\t            this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.checkGuards = function () {\n\t            var _this = this;\n\t            if (this.checks.length === 0)\n\t                return rxjs_observable_of.of(true);\n\t            var /** @type {?} */ checks$ = rxjs_observable_from.from(this.checks);\n\t            var /** @type {?} */ runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function (s) {\n\t                if (s instanceof CanActivate) {\n\t                    return andObservables(rxjs_observable_from.from([_this.runCanActivateChild(s.path), _this.runCanActivate(s.route)]));\n\t                }\n\t                else if (s instanceof CanDeactivate) {\n\t                    // workaround https://github.com/Microsoft/TypeScript/issues/7271\n\t                    var /** @type {?} */ s2 = (s);\n\t                    return _this.runCanDeactivate(s2.component, s2.route);\n\t                }\n\t                else {\n\t                    throw new Error('Cannot be reached');\n\t                }\n\t            });\n\t            return rxjs_operator_every.every.call(runningChecks$, function (result) { return result === true; });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.resolveData = function () {\n\t            var _this = this;\n\t            if (this.checks.length === 0)\n\t                return rxjs_observable_of.of(null);\n\t            var /** @type {?} */ checks$ = rxjs_observable_from.from(this.checks);\n\t            var /** @type {?} */ runningChecks$ = rxjs_operator_concatMap.concatMap.call(checks$, function (s) {\n\t                if (s instanceof CanActivate) {\n\t                    return _this.runResolve(s.route);\n\t                }\n\t                else {\n\t                    return rxjs_observable_of.of(null);\n\t                }\n\t            });\n\t            return rxjs_operator_reduce.reduce.call(runningChecks$, function (_, __) { return _; });\n\t        };\n\t        /**\n\t         * @param {?} futureNode\n\t         * @param {?} currNode\n\t         * @param {?} outletMap\n\t         * @param {?} futurePath\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap, futurePath) {\n\t            var _this = this;\n\t            var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n\t            futureNode.children.forEach(function (c) {\n\t                _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));\n\t                delete prevChildren[c.value.outlet];\n\t            });\n\t            forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]); });\n\t        };\n\t        /**\n\t         * @param {?} futureNode\n\t         * @param {?} currNode\n\t         * @param {?} parentOutletMap\n\t         * @param {?} futurePath\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap, futurePath) {\n\t            var /** @type {?} */ future = futureNode.value;\n\t            var /** @type {?} */ curr = currNode ? currNode.value : null;\n\t            var /** @type {?} */ outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;\n\t            // reusing the node\n\t            if (curr && future._routeConfig === curr._routeConfig) {\n\t                if (!equalParamsAndUrlSegments(future, curr)) {\n\t                    this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));\n\t                }\n\t                else {\n\t                    // we need to set the data\n\t                    future.data = curr.data;\n\t                    future._resolvedData = curr._resolvedData;\n\t                }\n\t                // If we have a component, we need to go through an outlet.\n\t                if (future.component) {\n\t                    this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);\n\t                }\n\t                else {\n\t                    this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);\n\t                }\n\t            }\n\t            else {\n\t                if (curr) {\n\t                    this.deactiveRouteAndItsChildren(currNode, outlet);\n\t                }\n\t                this.checks.push(new CanActivate(futurePath));\n\t                // If we have a component, we need to go through an outlet.\n\t                if (future.component) {\n\t                    this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);\n\t                }\n\t                else {\n\t                    this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} route\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.deactiveRouteAndItsChildren = function (route, outlet) {\n\t            var _this = this;\n\t            var /** @type {?} */ prevChildren = nodeChildrenAsMap(route);\n\t            var /** @type {?} */ r = route.value;\n\t            forEach(prevChildren, function (v, k) {\n\t                if (!r.component) {\n\t                    _this.deactiveRouteAndItsChildren(v, outlet);\n\t                }\n\t                else if (!!outlet) {\n\t                    _this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);\n\t                }\n\t                else {\n\t                    _this.deactiveRouteAndItsChildren(v, null);\n\t                }\n\t            });\n\t            if (!r.component) {\n\t                this.checks.push(new CanDeactivate(null, r));\n\t            }\n\t            else if (outlet && outlet.isActivated) {\n\t                this.checks.push(new CanDeactivate(outlet.component, r));\n\t            }\n\t            else {\n\t                this.checks.push(new CanDeactivate(null, r));\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} future\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.runCanActivate = function (future) {\n\t            var _this = this;\n\t            var /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;\n\t            if (!canActivate || canActivate.length === 0)\n\t                return rxjs_observable_of.of(true);\n\t            var /** @type {?} */ obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canActivate), function (c) {\n\t                var /** @type {?} */ guard = _this.getToken(c, future);\n\t                var /** @type {?} */ observable;\n\t                if (guard.canActivate) {\n\t                    observable = wrapIntoObservable(guard.canActivate(future, _this.future));\n\t                }\n\t                else {\n\t                    observable = wrapIntoObservable(guard(future, _this.future));\n\t                }\n\t                return rxjs_operator_first.first.call(observable);\n\t            });\n\t            return andObservables(obs);\n\t        };\n\t        /**\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.runCanActivateChild = function (path) {\n\t            var _this = this;\n\t            var /** @type {?} */ future = path[path.length - 1];\n\t            var /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)\n\t                .reverse()\n\t                .map(function (p) { return _this.extractCanActivateChild(p); })\n\t                .filter(function (_) { return _ !== null; });\n\t            return andObservables(rxjs_operator_map.map.call(rxjs_observable_from.from(canActivateChildGuards), function (d) {\n\t                var /** @type {?} */ obs = rxjs_operator_map.map.call(rxjs_observable_from.from(d.guards), function (c) {\n\t                    var /** @type {?} */ guard = _this.getToken(c, c.node);\n\t                    var /** @type {?} */ observable;\n\t                    if (guard.canActivateChild) {\n\t                        observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));\n\t                    }\n\t                    else {\n\t                        observable = wrapIntoObservable(guard(future, _this.future));\n\t                    }\n\t                    return rxjs_operator_first.first.call(observable);\n\t                });\n\t                return andObservables(obs);\n\t            }));\n\t        };\n\t        /**\n\t         * @param {?} p\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.extractCanActivateChild = function (p) {\n\t            var /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;\n\t            if (!canActivateChild || canActivateChild.length === 0)\n\t                return null;\n\t            return { node: p, guards: canActivateChild };\n\t        };\n\t        /**\n\t         * @param {?} component\n\t         * @param {?} curr\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.runCanDeactivate = function (component, curr) {\n\t            var _this = this;\n\t            var /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;\n\t            if (!canDeactivate || canDeactivate.length === 0)\n\t                return rxjs_observable_of.of(true);\n\t            var /** @type {?} */ canDeactivate$ = rxjs_operator_mergeMap.mergeMap.call(rxjs_observable_from.from(canDeactivate), function (c) {\n\t                var /** @type {?} */ guard = _this.getToken(c, curr);\n\t                var /** @type {?} */ observable;\n\t                if (guard.canDeactivate) {\n\t                    observable = wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));\n\t                }\n\t                else {\n\t                    observable = wrapIntoObservable(guard(component, curr, _this.curr));\n\t                }\n\t                return rxjs_operator_first.first.call(observable);\n\t            });\n\t            return rxjs_operator_every.every.call(canDeactivate$, function (result) { return result === true; });\n\t        };\n\t        /**\n\t         * @param {?} future\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.runResolve = function (future) {\n\t            var /** @type {?} */ resolve = future._resolve;\n\t            return rxjs_operator_map.map.call(this.resolveNode(resolve, future), function (resolvedData) {\n\t                future._resolvedData = resolvedData;\n\t                future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);\n\t                return null;\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} resolve\n\t         * @param {?} future\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.resolveNode = function (resolve, future) {\n\t            var _this = this;\n\t            return waitForMap(resolve, function (k, v) {\n\t                var /** @type {?} */ resolver = _this.getToken(v, future);\n\t                return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) :\n\t                    wrapIntoObservable(resolver(future, _this.future));\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} token\n\t         * @param {?} snapshot\n\t         * @return {?}\n\t         */\n\t        PreActivation.prototype.getToken = function (token, snapshot) {\n\t            var /** @type {?} */ config = closestLoadedConfig(snapshot);\n\t            var /** @type {?} */ injector = config ? config.injector : this.injector;\n\t            return injector.get(token);\n\t        };\n\t        return PreActivation;\n\t    }());\n\t    var ActivateRoutes = (function () {\n\t        /**\n\t         * @param {?} routeReuseStrategy\n\t         * @param {?} futureState\n\t         * @param {?} currState\n\t         */\n\t        function ActivateRoutes(routeReuseStrategy, futureState, currState) {\n\t            this.routeReuseStrategy = routeReuseStrategy;\n\t            this.futureState = futureState;\n\t            this.currState = currState;\n\t        }\n\t        /**\n\t         * @param {?} parentOutletMap\n\t         * @return {?}\n\t         */\n\t        ActivateRoutes.prototype.activate = function (parentOutletMap) {\n\t            var /** @type {?} */ futureRoot = this.futureState._root;\n\t            var /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\n\t            this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);\n\t            advanceActivatedRoute(this.futureState.root);\n\t            this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);\n\t        };\n\t        /**\n\t         * @param {?} futureNode\n\t         * @param {?} currNode\n\t         * @param {?} outletMap\n\t         * @return {?}\n\t         */\n\t        ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, outletMap) {\n\t            var _this = this;\n\t            var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n\t            futureNode.children.forEach(function (c) {\n\t                _this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);\n\t                delete prevChildren[c.value.outlet];\n\t            });\n\t            forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap); });\n\t        };\n\t        /**\n\t         * @param {?} futureNode\n\t         * @param {?} currNode\n\t         * @param {?} outletMap\n\t         * @return {?}\n\t         */\n\t        ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {\n\t            var _this = this;\n\t            var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n\t            futureNode.children.forEach(function (c) { _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap); });\n\t        };\n\t        /**\n\t         * @param {?} futureNode\n\t         * @param {?} currNode\n\t         * @param {?} parentOutletMap\n\t         * @return {?}\n\t         */\n\t        ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentOutletMap) {\n\t            var /** @type {?} */ future = futureNode.value;\n\t            var /** @type {?} */ curr = currNode ? currNode.value : null;\n\t            // reusing the node\n\t            if (future === curr) {\n\t                // If we have a normal route, we need to go through an outlet.\n\t                if (future.component) {\n\t                    var /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n\t                    this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);\n\t                }\n\t                else {\n\t                    this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);\n\t                }\n\t            }\n\t            else {\n\t                if (curr) {\n\t                    this.deactiveRouteAndItsChildren(currNode, parentOutletMap);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} futureNode\n\t         * @param {?} currNode\n\t         * @param {?} parentOutletMap\n\t         * @return {?}\n\t         */\n\t        ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {\n\t            var /** @type {?} */ future = futureNode.value;\n\t            var /** @type {?} */ curr = currNode ? currNode.value : null;\n\t            // reusing the node\n\t            if (future === curr) {\n\t                // advance the route to push the parameters\n\t                advanceActivatedRoute(future);\n\t                // If we have a normal route, we need to go through an outlet.\n\t                if (future.component) {\n\t                    var /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n\t                    this.activateChildRoutes(futureNode, currNode, outlet.outletMap);\n\t                }\n\t                else {\n\t                    this.activateChildRoutes(futureNode, currNode, parentOutletMap);\n\t                }\n\t            }\n\t            else {\n\t                // if we have a normal route, we need to advance the route\n\t                // and place the component into the outlet. After that recurse.\n\t                if (future.component) {\n\t                    advanceActivatedRoute(future);\n\t                    var /** @type {?} */ outlet = getOutlet(parentOutletMap, futureNode.value);\n\t                    if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n\t                        var /** @type {?} */ stored = ((this.routeReuseStrategy.retrieve(future.snapshot)));\n\t                        this.routeReuseStrategy.store(future.snapshot, null);\n\t                        outlet.attach(stored.componentRef, stored.route.value);\n\t                        advanceActivatedRouteNodeAndItsChildren(stored.route);\n\t                    }\n\t                    else {\n\t                        var /** @type {?} */ outletMap = new RouterOutletMap();\n\t                        this.placeComponentIntoOutlet(outletMap, future, outlet);\n\t                        this.activateChildRoutes(futureNode, null, outletMap);\n\t                    }\n\t                }\n\t                else {\n\t                    advanceActivatedRoute(future);\n\t                    this.activateChildRoutes(futureNode, null, parentOutletMap);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} outletMap\n\t         * @param {?} future\n\t         * @param {?} outlet\n\t         * @return {?}\n\t         */\n\t        ActivateRoutes.prototype.placeComponentIntoOutlet = function (outletMap, future, outlet) {\n\t            var /** @type {?} */ resolved = ([{ provide: ActivatedRoute, useValue: future }, {\n\t                    provide: RouterOutletMap,\n\t                    useValue: outletMap\n\t                }]);\n\t            var /** @type {?} */ config = parentLoadedConfig(future.snapshot);\n\t            var /** @type {?} */ resolver = null;\n\t            var /** @type {?} */ injector = null;\n\t            if (config) {\n\t                injector = config.injectorFactory(outlet.locationInjector);\n\t                resolver = config.factoryResolver;\n\t                resolved.push({ provide: _angular_core.ComponentFactoryResolver, useValue: resolver });\n\t            }\n\t            else {\n\t                injector = outlet.locationInjector;\n\t                resolver = outlet.locationFactoryResolver;\n\t            }\n\t            outlet.activate(future, resolver, injector, _angular_core.ReflectiveInjector.resolve(resolved), outletMap);\n\t        };\n\t        /**\n\t         * @param {?} route\n\t         * @param {?} parentOutletMap\n\t         * @return {?}\n\t         */\n\t        ActivateRoutes.prototype.deactiveRouteAndItsChildren = function (route, parentOutletMap) {\n\t            if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n\t                this.detachAndStoreRouteSubtree(route, parentOutletMap);\n\t            }\n\t            else {\n\t                this.deactiveRouteAndOutlet(route, parentOutletMap);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} route\n\t         * @param {?} parentOutletMap\n\t         * @return {?}\n\t         */\n\t        ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentOutletMap) {\n\t            var /** @type {?} */ outlet = getOutlet(parentOutletMap, route.value);\n\t            var /** @type {?} */ componentRef = outlet.detach();\n\t            this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route });\n\t        };\n\t        /**\n\t         * @param {?} route\n\t         * @param {?} parentOutletMap\n\t         * @return {?}\n\t         */\n\t        ActivateRoutes.prototype.deactiveRouteAndOutlet = function (route, parentOutletMap) {\n\t            var _this = this;\n\t            var /** @type {?} */ prevChildren = nodeChildrenAsMap(route);\n\t            var /** @type {?} */ outlet = null;\n\t            // getOutlet throws when cannot find the right outlet,\n\t            // which can happen if an outlet was in an NgIf and was removed\n\t            try {\n\t                outlet = getOutlet(parentOutletMap, route.value);\n\t            }\n\t            catch (e) {\n\t                return;\n\t            }\n\t            var /** @type {?} */ childOutletMap = outlet.outletMap;\n\t            forEach(prevChildren, function (v, k) {\n\t                if (route.value.component) {\n\t                    _this.deactiveRouteAndItsChildren(v, childOutletMap);\n\t                }\n\t                else {\n\t                    _this.deactiveRouteAndItsChildren(v, parentOutletMap);\n\t                }\n\t            });\n\t            if (outlet && outlet.isActivated) {\n\t                outlet.deactivate();\n\t            }\n\t        };\n\t        return ActivateRoutes;\n\t    }());\n\t    /**\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    function advanceActivatedRouteNodeAndItsChildren(node) {\n\t        advanceActivatedRoute(node.value);\n\t        node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n\t    }\n\t    /**\n\t     * @param {?} snapshot\n\t     * @return {?}\n\t     */\n\t    function parentLoadedConfig(snapshot) {\n\t        var /** @type {?} */ s = snapshot.parent;\n\t        while (s) {\n\t            var /** @type {?} */ c = s._routeConfig;\n\t            if (c && c._loadedConfig)\n\t                return c._loadedConfig;\n\t            if (c && c.component)\n\t                return null;\n\t            s = s.parent;\n\t        }\n\t        return null;\n\t    }\n\t    /**\n\t     * @param {?} snapshot\n\t     * @return {?}\n\t     */\n\t    function closestLoadedConfig(snapshot) {\n\t        if (!snapshot)\n\t            return null;\n\t        var /** @type {?} */ s = snapshot.parent;\n\t        while (s) {\n\t            var /** @type {?} */ c = s._routeConfig;\n\t            if (c && c._loadedConfig)\n\t                return c._loadedConfig;\n\t            s = s.parent;\n\t        }\n\t        return null;\n\t    }\n\t    /**\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    function nodeChildrenAsMap(node) {\n\t        return node ? node.children.reduce(function (m, c) {\n\t            m[c.value.outlet] = c;\n\t            return m;\n\t        }, {}) : {};\n\t    }\n\t    /**\n\t     * @param {?} outletMap\n\t     * @param {?} route\n\t     * @return {?}\n\t     */\n\t    function getOutlet(outletMap, route) {\n\t        var /** @type {?} */ outlet = outletMap._outlets[route.outlet];\n\t        if (!outlet) {\n\t            var /** @type {?} */ componentName = ((route.component)).name;\n\t            if (route.outlet === PRIMARY_OUTLET) {\n\t                throw new Error(\"Cannot find primary outlet to load '\" + componentName + \"'\");\n\t            }\n\t            else {\n\t                throw new Error(\"Cannot find the outlet \" + route.outlet + \" to load '\" + componentName + \"'\");\n\t            }\n\t        }\n\t        return outlet;\n\t    }\n\t    /**\n\t     * @param {?} commands\n\t     * @return {?}\n\t     */\n\t    function validateCommands(commands) {\n\t        for (var /** @type {?} */ i = 0; i < commands.length; i++) {\n\t            var /** @type {?} */ cmd = commands[i];\n\t            if (cmd == null) {\n\t                throw new Error(\"The requested path contains \" + cmd + \" segment at index \" + i);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * \\@whatItDoes Lets you link to specific parts of your app.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * Consider the following route configuration:\n\t     * `[{ path: 'user/:name', component: UserCmp }]`\n\t     *\n\t     * When linking to this `user/:name` route, you can write:\n\t     * `<a routerLink='/user/bob'>link to user component</a>`\n\t     *\n\t     * \\@description\n\t     *\n\t     * The RouterLink directives let you link to specific parts of your app.\n\t     *\n\t     * When the link is static, you can use the directive as follows:\n\t     * `<a routerLink=\"/user/bob\">link to user component</a>`\n\t     *\n\t     * If you use dynamic values to generate the link, you can pass an array of path\n\t     * segments, followed by the params for each segment.\n\t     *\n\t     * For instance `['/team', teamId, 'user', userName, {details: true}]`\n\t     * means that we want to generate a link to `/team/11/user/bob;details=true`.\n\t     *\n\t     * Multiple static segments can be merged into one\n\t     * (e.g., `['/team/11/user', userName, {details: true}]`).\n\t     *\n\t     * The first segment name can be prepended with `/`, `./`, or `../`:\n\t     * * If the first segment begins with `/`, the router will look up the route from the root of the\n\t     *   app.\n\t     * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n\t     *   instead look in the children of the current activated route.\n\t     * * And if the first segment begins with `../`, the router will go up one level.\n\t     *\n\t     * You can set query params and fragment as follows:\n\t     *\n\t     * ```\n\t     * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n\t     *   link to user component\n\t     * </a>\n\t     * ```\n\t     * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n\t     *\n\t     * You can also tell the directive to preserve the current query params and fragment:\n\t     *\n\t     * ```\n\t     * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n\t     *   link to user component\n\t     * </a>\n\t     * ```\n\t     *\n\t     * The router link directive always treats the provided input as a delta to the current url.\n\t     *\n\t     * For instance, if the current url is `/user/(box//aux:team)`.\n\t     *\n\t     * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n\t     * `/user/(jim//aux:team)`.\n\t     *\n\t     * \\@selector ':not(a)[routerLink]'\n\t     * \\@ngModule RouterModule\n\t     *\n\t     * See {\\@link Router.createUrlTree} for more information.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RouterLink = (function () {\n\t        /**\n\t         * @param {?} router\n\t         * @param {?} route\n\t         */\n\t        function RouterLink(router, route) {\n\t            this.router = router;\n\t            this.route = route;\n\t            this.commands = [];\n\t        }\n\t        Object.defineProperty(RouterLink.prototype, \"routerLink\", {\n\t            /**\n\t             * @param {?} commands\n\t             * @return {?}\n\t             */\n\t            set: function (commands) {\n\t                if (commands != null) {\n\t                    this.commands = Array.isArray(commands) ? commands : [commands];\n\t                }\n\t                else {\n\t                    this.commands = [];\n\t                }\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterLink.prototype.onClick = function () {\n\t            var /** @type {?} */ extras = {\n\t                skipLocationChange: attrBoolValue(this.skipLocationChange),\n\t                replaceUrl: attrBoolValue(this.replaceUrl),\n\t            };\n\t            this.router.navigateByUrl(this.urlTree, extras);\n\t            return true;\n\t        };\n\t        Object.defineProperty(RouterLink.prototype, \"urlTree\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this.router.createUrlTree(this.commands, {\n\t                    relativeTo: this.route,\n\t                    queryParams: this.queryParams,\n\t                    fragment: this.fragment,\n\t                    preserveQueryParams: attrBoolValue(this.preserveQueryParams),\n\t                    preserveFragment: attrBoolValue(this.preserveFragment),\n\t                });\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        RouterLink.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: ':not(a)[routerLink]' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RouterLink.ctorParameters = function () { return [\n\t            { type: Router, },\n\t            { type: ActivatedRoute, },\n\t        ]; };\n\t        RouterLink.propDecorators = {\n\t            'queryParams': [{ type: _angular_core.Input },],\n\t            'fragment': [{ type: _angular_core.Input },],\n\t            'preserveQueryParams': [{ type: _angular_core.Input },],\n\t            'preserveFragment': [{ type: _angular_core.Input },],\n\t            'skipLocationChange': [{ type: _angular_core.Input },],\n\t            'replaceUrl': [{ type: _angular_core.Input },],\n\t            'routerLink': [{ type: _angular_core.Input },],\n\t            'onClick': [{ type: _angular_core.HostListener, args: ['click',] },],\n\t        };\n\t        return RouterLink;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lets you link to specific parts of your app.\n\t     *\n\t     * See {\\@link RouterLink} for more information.\n\t     *\n\t     * \\@selector 'a[routerLink]'\n\t     * \\@ngModule RouterModule\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RouterLinkWithHref = (function () {\n\t        /**\n\t         * @param {?} router\n\t         * @param {?} route\n\t         * @param {?} locationStrategy\n\t         */\n\t        function RouterLinkWithHref(router, route, locationStrategy) {\n\t            var _this = this;\n\t            this.router = router;\n\t            this.route = route;\n\t            this.locationStrategy = locationStrategy;\n\t            this.commands = [];\n\t            this.subscription = router.events.subscribe(function (s) {\n\t                if (s instanceof NavigationEnd) {\n\t                    _this.updateTargetUrlAndHref();\n\t                }\n\t            });\n\t        }\n\t        Object.defineProperty(RouterLinkWithHref.prototype, \"routerLink\", {\n\t            /**\n\t             * @param {?} commands\n\t             * @return {?}\n\t             */\n\t            set: function (commands) {\n\t                if (commands != null) {\n\t                    this.commands = Array.isArray(commands) ? commands : [commands];\n\t                }\n\t                else {\n\t                    this.commands = [];\n\t                }\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n\t        /**\n\t         * @param {?} button\n\t         * @param {?} ctrlKey\n\t         * @param {?} metaKey\n\t         * @return {?}\n\t         */\n\t        RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey) {\n\t            if (button !== 0 || ctrlKey || metaKey) {\n\t                return true;\n\t            }\n\t            if (typeof this.target === 'string' && this.target != '_self') {\n\t                return true;\n\t            }\n\t            var /** @type {?} */ extras = {\n\t                skipLocationChange: attrBoolValue(this.skipLocationChange),\n\t                replaceUrl: attrBoolValue(this.replaceUrl),\n\t            };\n\t            this.router.navigateByUrl(this.urlTree, extras);\n\t            return false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {\n\t            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n\t        };\n\t        Object.defineProperty(RouterLinkWithHref.prototype, \"urlTree\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this.router.createUrlTree(this.commands, {\n\t                    relativeTo: this.route,\n\t                    queryParams: this.queryParams,\n\t                    fragment: this.fragment,\n\t                    preserveQueryParams: attrBoolValue(this.preserveQueryParams),\n\t                    preserveFragment: attrBoolValue(this.preserveFragment),\n\t                });\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        RouterLinkWithHref.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'a[routerLink]' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RouterLinkWithHref.ctorParameters = function () { return [\n\t            { type: Router, },\n\t            { type: ActivatedRoute, },\n\t            { type: _angular_common.LocationStrategy, },\n\t        ]; };\n\t        RouterLinkWithHref.propDecorators = {\n\t            'target': [{ type: _angular_core.HostBinding, args: ['attr.target',] }, { type: _angular_core.Input },],\n\t            'queryParams': [{ type: _angular_core.Input },],\n\t            'fragment': [{ type: _angular_core.Input },],\n\t            'preserveQueryParams': [{ type: _angular_core.Input },],\n\t            'preserveFragment': [{ type: _angular_core.Input },],\n\t            'skipLocationChange': [{ type: _angular_core.Input },],\n\t            'replaceUrl': [{ type: _angular_core.Input },],\n\t            'href': [{ type: _angular_core.HostBinding },],\n\t            'routerLink': [{ type: _angular_core.Input },],\n\t            'onClick': [{ type: _angular_core.HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey'],] },],\n\t        };\n\t        return RouterLinkWithHref;\n\t    }());\n\t    /**\n\t     * @param {?} s\n\t     * @return {?}\n\t     */\n\t    function attrBoolValue(s) {\n\t        return s === '' || !!s;\n\t    }\n\t\n\t    /**\n\t     * \\@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * ```\n\t     * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n\t     * ```\n\t     *\n\t     * \\@description\n\t     *\n\t     * The RouterLinkActive directive lets you add a CSS class to an element when the link's route\n\t     * becomes active.\n\t     *\n\t     * Consider the following example:\n\t     *\n\t     * ```\n\t     * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n\t     * ```\n\t     *\n\t     * When the url is either '/user' or '/user/bob', the active-link class will\n\t     * be added to the `a` tag. If the url changes, the class will be removed.\n\t     *\n\t     * You can set more than one class, as follows:\n\t     *\n\t     * ```\n\t     * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n\t     * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n\t     * ```\n\t     *\n\t     * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n\t     * only when the url matches the link exactly.\n\t     *\n\t     * ```\n\t     * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n\t     * true}\">Bob</a>\n\t     * ```\n\t     *\n\t     * You can assign the RouterLinkActive instance to a template variable and directly check\n\t     * the `isActive` status.\n\t     * ```\n\t     * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n\t     *   Bob {{ rla.isActive ? '(already open)' : ''}}\n\t     * </a>\n\t     * ```\n\t     *\n\t     * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n\t     *\n\t     * ```\n\t     * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n\t     *   <a routerLink=\"/user/jim\">Jim</a>\n\t     *   <a routerLink=\"/user/bob\">Bob</a>\n\t     * </div>\n\t     * ```\n\t     *\n\t     * This will set the active-link class on the div tag if the url is either '/user/jim' or\n\t     * '/user/bob'.\n\t     *\n\t     * \\@selector ':not(a)[routerLink]'\n\t     * \\@ngModule RouterModule\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RouterLinkActive = (function () {\n\t        /**\n\t         * @param {?} router\n\t         * @param {?} element\n\t         * @param {?} renderer\n\t         * @param {?} cdr\n\t         */\n\t        function RouterLinkActive(router, element, renderer, cdr) {\n\t            var _this = this;\n\t            this.router = router;\n\t            this.element = element;\n\t            this.renderer = renderer;\n\t            this.cdr = cdr;\n\t            this.classes = [];\n\t            this.active = false;\n\t            this.routerLinkActiveOptions = { exact: false };\n\t            this.subscription = router.events.subscribe(function (s) {\n\t                if (s instanceof NavigationEnd) {\n\t                    _this.update();\n\t                }\n\t            });\n\t        }\n\t        Object.defineProperty(RouterLinkActive.prototype, \"isActive\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.active; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterLinkActive.prototype.ngAfterContentInit = function () {\n\t            var _this = this;\n\t            this.links.changes.subscribe(function (_) { return _this.update(); });\n\t            this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });\n\t            this.update();\n\t        };\n\t        Object.defineProperty(RouterLinkActive.prototype, \"routerLinkActive\", {\n\t            /**\n\t             * @param {?} data\n\t             * @return {?}\n\t             */\n\t            set: function (data) {\n\t                var /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');\n\t                this.classes = classes.filter(function (c) { return !!c; });\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterLinkActive.prototype.update = function () {\n\t            var _this = this;\n\t            if (!this.links || !this.linksWithHrefs || !this.router.navigated)\n\t                return;\n\t            var /** @type {?} */ hasActiveLinks = this.hasActiveLinks();\n\t            // react only when status has changed to prevent unnecessary dom updates\n\t            if (this.active !== hasActiveLinks) {\n\t                this.active = hasActiveLinks;\n\t                this.classes.forEach(function (c) { return _this.renderer.setElementClass(_this.element.nativeElement, c, hasActiveLinks); });\n\t                this.cdr.detectChanges();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} router\n\t         * @return {?}\n\t         */\n\t        RouterLinkActive.prototype.isLinkActive = function (router) {\n\t            var _this = this;\n\t            return function (link) {\n\t                return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);\n\t            };\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterLinkActive.prototype.hasActiveLinks = function () {\n\t            return this.links.some(this.isLinkActive(this.router)) ||\n\t                this.linksWithHrefs.some(this.isLinkActive(this.router));\n\t        };\n\t        RouterLinkActive.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[routerLinkActive]',\n\t                        exportAs: 'routerLinkActive',\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RouterLinkActive.ctorParameters = function () { return [\n\t            { type: Router, },\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ChangeDetectorRef, },\n\t        ]; };\n\t        RouterLinkActive.propDecorators = {\n\t            'links': [{ type: _angular_core.ContentChildren, args: [RouterLink, { descendants: true },] },],\n\t            'linksWithHrefs': [{ type: _angular_core.ContentChildren, args: [RouterLinkWithHref, { descendants: true },] },],\n\t            'routerLinkActiveOptions': [{ type: _angular_core.Input },],\n\t            'routerLinkActive': [{ type: _angular_core.Input },],\n\t        };\n\t        return RouterLinkActive;\n\t    }());\n\t\n\t    /**\n\t     * \\@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router\n\t     * state.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * ```\n\t     * <router-outlet></router-outlet>\n\t     * <router-outlet name='left'></router-outlet>\n\t     * <router-outlet name='right'></router-outlet>\n\t     * ```\n\t     *\n\t     * A router outlet will emit an activate event any time a new component is being instantiated,\n\t     * and a deactivate event when it is being destroyed.\n\t     *\n\t     * ```\n\t     * <router-outlet\n\t     *   (activate)='onActivate($event)'\n\t     *   (deactivate)='onDeactivate($event)'></router-outlet>\n\t     * ```\n\t     * \\@selector 'a[routerLink]'\n\t     * \\@ngModule RouterModule\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RouterOutlet = (function () {\n\t        /**\n\t         * @param {?} parentOutletMap\n\t         * @param {?} location\n\t         * @param {?} resolver\n\t         * @param {?} name\n\t         */\n\t        function RouterOutlet(parentOutletMap, location, resolver, name) {\n\t            this.parentOutletMap = parentOutletMap;\n\t            this.location = location;\n\t            this.resolver = resolver;\n\t            this.name = name;\n\t            this.activateEvents = new _angular_core.EventEmitter();\n\t            this.deactivateEvents = new _angular_core.EventEmitter();\n\t            parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterOutlet.prototype.ngOnDestroy = function () { this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET); };\n\t        Object.defineProperty(RouterOutlet.prototype, \"locationInjector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.location.injector; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(RouterOutlet.prototype, \"locationFactoryResolver\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.resolver; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(RouterOutlet.prototype, \"isActivated\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return !!this.activated; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(RouterOutlet.prototype, \"component\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                if (!this.activated)\n\t                    throw new Error('Outlet is not activated');\n\t                return this.activated.instance;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(RouterOutlet.prototype, \"activatedRoute\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                if (!this.activated)\n\t                    throw new Error('Outlet is not activated');\n\t                return this._activatedRoute;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterOutlet.prototype.detach = function () {\n\t            if (!this.activated)\n\t                throw new Error('Outlet is not activated');\n\t            this.location.detach();\n\t            var /** @type {?} */ r = this.activated;\n\t            this.activated = null;\n\t            this._activatedRoute = null;\n\t            return r;\n\t        };\n\t        /**\n\t         * @param {?} ref\n\t         * @param {?} activatedRoute\n\t         * @return {?}\n\t         */\n\t        RouterOutlet.prototype.attach = function (ref, activatedRoute) {\n\t            this.activated = ref;\n\t            this._activatedRoute = activatedRoute;\n\t            this.location.insert(ref.hostView);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterOutlet.prototype.deactivate = function () {\n\t            if (this.activated) {\n\t                var /** @type {?} */ c = this.component;\n\t                this.activated.destroy();\n\t                this.activated = null;\n\t                this._activatedRoute = null;\n\t                this.deactivateEvents.emit(c);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} activatedRoute\n\t         * @param {?} resolver\n\t         * @param {?} injector\n\t         * @param {?} providers\n\t         * @param {?} outletMap\n\t         * @return {?}\n\t         */\n\t        RouterOutlet.prototype.activate = function (activatedRoute, resolver, injector, providers, outletMap) {\n\t            if (this.isActivated) {\n\t                throw new Error('Cannot activate an already activated outlet');\n\t            }\n\t            this.outletMap = outletMap;\n\t            this._activatedRoute = activatedRoute;\n\t            var /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\n\t            var /** @type {?} */ component = (snapshot._routeConfig.component);\n\t            var /** @type {?} */ factory = resolver.resolveComponentFactory(component);\n\t            var /** @type {?} */ inj = _angular_core.ReflectiveInjector.fromResolvedProviders(providers, injector);\n\t            this.activated = this.location.createComponent(factory, this.location.length, inj, []);\n\t            this.activated.changeDetectorRef.detectChanges();\n\t            this.activateEvents.emit(this.activated.instance);\n\t        };\n\t        RouterOutlet.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'router-outlet' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RouterOutlet.ctorParameters = function () { return [\n\t            { type: RouterOutletMap, },\n\t            { type: _angular_core.ViewContainerRef, },\n\t            { type: _angular_core.ComponentFactoryResolver, },\n\t            { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['name',] },] },\n\t        ]; };\n\t        RouterOutlet.propDecorators = {\n\t            'activateEvents': [{ type: _angular_core.Output, args: ['activate',] },],\n\t            'deactivateEvents': [{ type: _angular_core.Output, args: ['deactivate',] },],\n\t        };\n\t        return RouterOutlet;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * \\@whatItDoes Provides a way to customize when activated routes get reused.\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var RouteReuseStrategy = (function () {\n\t        function RouteReuseStrategy() {\n\t        }\n\t        /**\n\t         * Determines if this route (and its subtree) should be detached to be reused later\n\t         * @abstract\n\t         * @param {?} route\n\t         * @return {?}\n\t         */\n\t        RouteReuseStrategy.prototype.shouldDetach = function (route) { };\n\t        /**\n\t         * Stores the detached route\n\t         * @abstract\n\t         * @param {?} route\n\t         * @param {?} handle\n\t         * @return {?}\n\t         */\n\t        RouteReuseStrategy.prototype.store = function (route, handle) { };\n\t        /**\n\t         * Determines if this route (and its subtree) should be reattached\n\t         * @abstract\n\t         * @param {?} route\n\t         * @return {?}\n\t         */\n\t        RouteReuseStrategy.prototype.shouldAttach = function (route) { };\n\t        /**\n\t         * Retrieves the previously stored route\n\t         * @abstract\n\t         * @param {?} route\n\t         * @return {?}\n\t         */\n\t        RouteReuseStrategy.prototype.retrieve = function (route) { };\n\t        /**\n\t         * Determines if a route should be reused\n\t         * @abstract\n\t         * @param {?} future\n\t         * @param {?} curr\n\t         * @return {?}\n\t         */\n\t        RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };\n\t        return RouteReuseStrategy;\n\t    }());\n\t\n\t    var /** @type {?} */ getDOM = _angular_platformBrowser.__platform_browser_private__.getDOM;\n\t\n\t    /**\n\t     * \\@whatItDoes Provides a preloading strategy.\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var PreloadingStrategy = (function () {\n\t        function PreloadingStrategy() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} route\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        PreloadingStrategy.prototype.preload = function (route, fn) { };\n\t        return PreloadingStrategy;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Provides a preloading strategy that preloads all modules as quicky as possible.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * ```\n\t     * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var PreloadAllModules = (function () {\n\t        function PreloadAllModules() {\n\t        }\n\t        /**\n\t         * @param {?} route\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        PreloadAllModules.prototype.preload = function (route, fn) {\n\t            return rxjs_operator_catch._catch.call(fn(), function () { return rxjs_observable_of.of(null); });\n\t        };\n\t        return PreloadAllModules;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n\t     *\n\t     * \\@description\n\t     *\n\t     * This strategy is enabled by default.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var NoPreloading = (function () {\n\t        function NoPreloading() {\n\t        }\n\t        /**\n\t         * @param {?} route\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NoPreloading.prototype.preload = function (route, fn) { return rxjs_observable_of.of(null); };\n\t        return NoPreloading;\n\t    }());\n\t    /**\n\t     * The preloader optimistically loads all router configurations to\n\t     * make navigations into lazily-loaded sections of the application faster.\n\t     *\n\t     * The preloader runs in the background. When the router bootstraps, the preloader\n\t     * starts listening to all navigation events. After every such event, the preloader\n\t     * will check if any configurations can be loaded lazily.\n\t     *\n\t     * If a route is protected by `canLoad` guards, the preloaded will not load it.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RouterPreloader = (function () {\n\t        /**\n\t         * @param {?} router\n\t         * @param {?} moduleLoader\n\t         * @param {?} compiler\n\t         * @param {?} injector\n\t         * @param {?} preloadingStrategy\n\t         */\n\t        function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {\n\t            this.router = router;\n\t            this.injector = injector;\n\t            this.preloadingStrategy = preloadingStrategy;\n\t            this.loader = new RouterConfigLoader(moduleLoader, compiler);\n\t        }\n\t        ;\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterPreloader.prototype.setUpPreloading = function () {\n\t            var _this = this;\n\t            var /** @type {?} */ navigations = rxjs_operator_filter.filter.call(this.router.events, function (e) { return e instanceof NavigationEnd; });\n\t            this.subscription = rxjs_operator_concatMap.concatMap.call(navigations, function () { return _this.preload(); }).subscribe(function (v) { });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterPreloader.prototype.preload = function () { return this.processRoutes(this.injector, this.router.config); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} routes\n\t         * @return {?}\n\t         */\n\t        RouterPreloader.prototype.processRoutes = function (injector, routes) {\n\t            var /** @type {?} */ res = [];\n\t            for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n\t                var c = routes_1[_i];\n\t                // we already have the config loaded, just recurce\n\t                if (c.loadChildren && !c.canLoad && ((c))._loadedConfig) {\n\t                    var /** @type {?} */ childConfig = ((c))._loadedConfig;\n\t                    res.push(this.processRoutes(childConfig.injector, childConfig.routes));\n\t                }\n\t                else if (c.loadChildren && !c.canLoad) {\n\t                    res.push(this.preloadConfig(injector, c));\n\t                }\n\t                else if (c.children) {\n\t                    res.push(this.processRoutes(injector, c.children));\n\t                }\n\t            }\n\t            return rxjs_operator_mergeAll.mergeAll.call(rxjs_observable_from.from(res));\n\t        };\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} route\n\t         * @return {?}\n\t         */\n\t        RouterPreloader.prototype.preloadConfig = function (injector, route) {\n\t            var _this = this;\n\t            return this.preloadingStrategy.preload(route, function () {\n\t                var /** @type {?} */ loaded = _this.loader.load(injector, route.loadChildren);\n\t                return rxjs_operator_mergeMap.mergeMap.call(loaded, function (config) {\n\t                    var /** @type {?} */ c = route;\n\t                    c._loadedConfig = config;\n\t                    return _this.processRoutes(config.injector, config.routes);\n\t                });\n\t            });\n\t        };\n\t        RouterPreloader.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        RouterPreloader.ctorParameters = function () { return [\n\t            { type: Router, },\n\t            { type: _angular_core.NgModuleFactoryLoader, },\n\t            { type: _angular_core.Compiler, },\n\t            { type: _angular_core.Injector, },\n\t            { type: PreloadingStrategy, },\n\t        ]; };\n\t        return RouterPreloader;\n\t    }());\n\t\n\t    /**\n\t     * @whatItDoes Contains a list of directives\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];\n\t    /**\n\t     * @whatItDoes Is used in DI to configure the router.\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ ROUTER_CONFIGURATION = new _angular_core.OpaqueToken('ROUTER_CONFIGURATION');\n\t    /**\n\t     * @docsNotRequired\n\t     */\n\t    var /** @type {?} */ ROUTER_FORROOT_GUARD = new _angular_core.OpaqueToken('ROUTER_FORROOT_GUARD');\n\t    var /** @type {?} */ ROUTER_PROVIDERS = [\n\t        _angular_common.Location,\n\t        { provide: UrlSerializer, useClass: DefaultUrlSerializer },\n\t        {\n\t            provide: Router,\n\t            useFactory: setupRouter,\n\t            deps: [\n\t                _angular_core.ApplicationRef, UrlSerializer, RouterOutletMap, _angular_common.Location, _angular_core.Injector, _angular_core.NgModuleFactoryLoader,\n\t                _angular_core.Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new _angular_core.Optional()],\n\t                [RouteReuseStrategy, new _angular_core.Optional()]\n\t            ]\n\t        },\n\t        RouterOutletMap,\n\t        { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n\t        { provide: _angular_core.NgModuleFactoryLoader, useClass: _angular_core.SystemJsNgModuleLoader },\n\t        RouterPreloader,\n\t        NoPreloading,\n\t        PreloadAllModules,\n\t        { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },\n\t    ];\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function routerNgProbeToken() {\n\t        return new _angular_core.NgProbeToken('Router', Router);\n\t    }\n\t    /**\n\t     * \\@whatItDoes Adds router directives and providers.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n\t     * Since the router deals with a global shared resource--location, we cannot have\n\t     * more than one router service active.\n\t     *\n\t     * That is why there are two ways to create the module: `RouterModule.forRoot` and\n\t     * `RouterModule.forChild`.\n\t     *\n\t     * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n\t     *   service itself.\n\t     * * `forChild` creates a module that contains all the directives and the given routes, but does not\n\t     *   include the router service.\n\t     *\n\t     * When registered at the root, the module should be used as follows\n\t     *\n\t     * ```\n\t     * \\@NgModule({\n\t     *   imports: [RouterModule.forRoot(ROUTES)]\n\t     * })\n\t     * class MyNgModule {}\n\t     * ```\n\t     *\n\t     * For submodules and lazy loaded submodules the module should be used as follows:\n\t     *\n\t     * ```\n\t     * \\@NgModule({\n\t     *   imports: [RouterModule.forChild(ROUTES)]\n\t     * })\n\t     * class MyNgModule {}\n\t     * ```\n\t     *\n\t     * \\@description\n\t     *\n\t     * Managing state transitions is one of the hardest parts of building applications. This is\n\t     * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n\t     * In addition, we often want to split applications into multiple bundles and load them on demand.\n\t     * Doing this transparently is not trivial.\n\t     *\n\t     * The Angular 2 router solves these problems. Using the router, you can declaratively specify\n\t     * application states, manage state transitions while taking care of the URL, and load bundles on\n\t     * demand.\n\t     *\n\t     * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n\t     * overview of how the router should be used.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RouterModule = (function () {\n\t        /**\n\t         * @param {?} guard\n\t         */\n\t        function RouterModule(guard) {\n\t        }\n\t        /**\n\t         * Creates a module with all the router providers and directives. It also optionally sets up an\n\t         * application listener to perform an initial navigation.\n\t         *\n\t         * Options:\n\t         * * `enableTracing` makes the router log all its internal events to the console.\n\t         * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n\t         * API.\n\t         * * `initialNavigation` disables the initial navigation.\n\t         * * `errorHandler` provides a custom error handler.\n\t         * @param {?} routes\n\t         * @param {?=} config\n\t         * @return {?}\n\t         */\n\t        RouterModule.forRoot = function (routes, config) {\n\t            return {\n\t                ngModule: RouterModule,\n\t                providers: [\n\t                    ROUTER_PROVIDERS,\n\t                    provideRoutes(routes),\n\t                    {\n\t                        provide: ROUTER_FORROOT_GUARD,\n\t                        useFactory: provideForRootGuard,\n\t                        deps: [[Router, new _angular_core.Optional(), new _angular_core.SkipSelf()]]\n\t                    },\n\t                    { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n\t                    {\n\t                        provide: _angular_common.LocationStrategy,\n\t                        useFactory: provideLocationStrategy,\n\t                        deps: [\n\t                            _angular_common.PlatformLocation, [new _angular_core.Inject(_angular_common.APP_BASE_HREF), new _angular_core.Optional()], ROUTER_CONFIGURATION\n\t                        ]\n\t                    },\n\t                    {\n\t                        provide: PreloadingStrategy,\n\t                        useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n\t                            NoPreloading\n\t                    },\n\t                    { provide: _angular_core.NgProbeToken, multi: true, useFactory: routerNgProbeToken },\n\t                    provideRouterInitializer(),\n\t                ],\n\t            };\n\t        };\n\t        /**\n\t         * Creates a module with all the router directives and a provider registering routes.\n\t         * @param {?} routes\n\t         * @return {?}\n\t         */\n\t        RouterModule.forChild = function (routes) {\n\t            return { ngModule: RouterModule, providers: [provideRoutes(routes)] };\n\t        };\n\t        RouterModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RouterModule.ctorParameters = function () { return [\n\t            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ROUTER_FORROOT_GUARD,] },] },\n\t        ]; };\n\t        return RouterModule;\n\t    }());\n\t    /**\n\t     * @param {?} platformLocationStrategy\n\t     * @param {?} baseHref\n\t     * @param {?=} options\n\t     * @return {?}\n\t     */\n\t    function provideLocationStrategy(platformLocationStrategy, baseHref, options) {\n\t        if (options === void 0) { options = {}; }\n\t        return options.useHash ? new _angular_common.HashLocationStrategy(platformLocationStrategy, baseHref) :\n\t            new _angular_common.PathLocationStrategy(platformLocationStrategy, baseHref);\n\t    }\n\t    /**\n\t     * @param {?} router\n\t     * @return {?}\n\t     */\n\t    function provideForRootGuard(router) {\n\t        if (router) {\n\t            throw new Error(\"RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.\");\n\t        }\n\t        return 'guarded';\n\t    }\n\t    /**\n\t     * \\@whatItDoes Registers routes.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * ```\n\t     * \\@NgModule({\n\t     *   imports: [RouterModule.forChild(ROUTES)],\n\t     *   providers: [provideRoutes(EXTRA_ROUTES)]\n\t     * })\n\t     * class MyNgModule {}\n\t     * ```\n\t     *\n\t     * \\@stable\n\t     * @param {?} routes\n\t     * @return {?}\n\t     */\n\t    function provideRoutes(routes) {\n\t        return [\n\t            { provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },\n\t            { provide: ROUTES, multi: true, useValue: routes },\n\t        ];\n\t    }\n\t    /**\n\t     * @param {?} ref\n\t     * @param {?} urlSerializer\n\t     * @param {?} outletMap\n\t     * @param {?} location\n\t     * @param {?} injector\n\t     * @param {?} loader\n\t     * @param {?} compiler\n\t     * @param {?} config\n\t     * @param {?=} opts\n\t     * @param {?=} urlHandlingStrategy\n\t     * @param {?=} routeReuseStrategy\n\t     * @return {?}\n\t     */\n\t    function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {\n\t        if (opts === void 0) { opts = {}; }\n\t        var /** @type {?} */ router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));\n\t        if (urlHandlingStrategy) {\n\t            router.urlHandlingStrategy = urlHandlingStrategy;\n\t        }\n\t        if (routeReuseStrategy) {\n\t            router.routeReuseStrategy = routeReuseStrategy;\n\t        }\n\t        if (opts.errorHandler) {\n\t            router.errorHandler = opts.errorHandler;\n\t        }\n\t        if (opts.enableTracing) {\n\t            var /** @type {?} */ dom_1 = getDOM();\n\t            router.events.subscribe(function (e) {\n\t                dom_1.logGroup(\"Router Event: \" + ((e.constructor)).name);\n\t                dom_1.log(e.toString());\n\t                dom_1.log(e);\n\t                dom_1.logGroupEnd();\n\t            });\n\t        }\n\t        return router;\n\t    }\n\t    /**\n\t     * @param {?} router\n\t     * @return {?}\n\t     */\n\t    function rootRoute(router) {\n\t        return router.routerState.root;\n\t    }\n\t    /**\n\t     * @param {?} router\n\t     * @param {?} ref\n\t     * @param {?} preloader\n\t     * @param {?} opts\n\t     * @return {?}\n\t     */\n\t    function initialRouterNavigation(router, ref, preloader, opts) {\n\t        return function (bootstrappedComponentRef) {\n\t            if (bootstrappedComponentRef !== ref.components[0]) {\n\t                return;\n\t            }\n\t            router.resetRootComponentType(ref.componentTypes[0]);\n\t            preloader.setUpPreloading();\n\t            if (opts.initialNavigation === false) {\n\t                router.setUpLocationChangeListener();\n\t            }\n\t            else {\n\t                router.initialNavigation();\n\t            }\n\t        };\n\t    }\n\t    /**\n\t     * A token for the router initializer that will be called after the app is bootstrapped.\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ ROUTER_INITIALIZER = new _angular_core.OpaqueToken('Router Initializer');\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function provideRouterInitializer() {\n\t        return [\n\t            {\n\t                provide: ROUTER_INITIALIZER,\n\t                useFactory: initialRouterNavigation,\n\t                deps: [Router, _angular_core.ApplicationRef, RouterPreloader, ROUTER_CONFIGURATION]\n\t            },\n\t            { provide: _angular_core.APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\n\t        ];\n\t    }\n\t\n\t    /**\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ VERSION = new _angular_core.Version('3.4.4');\n\t\n\t    var /** @type {?} */ __router_private__ = {\n\t        ROUTER_PROVIDERS: ROUTER_PROVIDERS,\n\t        ROUTES: ROUTES,\n\t        flatten: flatten,\n\t    };\n\t\n\t    exports.RouterLink = RouterLink;\n\t    exports.RouterLinkWithHref = RouterLinkWithHref;\n\t    exports.RouterLinkActive = RouterLinkActive;\n\t    exports.RouterOutlet = RouterOutlet;\n\t    exports.RouteReuseStrategy = RouteReuseStrategy;\n\t    exports.NavigationCancel = NavigationCancel;\n\t    exports.NavigationEnd = NavigationEnd;\n\t    exports.NavigationError = NavigationError;\n\t    exports.NavigationStart = NavigationStart;\n\t    exports.Router = Router;\n\t    exports.RoutesRecognized = RoutesRecognized;\n\t    exports.ROUTER_CONFIGURATION = ROUTER_CONFIGURATION;\n\t    exports.ROUTER_INITIALIZER = ROUTER_INITIALIZER;\n\t    exports.RouterModule = RouterModule;\n\t    exports.provideRoutes = provideRoutes;\n\t    exports.RouterOutletMap = RouterOutletMap;\n\t    exports.NoPreloading = NoPreloading;\n\t    exports.PreloadAllModules = PreloadAllModules;\n\t    exports.PreloadingStrategy = PreloadingStrategy;\n\t    exports.RouterPreloader = RouterPreloader;\n\t    exports.ActivatedRoute = ActivatedRoute;\n\t    exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;\n\t    exports.RouterState = RouterState;\n\t    exports.RouterStateSnapshot = RouterStateSnapshot;\n\t    exports.PRIMARY_OUTLET = PRIMARY_OUTLET;\n\t    exports.UrlHandlingStrategy = UrlHandlingStrategy;\n\t    exports.DefaultUrlSerializer = DefaultUrlSerializer;\n\t    exports.UrlSegment = UrlSegment;\n\t    exports.UrlSegmentGroup = UrlSegmentGroup;\n\t    exports.UrlSerializer = UrlSerializer;\n\t    exports.UrlTree = UrlTree;\n\t    exports.VERSION = VERSION;\n\t    exports.__router_private__ = __router_private__;\n\t\n\t}));\n\n/***/ },\n\n/***/ 73:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar WelcomeComponent = (function () {\r\n\t    function WelcomeComponent() {\r\n\t        this.pageTitle = \"Bienvenue dans l'univers de Dragon Ball et Dragon Ball Z\";\r\n\t        // state: string = 'fadeIn';\r\n\t        // items: any[] = ['item1', 'item2', 'item3'];\r\n\t        // toggleState(): void {\r\n\t        //     // this.state = (this.state === 'small' ? 'large' : 'small');\r\n\t        //     this.items.push('another item');\r\n\t        //     this.state = \"fadeIn\";\r\n\t        // }\r\n\t    }\r\n\t    return WelcomeComponent;\r\n\t}());\r\n\tWelcomeComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(74),\r\n\t        styles: [__webpack_require__(75)],\r\n\t    })\r\n\t], WelcomeComponent);\r\n\texports.WelcomeComponent = WelcomeComponent;\r\n\n\n/***/ },\n\n/***/ 74:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"{{pageTitle}} \";\n\n/***/ },\n\n/***/ 75:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"ul {\\r\\n    list-style-type: none;\\r\\n    margin: 30px 30px 0 0;\\r\\n    padding: 0;\\r\\n}\\r\\n\\r\\nli {\\r\\n    padding: 15px;\\r\\n    width: 100%;\\r\\n    background: #f1f1f1;\\r\\n    margin-bottom: 2px;\\r\\n    font-weight: bold;\\r\\n}\"\n\n/***/ },\n\n/***/ 76:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar common_1 = __webpack_require__(22);\r\n\tvar category_component_1 = __webpack_require__(77);\r\n\tvar category_routing_module_1 = __webpack_require__(80);\r\n\tvar character_module_1 = __webpack_require__(82);\r\n\tvar category_guard_service_1 = __webpack_require__(81);\r\n\tvar CategoryModule = (function () {\r\n\t    function CategoryModule() {\r\n\t    }\r\n\t    return CategoryModule;\r\n\t}());\r\n\tCategoryModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            common_1.CommonModule,\r\n\t            category_routing_module_1.CategoryRoutingModule,\r\n\t            character_module_1.CharacterModule\r\n\t        ],\r\n\t        declarations: [\r\n\t            category_component_1.CategoryComponent\r\n\t        ],\r\n\t        providers: [\r\n\t            category_guard_service_1.CategoryGuard\r\n\t        ]\r\n\t    })\r\n\t], CategoryModule);\r\n\texports.CategoryModule = CategoryModule;\r\n\n\n/***/ },\n\n/***/ 77:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar CategoryComponent = (function () {\r\n\t    function CategoryComponent() {\r\n\t    }\r\n\t    return CategoryComponent;\r\n\t}());\r\n\tCategoryComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(78),\r\n\t        styles: [__webpack_require__(79)]\r\n\t    })\r\n\t], CategoryComponent);\r\n\texports.CategoryComponent = CategoryComponent;\r\n\n\n/***/ },\n\n/***/ 78:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=container> <ul class=category> <li> <a routerlink=characters><span class=badge>Personnages</span></a> <a routerlink=books><span class=badge>Livres</span></a> </li> </ul> </div>\";\n\n/***/ },\n\n/***/ 79:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"\\r\\n.category {\\r\\n  list-style-type: none;\\r\\n}\\r\\n\\r\\n.category li {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.category .badge {\\r\\n  height: 5em;\\r\\n}\\r\\n\"\n\n/***/ },\n\n/***/ 80:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar category_component_1 = __webpack_require__(77);\r\n\tvar category_guard_service_1 = __webpack_require__(81);\r\n\tvar CategoryRoutingModule = (function () {\r\n\t    function CategoryRoutingModule() {\r\n\t    }\r\n\t    return CategoryRoutingModule;\r\n\t}());\r\n\tCategoryRoutingModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            router_1.RouterModule.forChild([\r\n\t                { path: 'category/:id', component: category_component_1.CategoryComponent, canActivate: [category_guard_service_1.CategoryGuard] }\r\n\t            ])\r\n\t        ],\r\n\t        exports: [router_1.RouterModule]\r\n\t    })\r\n\t], CategoryRoutingModule);\r\n\texports.CategoryRoutingModule = CategoryRoutingModule;\r\n\n\n/***/ },\n\n/***/ 81:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar CategoryGuard = (function () {\r\n\t    function CategoryGuard(_router) {\r\n\t        this._router = _router;\r\n\t    }\r\n\t    CategoryGuard.prototype.canActivate = function (route) {\r\n\t        var category = route.url[1].path;\r\n\t        if (category !== \"db\" && category !== \"dbz\") {\r\n\t            this._router.navigate(['/welcome']);\r\n\t            return false;\r\n\t        }\r\n\t        return true;\r\n\t    };\r\n\t    return CategoryGuard;\r\n\t}());\r\n\tCategoryGuard = __decorate([\r\n\t    core_1.Injectable(),\r\n\t    __metadata(\"design:paramtypes\", [router_1.Router])\r\n\t], CategoryGuard);\r\n\texports.CategoryGuard = CategoryGuard;\r\n\n\n/***/ },\n\n/***/ 82:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar character_routing_module_1 = __webpack_require__(83);\r\n\tvar character_list_component_1 = __webpack_require__(84);\r\n\tvar character_details_component_1 = __webpack_require__(92);\r\n\tvar character_form_component_1 = __webpack_require__(97);\r\n\tvar core_module_1 = __webpack_require__(100);\r\n\tvar shared_module_1 = __webpack_require__(385);\r\n\tvar CharacterModule = (function () {\r\n\t    function CharacterModule() {\r\n\t    }\r\n\t    return CharacterModule;\r\n\t}());\r\n\tCharacterModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            shared_module_1.SharedModule,\r\n\t            character_routing_module_1.CharacterRoutingModule,\r\n\t            core_module_1.CoreModule\r\n\t        ],\r\n\t        declarations: [\r\n\t            character_list_component_1.CharacterListComponent,\r\n\t            character_details_component_1.CharacterDetailsComponent,\r\n\t            character_form_component_1.CharacterFormComponent\r\n\t        ],\r\n\t        exports: [\r\n\t            character_list_component_1.CharacterListComponent,\r\n\t            character_details_component_1.CharacterDetailsComponent\r\n\t        ]\r\n\t    })\r\n\t], CharacterModule);\r\n\texports.CharacterModule = CharacterModule;\r\n\n\n/***/ },\n\n/***/ 83:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar character_list_component_1 = __webpack_require__(84);\r\n\tvar character_details_component_1 = __webpack_require__(92);\r\n\tvar character_form_component_1 = __webpack_require__(97);\r\n\tvar CharacterRoutingModule = (function () {\r\n\t    function CharacterRoutingModule() {\r\n\t    }\r\n\t    return CharacterRoutingModule;\r\n\t}());\r\n\tCharacterRoutingModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            router_1.RouterModule.forChild([\r\n\t                { path: 'category/:category/characters', component: character_list_component_1.CharacterListComponent },\r\n\t                { path: 'category/:category/characters/edit', component: character_form_component_1.CharacterFormComponent },\r\n\t                { path: 'category/:category/characters/:id', component: character_details_component_1.CharacterDetailsComponent },\r\n\t                { path: 'category/:category/characters/:id/edit', component: character_form_component_1.CharacterFormComponent }\r\n\t            ])\r\n\t        ],\r\n\t        exports: [\r\n\t            router_1.RouterModule\r\n\t        ]\r\n\t    })\r\n\t], CharacterRoutingModule);\r\n\texports.CharacterRoutingModule = CharacterRoutingModule;\r\n\n\n/***/ },\n\n/***/ 84:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar character_service_1 = __webpack_require__(85);\r\n\tvar CharacterListComponent = (function () {\r\n\t    // public state: string = 'fadeIn';\r\n\t    function CharacterListComponent(_service, _route, _router) {\r\n\t        this._service = _service;\r\n\t        this._route = _route;\r\n\t        this._router = _router;\r\n\t        this.pageTitle = \"Liste des personnages\";\r\n\t    }\r\n\t    CharacterListComponent.prototype.ngOnInit = function () {\r\n\t        this.getCharacters();\r\n\t    };\r\n\t    CharacterListComponent.prototype.getCharacters = function () {\r\n\t        var _this = this;\r\n\t        this._route.params\r\n\t            .switchMap(function (params) { return _this._service.getCharacters(params['category']); })\r\n\t            .subscribe(function (characters) { return _this.characters = characters; }, function (error) { return console.log(error); });\r\n\t    };\r\n\t    CharacterListComponent.prototype.onNew = function () {\r\n\t        this._router.navigate(['edit'], { relativeTo: this._route });\r\n\t    };\r\n\t    CharacterListComponent.prototype.onBack = function () {\r\n\t        this._router.navigate(['../'], { relativeTo: this._route });\r\n\t    };\r\n\t    return CharacterListComponent;\r\n\t}());\r\n\tCharacterListComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(90),\r\n\t        styles: [__webpack_require__(91)],\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [character_service_1.CharacterService,\r\n\t        router_1.ActivatedRoute,\r\n\t        router_1.Router])\r\n\t], CharacterListComponent);\r\n\texports.CharacterListComponent = CharacterListComponent;\r\n\n\n/***/ },\n\n/***/ 85:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(24);\r\n\tvar angular2_uuid_1 = __webpack_require__(86);\r\n\tvar Observable_1 = __webpack_require__(5);\r\n\tvar BehaviorSubject_1 = __webpack_require__(43);\r\n\tvar category_service_1 = __webpack_require__(87);\r\n\t__webpack_require__(88);\r\n\t__webpack_require__(89);\r\n\tvar CharacterService = (function () {\r\n\t    function CharacterService(_http, _categoryService) {\r\n\t        this._http = _http;\r\n\t        this._categoryService = _categoryService;\r\n\t    }\r\n\t    CharacterService.prototype.init = function (categories) {\r\n\t        var _this = this;\r\n\t        this._data = new BehaviorSubject_1.BehaviorSubject([]);\r\n\t        this._values = [];\r\n\t        Observable_1.Observable.from(categories)\r\n\t            .concatMap(function (category) {\r\n\t            return Observable_1.Observable.defer(function () { return _this._http.get(_this.getUrl(category)); });\r\n\t        }, function (_, response) { return response.json().data; })\r\n\t            .subscribe(function (data) {\r\n\t            _this._values = _this._values.concat(data);\r\n\t        }, function (err) { return console.error(err); }, function () {\r\n\t            console.log('characters loaded');\r\n\t            _this._data.next(_this._values);\r\n\t        });\r\n\t    };\r\n\t    CharacterService.prototype.getCharacters = function (category) {\r\n\t        return this._data\r\n\t            .map(function (characters) { return characters.filter(function (c) { return c.category === category; }); });\r\n\t    };\r\n\t    CharacterService.prototype.getCharacter = function (category, id) {\r\n\t        var _this = this;\r\n\t        return this.getCharacters(category)\r\n\t            .map(function (characters) {\r\n\t            var c = characters.filter(function (c) { return c.id === id; })[0];\r\n\t            return {\r\n\t                character: c,\r\n\t                previousId: _this.getPreviousId(characters, id),\r\n\t                nextId: _this.getNextId(characters, id)\r\n\t            };\r\n\t        });\r\n\t    };\r\n\t    CharacterService.prototype.save = function (category, character) {\r\n\t        if (character.id) {\r\n\t            return this.put(category, character);\r\n\t        }\r\n\t        return this.post(category, character);\r\n\t    };\r\n\t    CharacterService.prototype.put = function (category, character) {\r\n\t        var headers = new http_1.Headers({\r\n\t            'Content-Type': 'application/json'\r\n\t        });\r\n\t        var url = this.getUrl(category) + \"/\" + character.id;\r\n\t        console.log('character', character);\r\n\t        console.log('url', url);\r\n\t        return this._http\r\n\t            .put(url, JSON.stringify(character), { headers: headers })\r\n\t            .map(function () { return character; })\r\n\t            .catch(this.handleError);\r\n\t    };\r\n\t    CharacterService.prototype.post = function (category, character) {\r\n\t        var _this = this;\r\n\t        var headers = new http_1.Headers({\r\n\t            'Content-Type': 'application/json'\r\n\t        });\r\n\t        character.id = angular2_uuid_1.UUID.UUID();\r\n\t        return this._http\r\n\t            .post(this.getUrl(category), JSON.stringify(character), { headers: headers })\r\n\t            .map(function (response) {\r\n\t            var c = response.json().data;\r\n\t            _this._values.push(c);\r\n\t            return c;\r\n\t        })\r\n\t            .catch(this.handleError);\r\n\t    };\r\n\t    CharacterService.prototype.handleError = function (error) {\r\n\t        return Observable_1.Observable.throw(error || 'Server error');\r\n\t    };\r\n\t    CharacterService.prototype.getUrl = function (category) {\r\n\t        var url = 'app/characters' + category;\r\n\t        return url;\r\n\t    };\r\n\t    CharacterService.prototype.getNextId = function (characters, id) {\r\n\t        var ids = characters.map(function (c) { return c.id; });\r\n\t        var currentIndex = ids.indexOf(id);\r\n\t        if (currentIndex >= 0 && currentIndex < ids.length - 1) {\r\n\t            return ids[currentIndex + 1];\r\n\t        }\r\n\t        return id;\r\n\t    };\r\n\t    CharacterService.prototype.getPreviousId = function (characters, id) {\r\n\t        var ids = characters.map(function (c) { return c.id; });\r\n\t        var currentIndex = ids.indexOf(id);\r\n\t        if (currentIndex > 0) {\r\n\t            return ids[currentIndex - 1];\r\n\t        }\r\n\t        return id;\r\n\t    };\r\n\t    return CharacterService;\r\n\t}());\r\n\tCharacterService = __decorate([\r\n\t    core_1.Injectable(),\r\n\t    __metadata(\"design:paramtypes\", [http_1.Http,\r\n\t        category_service_1.CategoryService])\r\n\t], CharacterService);\r\n\texports.CharacterService = CharacterService;\r\n\n\n/***/ },\n\n/***/ 86:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar UUID = (function () {\n\t    function UUID() {\n\t        // no-op\n\t    }\n\t    UUID.UUID = function () {\n\t        if (typeof (window) !== \"undefined\" && typeof (window.crypto) !== \"undefined\" && typeof (window.crypto.getRandomValues) !== \"undefined\") {\n\t            // If we have a cryptographically secure PRNG, use that\n\t            // http://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\n\t            var buf = new Uint16Array(8);\n\t            window.crypto.getRandomValues(buf);\n\t            return (this.pad4(buf[0]) + this.pad4(buf[1]) + \"-\" + this.pad4(buf[2]) + \"-\" + this.pad4(buf[3]) + \"-\" + this.pad4(buf[4]) + \"-\" + this.pad4(buf[5]) + this.pad4(buf[6]) + this.pad4(buf[7]));\n\t        }\n\t        else {\n\t            // Otherwise, just use Math.random\n\t            // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n\t            // https://stackoverflow.com/questions/11605068/why-does-jshint-argue-against-bitwise-operators-how-should-i-express-this-code\n\t            return this.random4() + this.random4() + \"-\" + this.random4() + \"-\" + this.random4() + \"-\" +\n\t                this.random4() + \"-\" + this.random4() + this.random4() + this.random4();\n\t        }\n\t    };\n\t    UUID.pad4 = function (num) {\n\t        var ret = num.toString(16);\n\t        while (ret.length < 4) {\n\t            ret = \"0\" + ret;\n\t        }\n\t        return ret;\n\t    };\n\t    UUID.random4 = function () {\n\t        return Math.floor((1 + Math.random()) * 0x10000)\n\t            .toString(16)\n\t            .substring(1);\n\t    };\n\t    return UUID;\n\t}());\n\texports.UUID = UUID;\n\t//# sourceMappingURL=index.js.map\n\n/***/ },\n\n/***/ 87:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar Observable_1 = __webpack_require__(5);\r\n\tvar CategoryService = (function () {\r\n\t    function CategoryService() {\r\n\t    }\r\n\t    CategoryService.prototype.getCategories = function () {\r\n\t        return Observable_1.Observable.of([\"db\", \"dbz\"]);\r\n\t    };\r\n\t    return CategoryService;\r\n\t}());\r\n\tCategoryService = __decorate([\r\n\t    core_1.Injectable()\r\n\t], CategoryService);\r\n\texports.CategoryService = CategoryService;\r\n\n\n/***/ },\n\n/***/ 90:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<h3>{{pageTitle}}</h3> <div class=grid> <div> <a class=\\\"btn btn-default\\\" (click)=onNew()> <i class=\\\"glyphicon glyphicon-plus\\\"></i> Ajouter un personnage </a> </div> <div *ngfor=\\\"let character of characters\\\" class=grid-list> <div class=module> <a [routerlink]=character.id routerlinkactive=true><span class=badge><h4>{{character.name}}</h4></span></a> </div> </div> <div> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour </a> </div> </div>\";\n\n/***/ },\n\n/***/ 91:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"\\r\\nh3 {\\r\\n  text-align: center; \\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.grid {\\r\\n  margin: 0;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.grid-list {\\r\\n\\tfloat: left;\\r\\n}\\r\\n\\r\\n.module {\\r\\n\\tpadding: 20px;\\r\\n\\ttext-align: center;\\r\\n\\tmax-height: 120px;\\r\\n\\tmin-width: 120px;\\r\\n\\tborder-radius: 2px;\\r\\n}\\r\\n\\r\\n\\r\\n\"\n\n/***/ },\n\n/***/ 92:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar character_service_1 = __webpack_require__(85);\r\n\t__webpack_require__(93);\r\n\tvar CharacterDetailsComponent = (function () {\r\n\t    function CharacterDetailsComponent(_service, _route, _router) {\r\n\t        this._service = _service;\r\n\t        this._route = _route;\r\n\t        this._router = _router;\r\n\t        this.imageWidth = 150;\r\n\t        this.imageHeight = 300;\r\n\t    }\r\n\t    CharacterDetailsComponent.prototype.ngOnInit = function () {\r\n\t        var _this = this;\r\n\t        this._route.params\r\n\t            .switchMap(function (params) { return _this._service.getCharacter(params['category'], params['id']); })\r\n\t            .subscribe(function (info) {\r\n\t            _this.previousId = info.previousId;\r\n\t            _this.nextId = info.nextId;\r\n\t            _this.character = info.character;\r\n\t        }, function (error) { return console.log(error); });\r\n\t    };\r\n\t    CharacterDetailsComponent.prototype.onBack = function () {\r\n\t        this._router.navigate(['../'], { relativeTo: this._route });\r\n\t    };\r\n\t    CharacterDetailsComponent.prototype.onEdit = function () {\r\n\t        this._router.navigate(['edit'], { relativeTo: this._route });\r\n\t    };\r\n\t    return CharacterDetailsComponent;\r\n\t}());\r\n\tCharacterDetailsComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(95),\r\n\t        styles: [__webpack_require__(96)]\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [character_service_1.CharacterService,\r\n\t        router_1.ActivatedRoute,\r\n\t        router_1.Router])\r\n\t], CharacterDetailsComponent);\r\n\texports.CharacterDetailsComponent = CharacterDetailsComponent;\r\n\n\n/***/ },\n\n/***/ 95:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div *ngif=character> <div>Fiche détaillée de {{character.name}}</div> <div> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour à la liste </a> <a class=\\\"btn btn-default\\\" (click)=onEdit()> <i class=\\\"glyphicon glyphicon-pencil\\\"></i>Modifier </a> </div> <div> <db-image [model]=character></db-image> </div> <db-pager [currentid]=character.id [previousid]=previousId [nextid]=nextId></db-pager> </div> \";\n\n/***/ },\n\n/***/ 96:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"\"\n\n/***/ },\n\n/***/ 97:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar character_service_1 = __webpack_require__(85);\r\n\tvar CharacterFormComponent = (function () {\r\n\t    function CharacterFormComponent(_service, _route, _router) {\r\n\t        this._service = _service;\r\n\t        this._route = _route;\r\n\t        this._router = _router;\r\n\t        this.category = this._route.snapshot.params['category'];\r\n\t    }\r\n\t    CharacterFormComponent.prototype.ngOnInit = function () {\r\n\t        var _this = this;\r\n\t        this.categories = [\r\n\t            \"db\",\r\n\t            \"dbz\"\r\n\t        ];\r\n\t        var id = this._route.snapshot.params['id'];\r\n\t        if (id) {\r\n\t            this._service\r\n\t                .getCharacter(this.category, id)\r\n\t                .subscribe(function (info) { return _this.model = info.character; }, function (error) { return console.log(error); });\r\n\t        }\r\n\t        else {\r\n\t            this.model = {\r\n\t                id: null,\r\n\t                category: this.category,\r\n\t                name: '',\r\n\t                description: '',\r\n\t                imageUrl: ''\r\n\t            };\r\n\t        }\r\n\t    };\r\n\t    CharacterFormComponent.prototype.onSubmit = function () {\r\n\t        var _this = this;\r\n\t        this._service\r\n\t            .save(this.category, this.model)\r\n\t            .subscribe(function (character) { return _this.onBack(); }, function (error) { return console.log(error); });\r\n\t    };\r\n\t    CharacterFormComponent.prototype.onBack = function () {\r\n\t        this._router.navigate(['../'], { relativeTo: this._route });\r\n\t    };\r\n\t    return CharacterFormComponent;\r\n\t}());\r\n\tCharacterFormComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(98),\r\n\t        styles: [__webpack_require__(99)]\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [character_service_1.CharacterService,\r\n\t        router_1.ActivatedRoute,\r\n\t        router_1.Router])\r\n\t], CharacterFormComponent);\r\n\texports.CharacterFormComponent = CharacterFormComponent;\r\n\n\n/***/ },\n\n/***/ 98:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=container> <h1>Edition d'un personnage</h1> <form *ngif=model (ngsubmit)=onSubmit() #characterform=ngForm novalidate> <div class=form-group> <label for=category>Catégorie</label> <select class=form-control id=category required disabled=disabled [(ngmodel)]=model.category name=category> <option *ngfor=\\\"let cat of categories\\\" [value]=cat>{{cat}}</option> </select> </div> <div class=form-group> <label for=name>Nom</label> <input type=text class=form-control id=name required [(ngmodel)]=model.name name=name #name=ngModel> <div [hidden]=\\\"name.valid || name.pristine\\\" class=\\\"alert alert-danger\\\"> Le nom est requis </div> </div> <div class=form-group> <label for=description>Description</label> <input type=text class=form-control id=description required [(ngmodel)]=model.description name=description> </div> <div class=form-group> <label for=imageUrl>Url de l'image</label> <input type=text class=form-control id=imageUrl required [(ngmodel)]=model.imageUrl name=imageUrl> </div> <div> <button type=submit class=\\\"btn btn-primary\\\" [disabled]=!characterForm.form.valid>Enregistrer</button> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour </a> </div> </form> </div>\";\n\n/***/ },\n\n/***/ 99:\n/***/ function(module, exports) {\n\n\tmodule.exports = \".ng-valid[required], .ng-valid.required {\\r\\n    border-left: 5px solid #42A948;\\r\\n}\\r\\n\\r\\n.ng-invalid:not(form)  {\\r\\n  border-left: 5px solid #a94442;\\r\\n}\"\n\n/***/ },\n\n/***/ 100:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar character_service_1 = __webpack_require__(85);\r\n\tvar book_service_1 = __webpack_require__(101);\r\n\tvar category_service_1 = __webpack_require__(87);\r\n\tvar CoreModule = (function () {\r\n\t    function CoreModule() {\r\n\t    }\r\n\t    return CoreModule;\r\n\t}());\r\n\tCoreModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        providers: [\r\n\t            character_service_1.CharacterService,\r\n\t            book_service_1.BookService,\r\n\t            category_service_1.CategoryService\r\n\t        ]\r\n\t    })\r\n\t], CoreModule);\r\n\texports.CoreModule = CoreModule;\r\n\n\n/***/ },\n\n/***/ 101:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(24);\r\n\tvar angular2_uuid_1 = __webpack_require__(86);\r\n\tvar rxjs_1 = __webpack_require__(102);\r\n\tvar BehaviorSubject_1 = __webpack_require__(43);\r\n\t__webpack_require__(88);\r\n\tvar BookService = (function () {\r\n\t    function BookService(_http) {\r\n\t        this._http = _http;\r\n\t        this._url = 'app/books';\r\n\t    }\r\n\t    BookService.prototype.init = function (categories) {\r\n\t        // for(let i = 0; i < 10; i++) {\r\n\t        //     console.log(UUID.UUID());\r\n\t        // }\r\n\t        var _this = this;\r\n\t        this._data = new BehaviorSubject_1.BehaviorSubject([]);\r\n\t        this._values = [];\r\n\t        rxjs_1.Observable.from(categories)\r\n\t            .concatMap(function (category) {\r\n\t            return rxjs_1.Observable.defer(function () { return _this._http.get(_this.getUrl(category)); });\r\n\t        }, function (_, response) { return response.json().data; })\r\n\t            .subscribe(function (data) { return _this._values = _this._values.concat(data); }, function (err) { return console.error(err); }, function () {\r\n\t            console.log('books loaded');\r\n\t            _this._data.next(_this._values);\r\n\t        });\r\n\t    };\r\n\t    BookService.prototype.getBooks = function (category) {\r\n\t        return this._data\r\n\t            .map(function (books) { return books.filter(function (b) { return b.category === category; }); });\r\n\t    };\r\n\t    BookService.prototype.getBook = function (category, id) {\r\n\t        var _this = this;\r\n\t        return this.getBooks(category)\r\n\t            .map(function (books) {\r\n\t            var b = books.filter(function (b) { return b.id === id; })[0];\r\n\t            return {\r\n\t                book: b,\r\n\t                previousId: _this.getPreviousId(books, b.id),\r\n\t                nextId: _this.getNextId(books, b.id)\r\n\t            };\r\n\t        });\r\n\t    };\r\n\t    BookService.prototype.save = function (category, book) {\r\n\t        if (book.id) {\r\n\t            return this.put(category, book);\r\n\t        }\r\n\t        return this.post(category, book);\r\n\t    };\r\n\t    BookService.prototype.put = function (category, book) {\r\n\t        var headers = new http_1.Headers({\r\n\t            'Content-Type': 'application/json'\r\n\t        });\r\n\t        var url = this.getUrl(category) + \"/\" + book.id;\r\n\t        return this._http\r\n\t            .put(url, JSON.stringify(book), { headers: headers })\r\n\t            .map(function () { return book; })\r\n\t            .catch(this.handleError);\r\n\t    };\r\n\t    BookService.prototype.post = function (category, book) {\r\n\t        var _this = this;\r\n\t        var headers = new http_1.Headers({\r\n\t            'Content-Type': 'application/json'\r\n\t        });\r\n\t        book.id = angular2_uuid_1.UUID.UUID();\r\n\t        return this._http\r\n\t            .post(this.getUrl(category), JSON.stringify(book), { headers: headers })\r\n\t            .map(function (response) {\r\n\t            var c = response.json().data;\r\n\t            _this._values.push(c);\r\n\t            return c;\r\n\t        })\r\n\t            .catch(this.handleError);\r\n\t    };\r\n\t    BookService.prototype.handleError = function (error) {\r\n\t        return rxjs_1.Observable.throw(error || 'Server error');\r\n\t    };\r\n\t    BookService.prototype.getUrl = function (category) {\r\n\t        var url = 'app/books' + category;\r\n\t        return url;\r\n\t    };\r\n\t    BookService.prototype.getNextId = function (books, id) {\r\n\t        var ids = books.map(function (c) { return c.id; });\r\n\t        var currentIndex = ids.indexOf(id);\r\n\t        if (currentIndex >= 0 && currentIndex < ids.length - 1) {\r\n\t            return ids[currentIndex + 1];\r\n\t        }\r\n\t        return id;\r\n\t    };\r\n\t    BookService.prototype.getPreviousId = function (books, id) {\r\n\t        var ids = books.map(function (c) { return c.id; });\r\n\t        var currentIndex = ids.indexOf(id);\r\n\t        if (currentIndex > 0) {\r\n\t            return ids[currentIndex - 1];\r\n\t        }\r\n\t        return id;\r\n\t    };\r\n\t    return BookService;\r\n\t}());\r\n\tBookService = __decorate([\r\n\t    core_1.Injectable(),\r\n\t    __metadata(\"design:paramtypes\", [http_1.Http])\r\n\t], BookService);\r\n\texports.BookService = BookService;\r\n\n\n/***/ },\n\n/***/ 385:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar common_1 = __webpack_require__(22);\r\n\tvar platform_browser_1 = __webpack_require__(21);\r\n\tvar forms_1 = __webpack_require__(386);\r\n\tvar image_component_1 = __webpack_require__(387);\r\n\tvar pager_component_1 = __webpack_require__(390);\r\n\tvar SharedModule = (function () {\r\n\t    function SharedModule() {\r\n\t    }\r\n\t    return SharedModule;\r\n\t}());\r\n\tSharedModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            platform_browser_1.BrowserModule\r\n\t        ],\r\n\t        declarations: [\r\n\t            image_component_1.ImageComponent,\r\n\t            pager_component_1.PagerComponent\r\n\t        ],\r\n\t        exports: [\r\n\t            image_component_1.ImageComponent,\r\n\t            pager_component_1.PagerComponent,\r\n\t            platform_browser_1.BrowserModule,\r\n\t            common_1.CommonModule,\r\n\t            forms_1.FormsModule\r\n\t        ]\r\n\t    })\r\n\t], SharedModule);\r\n\texports.SharedModule = SharedModule;\r\n\n\n/***/ },\n\n/***/ 386:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @license Angular v2.4.4\n\t * (c) 2010-2016 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(3), __webpack_require__(358), __webpack_require__(4), __webpack_require__(5), __webpack_require__(70)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n\t}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * Base class for control directives.\n\t     *\n\t     * Only used internally in the forms module.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var AbstractControlDirective = (function () {\n\t        function AbstractControlDirective() {\n\t        }\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { throw new Error('unimplemented'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.value : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.valid : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.invalid : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.pending : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.errors : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.pristine : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.dirty : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.touched : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.untouched : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.disabled : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.enabled : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.statusChanges : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.valueChanges : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        AbstractControlDirective.prototype.reset = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            if (this.control)\n\t                this.control.reset(value);\n\t        };\n\t        /**\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControlDirective.prototype.hasError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return this.control ? this.control.hasError(errorCode, path) : false;\n\t        };\n\t        /**\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControlDirective.prototype.getError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return this.control ? this.control.getError(errorCode, path) : null;\n\t        };\n\t        return AbstractControlDirective;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$1 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * A directive that contains multiple {\\@link NgControl}s.\n\t     *\n\t     * Only used by the forms module.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var ControlContainer = (function (_super) {\n\t        __extends$1(ControlContainer, _super);\n\t        function ControlContainer() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n\t            /**\n\t             * Get the form to which this container belongs.\n\t             * @return {?}\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ControlContainer.prototype, \"path\", {\n\t            /**\n\t             * Get the path to this container.\n\t             * @return {?}\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return ControlContainer;\n\t    }(AbstractControlDirective));\n\t\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPresent(obj) {\n\t        return obj != null;\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isBlank(obj) {\n\t        return obj == null;\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function looseIdentical(a, b) {\n\t        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n\t    }\n\t    /**\n\t     * @param {?} o\n\t     * @return {?}\n\t     */\n\t    function isJsObject(o) {\n\t        return o !== null && (typeof o === 'function' || typeof o === 'object');\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPrimitive(obj) {\n\t        return !isJsObject(obj);\n\t    }\n\t\n\t    /**\n\t     * Wraps Javascript Objects\n\t     */\n\t    var StringMapWrapper = (function () {\n\t        function StringMapWrapper() {\n\t        }\n\t        /**\n\t         * @param {?} m1\n\t         * @param {?} m2\n\t         * @return {?}\n\t         */\n\t        StringMapWrapper.merge = function (m1, m2) {\n\t            var /** @type {?} */ m = {};\n\t            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n\t                var k = _a[_i];\n\t                m[k] = m1[k];\n\t            }\n\t            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n\t                var k = _c[_b];\n\t                m[k] = m2[k];\n\t            }\n\t            return m;\n\t        };\n\t        /**\n\t         * @param {?} m1\n\t         * @param {?} m2\n\t         * @return {?}\n\t         */\n\t        StringMapWrapper.equals = function (m1, m2) {\n\t            var /** @type {?} */ k1 = Object.keys(m1);\n\t            var /** @type {?} */ k2 = Object.keys(m2);\n\t            if (k1.length != k2.length) {\n\t                return false;\n\t            }\n\t            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n\t                var /** @type {?} */ key = k1[i];\n\t                if (m1[key] !== m2[key]) {\n\t                    return false;\n\t                }\n\t            }\n\t            return true;\n\t        };\n\t        return StringMapWrapper;\n\t    }());\n\t    var ListWrapper = (function () {\n\t        function ListWrapper() {\n\t        }\n\t        /**\n\t         * @param {?} arr\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        ListWrapper.findLast = function (arr, condition) {\n\t            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n\t                if (condition(arr[i])) {\n\t                    return arr[i];\n\t                }\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @param {?} items\n\t         * @return {?}\n\t         */\n\t        ListWrapper.removeAll = function (list, items) {\n\t            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n\t                var /** @type {?} */ index = list.indexOf(items[i]);\n\t                if (index > -1) {\n\t                    list.splice(index, 1);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @param {?} el\n\t         * @return {?}\n\t         */\n\t        ListWrapper.remove = function (list, el) {\n\t            var /** @type {?} */ index = list.indexOf(el);\n\t            if (index > -1) {\n\t                list.splice(index, 1);\n\t                return true;\n\t            }\n\t            return false;\n\t        };\n\t        /**\n\t         * @param {?} a\n\t         * @param {?} b\n\t         * @return {?}\n\t         */\n\t        ListWrapper.equals = function (a, b) {\n\t            if (a.length != b.length)\n\t                return false;\n\t            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n\t                if (a[i] !== b[i])\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @return {?}\n\t         */\n\t        ListWrapper.flatten = function (list) {\n\t            return list.reduce(function (flat, item) {\n\t                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n\t                return ((flat)).concat(flatItem);\n\t            }, []);\n\t        };\n\t        return ListWrapper;\n\t    }());\n\t\n\t    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;\n\t\n\t    /**\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function isEmptyInputValue(value) {\n\t        // we don't check for string here so it also works with arrays\n\t        return value == null || value.length === 0;\n\t    }\n\t    /**\n\t     * Providers for validators to be used for {@link FormControl}s in a form.\n\t     *\n\t     * Provide this using `multi: true` to add validators.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n\t    /**\n\t     * Providers for asynchronous validators to be used for {@link FormControl}s\n\t     * in a form.\n\t     *\n\t     * Provide this using `multi: true` to add validators.\n\t     *\n\t     * See {@link NG_VALIDATORS} for more details.\n\t     *\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n\t    /**\n\t     * Provides a set of validators used by form controls.\n\t     *\n\t     * A validator is a function that processes a {\\@link FormControl} or collection of\n\t     * controls and returns a map of errors. A null map means that validation has passed.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * var loginControl = new FormControl(\"\", Validators.required)\n\t     * ```\n\t     *\n\t     * \\@stable\n\t     */\n\t    var Validators = (function () {\n\t        function Validators() {\n\t        }\n\t        /**\n\t         * Validator that requires controls to have a non-empty value.\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        Validators.required = function (control) {\n\t            return isEmptyInputValue(control.value) ? { 'required': true } : null;\n\t        };\n\t        /**\n\t         * Validator that requires control value to be true.\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        Validators.requiredTrue = function (control) {\n\t            return control.value === true ? null : { 'required': true };\n\t        };\n\t        /**\n\t         * Validator that requires controls to have a value of a minimum length.\n\t         * @param {?} minLength\n\t         * @return {?}\n\t         */\n\t        Validators.minLength = function (minLength) {\n\t            return function (control) {\n\t                if (isEmptyInputValue(control.value)) {\n\t                    return null; // don't validate empty values to allow optional controls\n\t                }\n\t                var /** @type {?} */ length = control.value ? control.value.length : 0;\n\t                return length < minLength ?\n\t                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n\t                    null;\n\t            };\n\t        };\n\t        /**\n\t         * Validator that requires controls to have a value of a maximum length.\n\t         * @param {?} maxLength\n\t         * @return {?}\n\t         */\n\t        Validators.maxLength = function (maxLength) {\n\t            return function (control) {\n\t                var /** @type {?} */ length = control.value ? control.value.length : 0;\n\t                return length > maxLength ?\n\t                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n\t                    null;\n\t            };\n\t        };\n\t        /**\n\t         * Validator that requires a control to match a regex to its value.\n\t         * @param {?} pattern\n\t         * @return {?}\n\t         */\n\t        Validators.pattern = function (pattern) {\n\t            if (!pattern)\n\t                return Validators.nullValidator;\n\t            var /** @type {?} */ regex;\n\t            var /** @type {?} */ regexStr;\n\t            if (typeof pattern === 'string') {\n\t                regexStr = \"^\" + pattern + \"$\";\n\t                regex = new RegExp(regexStr);\n\t            }\n\t            else {\n\t                regexStr = pattern.toString();\n\t                regex = pattern;\n\t            }\n\t            return function (control) {\n\t                if (isEmptyInputValue(control.value)) {\n\t                    return null; // don't validate empty values to allow optional controls\n\t                }\n\t                var /** @type {?} */ value = control.value;\n\t                return regex.test(value) ? null :\n\t                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n\t            };\n\t        };\n\t        /**\n\t         * No-op validator.\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        Validators.nullValidator = function (c) { return null; };\n\t        /**\n\t         * Compose multiple validators into a single function that returns the union\n\t         * of the individual error maps.\n\t         * @param {?} validators\n\t         * @return {?}\n\t         */\n\t        Validators.compose = function (validators) {\n\t            if (!validators)\n\t                return null;\n\t            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n\t            if (presentValidators.length == 0)\n\t                return null;\n\t            return function (control) {\n\t                return _mergeErrors(_executeValidators(control, presentValidators));\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} validators\n\t         * @return {?}\n\t         */\n\t        Validators.composeAsync = function (validators) {\n\t            if (!validators)\n\t                return null;\n\t            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n\t            if (presentValidators.length == 0)\n\t                return null;\n\t            return function (control) {\n\t                var /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n\t                return Promise.all(promises).then(_mergeErrors);\n\t            };\n\t        };\n\t        return Validators;\n\t    }());\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function _convertToPromise(obj) {\n\t        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function _executeValidators(control, validators) {\n\t        return validators.map(function (v) { return v(control); });\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function _executeAsyncValidators(control, validators) {\n\t        return validators.map(function (v) { return v(control); });\n\t    }\n\t    /**\n\t     * @param {?} arrayOfErrors\n\t     * @return {?}\n\t     */\n\t    function _mergeErrors(arrayOfErrors) {\n\t        var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n\t            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n\t        }, {});\n\t        return Object.keys(res).length === 0 ? null : res;\n\t    }\n\t\n\t    /**\n\t     * Used to provide a {@link ControlValueAccessor} for form controls.\n\t     *\n\t     * See {@link DefaultValueAccessor} for how to implement one.\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\t\n\t    var /** @type {?} */ CHECKBOX_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n\t        multi: true,\n\t    };\n\t    /**\n\t     * The accessor for writing a value and listening to changes on a checkbox input element.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n\t     *  ```\n\t     *\n\t     *  \\@stable\n\t     */\n\t    var CheckboxControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        CheckboxControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n\t                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n\t                        providers: [CHECKBOX_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        CheckboxControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return CheckboxControlValueAccessor;\n\t    }());\n\t\n\t    var /** @type {?} */ DEFAULT_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * The default accessor for writing a value and listening to changes that is used by the\n\t     * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  <input type=\"text\" name=\"searchQuery\" ngModel>\n\t     *  ```\n\t     *\n\t     *  \\@stable\n\t     */\n\t    var DefaultValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function DefaultValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.writeValue = function (value) {\n\t            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        DefaultValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n\t                        // TODO: vsavkin replace the above selector with the one below it once\n\t                        // https://github.com/angular/angular/issues/3011 is implemented\n\t                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n\t                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n\t                        providers: [DEFAULT_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        DefaultValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return DefaultValueAccessor;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * @param {?} validator\n\t     * @return {?}\n\t     */\n\t    function normalizeValidator(validator) {\n\t        if (((validator)).validate) {\n\t            return function (c) { return ((validator)).validate(c); };\n\t        }\n\t        else {\n\t            return (validator);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} validator\n\t     * @return {?}\n\t     */\n\t    function normalizeAsyncValidator(validator) {\n\t        if (((validator)).validate) {\n\t            return function (c) { return ((validator)).validate(c); };\n\t        }\n\t        else {\n\t            return (validator);\n\t        }\n\t    }\n\t\n\t    var /** @type {?} */ NUMBER_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * The accessor for writing a number value and listening to changes that is used by the\n\t     * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  <input type=\"number\" [(ngModel)]=\"age\">\n\t     *  ```\n\t     */\n\t    var NumberValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function NumberValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.writeValue = function (value) {\n\t            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n\t            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n\t            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        NumberValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n\t                        host: {\n\t                            '(change)': 'onChange($event.target.value)',\n\t                            '(input)': 'onChange($event.target.value)',\n\t                            '(blur)': 'onTouched()'\n\t                        },\n\t                        providers: [NUMBER_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NumberValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return NumberValueAccessor;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$2 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function unimplemented() {\n\t        throw new Error('unimplemented');\n\t    }\n\t    /**\n\t     * A base class that all control directive extend.\n\t     * It binds a {\\@link FormControl} object to a DOM element.\n\t     *\n\t     * Used internally by Angular forms.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var NgControl = (function (_super) {\n\t        __extends$2(NgControl, _super);\n\t        function NgControl() {\n\t            _super.apply(this, arguments);\n\t            /** @internal */\n\t            this._parent = null;\n\t            this.name = null;\n\t            this.valueAccessor = null;\n\t            /** @internal */\n\t            this._rawValidators = [];\n\t            /** @internal */\n\t            this._rawAsyncValidators = [];\n\t        }\n\t        Object.defineProperty(NgControl.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return (unimplemented()); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return (unimplemented()); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @abstract\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        NgControl.prototype.viewToModelUpdate = function (newValue) { };\n\t        return NgControl;\n\t    }(AbstractControlDirective));\n\t\n\t    var /** @type {?} */ RADIO_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * Internal class used by Angular to uncheck radio buttons with the matching name.\n\t     */\n\t    var RadioControlRegistry = (function () {\n\t        function RadioControlRegistry() {\n\t            this._accessors = [];\n\t        }\n\t        /**\n\t         * @param {?} control\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype.add = function (control, accessor) {\n\t            this._accessors.push([control, accessor]);\n\t        };\n\t        /**\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype.remove = function (accessor) {\n\t            for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n\t                if (this._accessors[i][1] === accessor) {\n\t                    this._accessors.splice(i, 1);\n\t                    return;\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype.select = function (accessor) {\n\t            var _this = this;\n\t            this._accessors.forEach(function (c) {\n\t                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n\t                    c[1].fireUncheck(accessor.value);\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} controlPair\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n\t            if (!controlPair[0].control)\n\t                return false;\n\t            return controlPair[0]._parent === accessor._control._parent &&\n\t                controlPair[1].name === accessor.name;\n\t        };\n\t        RadioControlRegistry.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        RadioControlRegistry.ctorParameters = function () { return []; };\n\t        return RadioControlRegistry;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Writes radio control values and listens to radio control changes.\n\t     *\n\t     * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n\t     * to keep the view synced with the {\\@link FormControl} model.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n\t     * value accessor will be active on any radio control that has a form directive. You do\n\t     * **not** need to add a special selector to activate it.\n\t     *\n\t     * ### How to use radio buttons with form directives\n\t     *\n\t     * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n\t     * in the same group have the same `name` attribute.  Radio buttons with different `name`\n\t     * attributes do not affect each other.\n\t     *\n\t     * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n\t     *\n\t     * When using radio buttons in a reactive form, radio buttons in the same group should have the\n\t     * same `formControlName`. You can also add a `name` attribute, but it's optional.\n\t     *\n\t     * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n\t     *\n\t     *  * **npm package**: `\\@angular/forms`\n\t     *\n\t     *  \\@stable\n\t     */\n\t    var RadioControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         * @param {?} _registry\n\t         * @param {?} _injector\n\t         */\n\t        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this._registry = _registry;\n\t            this._injector = _injector;\n\t            this.onChange = function () { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.ngOnInit = function () {\n\t            this._control = this._injector.get(NgControl);\n\t            this._checkName();\n\t            this._registry.add(this._control, this);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.writeValue = function (value) {\n\t            this._state = value === this.value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this._fn = fn;\n\t            this.onChange = function () {\n\t                fn(_this.value);\n\t                _this._registry.select(_this);\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype._checkName = function () {\n\t            if (this.name && this.formControlName && this.name !== this.formControlName) {\n\t                this._throwNameError();\n\t            }\n\t            if (!this.name && this.formControlName)\n\t                this.name = this.formControlName;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype._throwNameError = function () {\n\t            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n\t        };\n\t        RadioControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n\t                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n\t                        providers: [RADIO_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RadioControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t            { type: RadioControlRegistry, },\n\t            { type: _angular_core.Injector, },\n\t        ]; };\n\t        RadioControlValueAccessor.propDecorators = {\n\t            'name': [{ type: _angular_core.Input },],\n\t            'formControlName': [{ type: _angular_core.Input },],\n\t            'value': [{ type: _angular_core.Input },],\n\t        };\n\t        return RadioControlValueAccessor;\n\t    }());\n\t\n\t    var /** @type {?} */ RANGE_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * The accessor for writing a range value and listening to changes that is used by the\n\t     * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  <input type=\"range\" [(ngModel)]=\"age\" >\n\t     *  ```\n\t     */\n\t    var RangeValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function RangeValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.writeValue = function (value) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.registerOnChange = function (fn) {\n\t            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        RangeValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n\t                        host: {\n\t                            '(change)': 'onChange($event.target.value)',\n\t                            '(input)': 'onChange($event.target.value)',\n\t                            '(blur)': 'onTouched()'\n\t                        },\n\t                        providers: [RANGE_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RangeValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return RangeValueAccessor;\n\t    }());\n\t\n\t    var /** @type {?} */ SELECT_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * @param {?} id\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function _buildValueString(id, value) {\n\t        if (id == null)\n\t            return \"\" + value;\n\t        if (!isPrimitive(value))\n\t            value = 'Object';\n\t        return (id + \": \" + value).slice(0, 50);\n\t    }\n\t    /**\n\t     * @param {?} valueString\n\t     * @return {?}\n\t     */\n\t    function _extractId(valueString) {\n\t        return valueString.split(':')[0];\n\t    }\n\t    /**\n\t     * \\@whatItDoes Writes values and listens to changes on a select element.\n\t     *\n\t     * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n\t     * to keep the view synced with the {\\@link FormControl} model.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n\t     * value accessor will be active on any select control that has a form directive. You do\n\t     * **not** need to add a special selector to activate it.\n\t     *\n\t     * ### How to use select controls with form directives\n\t     *\n\t     * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n\t     * attribute to the main `<select>` tag.\n\t     *\n\t     * If your option values are simple strings, you can bind to the normal `value` property\n\t     * on the option.  If your option values happen to be objects (and you'd like to save the\n\t     * selection in your form as an object), use `ngValue` instead:\n\t     *\n\t     * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n\t     *\n\t     * In reactive forms, you'll also want to add your form directive (`formControlName` or\n\t     * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n\t     * choice of binding to the  `value` or `ngValue` property on the select's options.\n\t     *\n\t     * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n\t     *\n\t     * Note: We listen to the 'change' event because 'input' events aren't fired\n\t     * for selects in Firefox and IE:\n\t     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n\t     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n\t     *\n\t     * * **npm package**: `\\@angular/forms`\n\t     *\n\t     * \\@stable\n\t     */\n\t    var SelectControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function SelectControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            /** @internal */\n\t            this._optionMap = new Map();\n\t            /** @internal */\n\t            this._idCounter = 0;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.writeValue = function (value) {\n\t            this.value = value;\n\t            var /** @type {?} */ valueString = _buildValueString(this._getOptionId(value), value);\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this.onChange = function (valueString) {\n\t                _this.value = valueString;\n\t                fn(_this._getOptionValue(valueString));\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n\t            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n\t                var id = _a[_i];\n\t                if (looseIdentical(this._optionMap.get(id), value))\n\t                    return id;\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} valueString\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n\t            var /** @type {?} */ id = _extractId(valueString);\n\t            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n\t        };\n\t        SelectControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n\t                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n\t                        providers: [SELECT_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        SelectControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return SelectControlValueAccessor;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var NgSelectOption = (function () {\n\t        /**\n\t         * @param {?} _element\n\t         * @param {?} _renderer\n\t         * @param {?} _select\n\t         */\n\t        function NgSelectOption(_element, _renderer, _select) {\n\t            this._element = _element;\n\t            this._renderer = _renderer;\n\t            this._select = _select;\n\t            if (this._select)\n\t                this.id = this._select._registerOption();\n\t        }\n\t        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                if (this._select == null)\n\t                    return;\n\t                this._select._optionMap.set(this.id, value);\n\t                this._setElementValue(_buildValueString(this.id, value));\n\t                this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                this._setElementValue(value);\n\t                if (this._select)\n\t                    this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * \\@internal\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgSelectOption.prototype._setElementValue = function (value) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgSelectOption.prototype.ngOnDestroy = function () {\n\t            if (this._select) {\n\t                this._select._optionMap.delete(this.id);\n\t                this._select.writeValue(this._select.value);\n\t            }\n\t        };\n\t        NgSelectOption.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgSelectOption.ctorParameters = function () { return [\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t        ]; };\n\t        NgSelectOption.propDecorators = {\n\t            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n\t            'value': [{ type: _angular_core.Input, args: ['value',] },],\n\t        };\n\t        return NgSelectOption;\n\t    }());\n\t\n\t    var /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * @param {?} id\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function _buildValueString$1(id, value) {\n\t        if (id == null)\n\t            return \"\" + value;\n\t        if (typeof value === 'string')\n\t            value = \"'\" + value + \"'\";\n\t        if (!isPrimitive(value))\n\t            value = 'Object';\n\t        return (id + \": \" + value).slice(0, 50);\n\t    }\n\t    /**\n\t     * @param {?} valueString\n\t     * @return {?}\n\t     */\n\t    function _extractId$1(valueString) {\n\t        return valueString.split(':')[0];\n\t    }\n\t    /**\n\t     * The accessor for writing a value and listening to changes on a select element.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var SelectMultipleControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            /** @internal */\n\t            this._optionMap = new Map();\n\t            /** @internal */\n\t            this._idCounter = 0;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n\t            var _this = this;\n\t            this.value = value;\n\t            var /** @type {?} */ optionSelectedStateSetter;\n\t            if (Array.isArray(value)) {\n\t                // convert values to ids\n\t                var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n\t                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n\t            }\n\t            else {\n\t                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n\t            }\n\t            this._optionMap.forEach(optionSelectedStateSetter);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this.onChange = function (_) {\n\t                var /** @type {?} */ selected = [];\n\t                if (_.hasOwnProperty('selectedOptions')) {\n\t                    var /** @type {?} */ options = _.selectedOptions;\n\t                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n\t                        var /** @type {?} */ opt = options.item(i);\n\t                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n\t                        selected.push(val);\n\t                    }\n\t                }\n\t                else {\n\t                    var /** @type {?} */ options = (_.options);\n\t                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n\t                        var /** @type {?} */ opt = options.item(i);\n\t                        if (opt.selected) {\n\t                            var /** @type {?} */ val = _this._getOptionValue(opt.value);\n\t                            selected.push(val);\n\t                        }\n\t                    }\n\t                }\n\t                _this.value = selected;\n\t                fn(selected);\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n\t            var /** @type {?} */ id = (this._idCounter++).toString();\n\t            this._optionMap.set(id, value);\n\t            return id;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n\t            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n\t                var id = _a[_i];\n\t                if (looseIdentical(this._optionMap.get(id)._value, value))\n\t                    return id;\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} valueString\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n\t            var /** @type {?} */ id = _extractId$1(valueString);\n\t            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n\t        };\n\t        SelectMultipleControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n\t                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n\t                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return SelectMultipleControlValueAccessor;\n\t    }());\n\t    /**\n\t     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <select multiple name=\"city\" ngModel>\n\t     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n\t     * </select>\n\t     * ```\n\t     */\n\t    var NgSelectMultipleOption = (function () {\n\t        /**\n\t         * @param {?} _element\n\t         * @param {?} _renderer\n\t         * @param {?} _select\n\t         */\n\t        function NgSelectMultipleOption(_element, _renderer, _select) {\n\t            this._element = _element;\n\t            this._renderer = _renderer;\n\t            this._select = _select;\n\t            if (this._select) {\n\t                this.id = this._select._registerOption(this);\n\t            }\n\t        }\n\t        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                if (this._select == null)\n\t                    return;\n\t                this._value = value;\n\t                this._setElementValue(_buildValueString$1(this.id, value));\n\t                this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                if (this._select) {\n\t                    this._value = value;\n\t                    this._setElementValue(_buildValueString$1(this.id, value));\n\t                    this._select.writeValue(this._select.value);\n\t                }\n\t                else {\n\t                    this._setElementValue(value);\n\t                }\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * \\@internal\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} selected\n\t         * @return {?}\n\t         */\n\t        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n\t            if (this._select) {\n\t                this._select._optionMap.delete(this.id);\n\t                this._select.writeValue(this._select.value);\n\t            }\n\t        };\n\t        NgSelectMultipleOption.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgSelectMultipleOption.ctorParameters = function () { return [\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t        ]; };\n\t        NgSelectMultipleOption.propDecorators = {\n\t            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n\t            'value': [{ type: _angular_core.Input, args: ['value',] },],\n\t        };\n\t        return NgSelectMultipleOption;\n\t    }());\n\t\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} parent\n\t     * @return {?}\n\t     */\n\t    function controlPath(name, parent) {\n\t        return parent.path.concat([name]);\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function setUpControl(control, dir) {\n\t        if (!control)\n\t            _throwError(dir, 'Cannot find control with');\n\t        if (!dir.valueAccessor)\n\t            _throwError(dir, 'No value accessor for form control with');\n\t        control.validator = Validators.compose([control.validator, dir.validator]);\n\t        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n\t        dir.valueAccessor.writeValue(control.value);\n\t        // view -> model\n\t        dir.valueAccessor.registerOnChange(function (newValue) {\n\t            dir.viewToModelUpdate(newValue);\n\t            control.markAsDirty();\n\t            control.setValue(newValue, { emitModelToViewChange: false });\n\t        });\n\t        // touched\n\t        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n\t        control.registerOnChange(function (newValue, emitModelEvent) {\n\t            // control -> view\n\t            dir.valueAccessor.writeValue(newValue);\n\t            // control -> ngModel\n\t            if (emitModelEvent)\n\t                dir.viewToModelUpdate(newValue);\n\t        });\n\t        if (dir.valueAccessor.setDisabledState) {\n\t            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n\t        }\n\t        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n\t        dir._rawValidators.forEach(function (validator) {\n\t            if (((validator)).registerOnValidatorChange)\n\t                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n\t        });\n\t        dir._rawAsyncValidators.forEach(function (validator) {\n\t            if (((validator)).registerOnValidatorChange)\n\t                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function cleanUpControl(control, dir) {\n\t        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n\t        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n\t        dir._rawValidators.forEach(function (validator) {\n\t            if (validator.registerOnValidatorChange) {\n\t                validator.registerOnValidatorChange(null);\n\t            }\n\t        });\n\t        dir._rawAsyncValidators.forEach(function (validator) {\n\t            if (validator.registerOnValidatorChange) {\n\t                validator.registerOnValidatorChange(null);\n\t            }\n\t        });\n\t        if (control)\n\t            control._clearChangeFns();\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function setUpFormContainer(control, dir) {\n\t        if (isBlank(control))\n\t            _throwError(dir, 'Cannot find control with');\n\t        control.validator = Validators.compose([control.validator, dir.validator]);\n\t        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n\t    }\n\t    /**\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function _noControlError(dir) {\n\t        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n\t    }\n\t    /**\n\t     * @param {?} dir\n\t     * @param {?} message\n\t     * @return {?}\n\t     */\n\t    function _throwError(dir, message) {\n\t        var /** @type {?} */ messageEnd;\n\t        if (dir.path.length > 1) {\n\t            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n\t        }\n\t        else if (dir.path[0]) {\n\t            messageEnd = \"name: '\" + dir.path + \"'\";\n\t        }\n\t        else {\n\t            messageEnd = 'unspecified name attribute';\n\t        }\n\t        throw new Error(message + \" \" + messageEnd);\n\t    }\n\t    /**\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function composeValidators(validators) {\n\t        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n\t    }\n\t    /**\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function composeAsyncValidators(validators) {\n\t        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n\t            null;\n\t    }\n\t    /**\n\t     * @param {?} changes\n\t     * @param {?} viewModel\n\t     * @return {?}\n\t     */\n\t    function isPropertyUpdated(changes, viewModel) {\n\t        if (!changes.hasOwnProperty('model'))\n\t            return false;\n\t        var /** @type {?} */ change = changes['model'];\n\t        if (change.isFirstChange())\n\t            return true;\n\t        return !looseIdentical(viewModel, change.currentValue);\n\t    }\n\t    var /** @type {?} */ BUILTIN_ACCESSORS = [\n\t        CheckboxControlValueAccessor,\n\t        RangeValueAccessor,\n\t        NumberValueAccessor,\n\t        SelectControlValueAccessor,\n\t        SelectMultipleControlValueAccessor,\n\t        RadioControlValueAccessor,\n\t    ];\n\t    /**\n\t     * @param {?} valueAccessor\n\t     * @return {?}\n\t     */\n\t    function isBuiltInAccessor(valueAccessor) {\n\t        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n\t    }\n\t    /**\n\t     * @param {?} dir\n\t     * @param {?} valueAccessors\n\t     * @return {?}\n\t     */\n\t    function selectValueAccessor(dir, valueAccessors) {\n\t        if (!valueAccessors)\n\t            return null;\n\t        var /** @type {?} */ defaultAccessor;\n\t        var /** @type {?} */ builtinAccessor;\n\t        var /** @type {?} */ customAccessor;\n\t        valueAccessors.forEach(function (v) {\n\t            if (v.constructor === DefaultValueAccessor) {\n\t                defaultAccessor = v;\n\t            }\n\t            else if (isBuiltInAccessor(v)) {\n\t                if (builtinAccessor)\n\t                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n\t                builtinAccessor = v;\n\t            }\n\t            else {\n\t                if (customAccessor)\n\t                    _throwError(dir, 'More than one custom value accessor matches form control with');\n\t                customAccessor = v;\n\t            }\n\t        });\n\t        if (customAccessor)\n\t            return customAccessor;\n\t        if (builtinAccessor)\n\t            return builtinAccessor;\n\t        if (defaultAccessor)\n\t            return defaultAccessor;\n\t        _throwError(dir, 'No valid value accessor for form control with');\n\t        return null;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var AbstractFormGroupDirective = (function (_super) {\n\t        __extends(AbstractFormGroupDirective, _super);\n\t        function AbstractFormGroupDirective() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n\t            this._checkParentType();\n\t            this.formDirective.addFormGroup(this);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeFormGroup(this);\n\t            }\n\t        };\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n\t            /**\n\t             * Get the {\\@link FormGroup} backing this binding.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.formDirective.getFormGroup(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n\t            /**\n\t             * Get the path to this control group.\n\t             * @return {?}\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n\t            /**\n\t             * Get the {\\@link Form} to which this group belongs.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._validators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeAsyncValidators(this._asyncValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n\t        return AbstractFormGroupDirective;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$3 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var AbstractControlStatus = (function () {\n\t        /**\n\t         * @param {?} cd\n\t         */\n\t        function AbstractControlStatus(cd) {\n\t            this._cd = cd;\n\t        }\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.untouched : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.touched : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.pristine : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.dirty : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.valid : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.invalid : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.pending : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AbstractControlStatus;\n\t    }());\n\t    var /** @type {?} */ ngControlStatusHost = {\n\t        '[class.ng-untouched]': 'ngClassUntouched',\n\t        '[class.ng-touched]': 'ngClassTouched',\n\t        '[class.ng-pristine]': 'ngClassPristine',\n\t        '[class.ng-dirty]': 'ngClassDirty',\n\t        '[class.ng-valid]': 'ngClassValid',\n\t        '[class.ng-invalid]': 'ngClassInvalid',\n\t        '[class.ng-pending]': 'ngClassPending',\n\t    };\n\t    /**\n\t     * Directive automatically applied to Angular form controls that sets CSS classes\n\t     * based on control status (valid/invalid/dirty/etc).\n\t     *\n\t     * \\@stable\n\t     */\n\t    var NgControlStatus = (function (_super) {\n\t        __extends$3(NgControlStatus, _super);\n\t        /**\n\t         * @param {?} cd\n\t         */\n\t        function NgControlStatus(cd) {\n\t            _super.call(this, cd);\n\t        }\n\t        NgControlStatus.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgControlStatus.ctorParameters = function () { return [\n\t            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n\t        ]; };\n\t        return NgControlStatus;\n\t    }(AbstractControlStatus));\n\t    /**\n\t     * Directive automatically applied to Angular form groups that sets CSS classes\n\t     * based on control status (valid/invalid/dirty/etc).\n\t     *\n\t     * \\@stable\n\t     */\n\t    var NgControlStatusGroup = (function (_super) {\n\t        __extends$3(NgControlStatusGroup, _super);\n\t        /**\n\t         * @param {?} cd\n\t         */\n\t        function NgControlStatusGroup(cd) {\n\t            _super.call(this, cd);\n\t        }\n\t        NgControlStatusGroup.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n\t                        host: ngControlStatusHost\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgControlStatusGroup.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n\t        ]; };\n\t        return NgControlStatusGroup;\n\t    }(AbstractControlStatus));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$5 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Use by directives and components to emit custom Events.\n\t     *\n\t     * ### Examples\n\t     *\n\t     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n\t     * title gets clicked:\n\t     *\n\t     * ```\n\t     * \\@Component({\n\t     *   selector: 'zippy',\n\t     *   template: `\n\t     *   <div class=\"zippy\">\n\t     *     <div (click)=\"toggle()\">Toggle</div>\n\t     *     <div [hidden]=\"!visible\">\n\t     *       <ng-content></ng-content>\n\t     *     </div>\n\t     *  </div>`})\n\t     * export class Zippy {\n\t     *   visible: boolean = true;\n\t     *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n\t     *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n\t     *\n\t     *   toggle() {\n\t     *     this.visible = !this.visible;\n\t     *     if (this.visible) {\n\t     *       this.open.emit(null);\n\t     *     } else {\n\t     *       this.close.emit(null);\n\t     *     }\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * The events payload can be accessed by the parameter `$event` on the components output event\n\t     * handler:\n\t     *\n\t     * ```\n\t     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n\t     * ```\n\t     *\n\t     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n\t     * https://github.com/jhusain/observable-spec\n\t     *\n\t     * Once a reference implementation of the spec is available, switch to it.\n\t     * \\@stable\n\t     */\n\t    var EventEmitter = (function (_super) {\n\t        __extends$5(EventEmitter, _super);\n\t        /**\n\t         * Creates an instance of [EventEmitter], which depending on [isAsync],\n\t         * delivers events synchronously or asynchronously.\n\t         * @param {?=} isAsync\n\t         */\n\t        function EventEmitter(isAsync) {\n\t            if (isAsync === void 0) { isAsync = false; }\n\t            _super.call(this);\n\t            this.__isAsync = isAsync;\n\t        }\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n\t        /**\n\t         * @param {?=} generatorOrNext\n\t         * @param {?=} error\n\t         * @param {?=} complete\n\t         * @return {?}\n\t         */\n\t        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n\t            var /** @type {?} */ schedulerFn;\n\t            var /** @type {?} */ errorFn = function (err) { return null; };\n\t            var /** @type {?} */ completeFn = function () { return null; };\n\t            if (generatorOrNext && typeof generatorOrNext === 'object') {\n\t                schedulerFn = this.__isAsync ? function (value) {\n\t                    setTimeout(function () { return generatorOrNext.next(value); });\n\t                } : function (value) { generatorOrNext.next(value); };\n\t                if (generatorOrNext.error) {\n\t                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n\t                        function (err) { generatorOrNext.error(err); };\n\t                }\n\t                if (generatorOrNext.complete) {\n\t                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n\t                        function () { generatorOrNext.complete(); };\n\t                }\n\t            }\n\t            else {\n\t                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n\t                    function (value) { generatorOrNext(value); };\n\t                if (error) {\n\t                    errorFn =\n\t                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n\t                }\n\t                if (complete) {\n\t                    completeFn =\n\t                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n\t                }\n\t            }\n\t            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n\t        };\n\t        return EventEmitter;\n\t    }(rxjs_Subject.Subject));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$6 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n\t     */\n\t    var /** @type {?} */ VALID = 'VALID';\n\t    /**\n\t     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n\t     */\n\t    var /** @type {?} */ INVALID = 'INVALID';\n\t    /**\n\t     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n\t     * errors are not yet available for the input value.\n\t     */\n\t    var /** @type {?} */ PENDING = 'PENDING';\n\t    /**\n\t     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n\t     * calculations of validity or value.\n\t     */\n\t    var /** @type {?} */ DISABLED = 'DISABLED';\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} path\n\t     * @param {?} delimiter\n\t     * @return {?}\n\t     */\n\t    function _find(control, path, delimiter) {\n\t        if (path == null)\n\t            return null;\n\t        if (!(path instanceof Array)) {\n\t            path = ((path)).split(delimiter);\n\t        }\n\t        if (path instanceof Array && (path.length === 0))\n\t            return null;\n\t        return ((path)).reduce(function (v, name) {\n\t            if (v instanceof FormGroup) {\n\t                return v.controls[name] || null;\n\t            }\n\t            if (v instanceof FormArray) {\n\t                return v.at(/** @type {?} */ (name)) || null;\n\t            }\n\t            return null;\n\t        }, control);\n\t    }\n\t    /**\n\t     * @param {?} r\n\t     * @return {?}\n\t     */\n\t    function toObservable(r) {\n\t        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n\t    }\n\t    /**\n\t     * @param {?} validator\n\t     * @return {?}\n\t     */\n\t    function coerceToValidator(validator) {\n\t        return Array.isArray(validator) ? composeValidators(validator) : validator;\n\t    }\n\t    /**\n\t     * @param {?} asyncValidator\n\t     * @return {?}\n\t     */\n\t    function coerceToAsyncValidator(asyncValidator) {\n\t        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n\t    }\n\t    /**\n\t     * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n\t     * {\\@link FormArray}.\n\t     *\n\t     * It provides some of the shared behavior that all controls and groups of controls have, like\n\t     * running validators, calculating status, and resetting state. It also defines the properties\n\t     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n\t     * instantiated directly.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var AbstractControl = (function () {\n\t        /**\n\t         * @param {?} validator\n\t         * @param {?} asyncValidator\n\t         */\n\t        function AbstractControl(validator, asyncValidator) {\n\t            this.validator = validator;\n\t            this.asyncValidator = asyncValidator;\n\t            /** @internal */\n\t            this._onCollectionChange = function () { };\n\t            this._pristine = true;\n\t            this._touched = false;\n\t            /** @internal */\n\t            this._onDisabledChange = [];\n\t        }\n\t        Object.defineProperty(AbstractControl.prototype, \"value\", {\n\t            /**\n\t             * The value of the control.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._value; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"parent\", {\n\t            /**\n\t             * The parent control.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"status\", {\n\t            /**\n\t             * The validation status of the control. There are four possible\n\t             * validation statuses:\n\t             *\n\t             * * **VALID**:  control has passed all validation checks\n\t             * * **INVALID**: control has failed at least one validation check\n\t             * * **PENDING**: control is in the midst of conducting a validation check\n\t             * * **DISABLED**: control is exempt from validation checks\n\t             *\n\t             * These statuses are mutually exclusive, so a control cannot be\n\t             * both valid AND invalid or invalid AND disabled.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n\t            /**\n\t             * A control is `valid` when its `status === VALID`.\n\t             *\n\t             * In order to have this status, the control must have passed all its\n\t             * validation checks.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status === VALID; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n\t            /**\n\t             * A control is `invalid` when its `status === INVALID`.\n\t             *\n\t             * In order to have this status, the control must have failed\n\t             * at least one of its validation checks.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status === INVALID; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n\t            /**\n\t             * A control is `pending` when its `status === PENDING`.\n\t             *\n\t             * In order to have this status, the control must be in the\n\t             * middle of conducting a validation check.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status == PENDING; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n\t            /**\n\t             * A control is `disabled` when its `status === DISABLED`.\n\t             *\n\t             * Disabled controls are exempt from validation checks and\n\t             * are not included in the aggregate value of their ancestor\n\t             * controls.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status === DISABLED; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n\t            /**\n\t             * A control is `enabled` as long as its `status !== DISABLED`.\n\t             *\n\t             * In other words, it has a status of `VALID`, `INVALID`, or\n\t             * `PENDING`.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status !== DISABLED; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n\t            /**\n\t             * Returns any errors generated by failing validation. If there\n\t             * are no errors, it will return null.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._errors; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n\t            /**\n\t             * A control is `pristine` if the user has not yet changed\n\t             * the value in the UI.\n\t             *\n\t             * Note that programmatic changes to a control's value will\n\t             * *not* mark it dirty.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._pristine; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n\t            /**\n\t             * A control is `dirty` if the user has changed the value\n\t             * in the UI.\n\t             *\n\t             * Note that programmatic changes to a control's value will\n\t             * *not* mark it dirty.\n\t             * @return {?}\n\t             */\n\t            get: function () { return !this.pristine; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n\t            /**\n\t             * A control is marked `touched` once the user has triggered\n\t             * a `blur` event on it.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._touched; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n\t            /**\n\t             * A control is `untouched` if the user has not yet triggered\n\t             * a `blur` event on it.\n\t             * @return {?}\n\t             */\n\t            get: function () { return !this._touched; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n\t            /**\n\t             * Emits an event every time the value of the control changes, in\n\t             * the UI or programmatically.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._valueChanges; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n\t            /**\n\t             * Emits an event every time the validation status of the control\n\t             * is re-calculated.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._statusChanges; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * Sets the synchronous validators that are active on this control.  Calling\n\t         * this will overwrite any existing sync validators.\n\t         * @param {?} newValidator\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setValidators = function (newValidator) {\n\t            this.validator = coerceToValidator(newValidator);\n\t        };\n\t        /**\n\t         * Sets the async validators that are active on this control. Calling this\n\t         * will overwrite any existing async validators.\n\t         * @param {?} newValidator\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n\t            this.asyncValidator = coerceToAsyncValidator(newValidator);\n\t        };\n\t        /**\n\t         * Empties out the sync validator list.\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n\t        /**\n\t         * Empties out the async validator list.\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n\t        /**\n\t         * Marks the control as `touched`.\n\t         *\n\t         * This will also mark all direct ancestors as `touched` to maintain\n\t         * the model.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsTouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = true;\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.markAsTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * Marks the control as `untouched`.\n\t         *\n\t         * If the control has any children, it will also mark all children as `untouched`\n\t         * to maintain the model, and re-calculate the `touched` status of all parent\n\t         * controls.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsUntouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = false;\n\t            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updateTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * Marks the control as `dirty`.\n\t         *\n\t         * This will also mark all direct ancestors as `dirty` to maintain\n\t         * the model.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsDirty = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = false;\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.markAsDirty({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * Marks the control as `pristine`.\n\t         *\n\t         * If the control has any children, it will also mark all children as `pristine`\n\t         * to maintain the model, and re-calculate the `pristine` status of all parent\n\t         * controls.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsPristine = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = true;\n\t            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updatePristine({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * Marks the control as `pending`.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsPending = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._status = PENDING;\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.markAsPending({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * Disables the control. This means the control will be exempt from validation checks and\n\t         * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n\t         *\n\t         * If the control has children, all children will be disabled to maintain the model.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.disable = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._status = DISABLED;\n\t            this._errors = null;\n\t            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n\t            this._updateValue();\n\t            if (emitEvent !== false) {\n\t                this._valueChanges.emit(this._value);\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            this._updateAncestors(onlySelf);\n\t            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n\t        };\n\t        /**\n\t         * Enables the control. This means the control will be included in validation checks and\n\t         * the aggregate value of its parent. Its status is re-calculated based on its value and\n\t         * its validators.\n\t         *\n\t         * If the control has children, all children will be enabled.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.enable = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._status = VALID;\n\t            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n\t            this._updateAncestors(onlySelf);\n\t            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n\t        };\n\t        /**\n\t         * @param {?} onlySelf\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.updateValueAndValidity();\n\t                this._parent._updatePristine();\n\t                this._parent._updateTouched();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} parent\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n\t        /**\n\t         * Sets the value of the control. Abstract method (implemented in sub-classes).\n\t         * @abstract\n\t         * @param {?} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setValue = function (value, options) { };\n\t        /**\n\t         * Patches the value of the control. Abstract method (implemented in sub-classes).\n\t         * @abstract\n\t         * @param {?} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.patchValue = function (value, options) { };\n\t        /**\n\t         * Resets the control. Abstract method (implemented in sub-classes).\n\t         * @abstract\n\t         * @param {?=} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.reset = function (value, options) { };\n\t        /**\n\t         * Re-calculates the value and validation status of the control.\n\t         *\n\t         * By default, it will also update the value and validity of its ancestors.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._setInitialStatus();\n\t            this._updateValue();\n\t            if (this.enabled) {\n\t                this._errors = this._runValidator();\n\t                this._status = this._calculateStatus();\n\t                if (this._status === VALID || this._status === PENDING) {\n\t                    this._runAsyncValidator(emitEvent);\n\t                }\n\t            }\n\t            if (emitEvent !== false) {\n\t                this._valueChanges.emit(this._value);\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateTreeValidity = function (_a) {\n\t            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n\t            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._runValidator = function () {\n\t            return this.validator ? this.validator(this) : null;\n\t        };\n\t        /**\n\t         * @param {?} emitEvent\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n\t            var _this = this;\n\t            if (this.asyncValidator) {\n\t                this._status = PENDING;\n\t                this._cancelExistingSubscription();\n\t                var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n\t                this._asyncValidationSubscription =\n\t                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._cancelExistingSubscription = function () {\n\t            if (this._asyncValidationSubscription) {\n\t                this._asyncValidationSubscription.unsubscribe();\n\t            }\n\t        };\n\t        /**\n\t         * Sets errors on a form control.\n\t         *\n\t         * This is used when validations are run manually by the user, rather than automatically.\n\t         *\n\t         * Calling `setErrors` will also update the validity of the parent control.\n\t         *\n\t         * ### Example\n\t         *\n\t         * ```\n\t         * const login = new FormControl(\"someLogin\");\n\t         * login.setErrors({\n\t         *   \"notUnique\": true\n\t         * });\n\t         *\n\t         * expect(login.valid).toEqual(false);\n\t         * expect(login.errors).toEqual({\"notUnique\": true});\n\t         *\n\t         * login.setValue(\"someOtherLogin\");\n\t         *\n\t         * expect(login.valid).toEqual(true);\n\t         * ```\n\t         * @param {?} errors\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setErrors = function (errors, _a) {\n\t            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n\t            this._errors = errors;\n\t            this._updateControlsErrors(emitEvent !== false);\n\t        };\n\t        /**\n\t         * Retrieves a child control given the control's name or path.\n\t         *\n\t         * Paths can be passed in as an array or a string delimited by a dot.\n\t         *\n\t         * To get a control nested within a `person` sub-group:\n\t         *\n\t         * * `this.form.get('person.name');`\n\t         *\n\t         * -OR-\n\t         *\n\t         * * `this.form.get(['person', 'name']);`\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n\t        /**\n\t         * Returns true if the control with the given path has the error specified. Otherwise\n\t         * returns null or undefined.\n\t         *\n\t         * If no path is given, it checks for the error on the present control.\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.getError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            var /** @type {?} */ control = path ? this.get(path) : this;\n\t            return control && control._errors ? control._errors[errorCode] : null;\n\t        };\n\t        /**\n\t         * Returns true if the control with the given path has the error specified. Otherwise\n\t         * returns false.\n\t         *\n\t         * If no path is given, it checks for the error on the present control.\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.hasError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return !!this.getError(errorCode, path);\n\t        };\n\t        Object.defineProperty(AbstractControl.prototype, \"root\", {\n\t            /**\n\t             * Retrieves the top-level ancestor of this control.\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ x = this;\n\t                while (x._parent) {\n\t                    x = x._parent;\n\t                }\n\t                return x;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * \\@internal\n\t         * @param {?} emitEvent\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n\t            this._status = this._calculateStatus();\n\t            if (emitEvent) {\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            if (this._parent) {\n\t                this._parent._updateControlsErrors(emitEvent);\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._initObservables = function () {\n\t            this._valueChanges = new EventEmitter();\n\t            this._statusChanges = new EventEmitter();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._calculateStatus = function () {\n\t            if (this._allControlsDisabled())\n\t                return DISABLED;\n\t            if (this._errors)\n\t                return INVALID;\n\t            if (this._anyControlsHaveStatus(PENDING))\n\t                return PENDING;\n\t            if (this._anyControlsHaveStatus(INVALID))\n\t                return INVALID;\n\t            return VALID;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateValue = function () { };\n\t        /**\n\t         * \\@internal\n\t         * @abstract\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._forEachChild = function (cb) { };\n\t        /**\n\t         * \\@internal\n\t         * @abstract\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControls = function (condition) { };\n\t        /**\n\t         * \\@internal\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._allControlsDisabled = function () { };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} status\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n\t            return this._anyControls(function (control) { return control.status === status; });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControlsDirty = function () {\n\t            return this._anyControls(function (control) { return control.dirty; });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControlsTouched = function () {\n\t            return this._anyControls(function (control) { return control.touched; });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updatePristine = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = !this._anyControlsDirty();\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updatePristine({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateTouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = this._anyControlsTouched();\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updateTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} formState\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._isBoxedValue = function (formState) {\n\t            return typeof formState === 'object' && formState !== null &&\n\t                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n\t        return AbstractControl;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Tracks the value and validation status of an individual form control.\n\t     *\n\t     * It is one of the three fundamental building blocks of Angular forms, along with\n\t     * {\\@link FormGroup} and {\\@link FormArray}.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n\t     * first argument. Example:\n\t     *\n\t     * ```ts\n\t     * const ctrl = new FormControl('some value');\n\t     * console.log(ctrl.value);     // 'some value'\n\t     * ```\n\t     *\n\t     * You can also initialize the control with a form state object on instantiation,\n\t     * which includes both the value and whether or not the control is disabled.\n\t     * You can't use the value key without the disabled key; both are required\n\t     * to use this way of initialization.\n\t     *\n\t     * ```ts\n\t     * const ctrl = new FormControl({value: 'n/a', disabled: true});\n\t     * console.log(ctrl.value);     // 'n/a'\n\t     * console.log(ctrl.status);   // 'DISABLED'\n\t     * ```\n\t     *\n\t     * To include a sync validator (or an array of sync validators) with the control,\n\t     * pass it in as the second argument. Async validators are also supported, but\n\t     * have to be passed in separately as the third arg.\n\t     *\n\t     * ```ts\n\t     * const ctrl = new FormControl('', Validators.required);\n\t     * console.log(ctrl.value);     // ''\n\t     * console.log(ctrl.status);   // 'INVALID'\n\t     * ```\n\t     *\n\t     * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n\t     *\n\t     * * **npm package**: `\\@angular/forms`\n\t     *\n\t     * \\@stable\n\t     */\n\t    var FormControl = (function (_super) {\n\t        __extends$6(FormControl, _super);\n\t        /**\n\t         * @param {?=} formState\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         */\n\t        function FormControl(formState, validator, asyncValidator) {\n\t            if (formState === void 0) { formState = null; }\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n\t            /** @internal */\n\t            this._onChange = [];\n\t            this._applyFormState(formState);\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t            this._initObservables();\n\t        }\n\t        /**\n\t         * Set the value of the form control to `value`.\n\t         *\n\t         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n\t         * and not its parent component. This defaults to false.\n\t         *\n\t         * If `emitEvent` is `true`, this\n\t         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n\t         * to true (as it falls through to `updateValueAndValidity`).\n\t         *\n\t         * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n\t         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n\t         * specified.\n\t         *\n\t         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n\t         * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n\t            this._value = value;\n\t            if (this._onChange.length && emitModelToViewChange !== false) {\n\t                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });\n\t            }\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * Patches the value of a control.\n\t         *\n\t         * This function is functionally the same as {\\@link FormControl.setValue} at this level.\n\t         * It exists for symmetry with {\\@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n\t         * where it does behave differently.\n\t         * @param {?} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.patchValue = function (value, options) {\n\t            if (options === void 0) { options = {}; }\n\t            this.setValue(value, options);\n\t        };\n\t        /**\n\t         * Resets the form control. This means by default:\n\t         *\n\t         * * it is marked as `pristine`\n\t         * * it is marked as `untouched`\n\t         * * value is set to null\n\t         *\n\t         * You can also reset to a specific form state by passing through a standalone\n\t         * value or a form state object that contains both a value and a disabled state\n\t         * (these are the only two properties that cannot be calculated).\n\t         *\n\t         * Ex:\n\t         *\n\t         * ```ts\n\t         * this.control.reset('Nancy');\n\t         *\n\t         * console.log(this.control.value);  // 'Nancy'\n\t         * ```\n\t         *\n\t         * OR\n\t         *\n\t         * ```\n\t         * this.control.reset({value: 'Nancy', disabled: true});\n\t         *\n\t         * console.log(this.control.value);  // 'Nancy'\n\t         * console.log(this.control.status);  // 'DISABLED'\n\t         * ```\n\t         * @param {?=} formState\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.reset = function (formState, _a) {\n\t            if (formState === void 0) { formState = null; }\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._applyFormState(formState);\n\t            this.markAsPristine({ onlySelf: onlySelf });\n\t            this.markAsUntouched({ onlySelf: onlySelf });\n\t            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._updateValue = function () { };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._anyControls = function (condition) { return false; };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n\t        /**\n\t         * Register a listener for change events.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._clearChangeFns = function () {\n\t            this._onChange = [];\n\t            this._onDisabledChange = [];\n\t            this._onCollectionChange = function () { };\n\t        };\n\t        /**\n\t         * Register a listener for disabled events.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.registerOnDisabledChange = function (fn) {\n\t            this._onDisabledChange.push(fn);\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._forEachChild = function (cb) { };\n\t        /**\n\t         * @param {?} formState\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._applyFormState = function (formState) {\n\t            if (this._isBoxedValue(formState)) {\n\t                this._value = formState.value;\n\t                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n\t                    this.enable({ onlySelf: true, emitEvent: false });\n\t            }\n\t            else {\n\t                this._value = formState;\n\t            }\n\t        };\n\t        return FormControl;\n\t    }(AbstractControl));\n\t    /**\n\t     * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n\t     * instances.\n\t     *\n\t     * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n\t     * with each control name as the key.  It calculates its status by reducing the statuses\n\t     * of its children. For example, if one of the controls in a group is invalid, the entire\n\t     * group becomes invalid.\n\t     *\n\t     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n\t     * along with {\\@link FormControl} and {\\@link FormArray}.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n\t     * argument. The key for each child will be the name under which it is registered.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * const form = new FormGroup({\n\t     *   first: new FormControl('Nancy', Validators.minLength(2)),\n\t     *   last: new FormControl('Drew'),\n\t     * });\n\t     *\n\t     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n\t     * console.log(form.status);  // 'VALID'\n\t     * ```\n\t     *\n\t     * You can also include group-level validators as the second arg, or group-level async\n\t     * validators as the third arg. These come in handy when you want to perform validation\n\t     * that considers the value of more than one child control.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * const form = new FormGroup({\n\t     *   password: new FormControl('', Validators.minLength(2)),\n\t     *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n\t     * }, passwordMatchValidator);\n\t     *\n\t     *\n\t     * function passwordMatchValidator(g: FormGroup) {\n\t     *    return g.get('password').value === g.get('passwordConfirm').value\n\t     *       ? null : {'mismatch': true};\n\t     * }\n\t     * ```\n\t     *\n\t     * * **npm package**: `\\@angular/forms`\n\t     *\n\t     * \\@stable\n\t     */\n\t    var FormGroup = (function (_super) {\n\t        __extends$6(FormGroup, _super);\n\t        /**\n\t         * @param {?} controls\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         */\n\t        function FormGroup(controls, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, validator, asyncValidator);\n\t            this.controls = controls;\n\t            this._initObservables();\n\t            this._setUpControls();\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t        }\n\t        /**\n\t         * Registers a control with the group's list of controls.\n\t         *\n\t         * This method does not update value or validity of the control, so for\n\t         * most cases you'll want to use {\\@link FormGroup.addControl} instead.\n\t         * @param {?} name\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.registerControl = function (name, control) {\n\t            if (this.controls[name])\n\t                return this.controls[name];\n\t            this.controls[name] = control;\n\t            control.setParent(this);\n\t            control._registerOnCollectionChange(this._onCollectionChange);\n\t            return control;\n\t        };\n\t        /**\n\t         * Add a control to this group.\n\t         * @param {?} name\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.addControl = function (name, control) {\n\t            this.registerControl(name, control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Remove a control from this group.\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.removeControl = function (name) {\n\t            if (this.controls[name])\n\t                this.controls[name]._registerOnCollectionChange(function () { });\n\t            delete (this.controls[name]);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Replace an existing control.\n\t         * @param {?} name\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.setControl = function (name, control) {\n\t            if (this.controls[name])\n\t                this.controls[name]._registerOnCollectionChange(function () { });\n\t            delete (this.controls[name]);\n\t            if (control)\n\t                this.registerControl(name, control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Check whether there is an enabled control with the given name in the group.\n\t         *\n\t         * It will return false for disabled controls. If you'd like to check for\n\t         * existence in the group only, use {\\@link AbstractControl.get} instead.\n\t         * @param {?} controlName\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.contains = function (controlName) {\n\t            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n\t        };\n\t        /**\n\t         *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n\t         *  the structure of the group, with control names as keys.\n\t         *\n\t         * This method performs strict checks, so it will throw an error if you try\n\t         * to set the value of a control that doesn't exist or if you exclude the\n\t         * value of a control.\n\t         *\n\t         *  ### Example\n\t         *\n\t         *  ```\n\t         *  const form = new FormGroup({\n\t         *     first: new FormControl(),\n\t         *     last: new FormControl()\n\t         *  });\n\t         *  console.log(form.value);   // {first: null, last: null}\n\t         *\n\t         *  form.setValue({first: 'Nancy', last: 'Drew'});\n\t         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n\t         *\n\t         *  ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._checkAllValuesPresent(value);\n\t            Object.keys(value).forEach(function (name) {\n\t                _this._throwIfControlMissing(name);\n\t                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n\t         *  names as keys, and will do its best to match the values to the correct controls\n\t         *  in the group.\n\t         *\n\t         *  It accepts both super-sets and sub-sets of the group without throwing an error.\n\t         *\n\t         *  ### Example\n\t         *\n\t         *  ```\n\t         *  const form = new FormGroup({\n\t         *     first: new FormControl(),\n\t         *     last: new FormControl()\n\t         *  });\n\t         *  console.log(form.value);   // {first: null, last: null}\n\t         *\n\t         *  form.patchValue({first: 'Nancy'});\n\t         *  console.log(form.value);   // {first: 'Nancy', last: null}\n\t         *\n\t         *  ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.patchValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            Object.keys(value).forEach(function (name) {\n\t                if (_this.controls[name]) {\n\t                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n\t                }\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * Resets the {\\@link FormGroup}. This means by default:\n\t         *\n\t         * * The group and all descendants are marked `pristine`\n\t         * * The group and all descendants are marked `untouched`\n\t         * * The value of all descendants will be null or null maps\n\t         *\n\t         * You can also reset to a specific form state by passing in a map of states\n\t         * that matches the structure of your form, with control names as keys. The state\n\t         * can be a standalone value or a form state object with both a value and a disabled\n\t         * status.\n\t         *\n\t         * ### Example\n\t         *\n\t         * ```ts\n\t         * this.form.reset({first: 'name', last: 'last name'});\n\t         *\n\t         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n\t         * ```\n\t         *\n\t         * - OR -\n\t         *\n\t         * ```\n\t         * this.form.reset({\n\t         *   first: {value: 'name', disabled: true},\n\t         *   last: 'last'\n\t         * });\n\t         *\n\t         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n\t         * console.log(this.form.get('first').status);  // 'DISABLED'\n\t         * ```\n\t         * @param {?=} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.reset = function (value, _a) {\n\t            if (value === void 0) { value = {}; }\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._forEachChild(function (control, name) {\n\t                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            this._updatePristine({ onlySelf: onlySelf });\n\t            this._updateTouched({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n\t         *\n\t         * If you'd like to include all values regardless of disabled status, use this method.\n\t         * Otherwise, the `value` property is the best way to get the value of the group.\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.getRawValue = function () {\n\t            return this._reduceChildren({}, function (acc, control, name) {\n\t                acc[name] = control.value;\n\t                return acc;\n\t            });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._throwIfControlMissing = function (name) {\n\t            if (!Object.keys(this.controls).length) {\n\t                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n\t            }\n\t            if (!this.controls[name]) {\n\t                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._forEachChild = function (cb) {\n\t            var _this = this;\n\t            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._setUpControls = function () {\n\t            var _this = this;\n\t            this._forEachChild(function (control) {\n\t                control.setParent(_this);\n\t                control._registerOnCollectionChange(_this._onCollectionChange);\n\t            });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._anyControls = function (condition) {\n\t            var _this = this;\n\t            var /** @type {?} */ res = false;\n\t            this._forEachChild(function (control, name) {\n\t                res = res || (_this.contains(name) && condition(control));\n\t            });\n\t            return res;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._reduceValue = function () {\n\t            var _this = this;\n\t            return this._reduceChildren({}, function (acc, control, name) {\n\t                if (control.enabled || _this.disabled) {\n\t                    acc[name] = control.value;\n\t                }\n\t                return acc;\n\t            });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} initValue\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n\t            var /** @type {?} */ res = initValue;\n\t            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n\t            return res;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._allControlsDisabled = function () {\n\t            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n\t                var controlName = _a[_i];\n\t                if (this.controls[controlName].enabled) {\n\t                    return false;\n\t                }\n\t            }\n\t            return Object.keys(this.controls).length > 0 || this.disabled;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._checkAllValuesPresent = function (value) {\n\t            this._forEachChild(function (control, name) {\n\t                if (value[name] === undefined) {\n\t                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n\t                }\n\t            });\n\t        };\n\t        return FormGroup;\n\t    }(AbstractControl));\n\t    /**\n\t     * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl}\n\t     * instances.\n\t     *\n\t     * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n\t     * It calculates its status by reducing the statuses of its children. For example, if one of\n\t     * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n\t     *\n\t     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n\t     * along with {\\@link FormControl} and {\\@link FormGroup}.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n\t     * argument.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * const arr = new FormArray([\n\t     *   new FormControl('Nancy', Validators.minLength(2)),\n\t     *   new FormControl('Drew'),\n\t     * ]);\n\t     *\n\t     * console.log(arr.value);   // ['Nancy', 'Drew']\n\t     * console.log(arr.status);  // 'VALID'\n\t     * ```\n\t     *\n\t     * You can also include array-level validators as the second arg, or array-level async\n\t     * validators as the third arg. These come in handy when you want to perform validation\n\t     * that considers the value of more than one child control.\n\t     *\n\t     * ### Adding or removing controls\n\t     *\n\t     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n\t     * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n\t     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n\t     * the `FormArray` directly, as that will result in strange and unexpected behavior such\n\t     * as broken change detection.\n\t     *\n\t     * * **npm package**: `\\@angular/forms`\n\t     *\n\t     * \\@stable\n\t     */\n\t    var FormArray = (function (_super) {\n\t        __extends$6(FormArray, _super);\n\t        /**\n\t         * @param {?} controls\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         */\n\t        function FormArray(controls, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, validator, asyncValidator);\n\t            this.controls = controls;\n\t            this._initObservables();\n\t            this._setUpControls();\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t        }\n\t        /**\n\t         * Get the {\\@link AbstractControl} at the given `index` in the array.\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.at = function (index) { return this.controls[index]; };\n\t        /**\n\t         * Insert a new {\\@link AbstractControl} at the end of the array.\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.push = function (control) {\n\t            this.controls.push(control);\n\t            this._registerControl(control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n\t         * @param {?} index\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.insert = function (index, control) {\n\t            this.controls.splice(index, 0, control);\n\t            this._registerControl(control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Remove the control at the given `index` in the array.\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.removeAt = function (index) {\n\t            if (this.controls[index])\n\t                this.controls[index]._registerOnCollectionChange(function () { });\n\t            this.controls.splice(index, 1);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         * Replace an existing control.\n\t         * @param {?} index\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.setControl = function (index, control) {\n\t            if (this.controls[index])\n\t                this.controls[index]._registerOnCollectionChange(function () { });\n\t            this.controls.splice(index, 1);\n\t            if (control) {\n\t                this.controls.splice(index, 0, control);\n\t                this._registerControl(control);\n\t            }\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        Object.defineProperty(FormArray.prototype, \"length\", {\n\t            /**\n\t             * Length of the control array.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.controls.length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n\t         *  the structure of the control.\n\t         *\n\t         * This method performs strict checks, so it will throw an error if you try\n\t         * to set the value of a control that doesn't exist or if you exclude the\n\t         * value of a control.\n\t         *\n\t         *  ### Example\n\t         *\n\t         *  ```\n\t         *  const arr = new FormArray([\n\t         *     new FormControl(),\n\t         *     new FormControl()\n\t         *  ]);\n\t         *  console.log(arr.value);   // [null, null]\n\t         *\n\t         *  arr.setValue(['Nancy', 'Drew']);\n\t         *  console.log(arr.value);   // ['Nancy', 'Drew']\n\t         *  ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._checkAllValuesPresent(value);\n\t            value.forEach(function (newValue, index) {\n\t                _this._throwIfControlMissing(index);\n\t                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n\t         *  structure of the control, and will do its best to match the values to the correct\n\t         *  controls in the group.\n\t         *\n\t         *  It accepts both super-sets and sub-sets of the array without throwing an error.\n\t         *\n\t         *  ### Example\n\t         *\n\t         *  ```\n\t         *  const arr = new FormArray([\n\t         *     new FormControl(),\n\t         *     new FormControl()\n\t         *  ]);\n\t         *  console.log(arr.value);   // [null, null]\n\t         *\n\t         *  arr.patchValue(['Nancy']);\n\t         *  console.log(arr.value);   // ['Nancy', null]\n\t         *  ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.patchValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            value.forEach(function (newValue, index) {\n\t                if (_this.at(index)) {\n\t                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n\t                }\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * Resets the {\\@link FormArray}. This means by default:\n\t         *\n\t         * * The array and all descendants are marked `pristine`\n\t         * * The array and all descendants are marked `untouched`\n\t         * * The value of all descendants will be null or null maps\n\t         *\n\t         * You can also reset to a specific form state by passing in an array of states\n\t         * that matches the structure of the control. The state can be a standalone value\n\t         * or a form state object with both a value and a disabled status.\n\t         *\n\t         * ### Example\n\t         *\n\t         * ```ts\n\t         * this.arr.reset(['name', 'last name']);\n\t         *\n\t         * console.log(this.arr.value);  // ['name', 'last name']\n\t         * ```\n\t         *\n\t         * - OR -\n\t         *\n\t         * ```\n\t         * this.arr.reset([\n\t         *   {value: 'name', disabled: true},\n\t         *   'last'\n\t         * ]);\n\t         *\n\t         * console.log(this.arr.value);  // ['name', 'last name']\n\t         * console.log(this.arr.get(0).status);  // 'DISABLED'\n\t         * ```\n\t         * @param {?=} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.reset = function (value, _a) {\n\t            if (value === void 0) { value = []; }\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._forEachChild(function (control, index) {\n\t                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            this._updatePristine({ onlySelf: onlySelf });\n\t            this._updateTouched({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         * The aggregate value of the array, including any disabled controls.\n\t         *\n\t         * If you'd like to include all values regardless of disabled status, use this method.\n\t         * Otherwise, the `value` property is the best way to get the value of the array.\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._throwIfControlMissing = function (index) {\n\t            if (!this.controls.length) {\n\t                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n\t            }\n\t            if (!this.at(index)) {\n\t                throw new Error(\"Cannot find form control at index \" + index);\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._forEachChild = function (cb) {\n\t            this.controls.forEach(function (control, index) { cb(control, index); });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._updateValue = function () {\n\t            var _this = this;\n\t            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n\t                .map(function (control) { return control.value; });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._anyControls = function (condition) {\n\t            return this.controls.some(function (control) { return control.enabled && condition(control); });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._setUpControls = function () {\n\t            var _this = this;\n\t            this._forEachChild(function (control) { return _this._registerControl(control); });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._checkAllValuesPresent = function (value) {\n\t            this._forEachChild(function (control, i) {\n\t                if (value[i] === undefined) {\n\t                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._allControlsDisabled = function () {\n\t            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n\t                var control = _a[_i];\n\t                if (control.enabled)\n\t                    return false;\n\t            }\n\t            return this.controls.length > 0 || this.disabled;\n\t        };\n\t        /**\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._registerControl = function (control) {\n\t            control.setParent(this);\n\t            control._registerOnCollectionChange(this._onCollectionChange);\n\t        };\n\t        return FormArray;\n\t    }(AbstractControl));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$4 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formDirectiveProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n\t    };\n\t    var /** @type {?} */ resolvedPromise = Promise.resolve(null);\n\t    /**\n\t     * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n\t     * to track aggregate form value and validation status.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * As soon as you import the `FormsModule`, this directive becomes active by default on\n\t     * all `<form>` tags.  You don't need to add a special selector.\n\t     *\n\t     * You can export the directive into a local template variable using `ngForm` as the key\n\t     * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n\t     * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n\t     * will give you access to the aggregate value and validity status of the form, as well as\n\t     * user interaction properties like `dirty` and `touched`.\n\t     *\n\t     * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n\t     * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n\t     * sub-groups within the form.\n\t     *\n\t     * You can listen to the directive's `ngSubmit` event to be notified when the user has\n\t     * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n\t     * submission event.\n\t     *\n\t     * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n\t     *\n\t     * * **npm package**: `\\@angular/forms`\n\t     *\n\t     * * **NgModule**: `FormsModule`\n\t     *\n\t     *  \\@stable\n\t     */\n\t    var NgForm = (function (_super) {\n\t        __extends$4(NgForm, _super);\n\t        /**\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function NgForm(validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._submitted = false;\n\t            this.ngSubmit = new EventEmitter();\n\t            this.form =\n\t                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n\t        }\n\t        Object.defineProperty(NgForm.prototype, \"submitted\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._submitted; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"controls\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form.controls; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.addControl = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                dir._control = (container.registerControl(dir.name, dir.control));\n\t                setUpControl(dir.control, dir);\n\t                dir.control.updateValueAndValidity({ emitEvent: false });\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.removeControl = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                if (container) {\n\t                    container.removeControl(dir.name);\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.addFormGroup = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                var /** @type {?} */ group = new FormGroup({});\n\t                setUpFormContainer(group, dir);\n\t                container.registerControl(dir.name, group);\n\t                group.updateValueAndValidity({ emitEvent: false });\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.removeFormGroup = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                if (container) {\n\t                    container.removeControl(dir.name);\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.updateModel = function (dir, value) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ ctrl = (_this.form.get(dir.path));\n\t                ctrl.setValue(value);\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n\t        /**\n\t         * @param {?} $event\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.onSubmit = function ($event) {\n\t            this._submitted = true;\n\t            this.ngSubmit.emit($event);\n\t            return false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.onReset = function () { this.resetForm(); };\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.resetForm = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            this.form.reset(value);\n\t            this._submitted = false;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype._findContainer = function (path) {\n\t            path.pop();\n\t            return path.length ? (this.form.get(path)) : this.form;\n\t        };\n\t        NgForm.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n\t                        providers: [formDirectiveProvider],\n\t                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n\t                        outputs: ['ngSubmit'],\n\t                        exportAs: 'ngForm'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgForm.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        return NgForm;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var /** @type {?} */ Examples = {\n\t        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n\t        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n\t        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n\t        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n\t        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n\t    };\n\t\n\t    var TemplateDrivenErrors = (function () {\n\t        function TemplateDrivenErrors() {\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.modelParentException = function () {\n\t            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.formGroupNameException = function () {\n\t            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.missingNameException = function () {\n\t            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.modelGroupParentException = function () {\n\t            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n\t        };\n\t        return TemplateDrivenErrors;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$8 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ modelGroupProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n\t    };\n\t    /**\n\t     * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n\t     * within `<form>` tags).\n\t     *\n\t     * Use this directive if you'd like to create a sub-group within a form. This can\n\t     * come in handy if you want to validate a sub-group of your form separately from\n\t     * the rest of your form, or if some values in your domain model make more sense to\n\t     * consume together in a nested object.\n\t     *\n\t     * Pass in the name you'd like this sub-group to have and it will become the key\n\t     * for the sub-group in the form's full value. You can also export the directive into\n\t     * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n\t     *\n\t     * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n\t     *\n\t     * * **npm package**: `\\@angular/forms`\n\t     *\n\t     * * **NgModule**: `FormsModule`\n\t     *\n\t     * \\@stable\n\t     */\n\t    var NgModelGroup = (function (_super) {\n\t        __extends$8(NgModelGroup, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function NgModelGroup(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        NgModelGroup.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n\t                TemplateDrivenErrors.modelGroupParentException();\n\t            }\n\t        };\n\t        NgModelGroup.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgModelGroup.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        NgModelGroup.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n\t        };\n\t        return NgModelGroup;\n\t    }(AbstractFormGroupDirective));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$7 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formControlBinding = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n\t    };\n\t    /**\n\t     * `ngModel` forces an additional change detection run when its inputs change:\n\t     * E.g.:\n\t     * ```\n\t     * <div>{{myModel.valid}}</div>\n\t     * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n\t     * ```\n\t     * I.e. `ngModel` can export itself on the element and then be used in the template.\n\t     * Normally, this would result in expressions before the `input` that use the exported directive\n\t     * to have and old value as they have been\n\t     * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n\t     * detection run.\n\t     *\n\t     * Notes:\n\t     * - this is just one extra run no matter how many `ngModel` have been changed.\n\t     * - this is a general problem when using `exportAs` for directives!\n\t     */\n\t    var /** @type {?} */ resolvedPromise$1 = Promise.resolve(null);\n\t    /**\n\t     * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n\t     * to a form control element.\n\t     *\n\t     * The {\\@link FormControl} instance will track the value, user interaction, and\n\t     * validation status of the control and keep the view synced with the model. If used\n\t     * within a parent form, the directive will also register itself with the form as a child\n\t     * control.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * This directive can be used by itself or as part of a larger form. All you need is the\n\t     * `ngModel` selector to activate it.\n\t     *\n\t     * It accepts a domain model as an optional {\\@link \\@Input}. If you have a one-way binding\n\t     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n\t     * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n\t     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n\t     * the domain model in your class as well.\n\t     *\n\t     * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n\t     * validity state), you can also export the directive into a local template variable using\n\t     * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n\t     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n\t     * will fall through to the control anyway, so you can access them directly. You can see a\n\t     * full list of properties directly available in {\\@link AbstractControlDirective}.\n\t     *\n\t     * The following is an example of a simple standalone control using `ngModel`:\n\t     *\n\t     * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n\t     *\n\t     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n\t     * so that the control can be registered with the parent form under that name.\n\t     *\n\t     * It's worth noting that in the context of a parent form, you often can skip one-way or\n\t     * two-way binding because the parent form will sync the value for you. You can access\n\t     * its properties by exporting it into a local template variable using `ngForm` (ex:\n\t     * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n\t     *\n\t     * If you do need to populate initial values into your form, using a one-way binding for\n\t     * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n\t     * than the domain model's value on submit.\n\t     *\n\t     * Take a look at an example of using `ngModel` within a form:\n\t     *\n\t     * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n\t     *\n\t     * To see `ngModel` examples with different form control types, see:\n\t     *\n\t     * * Radio buttons: {\\@link RadioControlValueAccessor}\n\t     * * Selects: {\\@link SelectControlValueAccessor}\n\t     *\n\t     * **npm package**: `\\@angular/forms`\n\t     *\n\t     * **NgModule**: `FormsModule`\n\t     *\n\t     *  \\@stable\n\t     */\n\t    var NgModel = (function (_super) {\n\t        __extends$7(NgModel, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         * @param {?} valueAccessors\n\t         */\n\t        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            /** @internal */\n\t            this._control = new FormControl();\n\t            /** @internal */\n\t            this._registered = false;\n\t            this.update = new EventEmitter();\n\t            this._parent = parent;\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype.ngOnChanges = function (changes) {\n\t            this._checkForErrors();\n\t            if (!this._registered)\n\t                this._setUpControl();\n\t            if ('isDisabled' in changes) {\n\t                this._updateDisabled(changes);\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this._updateValue(this.model);\n\t                this.viewModel = this.model;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n\t        Object.defineProperty(NgModel.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._control; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._setUpControl = function () {\n\t            this._isStandalone() ? this._setUpStandalone() :\n\t                this.formDirective.addControl(this);\n\t            this._registered = true;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._isStandalone = function () {\n\t            return !this._parent || (this.options && this.options.standalone);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._setUpStandalone = function () {\n\t            setUpControl(this._control, this);\n\t            this._control.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._checkForErrors = function () {\n\t            if (!this._isStandalone()) {\n\t                this._checkParentType();\n\t            }\n\t            this._checkName();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof NgModelGroup) &&\n\t                this._parent instanceof AbstractFormGroupDirective) {\n\t                TemplateDrivenErrors.formGroupNameException();\n\t            }\n\t            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n\t                TemplateDrivenErrors.modelParentException();\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._checkName = function () {\n\t            if (this.options && this.options.name)\n\t                this.name = this.options.name;\n\t            if (!this._isStandalone() && !this.name) {\n\t                TemplateDrivenErrors.missingNameException();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._updateValue = function (value) {\n\t            var _this = this;\n\t            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n\t        };\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._updateDisabled = function (changes) {\n\t            var _this = this;\n\t            var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n\t            var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\t            resolvedPromise$1.then(function () {\n\t                if (isDisabled && !_this.control.disabled) {\n\t                    _this.control.disable();\n\t                }\n\t                else if (!isDisabled && _this.control.disabled) {\n\t                    _this.control.enable();\n\t                }\n\t            });\n\t        };\n\t        NgModel.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n\t                        providers: [formControlBinding],\n\t                        exportAs: 'ngModel'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgModel.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ]; };\n\t        NgModel.propDecorators = {\n\t            'name': [{ type: _angular_core.Input },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t        };\n\t        return NgModel;\n\t    }(NgControl));\n\t\n\t    var ReactiveErrors = (function () {\n\t        function ReactiveErrors() {\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.controlParentException = function () {\n\t            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.ngModelGroupException = function () {\n\t            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.missingFormException = function () {\n\t            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.groupParentException = function () {\n\t            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.arrayParentException = function () {\n\t            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.disabledAttrWarning = function () {\n\t            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n\t        };\n\t        return ReactiveErrors;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$9 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formControlBinding$1 = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n\t    };\n\t    /**\n\t     * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n\t     *\n\t     * In other words, this directive ensures that any values written to the {\\@link FormControl}\n\t     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n\t     * any values written to the DOM element through user input will be reflected in the\n\t     * {\\@link FormControl} instance (view -> model).\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n\t     * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n\t     * {\\@link FormControlDirective}.\n\t     *\n\t     * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n\t     * it does not require that your {\\@link FormControl} instance be part of any parent\n\t     * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n\t     * exists above it.\n\t     *\n\t     * **Get the value**: the `value` property is always synced and available on the\n\t     * {\\@link FormControl} instance. See a full list of available properties in\n\t     * {\\@link AbstractControl}.\n\t     *\n\t     * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n\t     * or you can set it programmatically later using {\\@link AbstractControl.setValue} or\n\t     * {\\@link AbstractControl.patchValue}.\n\t     *\n\t     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n\t     * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n\t     * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n\t     * re-calculated.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n\t     *\n\t     * * **npm package**: `\\@angular/forms`\n\t     *\n\t     * * **NgModule**: `ReactiveFormsModule`\n\t     *\n\t     *  \\@stable\n\t     */\n\t    var FormControlDirective = (function (_super) {\n\t        __extends$9(FormControlDirective, _super);\n\t        /**\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         * @param {?} valueAccessors\n\t         */\n\t        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            this.update = new EventEmitter();\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n\t            /**\n\t             * @param {?} isDisabled\n\t             * @return {?}\n\t             */\n\t            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormControlDirective.prototype.ngOnChanges = function (changes) {\n\t            if (this._isControlChanged(changes)) {\n\t                setUpControl(this.form, this);\n\t                if (this.control.disabled && this.valueAccessor.setDisabledState) {\n\t                    this.valueAccessor.setDisabledState(true);\n\t                }\n\t                this.form.updateValueAndValidity({ emitEvent: false });\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this.form.setValue(this.model);\n\t                this.viewModel = this.model;\n\t            }\n\t        };\n\t        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormControlDirective.prototype._isControlChanged = function (changes) {\n\t            return changes.hasOwnProperty('form');\n\t        };\n\t        FormControlDirective.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormControlDirective.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ]; };\n\t        FormControlDirective.propDecorators = {\n\t            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t        };\n\t        return FormControlDirective;\n\t    }(NgControl));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$11 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formDirectiveProvider$1 = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n\t    };\n\t    /**\n\t     * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n\t     * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n\t     * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n\t     * and {\\@link FormArrayName} directives.\n\t     *\n\t     * **Set value**: You can set the form's initial value when instantiating the\n\t     * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n\t     * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue} methods.\n\t     *\n\t     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n\t     * to the {\\@link FormGroup}'s {\\@link AbstractControl.valueChanges} event.  You can also listen to\n\t     * its {\\@link AbstractControl.statusChanges} event to be notified when the validation status is\n\t     * re-calculated.\n\t     *\n\t     * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n\t     * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n\t     * submission event.\n\t     *\n\t     * ### Example\n\t     *\n\t     * In this example, we create form controls for first name and last name.\n\t     *\n\t     * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n\t     *\n\t     * **npm package**: `\\@angular/forms`\n\t     *\n\t     * **NgModule**: {\\@link ReactiveFormsModule}\n\t     *\n\t     *  \\@stable\n\t     */\n\t    var FormGroupDirective = (function (_super) {\n\t        __extends$11(FormGroupDirective, _super);\n\t        /**\n\t         * @param {?} _validators\n\t         * @param {?} _asyncValidators\n\t         */\n\t        function FormGroupDirective(_validators, _asyncValidators) {\n\t            _super.call(this);\n\t            this._validators = _validators;\n\t            this._asyncValidators = _asyncValidators;\n\t            this._submitted = false;\n\t            this.directives = [];\n\t            this.form = null;\n\t            this.ngSubmit = new EventEmitter();\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n\t            this._checkFormPresent();\n\t            if (changes.hasOwnProperty('form')) {\n\t                this._updateValidators();\n\t                this._updateDomValue();\n\t                this._updateRegistrations();\n\t            }\n\t        };\n\t        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._submitted; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.addControl = function (dir) {\n\t            var /** @type {?} */ ctrl = this.form.get(dir.path);\n\t            setUpControl(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t            this.directives.push(dir);\n\t            return ctrl;\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.addFormGroup = function (dir) {\n\t            var /** @type {?} */ ctrl = this.form.get(dir.path);\n\t            setUpFormContainer(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.addFormArray = function (dir) {\n\t            var /** @type {?} */ ctrl = this.form.get(dir.path);\n\t            setUpFormContainer(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.updateModel = function (dir, value) {\n\t            var /** @type {?} */ ctrl = (this.form.get(dir.path));\n\t            ctrl.setValue(value);\n\t        };\n\t        /**\n\t         * @param {?} $event\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.onSubmit = function ($event) {\n\t            this._submitted = true;\n\t            this.ngSubmit.emit($event);\n\t            return false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.resetForm = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            this.form.reset(value);\n\t            this._submitted = false;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._updateDomValue = function () {\n\t            var _this = this;\n\t            this.directives.forEach(function (dir) {\n\t                var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n\t                if (dir._control !== newCtrl) {\n\t                    cleanUpControl(dir._control, dir);\n\t                    if (newCtrl)\n\t                        setUpControl(newCtrl, dir);\n\t                    dir._control = newCtrl;\n\t                }\n\t            });\n\t            this.form._updateTreeValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._updateRegistrations = function () {\n\t            var _this = this;\n\t            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n\t            if (this._oldForm)\n\t                this._oldForm._registerOnCollectionChange(function () { });\n\t            this._oldForm = this.form;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._updateValidators = function () {\n\t            var /** @type {?} */ sync = composeValidators(this._validators);\n\t            this.form.validator = Validators.compose([this.form.validator, sync]);\n\t            var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n\t            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._checkFormPresent = function () {\n\t            if (!this.form) {\n\t                ReactiveErrors.missingFormException();\n\t            }\n\t        };\n\t        FormGroupDirective.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[formGroup]',\n\t                        providers: [formDirectiveProvider$1],\n\t                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n\t                        exportAs: 'ngForm'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormGroupDirective.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        FormGroupDirective.propDecorators = {\n\t            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n\t            'ngSubmit': [{ type: _angular_core.Output },],\n\t        };\n\t        return FormGroupDirective;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$12 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formGroupNameProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n\t    };\n\t    /**\n\t     * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n\t     * `[formGroup]`).\n\t     *\n\t     * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n\t     * will look for a {\\@link FormGroup} registered with that name in the parent\n\t     * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n\t     *\n\t     * Nested form groups can come in handy when you want to validate a sub-group of a\n\t     * form separately from the rest or when you'd like to group the values of certain\n\t     * controls into their own nested object.\n\t     *\n\t     * **Access the group**: You can access the associated {\\@link FormGroup} using the\n\t     * {\\@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n\t     *\n\t     * You can also access individual controls within the group using dot syntax.\n\t     * Ex: `this.form.get('name.first')`\n\t     *\n\t     * **Get the value**: the `value` property is always synced and available on the\n\t     * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n\t     *\n\t     * **Set the value**: You can set an initial value for each child control when instantiating\n\t     * the {\\@link FormGroup}, or you can set it programmatically later using\n\t     * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n\t     *\n\t     * **Listen to value**: If you want to listen to changes in the value of the group, you can\n\t     * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n\t     * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n\t     * re-calculated.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n\t     *\n\t     * * **npm package**: `\\@angular/forms`\n\t     *\n\t     * * **NgModule**: `ReactiveFormsModule`\n\t     *\n\t     * \\@stable\n\t     */\n\t    var FormGroupName = (function (_super) {\n\t        __extends$12(FormGroupName, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function FormGroupName(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        FormGroupName.prototype._checkParentType = function () {\n\t            if (_hasInvalidParent(this._parent)) {\n\t                ReactiveErrors.groupParentException();\n\t            }\n\t        };\n\t        FormGroupName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormGroupName.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        FormGroupName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n\t        };\n\t        return FormGroupName;\n\t    }(AbstractFormGroupDirective));\n\t    var /** @type {?} */ formArrayNameProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n\t    };\n\t    /**\n\t     * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n\t     * `[formGroup]`).\n\t     *\n\t     * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n\t     * will look for a {\\@link FormArray} registered with that name in the parent\n\t     * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n\t     *\n\t     * Nested form arrays can come in handy when you have a group of form controls but\n\t     * you're not sure how many there will be. Form arrays allow you to create new\n\t     * form controls dynamically.\n\t     *\n\t     * **Access the array**: You can access the associated {\\@link FormArray} using the\n\t     * {\\@link AbstractControl.get} method on the parent {\\@link FormGroup}.\n\t     * Ex: `this.form.get('cities')`.\n\t     *\n\t     * **Get the value**: the `value` property is always synced and available on the\n\t     * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n\t     *\n\t     * **Set the value**: You can set an initial value for each child control when instantiating\n\t     * the {\\@link FormArray}, or you can set the value programmatically later using the\n\t     * {\\@link FormArray}'s {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}\n\t     * methods.\n\t     *\n\t     * **Listen to value**: If you want to listen to changes in the value of the array, you can\n\t     * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl.valueChanges} event.  You can also\n\t     * listen to its {\\@link AbstractControl.statusChanges} event to be notified when the validation\n\t     * status is re-calculated.\n\t     *\n\t     * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by\n\t     * calling its {\\@link FormArray.push} method.\n\t     *  Ex: `this.form.get('cities').push(new FormControl());`\n\t     *\n\t     * ### Example\n\t     *\n\t     * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n\t     *\n\t     * * **npm package**: `\\@angular/forms`\n\t     *\n\t     * * **NgModule**: `ReactiveFormsModule`\n\t     *\n\t     * \\@stable\n\t     */\n\t    var FormArrayName = (function (_super) {\n\t        __extends$12(FormArrayName, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function FormArrayName(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArrayName.prototype.ngOnInit = function () {\n\t            this._checkParentType();\n\t            this.formDirective.addFormArray(this);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArrayName.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeFormArray(this);\n\t            }\n\t        };\n\t        Object.defineProperty(FormArrayName.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.formDirective.getFormArray(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._parent ? (this._parent.formDirective) : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._validators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeAsyncValidators(this._asyncValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArrayName.prototype._checkParentType = function () {\n\t            if (_hasInvalidParent(this._parent)) {\n\t                ReactiveErrors.arrayParentException();\n\t            }\n\t        };\n\t        FormArrayName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormArrayName.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        FormArrayName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n\t        };\n\t        return FormArrayName;\n\t    }(ControlContainer));\n\t    /**\n\t     * @param {?} parent\n\t     * @return {?}\n\t     */\n\t    function _hasInvalidParent(parent) {\n\t        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n\t            !(parent instanceof FormArrayName);\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$10 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ controlNameBinding = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n\t    };\n\t    /**\n\t     * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n\t     * element by name.\n\t     *\n\t     * In other words, this directive ensures that any values written to the {\\@link FormControl}\n\t     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n\t     * any values written to the DOM element through user input will be reflected in the\n\t     * {\\@link FormControl} instance (view -> model).\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n\t     * `[formGroup]`).\n\t     *\n\t     * It accepts the string name of the {\\@link FormControl} instance you want to\n\t     * link, and will look for a {\\@link FormControl} registered with that name in the\n\t     * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n\t     *\n\t     * **Access the control**: You can access the {\\@link FormControl} associated with\n\t     * this directive by using the {\\@link AbstractControl.get} method.\n\t     * Ex: `this.form.get('first');`\n\t     *\n\t     * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n\t     * See a full list of available properties in {\\@link AbstractControl}.\n\t     *\n\t     *  **Set value**: You can set an initial value for the control when instantiating the\n\t     *  {\\@link FormControl}, or you can set it programmatically later using\n\t     *  {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n\t     *\n\t     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n\t     * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n\t     * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n\t     * re-calculated.\n\t     *\n\t     * ### Example\n\t     *\n\t     * In this example, we create form controls for first name and last name.\n\t     *\n\t     * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n\t     *\n\t     * To see `formControlName` examples with different form control types, see:\n\t     *\n\t     * * Radio buttons: {\\@link RadioControlValueAccessor}\n\t     * * Selects: {\\@link SelectControlValueAccessor}\n\t     *\n\t     * **npm package**: `\\@angular/forms`\n\t     *\n\t     * **NgModule**: {\\@link ReactiveFormsModule}\n\t     *\n\t     *  \\@stable\n\t     */\n\t    var FormControlName = (function (_super) {\n\t        __extends$10(FormControlName, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         * @param {?} valueAccessors\n\t         */\n\t        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            this._added = false;\n\t            this.update = new EventEmitter();\n\t            this._parent = parent;\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n\t            /**\n\t             * @param {?} isDisabled\n\t             * @return {?}\n\t             */\n\t            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype.ngOnChanges = function (changes) {\n\t            if (!this._added)\n\t                this._setUpControl();\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this.viewModel = this.model;\n\t                this.formDirective.updateModel(this, this.model);\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeControl(this);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        Object.defineProperty(FormControlName.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._control; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof FormGroupName) &&\n\t                this._parent instanceof AbstractFormGroupDirective) {\n\t                ReactiveErrors.ngModelGroupException();\n\t            }\n\t            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n\t                !(this._parent instanceof FormArrayName)) {\n\t                ReactiveErrors.controlParentException();\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype._setUpControl = function () {\n\t            this._checkParentType();\n\t            this._control = this.formDirective.addControl(this);\n\t            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n\t                this.valueAccessor.setDisabledState(true);\n\t            }\n\t            this._added = true;\n\t        };\n\t        FormControlName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormControlName.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ]; };\n\t        FormControlName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t        };\n\t        return FormControlName;\n\t    }(NgControl));\n\t\n\t    var __extends$13 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ REQUIRED_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n\t        multi: true\n\t    };\n\t    var /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return CheckboxRequiredValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A Directive that adds the `required` validator to any controls marked with the\n\t     * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <input name=\"fullName\" ngModel required>\n\t     * ```\n\t     *\n\t     * \\@stable\n\t     */\n\t    var RequiredValidator = (function () {\n\t        function RequiredValidator() {\n\t        }\n\t        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._required; },\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                this._required = value != null && value !== false && \"\" + value !== 'false';\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        RequiredValidator.prototype.validate = function (c) {\n\t            return this.required ? Validators.required(c) : null;\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        RequiredValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n\t                        providers: [REQUIRED_VALIDATOR],\n\t                        host: { '[attr.required]': 'required ? \"\" : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RequiredValidator.ctorParameters = function () { return []; };\n\t        RequiredValidator.propDecorators = {\n\t            'required': [{ type: _angular_core.Input },],\n\t        };\n\t        return RequiredValidator;\n\t    }());\n\t    /**\n\t     * A Directive that adds the `required` validator to checkbox controls marked with the\n\t     * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <input type=\"checkbox\" name=\"active\" ngModel required>\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var CheckboxRequiredValidator = (function (_super) {\n\t        __extends$13(CheckboxRequiredValidator, _super);\n\t        function CheckboxRequiredValidator() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        CheckboxRequiredValidator.prototype.validate = function (c) {\n\t            return this.required ? Validators.requiredTrue(c) : null;\n\t        };\n\t        CheckboxRequiredValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n\t                        providers: [CHECKBOX_REQUIRED_VALIDATOR],\n\t                        host: { '[attr.required]': 'required ? \"\" : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        CheckboxRequiredValidator.ctorParameters = function () { return []; };\n\t        return CheckboxRequiredValidator;\n\t    }(RequiredValidator));\n\t    /**\n\t     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n\t     *\n\t     * ## Example:\n\t     *\n\t     * {@example common/forms/ts/validators/validators.ts region='min'}\n\t     */\n\t    var /** @type {?} */ MIN_LENGTH_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n\t     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var MinLengthValidator = (function () {\n\t        function MinLengthValidator() {\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n\t            if ('minlength' in changes) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype.validate = function (c) {\n\t            return this.minlength == null ? null : this._validator(c);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype._createValidator = function () {\n\t            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n\t        };\n\t        MinLengthValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n\t                        providers: [MIN_LENGTH_VALIDATOR],\n\t                        host: { '[attr.minlength]': 'minlength ? minlength : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        MinLengthValidator.ctorParameters = function () { return []; };\n\t        MinLengthValidator.propDecorators = {\n\t            'minlength': [{ type: _angular_core.Input },],\n\t        };\n\t        return MinLengthValidator;\n\t    }());\n\t    /**\n\t     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n\t     *\n\t     * ## Example:\n\t     *\n\t     * {@example common/forms/ts/validators/validators.ts region='max'}\n\t     */\n\t    var /** @type {?} */ MAX_LENGTH_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n\t     * `formControl`,\n\t     * or control with `ngModel` that also has a `maxlength` attribute.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var MaxLengthValidator = (function () {\n\t        function MaxLengthValidator() {\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n\t            if ('maxlength' in changes) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype.validate = function (c) {\n\t            return this.maxlength != null ? this._validator(c) : null;\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype._createValidator = function () {\n\t            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n\t        };\n\t        MaxLengthValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n\t                        providers: [MAX_LENGTH_VALIDATOR],\n\t                        host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        MaxLengthValidator.ctorParameters = function () { return []; };\n\t        MaxLengthValidator.propDecorators = {\n\t            'maxlength': [{ type: _angular_core.Input },],\n\t        };\n\t        return MaxLengthValidator;\n\t    }());\n\t    var /** @type {?} */ PATTERN_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A Directive that adds the `pattern` validator to any controls marked with the\n\t     * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n\t     * as the regex to validate Control value against.  Follows pattern attribute\n\t     * semantics; i.e. regex must match entire Control value.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var PatternValidator = (function () {\n\t        function PatternValidator() {\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype.ngOnChanges = function (changes) {\n\t            if ('pattern' in changes) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype.validate = function (c) { return this._validator(c); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n\t        PatternValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n\t                        providers: [PATTERN_VALIDATOR],\n\t                        host: { '[attr.pattern]': 'pattern ? pattern : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        PatternValidator.ctorParameters = function () { return []; };\n\t        PatternValidator.propDecorators = {\n\t            'pattern': [{ type: _angular_core.Input },],\n\t        };\n\t        return PatternValidator;\n\t    }());\n\t\n\t    /**\n\t     * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n\t     *\n\t     * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n\t     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n\t     * forms.\n\t     *\n\t     * \\@howToUse\n\t     *\n\t     * To use, inject `FormBuilder` into your component class. You can then call its methods\n\t     * directly.\n\t     *\n\t     * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n\t     *\n\t     *  * **npm package**: `\\@angular/forms`\n\t     *\n\t     *  * **NgModule**: {\\@link ReactiveFormsModule}\n\t     *\n\t     * \\@stable\n\t     */\n\t    var FormBuilder = (function () {\n\t        function FormBuilder() {\n\t        }\n\t        /**\n\t         * Construct a new {\\@link FormGroup} with the given map of configuration.\n\t         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n\t         *\n\t         * See the {\\@link FormGroup} constructor for more details.\n\t         * @param {?} controlsConfig\n\t         * @param {?=} extra\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype.group = function (controlsConfig, extra) {\n\t            if (extra === void 0) { extra = null; }\n\t            var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n\t            var /** @type {?} */ validator = isPresent(extra) ? extra['validator'] : null;\n\t            var /** @type {?} */ asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;\n\t            return new FormGroup(controls, validator, asyncValidator);\n\t        };\n\t        /**\n\t         * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n\t         * `asyncValidator`.\n\t         *\n\t         * `formState` can either be a standalone value for the form control or an object\n\t         * that contains both a value and a disabled status.\n\t         *\n\t         * @param {?} formState\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            return new FormControl(formState, validator, asyncValidator);\n\t        };\n\t        /**\n\t         * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n\t         * configuration, with the given optional `validator` and `asyncValidator`.\n\t         * @param {?} controlsConfig\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n\t            var _this = this;\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n\t            return new FormArray(controls, validator, asyncValidator);\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} controlsConfig\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n\t            var _this = this;\n\t            var /** @type {?} */ controls = {};\n\t            Object.keys(controlsConfig).forEach(function (controlName) {\n\t                controls[controlName] = _this._createControl(controlsConfig[controlName]);\n\t            });\n\t            return controls;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} controlConfig\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype._createControl = function (controlConfig) {\n\t            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n\t                controlConfig instanceof FormArray) {\n\t                return controlConfig;\n\t            }\n\t            else if (Array.isArray(controlConfig)) {\n\t                var /** @type {?} */ value = controlConfig[0];\n\t                var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n\t                var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n\t                return this.control(value, validator, asyncValidator);\n\t            }\n\t            else {\n\t                return this.control(controlConfig);\n\t            }\n\t        };\n\t        FormBuilder.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        FormBuilder.ctorParameters = function () { return []; };\n\t        return FormBuilder;\n\t    }());\n\t\n\t    /**\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.4');\n\t\n\t    var /** @type {?} */ SHARED_FORM_DIRECTIVES = [\n\t        NgSelectOption,\n\t        NgSelectMultipleOption,\n\t        DefaultValueAccessor,\n\t        NumberValueAccessor,\n\t        RangeValueAccessor,\n\t        CheckboxControlValueAccessor,\n\t        SelectControlValueAccessor,\n\t        SelectMultipleControlValueAccessor,\n\t        RadioControlValueAccessor,\n\t        NgControlStatus,\n\t        NgControlStatusGroup,\n\t        RequiredValidator,\n\t        MinLengthValidator,\n\t        MaxLengthValidator,\n\t        PatternValidator,\n\t        CheckboxRequiredValidator,\n\t    ];\n\t    var /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n\t    var /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n\t    /**\n\t     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n\t     */\n\t    var InternalFormsSharedModule = (function () {\n\t        function InternalFormsSharedModule() {\n\t        }\n\t        InternalFormsSharedModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: SHARED_FORM_DIRECTIVES,\n\t                        exports: SHARED_FORM_DIRECTIVES,\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        InternalFormsSharedModule.ctorParameters = function () { return []; };\n\t        return InternalFormsSharedModule;\n\t    }());\n\t\n\t    /**\n\t     * The ng module for forms.\n\t     * \\@stable\n\t     */\n\t    var FormsModule = (function () {\n\t        function FormsModule() {\n\t        }\n\t        FormsModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n\t                        providers: [RadioControlRegistry],\n\t                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormsModule.ctorParameters = function () { return []; };\n\t        return FormsModule;\n\t    }());\n\t    /**\n\t     * The ng module for reactive forms.\n\t     * \\@stable\n\t     */\n\t    var ReactiveFormsModule = (function () {\n\t        function ReactiveFormsModule() {\n\t        }\n\t        ReactiveFormsModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n\t                        providers: [FormBuilder, RadioControlRegistry],\n\t                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        ReactiveFormsModule.ctorParameters = function () { return []; };\n\t        return ReactiveFormsModule;\n\t    }());\n\t\n\t    exports.AbstractControlDirective = AbstractControlDirective;\n\t    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n\t    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n\t    exports.ControlContainer = ControlContainer;\n\t    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n\t    exports.DefaultValueAccessor = DefaultValueAccessor;\n\t    exports.NgControl = NgControl;\n\t    exports.NgControlStatus = NgControlStatus;\n\t    exports.NgControlStatusGroup = NgControlStatusGroup;\n\t    exports.NgForm = NgForm;\n\t    exports.NgModel = NgModel;\n\t    exports.NgModelGroup = NgModelGroup;\n\t    exports.RadioControlValueAccessor = RadioControlValueAccessor;\n\t    exports.FormControlDirective = FormControlDirective;\n\t    exports.FormControlName = FormControlName;\n\t    exports.FormGroupDirective = FormGroupDirective;\n\t    exports.FormArrayName = FormArrayName;\n\t    exports.FormGroupName = FormGroupName;\n\t    exports.NgSelectOption = NgSelectOption;\n\t    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n\t    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n\t    exports.CheckboxRequiredValidator = CheckboxRequiredValidator;\n\t    exports.MaxLengthValidator = MaxLengthValidator;\n\t    exports.MinLengthValidator = MinLengthValidator;\n\t    exports.PatternValidator = PatternValidator;\n\t    exports.RequiredValidator = RequiredValidator;\n\t    exports.FormBuilder = FormBuilder;\n\t    exports.AbstractControl = AbstractControl;\n\t    exports.FormArray = FormArray;\n\t    exports.FormControl = FormControl;\n\t    exports.FormGroup = FormGroup;\n\t    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n\t    exports.NG_VALIDATORS = NG_VALIDATORS;\n\t    exports.Validators = Validators;\n\t    exports.VERSION = VERSION;\n\t    exports.FormsModule = FormsModule;\n\t    exports.ReactiveFormsModule = ReactiveFormsModule;\n\t\n\t}));\n\n/***/ },\n\n/***/ 387:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar ImageComponent = (function () {\r\n\t    function ImageComponent() {\r\n\t        this.imageWidth = 150;\r\n\t        this.imageHeight = 300;\r\n\t    }\r\n\t    return ImageComponent;\r\n\t}());\r\n\t__decorate([\r\n\t    core_1.Input(),\r\n\t    __metadata(\"design:type\", Object)\r\n\t], ImageComponent.prototype, \"model\", void 0);\r\n\t__decorate([\r\n\t    core_1.Input(),\r\n\t    __metadata(\"design:type\", Number)\r\n\t], ImageComponent.prototype, \"imageWidth\", void 0);\r\n\t__decorate([\r\n\t    core_1.Input(),\r\n\t    __metadata(\"design:type\", Number)\r\n\t], ImageComponent.prototype, \"imageHeight\", void 0);\r\n\tImageComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        selector: 'db-image',\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(388),\r\n\t        styles: [\r\n\t            __webpack_require__(389)\r\n\t        ]\r\n\t    })\r\n\t], ImageComponent);\r\n\texports.ImageComponent = ImageComponent;\r\n\n\n/***/ },\n\n/***/ 388:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<img [src]=model.imageUrl [width]=imageWidth [height]=imageHeight /><span>{{model.description}}</span>\";\n\n/***/ },\n\n/***/ 389:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"\"\n\n/***/ },\n\n/***/ 390:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar PagerComponent = (function () {\r\n\t    function PagerComponent(_route, _router) {\r\n\t        this._route = _route;\r\n\t        this._router = _router;\r\n\t    }\r\n\t    PagerComponent.prototype.goTo = function (id) {\r\n\t        this._router.navigate(['../', id], { relativeTo: this._route });\r\n\t    };\r\n\t    PagerComponent.prototype.isFirst = function () {\r\n\t        return this.currentId === this.previousId;\r\n\t    };\r\n\t    PagerComponent.prototype.isLast = function () {\r\n\t        return this.currentId === this.nextId;\r\n\t    };\r\n\t    return PagerComponent;\r\n\t}());\r\n\t__decorate([\r\n\t    core_1.Input(),\r\n\t    __metadata(\"design:type\", String)\r\n\t], PagerComponent.prototype, \"currentId\", void 0);\r\n\t__decorate([\r\n\t    core_1.Input(),\r\n\t    __metadata(\"design:type\", String)\r\n\t], PagerComponent.prototype, \"previousId\", void 0);\r\n\t__decorate([\r\n\t    core_1.Input(),\r\n\t    __metadata(\"design:type\", String)\r\n\t], PagerComponent.prototype, \"nextId\", void 0);\r\n\tPagerComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        selector: 'db-pager',\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(391),\r\n\t        styles: [\r\n\t            __webpack_require__(392)\r\n\t        ]\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [router_1.ActivatedRoute,\r\n\t        router_1.Router])\r\n\t], PagerComponent);\r\n\texports.PagerComponent = PagerComponent;\r\n\n\n/***/ },\n\n/***/ 391:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div> <a *ngif=!isFirst() class=\\\"btn btn-default\\\" (click)=goTo(previousId)> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Précédent </a> <a *ngif=!isLast() class=\\\"btn btn-default\\\" (click)=goTo(nextId)> Suivant<i class=\\\"glyphicon glyphicon-chevron-right\\\"></i> </a> </div>\";\n\n/***/ },\n\n/***/ 392:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"\"\n\n/***/ },\n\n/***/ 393:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar book_routing_module_1 = __webpack_require__(394);\r\n\tvar book_list_component_1 = __webpack_require__(395);\r\n\tvar book_form_component_1 = __webpack_require__(398);\r\n\tvar book_details_component_1 = __webpack_require__(401);\r\n\tvar book_service_1 = __webpack_require__(101);\r\n\tvar shared_module_1 = __webpack_require__(385);\r\n\tvar core_module_1 = __webpack_require__(100);\r\n\tvar BookModule = (function () {\r\n\t    function BookModule() {\r\n\t    }\r\n\t    return BookModule;\r\n\t}());\r\n\tBookModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            core_module_1.CoreModule,\r\n\t            shared_module_1.SharedModule,\r\n\t            book_routing_module_1.BookRoutingModule\r\n\t        ],\r\n\t        declarations: [\r\n\t            book_list_component_1.BookListComponent,\r\n\t            book_form_component_1.BookFormComponent,\r\n\t            book_details_component_1.BookDetailsComponent\r\n\t        ],\r\n\t        providers: [\r\n\t            book_service_1.BookService\r\n\t        ]\r\n\t    })\r\n\t], BookModule);\r\n\texports.BookModule = BookModule;\r\n\n\n/***/ },\n\n/***/ 394:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar book_list_component_1 = __webpack_require__(395);\r\n\tvar book_form_component_1 = __webpack_require__(398);\r\n\tvar book_details_component_1 = __webpack_require__(401);\r\n\tvar BookRoutingModule = (function () {\r\n\t    function BookRoutingModule() {\r\n\t    }\r\n\t    return BookRoutingModule;\r\n\t}());\r\n\tBookRoutingModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            router_1.RouterModule.forChild([\r\n\t                { path: 'category/:category/books', component: book_list_component_1.BookListComponent },\r\n\t                { path: 'category/:category/books/edit', component: book_form_component_1.BookFormComponent },\r\n\t                { path: 'category/:category/books/:id', component: book_details_component_1.BookDetailsComponent },\r\n\t                { path: 'category/:category/books/:id/edit', component: book_form_component_1.BookFormComponent }\r\n\t            ])\r\n\t        ],\r\n\t        exports: [\r\n\t            router_1.RouterModule\r\n\t        ]\r\n\t    })\r\n\t], BookRoutingModule);\r\n\texports.BookRoutingModule = BookRoutingModule;\r\n\n\n/***/ },\n\n/***/ 395:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar book_service_1 = __webpack_require__(101);\r\n\tvar BookListComponent = (function () {\r\n\t    function BookListComponent(_bookService, _route, _router) {\r\n\t        this._bookService = _bookService;\r\n\t        this._route = _route;\r\n\t        this._router = _router;\r\n\t        this.pageTitle = \"Liste des livres\";\r\n\t        this.imageWidth = 160;\r\n\t        this.imageHeight = 250;\r\n\t    }\r\n\t    BookListComponent.prototype.ngOnInit = function () {\r\n\t        var _this = this;\r\n\t        var category = this._route.snapshot.params['category'];\r\n\t        this._bookService\r\n\t            .getBooks(category)\r\n\t            .subscribe(function (books) { return _this.books = books; }, function (error) { return console.log(error); });\r\n\t    };\r\n\t    BookListComponent.prototype.onNew = function () {\r\n\t        this._router.navigate(['edit'], { relativeTo: this._route });\r\n\t    };\r\n\t    BookListComponent.prototype.onBack = function () {\r\n\t        this._router.navigate(['../'], { relativeTo: this._route });\r\n\t    };\r\n\t    return BookListComponent;\r\n\t}());\r\n\tBookListComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(396),\r\n\t        styles: [__webpack_require__(397)]\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [book_service_1.BookService,\r\n\t        router_1.ActivatedRoute,\r\n\t        router_1.Router])\r\n\t], BookListComponent);\r\n\texports.BookListComponent = BookListComponent;\r\n\n\n/***/ },\n\n/***/ 396:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=container> <div class=panel-heading> {{pageTitle}} </div> <div> <div> <a class=\\\"btn btn-default\\\" (click)=onNew()> <i class=\\\"glyphicon glyphicon-plus\\\"></i> Ajouter un livre </a> </div> <ul class=books> <li *ngfor=\\\"let book of books\\\"> <a [routerlink]=book.id routerlinkactive=true><span class=badge>{{book.title}}</span></a> </li> </ul> </div> <div> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour à la liste </a> </div> </div> \";\n\n/***/ },\n\n/***/ 397:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"h3 {\\r\\n  text-align: center; \\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.grid {\\r\\n  margin: 0;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.module {\\r\\n\\tpadding: 20px;\\r\\n\\ttext-align: center;\\r\\n\\tmax-height: 120px;\\r\\n\\tmin-width: 120px;\\r\\n\\tborder-radius: 2px;\\r\\n}\"\n\n/***/ },\n\n/***/ 398:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar book_service_1 = __webpack_require__(101);\r\n\tvar category_service_1 = __webpack_require__(87);\r\n\tvar BookFormComponent = (function () {\r\n\t    function BookFormComponent(_bookService, _categoryService, _route, _router) {\r\n\t        this._bookService = _bookService;\r\n\t        this._categoryService = _categoryService;\r\n\t        this._route = _route;\r\n\t        this._router = _router;\r\n\t    }\r\n\t    BookFormComponent.prototype.ngOnInit = function () {\r\n\t        var _this = this;\r\n\t        this.categories = [\r\n\t            \"db\",\r\n\t            \"dbz\"\r\n\t        ];\r\n\t        this.category = this._route.snapshot.params['category'];\r\n\t        var id = this._route.snapshot.params['id'];\r\n\t        if (id) {\r\n\t            this._bookService\r\n\t                .getBook(this.category, id)\r\n\t                .subscribe(function (info) { return _this.model = info.book; }, function (error) { return console.log(error); });\r\n\t        }\r\n\t        else {\r\n\t            this.model = {\r\n\t                id: null,\r\n\t                category: this.category,\r\n\t                title: '',\r\n\t                description: '',\r\n\t                imageUrl: ''\r\n\t            };\r\n\t        }\r\n\t    };\r\n\t    BookFormComponent.prototype.onSubmit = function () {\r\n\t        var _this = this;\r\n\t        this._bookService\r\n\t            .save(this.category, this.model)\r\n\t            .subscribe(function (_) { return _this.onBack(); }, function (error) { return console.log(error); });\r\n\t    };\r\n\t    BookFormComponent.prototype.onBack = function () {\r\n\t        this._router.navigate(['../'], { relativeTo: this._route });\r\n\t    };\r\n\t    return BookFormComponent;\r\n\t}());\r\n\tBookFormComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(399),\r\n\t        styles: [\r\n\t            __webpack_require__(400)\r\n\t        ]\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [book_service_1.BookService,\r\n\t        category_service_1.CategoryService,\r\n\t        router_1.ActivatedRoute,\r\n\t        router_1.Router])\r\n\t], BookFormComponent);\r\n\texports.BookFormComponent = BookFormComponent;\r\n\n\n/***/ },\n\n/***/ 399:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=container> <h1>Edition d'un livre</h1> <form *ngif=model (ngsubmit)=onSubmit() #bookform=ngForm novalidate> <div class=form-group> <label for=category>Catégorie</label> <select class=form-control id=category required disabled=disabled [(ngmodel)]=model.category name=category> <option *ngfor=\\\"let cat of categories\\\" [value]=cat>{{cat}}</option> </select> </div> <div class=form-group> <label for=title>Titre</label> <input type=text class=form-control id=title required [(ngmodel)]=model.title name=title #title=ngModel> <div [hidden]=\\\"title.valid || title.pristine\\\" class=\\\"alert alert-danger\\\"> Le titre est requis </div> </div> <div class=form-group> <label for=description>Description</label> <input type=text class=form-control id=description required [(ngmodel)]=model.description name=description> </div> <div class=form-group> <label for=imageUrl>Url de l'image</label> <input type=text class=form-control id=imageUrl required [(ngmodel)]=model.imageUrl name=imageUrl> </div> <div> <button type=submit class=\\\"btn btn-primary\\\" [disabled]=!bookForm.form.valid>Enregistrer</button> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour </a> </div> </form> </div>\";\n\n/***/ },\n\n/***/ 400:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"\"\n\n/***/ },\n\n/***/ 401:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\tvar book_service_1 = __webpack_require__(101);\r\n\tvar BookDetailsComponent = (function () {\r\n\t    function BookDetailsComponent(_service, _route, _router) {\r\n\t        this._service = _service;\r\n\t        this._route = _route;\r\n\t        this._router = _router;\r\n\t        this.imageWidth = 160;\r\n\t        this.imageHeight = 250;\r\n\t    }\r\n\t    BookDetailsComponent.prototype.ngOnInit = function () {\r\n\t        var _this = this;\r\n\t        this._route.params\r\n\t            .switchMap(function (params) { return _this._service.getBook(params['category'], params['id']); })\r\n\t            .subscribe(function (info) {\r\n\t            _this.previousId = info.previousId;\r\n\t            _this.nextId = info.nextId;\r\n\t            _this.book = info.book;\r\n\t        }, function (error) { return console.log(error); });\r\n\t    };\r\n\t    BookDetailsComponent.prototype.onBack = function () {\r\n\t        this._router.navigate(['../'], { relativeTo: this._route });\r\n\t    };\r\n\t    BookDetailsComponent.prototype.onEdit = function () {\r\n\t        this._router.navigate(['edit'], { relativeTo: this._route });\r\n\t    };\r\n\t    return BookDetailsComponent;\r\n\t}());\r\n\tBookDetailsComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        moduleId: module.id.toString(),\r\n\t        template: __webpack_require__(402),\r\n\t        styles: [\r\n\t            __webpack_require__(403)\r\n\t        ]\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [book_service_1.BookService,\r\n\t        router_1.ActivatedRoute,\r\n\t        router_1.Router])\r\n\t], BookDetailsComponent);\r\n\texports.BookDetailsComponent = BookDetailsComponent;\r\n\n\n/***/ },\n\n/***/ 402:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div *ngif=book> <div>Fiche détaillée de {{book.title}}</div> <div> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour à la liste </a> <a class=\\\"btn btn-default\\\" (click)=onEdit()> <i class=\\\"glyphicon glyphicon-pencil\\\"></i>Modifier </a> </div> <div> <db-image [model]=book [imagewidth]=imageWidth [imageheight]=imageHeight></db-image> </div> <db-pager [currentid]=book.id [previousid]=previousId [nextid]=nextId></db-pager> </div>\";\n\n/***/ },\n\n/***/ 403:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"\"\n\n/***/ },\n\n/***/ 404:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(42);\r\n\texports.routes = [\r\n\t    { path: '', redirectTo: 'welcome', pathMatch: 'full' }\r\n\t];\r\n\tvar AppRoutingModule = (function () {\r\n\t    function AppRoutingModule() {\r\n\t    }\r\n\t    return AppRoutingModule;\r\n\t}());\r\n\tAppRoutingModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [router_1.RouterModule.forRoot(exports.routes)],\r\n\t        exports: [router_1.RouterModule]\r\n\t    })\r\n\t], AppRoutingModule);\r\n\texports.AppRoutingModule = AppRoutingModule;\r\n\n\n/***/ },\n\n/***/ 405:\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar InMemoryDbUniverseService = (function () {\r\n\t    function InMemoryDbUniverseService() {\r\n\t    }\r\n\t    InMemoryDbUniverseService.prototype.createDb = function () {\r\n\t        var charactersdb = this.getDbCharacters();\r\n\t        var charactersdbz = this.getDbzCharacters();\r\n\t        var booksdb = this.getDbBooks();\r\n\t        var booksdbz = this.getDbzBooks();\r\n\t        return {\r\n\t            charactersdb: charactersdb,\r\n\t            charactersdbz: charactersdbz,\r\n\t            booksdb: booksdb,\r\n\t            booksdbz: booksdbz\r\n\t        };\r\n\t    };\r\n\t    InMemoryDbUniverseService.prototype.getDbCharacters = function () {\r\n\t        return [\r\n\t            {\r\n\t                \"id\": \"515275eb-a311-4cc3-c428-151d091cd9b7\",\r\n\t                \"category\": \"db\",\r\n\t                \"imageUrl\": \"http://vignette1.wikia.nocookie.net/joke-battles/images/f/f2/Yamcha_render_by_anthonyjmo-d9tmtfh.png/revision/latest?cb=20160909123653\",\r\n\t                \"name\": \"Yamcha\",\r\n\t                \"description\": \"Yamcha est un redoutable guerrier capable de terrasser les adversaires les plus terribles grâce à sa technique dévastatrice : la botte secrète du loup. Accompagné de son acolyte Pual, il parcourt le désert à la recherche de voyageurs à détrousser.\\nCe jeune homme particulièrement séduisant souffre cependant d'une timidité maladive qui lui fait perdre tous ses moyens dès qu'il se trouve en face d'une fille.\\nIl abandonnera sa vie de bandit du désert pour accompagner Goku et vaincre sa peur de la gent féminine.\\nIl décidera ensuite d'aller en ville parfaire ses techniques de combat et il participera même au Championnat du Monde des arts martiaux.\"\r\n\t            },\r\n\t            {\r\n\t                \"id\": \"37e7dbaa-c6da-3107-67e6-3e91af769450\",\r\n\t                \"category\": \"db\",\r\n\t                \"imageUrl\": \"http://vignette1.wikia.nocookie.net/3__/images/8/8d/Goku2.jpg.png/revision/latest?cb=20140917091017&path-prefix=300-heroes\",\r\n\t                \"name\": \"Songoku\",\r\n\t                \"description\": \"Goku est un jeune garçon au cœur pur doté d’une queue de singe et d’une force extraordinaire.\\nSeule petite ombre au tableau : il a tendance à se transformer en gorille géant lorsqu’il regarde la pleine lune.\\nGoku ne se sépare jamais du bâton que lui a laissé son grand-père adoptif, Gohan, et qui a le pouvoir de changer de taille sur commande. Sa panoplie va s’étoffer par la suite avec le nuage magique offert par Tortue Géniale, qui lui permettra de parcourir des distances formidables en un rien de temps.\\nAu fil de ses aventures, Goku va gagner en expérience pour devenir le plus puissant guerrier de la terre.\\nIl apprendra notamment à maîtriser à la perfection la technique du Kamehameha, qui permet de concentrer sa force intérieure pour propulser des boules d’énergie destructrices.\"\r\n\t            },\r\n\t            {\r\n\t                \"id\": \"65e324cb-1f24-780a-e6a1-690e39b68d58\",\r\n\t                \"category\": \"db\",\r\n\t                \"imageUrl\": \"http://t0.gstatic.com/images?q=tbn:ANd9GcQ6t6fnkmF4KxL1FWi7oaGbBAoN1-P2asbz31JISQ2g0q8iFiT68LIDr5c\",\r\n\t                \"name\": \"Chichi\",\r\n\t                \"description\": \"Fille de Gyûmaô, Chichi rencontre Goku alors qu’elle n’est encore qu’une enfant. Elle n’en demeure pas moins, déjà à l’époque, une guerrière redoutable, ce qu’apprendra à ses dépens le premier dinosaure à essayer de la manger.\"\r\n\t            },\r\n\t        ];\r\n\t    };\r\n\t    InMemoryDbUniverseService.prototype.getDbBooks = function () {\r\n\t        return [\r\n\t            {\r\n\t                \"id\": \"1e9f24e5-2277-507b-54e4-0f829ff76143\",\r\n\t                \"category\": \"db\",\r\n\t                \"title\": \"Tome 1\",\r\n\t                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723434621-G.jpg\",\r\n\t                \"description\": \"Tome 1\"\r\n\t            },\r\n\t            {\r\n\t                \"id\": \"203a4686-b22a-86ad-44d2-483aa9c5a111\",\r\n\t                \"category\": \"db\",\r\n\t                \"title\": \"Tome 2\",\r\n\t                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723434638-G.jpg\",\r\n\t                \"description\": \"Tome 2\"\r\n\t            }\r\n\t        ];\r\n\t    };\r\n\t    InMemoryDbUniverseService.prototype.getDbzCharacters = function () {\r\n\t        return [\r\n\t            {\r\n\t                \"id\": \"65e324cb-1f24-780a-e6a1-690e39b68d58\",\r\n\t                \"category\": \"dbz\",\r\n\t                \"imageUrl\": \"http://vignette1.wikia.nocookie.net/villains/images/e/e3/Scouter_vegeta.png/revision/latest?cb=20130802141754\",\r\n\t                \"name\": \"Vegeta\",\r\n\t                \"description\": \"Vegeta est un Saïyen de sang royal. Il est le fils du Roi Vegeta qui régnait sur la planète du même nom avant que celle-ci ne soit détruite par Freezer.\\nIl débarque sur Terre avec Nappa après la défaite de Raditz avec la ferme intention de se débarrasser de Goku et de s’emparer des Dragon Ball.\\nFier et ombrageux, il sera le rival incessant de Goku, mais aussi un de ses plus proches compagnons.\\nContre toute attente, il se rapprochera plus tard de Bulma avec qui il aura un fils, Trunks, puis une fille, Bra.\\n\"\r\n\t            }\r\n\t        ];\r\n\t    };\r\n\t    InMemoryDbUniverseService.prototype.getDbzBooks = function () {\r\n\t        return [\r\n\t            {\r\n\t                \"id\": \"d82878d-2a52-b90d-b6b7-6d525a8fe06c\",\r\n\t                \"category\": \"dbz\",\r\n\t                \"title\": \"Tome 41\",\r\n\t                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723449380-G.jpg\",\r\n\t                \"description\": \"Tome 41\"\r\n\t            },\r\n\t            {\r\n\t                \"id\": \"5434ce77-218b-8b2b-d95e-7aea191775a9\",\r\n\t                \"category\": \"dbz\",\r\n\t                \"title\": \"Tome 23\",\r\n\t                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723449205-G.jpg\",\r\n\t                \"description\": \"Tome 23\"\r\n\t            }\r\n\t        ];\r\n\t    };\r\n\t    return InMemoryDbUniverseService;\r\n\t}());\r\n\texports.InMemoryDbUniverseService = InMemoryDbUniverseService;\r\n\n\n/***/ },\n\n/***/ 406:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar character_service_1 = __webpack_require__(85);\r\n\tvar book_service_1 = __webpack_require__(101);\r\n\tvar category_service_1 = __webpack_require__(87);\r\n\tvar CoreService = (function () {\r\n\t    function CoreService(_characterService, _bookService, _categoryService) {\r\n\t        this._characterService = _characterService;\r\n\t        this._bookService = _bookService;\r\n\t        this._categoryService = _categoryService;\r\n\t    }\r\n\t    CoreService.prototype.load = function () {\r\n\t        var _this = this;\r\n\t        return this._categoryService\r\n\t            .getCategories()\r\n\t            .subscribe(function (categories) {\r\n\t            _this._characterService.init(categories);\r\n\t            _this._bookService.init(categories);\r\n\t        });\r\n\t    };\r\n\t    return CoreService;\r\n\t}());\r\n\tCoreService = __decorate([\r\n\t    core_1.Injectable(),\r\n\t    __metadata(\"design:paramtypes\", [character_service_1.CharacterService,\r\n\t        book_service_1.BookService,\r\n\t        category_service_1.CategoryService])\r\n\t], CoreService);\r\n\texports.CoreService = CoreService;\r\n\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// app.818b8e4b91c85e35e726.js","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app.module';\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/main.ts","import { NgModule, APP_INITIALIZER }      from '@angular/core';\r\nimport { HttpModule }    from '@angular/http';\r\nimport { InMemoryWebApiModule } from 'angular2-in-memory-web-api';\r\nimport { AppComponent }  from './app.component';\r\nimport { WelcomeModule } from './welcome/welcome.module';\r\nimport { CategoryModule } from './categories/category.module';\r\nimport { BookModule } from './books/book.module';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { InMemoryDbUniverseService } from './inmemorydata.service';\r\nimport { CoreModule } from './core/core.module';\r\nimport { CoreService } from './core/core.service';\r\n\r\nfunction loadData(service: CoreService) {\r\n    return () => service.load();\r\n}\r\n\r\n@NgModule({\r\n  imports:      [ \r\n                  HttpModule,\r\n                  WelcomeModule,\r\n                  CategoryModule,\r\n                  BookModule,\r\n                  AppRoutingModule,\r\n                  InMemoryWebApiModule.forRoot(InMemoryDbUniverseService),\r\n                  CoreModule\r\n                ],\r\n  declarations: [ \r\n        AppComponent\r\n  ],\r\n  bootstrap:    [ AppComponent ],\r\n  providers: [\r\n    CoreService,\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: loadData,\r\n      deps: [CoreService],\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class AppModule { }\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/app.module.ts","/**\n * @license Angular v2.4.4\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Observable'), require('@angular/platform-browser')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', '@angular/platform-browser'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}),global.ng.core,global.Rx,global.ng.platformBrowser));\n}(this, function (exports,_angular_core,rxjs_Observable,_angular_platformBrowser) { 'use strict';\n\n    /**\n     * A backend for http that uses the `XMLHttpRequest` browser API.\n     *\n     * Take care not to evaluate this in non-browser contexts.\n     *\n     * \\@experimental\n     */\n    var BrowserXhr = (function () {\n        function BrowserXhr() {\n        }\n        /**\n         * @return {?}\n         */\n        BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };\n        BrowserXhr.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BrowserXhr.ctorParameters = function () { return []; };\n        return BrowserXhr;\n    }());\n\n    var RequestMethod = {};\n    RequestMethod.Get = 0;\n    RequestMethod.Post = 1;\n    RequestMethod.Put = 2;\n    RequestMethod.Delete = 3;\n    RequestMethod.Options = 4;\n    RequestMethod.Head = 5;\n    RequestMethod.Patch = 6;\n    RequestMethod[RequestMethod.Get] = \"Get\";\n    RequestMethod[RequestMethod.Post] = \"Post\";\n    RequestMethod[RequestMethod.Put] = \"Put\";\n    RequestMethod[RequestMethod.Delete] = \"Delete\";\n    RequestMethod[RequestMethod.Options] = \"Options\";\n    RequestMethod[RequestMethod.Head] = \"Head\";\n    RequestMethod[RequestMethod.Patch] = \"Patch\";\n    var ReadyState = {};\n    ReadyState.Unsent = 0;\n    ReadyState.Open = 1;\n    ReadyState.HeadersReceived = 2;\n    ReadyState.Loading = 3;\n    ReadyState.Done = 4;\n    ReadyState.Cancelled = 5;\n    ReadyState[ReadyState.Unsent] = \"Unsent\";\n    ReadyState[ReadyState.Open] = \"Open\";\n    ReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\n    ReadyState[ReadyState.Loading] = \"Loading\";\n    ReadyState[ReadyState.Done] = \"Done\";\n    ReadyState[ReadyState.Cancelled] = \"Cancelled\";\n    var ResponseType = {};\n    ResponseType.Basic = 0;\n    ResponseType.Cors = 1;\n    ResponseType.Default = 2;\n    ResponseType.Error = 3;\n    ResponseType.Opaque = 4;\n    ResponseType[ResponseType.Basic] = \"Basic\";\n    ResponseType[ResponseType.Cors] = \"Cors\";\n    ResponseType[ResponseType.Default] = \"Default\";\n    ResponseType[ResponseType.Error] = \"Error\";\n    ResponseType[ResponseType.Opaque] = \"Opaque\";\n    var ContentType = {};\n    ContentType.NONE = 0;\n    ContentType.JSON = 1;\n    ContentType.FORM = 2;\n    ContentType.FORM_DATA = 3;\n    ContentType.TEXT = 4;\n    ContentType.BLOB = 5;\n    ContentType.ARRAY_BUFFER = 6;\n    ContentType[ContentType.NONE] = \"NONE\";\n    ContentType[ContentType.JSON] = \"JSON\";\n    ContentType[ContentType.FORM] = \"FORM\";\n    ContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\n    ContentType[ContentType.TEXT] = \"TEXT\";\n    ContentType[ContentType.BLOB] = \"BLOB\";\n    ContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n    var ResponseContentType = {};\n    ResponseContentType.Text = 0;\n    ResponseContentType.Json = 1;\n    ResponseContentType.ArrayBuffer = 2;\n    ResponseContentType.Blob = 3;\n    ResponseContentType[ResponseContentType.Text] = \"Text\";\n    ResponseContentType[ResponseContentType.Json] = \"Json\";\n    ResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\n    ResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n    /**\n     * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n     * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n     *\n     * The only known difference between this `Headers` implementation and the spec is the\n     * lack of an `entries` method.\n     *\n     * ### Example\n     *\n     * ```\n     * import {Headers} from '\\@angular/http';\n     *\n     * var firstHeaders = new Headers();\n     * firstHeaders.append('Content-Type', 'image/jpeg');\n     * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n     *\n     * // Create headers from Plain Old JavaScript Object\n     * var secondHeaders = new Headers({\n     *   'X-My-Custom-Header': 'Angular'\n     * });\n     * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n     *\n     * var thirdHeaders = new Headers(secondHeaders);\n     * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n     * ```\n     *\n     * \\@experimental\n     */\n    var Headers = (function () {\n        /**\n         * @param {?=} headers\n         */\n        function Headers(headers) {\n            var _this = this;\n            /** @internal header names are lower case */\n            this._headers = new Map();\n            /** @internal map lower case names to actual names */\n            this._normalizedNames = new Map();\n            if (!headers) {\n                return;\n            }\n            if (headers instanceof Headers) {\n                headers.forEach(function (values, name) {\n                    values.forEach(function (value) { return _this.append(name, value); });\n                });\n                return;\n            }\n            Object.keys(headers).forEach(function (name) {\n                var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n                _this.delete(name);\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n        }\n        /**\n         * Returns a new Headers instance from the given DOMString of Response Headers\n         * @param {?} headersString\n         * @return {?}\n         */\n        Headers.fromResponseHeaderString = function (headersString) {\n            var /** @type {?} */ headers = new Headers();\n            headersString.split('\\n').forEach(function (line) {\n                var /** @type {?} */ index = line.indexOf(':');\n                if (index > 0) {\n                    var /** @type {?} */ name_1 = line.slice(0, index);\n                    var /** @type {?} */ value = line.slice(index + 1).trim();\n                    headers.set(name_1, value);\n                }\n            });\n            return headers;\n        };\n        /**\n         * Appends a header to existing list of header values for a given header name.\n         * @param {?} name\n         * @param {?} value\n         * @return {?}\n         */\n        Headers.prototype.append = function (name, value) {\n            var /** @type {?} */ values = this.getAll(name);\n            if (values === null) {\n                this.set(name, value);\n            }\n            else {\n                values.push(value);\n            }\n        };\n        /**\n         * Deletes all header values for the given name.\n         * @param {?} name\n         * @return {?}\n         */\n        Headers.prototype.delete = function (name) {\n            var /** @type {?} */ lcName = name.toLowerCase();\n            this._normalizedNames.delete(lcName);\n            this._headers.delete(lcName);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        Headers.prototype.forEach = function (fn) {\n            var _this = this;\n            this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n        };\n        /**\n         * Returns first header that matches given name.\n         * @param {?} name\n         * @return {?}\n         */\n        Headers.prototype.get = function (name) {\n            var /** @type {?} */ values = this.getAll(name);\n            if (values === null) {\n                return null;\n            }\n            return values.length > 0 ? values[0] : null;\n        };\n        /**\n         * Checks for existence of header by given name.\n         * @param {?} name\n         * @return {?}\n         */\n        Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n        /**\n         * Returns the names of the headers\n         * @return {?}\n         */\n        Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n        /**\n         * Sets or overrides header value for given name.\n         * @param {?} name\n         * @param {?} value\n         * @return {?}\n         */\n        Headers.prototype.set = function (name, value) {\n            if (Array.isArray(value)) {\n                if (value.length) {\n                    this._headers.set(name.toLowerCase(), [value.join(',')]);\n                }\n            }\n            else {\n                this._headers.set(name.toLowerCase(), [value]);\n            }\n            this.mayBeSetNormalizedName(name);\n        };\n        /**\n         * Returns values of all headers.\n         * @return {?}\n         */\n        Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n        /**\n         * @return {?}\n         */\n        Headers.prototype.toJSON = function () {\n            var _this = this;\n            var /** @type {?} */ serialized = {};\n            this._headers.forEach(function (values, name) {\n                var /** @type {?} */ split = [];\n                values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n                serialized[_this._normalizedNames.get(name)] = split;\n            });\n            return serialized;\n        };\n        /**\n         * Returns list of header values for a given name.\n         * @param {?} name\n         * @return {?}\n         */\n        Headers.prototype.getAll = function (name) {\n            return this.has(name) ? this._headers.get(name.toLowerCase()) : null;\n        };\n        /**\n         * This method is not implemented.\n         * @return {?}\n         */\n        Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        Headers.prototype.mayBeSetNormalizedName = function (name) {\n            var /** @type {?} */ lcName = name.toLowerCase();\n            if (!this._normalizedNames.has(lcName)) {\n                this._normalizedNames.set(lcName, name);\n            }\n        };\n        return Headers;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates a response options object to be optionally provided when instantiating a\n     * {\\@link Response}.\n     *\n     * This class is based on the `ResponseInit` description in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#responseinit).\n     *\n     * All values are null by default. Typical defaults can be found in the\n     * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n     *\n     * This class may be used in tests to build {\\@link Response Responses} for\n     * mock responses (see {\\@link MockBackend}).\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: '{\"name\":\"Jeff\"}'\n     * });\n     * var res = new Response(options);\n     *\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * ```\n     *\n     * \\@experimental\n     */\n    var ResponseOptions = (function () {\n        /**\n         * @param {?=} __0\n         */\n        function ResponseOptions(_a) {\n            var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;\n            this.body = body != null ? body : null;\n            this.status = status != null ? status : null;\n            this.headers = headers != null ? headers : null;\n            this.statusText = statusText != null ? statusText : null;\n            this.type = type != null ? type : null;\n            this.url = url != null ? url : null;\n        }\n        /**\n         * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n         * override\n         * existing values. This method will not change the values of the instance on which it is being\n         * called.\n         *\n         * This may be useful when sharing a base `ResponseOptions` object inside tests,\n         * where certain properties may change from test to test.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n         *\n         * ```typescript\n         * import {ResponseOptions, Response} from '\\@angular/http';\n         *\n         * var options = new ResponseOptions({\n         *   body: {name: 'Jeff'}\n         * });\n         * var res = new Response(options.merge({\n         *   url: 'https://google.com'\n         * }));\n         * console.log('options.url:', options.url); // null\n         * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n         * console.log('res.url:', res.url); // https://google.com\n         * ```\n         * @param {?=} options\n         * @return {?}\n         */\n        ResponseOptions.prototype.merge = function (options) {\n            return new ResponseOptions({\n                body: options && options.body != null ? options.body : this.body,\n                status: options && options.status != null ? options.status : this.status,\n                headers: options && options.headers != null ? options.headers : this.headers,\n                statusText: options && options.statusText != null ? options.statusText : this.statusText,\n                type: options && options.type != null ? options.type : this.type,\n                url: options && options.url != null ? options.url : this.url,\n            });\n        };\n        return ResponseOptions;\n    }());\n    /**\n     * Subclass of {\\@link ResponseOptions}, with default values.\n     *\n     * Default values:\n     *  * status: 200\n     *  * headers: empty {\\@link Headers} object\n     *\n     * This class could be extended and bound to the {\\@link ResponseOptions} class\n     * when configuring an {\\@link Injector}, in order to override the default options\n     * used by {\\@link Http} to create {\\@link Response Responses}.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n     *\n     * ```typescript\n     * import {provide} from '\\@angular/core';\n     * import {bootstrap} from '\\@angular/platform-browser/browser';\n     * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n     * '\\@angular/http';\n     * import {App} from './myapp';\n     *\n     * class MyOptions extends BaseResponseOptions {\n     *   headers:Headers = new Headers({network: 'github'});\n     * }\n     *\n     * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n     * ```\n     *\n     * The options could also be extended when manually creating a {\\@link Response}\n     * object.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n     *\n     * ```\n     * import {BaseResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new BaseResponseOptions();\n     * var res = new Response(options.merge({\n     *   body: 'Angular',\n     *   headers: new Headers({framework: 'angular'})\n     * }));\n     * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n     * console.log('res.text():', res.text()); // Angular;\n     * ```\n     *\n     * \\@experimental\n     */\n    var BaseResponseOptions = (function (_super) {\n        __extends$1(BaseResponseOptions, _super);\n        function BaseResponseOptions() {\n            _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });\n        }\n        BaseResponseOptions.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BaseResponseOptions.ctorParameters = function () { return []; };\n        return BaseResponseOptions;\n    }(ResponseOptions));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Abstract class from which real backends are derived.\n     *\n     * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n     * {\\@link Request}.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var ConnectionBackend = (function () {\n        function ConnectionBackend() {\n        }\n        /**\n         * @abstract\n         * @param {?} request\n         * @return {?}\n         */\n        ConnectionBackend.prototype.createConnection = function (request) { };\n        return ConnectionBackend;\n    }());\n    /**\n     * Abstract class from which real connections are derived.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var Connection = (function () {\n        function Connection() {\n        }\n        return Connection;\n    }());\n    /**\n     * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var XSRFStrategy = (function () {\n        function XSRFStrategy() {\n        }\n        /**\n         * @abstract\n         * @param {?} req\n         * @return {?}\n         */\n        XSRFStrategy.prototype.configureRequest = function (req) { };\n        return XSRFStrategy;\n    }());\n\n    /**\n     * @param {?} method\n     * @return {?}\n     */\n    function normalizeMethodName(method) {\n        if (typeof method !== 'string')\n            return method;\n        switch (method.toUpperCase()) {\n            case 'GET':\n                return RequestMethod.Get;\n            case 'POST':\n                return RequestMethod.Post;\n            case 'PUT':\n                return RequestMethod.Put;\n            case 'DELETE':\n                return RequestMethod.Delete;\n            case 'OPTIONS':\n                return RequestMethod.Options;\n            case 'HEAD':\n                return RequestMethod.Head;\n            case 'PATCH':\n                return RequestMethod.Patch;\n        }\n        throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n    }\n    var /** @type {?} */ isSuccess = function (status) { return (status >= 200 && status < 300); };\n    /**\n     * @param {?} xhr\n     * @return {?}\n     */\n    function getResponseURL(xhr) {\n        if ('responseURL' in xhr) {\n            return xhr.responseURL;\n        }\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n            return xhr.getResponseHeader('X-Request-URL');\n        }\n        return;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    function stringToArrayBuffer(input) {\n        var /** @type {?} */ view = new Uint16Array(input.length);\n        for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n            view[i] = input.charCodeAt(i);\n        }\n        return view.buffer;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     * @param {?=} rawParams\n     * @return {?}\n     */\n    function paramParser(rawParams) {\n        if (rawParams === void 0) { rawParams = ''; }\n        var /** @type {?} */ map = new Map();\n        if (rawParams.length > 0) {\n            var /** @type {?} */ params = rawParams.split('&');\n            params.forEach(function (param) {\n                var /** @type {?} */ eqIdx = param.indexOf('=');\n                var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n                var /** @type {?} */ list = map.get(key) || [];\n                list.push(val);\n                map.set(key, list);\n            });\n        }\n        return map;\n    }\n    /**\n     * \\@experimental\n     *\n     */\n    var QueryEncoder = (function () {\n        function QueryEncoder() {\n        }\n        /**\n         * @param {?} k\n         * @return {?}\n         */\n        QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n        return QueryEncoder;\n    }());\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    function standardEncoding(v) {\n        return encodeURIComponent(v)\n            .replace(/%40/gi, '@')\n            .replace(/%3A/gi, ':')\n            .replace(/%24/gi, '$')\n            .replace(/%2C/gi, ',')\n            .replace(/%3B/gi, ';')\n            .replace(/%2B/gi, '+')\n            .replace(/%3D/gi, '=')\n            .replace(/%3F/gi, '?')\n            .replace(/%2F/gi, '/');\n    }\n    /**\n     * Map-like representation of url search parameters, based on\n     * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n     * with several extensions for merging URLSearchParams objects:\n     *   - setAll()\n     *   - appendAll()\n     *   - replaceAll()\n     *\n     * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n     * which is used to serialize parameters before making a request. By default,\n     * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n     * and then un-encodes certain characters that are allowed to be part of the query\n     * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n     *\n     * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n     *\n     * If the set of allowed query characters is not acceptable for a particular backend,\n     * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n     *\n     * ```\n     * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n     * class MyQueryEncoder extends QueryEncoder {\n     *   encodeKey(k: string): string {\n     *     return myEncodingFunction(k);\n     *   }\n     *\n     *   encodeValue(v: string): string {\n     *     return myEncodingFunction(v);\n     *   }\n     * }\n     *\n     * let params = new URLSearchParams('', new MyQueryEncoder());\n     * ```\n     * \\@experimental\n     */\n    var URLSearchParams = (function () {\n        /**\n         * @param {?=} rawParams\n         * @param {?=} queryEncoder\n         */\n        function URLSearchParams(rawParams, queryEncoder) {\n            if (rawParams === void 0) { rawParams = ''; }\n            if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n            this.rawParams = rawParams;\n            this.queryEncoder = queryEncoder;\n            this.paramsMap = paramParser(rawParams);\n        }\n        /**\n         * @return {?}\n         */\n        URLSearchParams.prototype.clone = function () {\n            var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n            clone.appendAll(this);\n            return clone;\n        };\n        /**\n         * @param {?} param\n         * @return {?}\n         */\n        URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n        /**\n         * @param {?} param\n         * @return {?}\n         */\n        URLSearchParams.prototype.get = function (param) {\n            var /** @type {?} */ storedParam = this.paramsMap.get(param);\n            return Array.isArray(storedParam) ? storedParam[0] : null;\n        };\n        /**\n         * @param {?} param\n         * @return {?}\n         */\n        URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n        /**\n         * @param {?} param\n         * @param {?} val\n         * @return {?}\n         */\n        URLSearchParams.prototype.set = function (param, val) {\n            if (val === void 0 || val === null) {\n                this.delete(param);\n                return;\n            }\n            var /** @type {?} */ list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(val);\n            this.paramsMap.set(param, list);\n        };\n        /**\n         * @param {?} searchParams\n         * @return {?}\n         */\n        URLSearchParams.prototype.setAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n                list.length = 0;\n                list.push(value[0]);\n                _this.paramsMap.set(param, list);\n            });\n        };\n        /**\n         * @param {?} param\n         * @param {?} val\n         * @return {?}\n         */\n        URLSearchParams.prototype.append = function (param, val) {\n            if (val === void 0 || val === null)\n                return;\n            var /** @type {?} */ list = this.paramsMap.get(param) || [];\n            list.push(val);\n            this.paramsMap.set(param, list);\n        };\n        /**\n         * @param {?} searchParams\n         * @return {?}\n         */\n        URLSearchParams.prototype.appendAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n                for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                    list.push(value[i]);\n                }\n                _this.paramsMap.set(param, list);\n            });\n        };\n        /**\n         * @param {?} searchParams\n         * @return {?}\n         */\n        URLSearchParams.prototype.replaceAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n                list.length = 0;\n                for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                    list.push(value[i]);\n                }\n                _this.paramsMap.set(param, list);\n            });\n        };\n        /**\n         * @return {?}\n         */\n        URLSearchParams.prototype.toString = function () {\n            var _this = this;\n            var /** @type {?} */ paramsList = [];\n            this.paramsMap.forEach(function (values, k) {\n                values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n            });\n            return paramsList.join('&');\n        };\n        /**\n         * @param {?} param\n         * @return {?}\n         */\n        URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n        return URLSearchParams;\n    }());\n\n    /**\n     * HTTP request body used by both {\\@link Request} and {\\@link Response}\n     * https://fetch.spec.whatwg.org/#body\n     * @abstract\n     */\n    var Body = (function () {\n        function Body() {\n        }\n        /**\n         * Attempts to return body as parsed `JSON` object, or raises an exception.\n         * @return {?}\n         */\n        Body.prototype.json = function () {\n            if (typeof this._body === 'string') {\n                return JSON.parse(/** @type {?} */ (this._body));\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return JSON.parse(this.text());\n            }\n            return this._body;\n        };\n        /**\n         * Returns the body as a string, presuming `toString()` can be called on the response body.\n         * @return {?}\n         */\n        Body.prototype.text = function () {\n            if (this._body instanceof URLSearchParams) {\n                return this._body.toString();\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n            }\n            if (this._body == null) {\n                return '';\n            }\n            if (typeof this._body === 'object') {\n                return JSON.stringify(this._body, null, 2);\n            }\n            return this._body.toString();\n        };\n        /**\n         * Return the body as an ArrayBuffer\n         * @return {?}\n         */\n        Body.prototype.arrayBuffer = function () {\n            if (this._body instanceof ArrayBuffer) {\n                return (this._body);\n            }\n            return stringToArrayBuffer(this.text());\n        };\n        /**\n         * Returns the request's body as a Blob, assuming that body exists.\n         * @return {?}\n         */\n        Body.prototype.blob = function () {\n            if (this._body instanceof Blob) {\n                return (this._body);\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return new Blob([this._body]);\n            }\n            throw new Error('The request body isn\\'t either a blob or an array buffer');\n        };\n        return Body;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates `Response` instances from provided values.\n     *\n     * Though this object isn't\n     * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n     * add data to a view.\n     *\n     * ### Example\n     *\n     * ```\n     * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n     * ```\n     *\n     * The Response's interface is inspired by the Response constructor defined in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n     * can be accessed many times. There are other differences in the implementation, but this is the\n     * most significant.\n     *\n     * \\@experimental\n     */\n    var Response = (function (_super) {\n        __extends$2(Response, _super);\n        /**\n         * @param {?} responseOptions\n         */\n        function Response(responseOptions) {\n            _super.call(this);\n            this._body = responseOptions.body;\n            this.status = responseOptions.status;\n            this.ok = (this.status >= 200 && this.status <= 299);\n            this.statusText = responseOptions.statusText;\n            this.headers = responseOptions.headers;\n            this.type = responseOptions.type;\n            this.url = responseOptions.url;\n        }\n        /**\n         * @return {?}\n         */\n        Response.prototype.toString = function () {\n            return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n        };\n        return Response;\n    }(Body));\n\n    var /** @type {?} */ _nextRequestId = 0;\n    var /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\n    var /** @type {?} */ _jsonpConnections = null;\n    /**\n     * @return {?}\n     */\n    function _getJsonpConnections() {\n        var /** @type {?} */ w = typeof window == 'object' ? window : {};\n        if (_jsonpConnections === null) {\n            _jsonpConnections = w[JSONP_HOME] = {};\n        }\n        return _jsonpConnections;\n    }\n    var BrowserJsonp = (function () {\n        function BrowserJsonp() {\n        }\n        /**\n         * @param {?} url\n         * @return {?}\n         */\n        BrowserJsonp.prototype.build = function (url) {\n            var /** @type {?} */ node = document.createElement('script');\n            node.src = url;\n            return node;\n        };\n        /**\n         * @return {?}\n         */\n        BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n        /**\n         * @param {?} id\n         * @return {?}\n         */\n        BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n        /**\n         * @param {?} id\n         * @param {?} connection\n         * @return {?}\n         */\n        BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n            var /** @type {?} */ connections = _getJsonpConnections();\n            connections[id] = connection;\n        };\n        /**\n         * @param {?} id\n         * @return {?}\n         */\n        BrowserJsonp.prototype.removeConnection = function (id) {\n            var /** @type {?} */ connections = _getJsonpConnections();\n            connections[id] = null;\n        };\n        /**\n         * @param {?} node\n         * @return {?}\n         */\n        BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n        /**\n         * @param {?} node\n         * @return {?}\n         */\n        BrowserJsonp.prototype.cleanup = function (node) {\n            if (node.parentNode) {\n                node.parentNode.removeChild(/** @type {?} */ ((node)));\n            }\n        };\n        BrowserJsonp.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BrowserJsonp.ctorParameters = function () { return []; };\n        return BrowserJsonp;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n    var /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n    /**\n     * Abstract base class for an in-flight JSONP request.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var JSONPConnection = (function () {\n        function JSONPConnection() {\n        }\n        /**\n         * Callback called when the JSONP request completes, to notify the application\n         * of the new data.\n         * @abstract\n         * @param {?=} data\n         * @return {?}\n         */\n        JSONPConnection.prototype.finished = function (data) { };\n        return JSONPConnection;\n    }());\n    var JSONPConnection_ = (function (_super) {\n        __extends(JSONPConnection_, _super);\n        /**\n         * @param {?} req\n         * @param {?} _dom\n         * @param {?=} baseResponseOptions\n         */\n        function JSONPConnection_(req, _dom, baseResponseOptions) {\n            var _this = this;\n            _super.call(this);\n            this._dom = _dom;\n            this.baseResponseOptions = baseResponseOptions;\n            this._finished = false;\n            if (req.method !== RequestMethod.Get) {\n                throw new TypeError(JSONP_ERR_WRONG_METHOD);\n            }\n            this.request = req;\n            this.response = new rxjs_Observable.Observable(function (responseObserver) {\n                _this.readyState = ReadyState.Loading;\n                var id = _this._id = _dom.nextRequestID();\n                _dom.exposeConnection(id, _this);\n                // Workaround Dart\n                // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n                var callback = _dom.requestCallback(_this._id);\n                var url = req.url;\n                if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                    url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n                }\n                else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                    url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n                }\n                var script = _this._script = _dom.build(url);\n                var onLoad = function (event) {\n                    if (_this.readyState === ReadyState.Cancelled)\n                        return;\n                    _this.readyState = ReadyState.Done;\n                    _dom.cleanup(script);\n                    if (!_this._finished) {\n                        var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                        if (baseResponseOptions) {\n                            responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                        }\n                        responseObserver.error(new Response(responseOptions_1));\n                        return;\n                    }\n                    var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                    if (_this.baseResponseOptions) {\n                        responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.next(new Response(responseOptions));\n                    responseObserver.complete();\n                };\n                var onError = function (error) {\n                    if (_this.readyState === ReadyState.Cancelled)\n                        return;\n                    _this.readyState = ReadyState.Done;\n                    _dom.cleanup(script);\n                    var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                    if (baseResponseOptions) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                };\n                script.addEventListener('load', onLoad);\n                script.addEventListener('error', onError);\n                _dom.send(script);\n                return function () {\n                    _this.readyState = ReadyState.Cancelled;\n                    script.removeEventListener('load', onLoad);\n                    script.removeEventListener('error', onError);\n                    _this._dom.cleanup(script);\n                };\n            });\n        }\n        /**\n         * @param {?=} data\n         * @return {?}\n         */\n        JSONPConnection_.prototype.finished = function (data) {\n            // Don't leak connections\n            this._finished = true;\n            this._dom.removeConnection(this._id);\n            if (this.readyState === ReadyState.Cancelled)\n                return;\n            this._responseData = data;\n        };\n        return JSONPConnection_;\n    }(JSONPConnection));\n    /**\n     * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var JSONPBackend = (function (_super) {\n        __extends(JSONPBackend, _super);\n        function JSONPBackend() {\n            _super.apply(this, arguments);\n        }\n        return JSONPBackend;\n    }(ConnectionBackend));\n    var JSONPBackend_ = (function (_super) {\n        __extends(JSONPBackend_, _super);\n        /**\n         * @param {?} _browserJSONP\n         * @param {?} _baseResponseOptions\n         */\n        function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n            _super.call(this);\n            this._browserJSONP = _browserJSONP;\n            this._baseResponseOptions = _baseResponseOptions;\n        }\n        /**\n         * @param {?} request\n         * @return {?}\n         */\n        JSONPBackend_.prototype.createConnection = function (request) {\n            return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n        };\n        JSONPBackend_.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        JSONPBackend_.ctorParameters = function () { return [\n            { type: BrowserJsonp, },\n            { type: ResponseOptions, },\n        ]; };\n        return JSONPBackend_;\n    }(JSONPBackend));\n\n    var /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n    /**\n     * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n     * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n     * request.\n     *\n     * This class would typically not be created or interacted with directly inside applications, though\n     * the {\\@link MockConnection} may be interacted with in tests.\n     *\n     * \\@experimental\n     */\n    var XHRConnection = (function () {\n        /**\n         * @param {?} req\n         * @param {?} browserXHR\n         * @param {?=} baseResponseOptions\n         */\n        function XHRConnection(req, browserXHR, baseResponseOptions) {\n            var _this = this;\n            this.request = req;\n            this.response = new rxjs_Observable.Observable(function (responseObserver) {\n                var _xhr = browserXHR.build();\n                _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n                if (req.withCredentials != null) {\n                    _xhr.withCredentials = req.withCredentials;\n                }\n                // load event handler\n                var onLoad = function () {\n                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                    var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                    var body = null;\n                    // HTTP 204 means no content\n                    if (status !== 204) {\n                        // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                        // response/responseType properties were introduced in ResourceLoader Level2 spec\n                        // (supported by IE10)\n                        body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                        // Implicitly strip a potential XSSI prefix.\n                        if (typeof body === 'string') {\n                            body = body.replace(XSSI_PREFIX, '');\n                        }\n                    }\n                    // fix status code when it is 0 (0 status is undocumented).\n                    // Occurs when accessing file resources or on Android 4.1 stock browser\n                    // while retrieving files from application cache.\n                    if (status === 0) {\n                        status = body ? 200 : 0;\n                    }\n                    var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                    // IE 9 does not provide the way to get URL of response\n                    var url = getResponseURL(_xhr) || req.url;\n                    var statusText = _xhr.statusText || 'OK';\n                    var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                    if (baseResponseOptions != null) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    var response = new Response(responseOptions);\n                    response.ok = isSuccess(status);\n                    if (response.ok) {\n                        responseObserver.next(response);\n                        // TODO(gdi2290): defer complete if array buffer until done\n                        responseObserver.complete();\n                        return;\n                    }\n                    responseObserver.error(response);\n                };\n                // error event handler\n                var onError = function (err) {\n                    var responseOptions = new ResponseOptions({\n                        body: err,\n                        type: ResponseType.Error,\n                        status: _xhr.status,\n                        statusText: _xhr.statusText,\n                    });\n                    if (baseResponseOptions != null) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                };\n                _this.setDetectedContentType(req, _xhr);\n                if (req.headers == null) {\n                    req.headers = new Headers();\n                }\n                if (!req.headers.has('Accept')) {\n                    req.headers.append('Accept', 'application/json, text/plain, */*');\n                }\n                req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n                // Select the correct buffer type to store the response\n                if (req.responseType != null && _xhr.responseType != null) {\n                    switch (req.responseType) {\n                        case ResponseContentType.ArrayBuffer:\n                            _xhr.responseType = 'arraybuffer';\n                            break;\n                        case ResponseContentType.Json:\n                            _xhr.responseType = 'json';\n                            break;\n                        case ResponseContentType.Text:\n                            _xhr.responseType = 'text';\n                            break;\n                        case ResponseContentType.Blob:\n                            _xhr.responseType = 'blob';\n                            break;\n                        default:\n                            throw new Error('The selected responseType is not supported');\n                    }\n                }\n                _xhr.addEventListener('load', onLoad);\n                _xhr.addEventListener('error', onError);\n                _xhr.send(_this.request.getBody());\n                return function () {\n                    _xhr.removeEventListener('load', onLoad);\n                    _xhr.removeEventListener('error', onError);\n                    _xhr.abort();\n                };\n            });\n        }\n        /**\n         * @param {?} req\n         * @param {?} _xhr\n         * @return {?}\n         */\n        XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n            // Skip if a custom Content-Type header is provided\n            if (req.headers != null && req.headers.get('Content-Type') != null) {\n                return;\n            }\n            // Set the detected content type\n            switch (req.contentType) {\n                case ContentType.NONE:\n                    break;\n                case ContentType.JSON:\n                    _xhr.setRequestHeader('content-type', 'application/json');\n                    break;\n                case ContentType.FORM:\n                    _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                    break;\n                case ContentType.TEXT:\n                    _xhr.setRequestHeader('content-type', 'text/plain');\n                    break;\n                case ContentType.BLOB:\n                    var /** @type {?} */ blob = req.blob();\n                    if (blob.type) {\n                        _xhr.setRequestHeader('content-type', blob.type);\n                    }\n                    break;\n            }\n        };\n        return XHRConnection;\n    }());\n    /**\n     * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n     * using a cookie. See {\\@link https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)}\n     * for more information on XSRF.\n     *\n     * Applications can configure custom cookie and header names by binding an instance of this class\n     * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n     * details.\n     *\n     * \\@experimental\n     */\n    var CookieXSRFStrategy = (function () {\n        /**\n         * @param {?=} _cookieName\n         * @param {?=} _headerName\n         */\n        function CookieXSRFStrategy(_cookieName, _headerName) {\n            if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n            if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n            this._cookieName = _cookieName;\n            this._headerName = _headerName;\n        }\n        /**\n         * @param {?} req\n         * @return {?}\n         */\n        CookieXSRFStrategy.prototype.configureRequest = function (req) {\n            var /** @type {?} */ xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);\n            if (xsrfToken) {\n                req.headers.set(this._headerName, xsrfToken);\n            }\n        };\n        return CookieXSRFStrategy;\n    }());\n    /**\n     * Creates {\\@link XHRConnection} instances.\n     *\n     * This class would typically not be used by end users, but could be\n     * overridden if a different backend implementation should be used,\n     * such as in a node backend.\n     *\n     * ### Example\n     *\n     * ```\n     * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n     * \\@Component({\n     *   viewProviders: [\n     *     HTTP_PROVIDERS,\n     *     {provide: Http, useFactory: (backend, options) => {\n     *       return new Http(backend, options);\n     *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n     * })\n     * class MyComponent {\n     *   constructor(http:Http) {\n     *     http.request('people.json').subscribe(res => this.people = res.json());\n     *   }\n     * }\n     * ```\n     * \\@experimental\n     */\n    var XHRBackend = (function () {\n        /**\n         * @param {?} _browserXHR\n         * @param {?} _baseResponseOptions\n         * @param {?} _xsrfStrategy\n         */\n        function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n            this._browserXHR = _browserXHR;\n            this._baseResponseOptions = _baseResponseOptions;\n            this._xsrfStrategy = _xsrfStrategy;\n        }\n        /**\n         * @param {?} request\n         * @return {?}\n         */\n        XHRBackend.prototype.createConnection = function (request) {\n            this._xsrfStrategy.configureRequest(request);\n            return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n        };\n        XHRBackend.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        XHRBackend.ctorParameters = function () { return [\n            { type: BrowserXhr, },\n            { type: ResponseOptions, },\n            { type: XSRFStrategy, },\n        ]; };\n        return XHRBackend;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates a request options object to be optionally provided when instantiating a\n     * {\\@link Request}.\n     *\n     * This class is based on the `RequestInit` description in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#requestinit).\n     *\n     * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n     * class, which sub-classes `RequestOptions`.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * var options = new RequestOptions({\n     *   method: RequestMethod.Post,\n     *   url: 'https://google.com'\n     * });\n     * var req = new Request(options);\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // https://google.com\n     * ```\n     *\n     * \\@experimental\n     */\n    var RequestOptions = (function () {\n        /**\n         * @param {?=} __0\n         */\n        function RequestOptions(_a) {\n            var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType;\n            this.method = method != null ? normalizeMethodName(method) : null;\n            this.headers = headers != null ? headers : null;\n            this.body = body != null ? body : null;\n            this.url = url != null ? url : null;\n            this.search =\n                search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;\n            this.withCredentials = withCredentials != null ? withCredentials : null;\n            this.responseType = responseType != null ? responseType : null;\n        }\n        /**\n         * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n         * existing values. This method will not change the values of the instance on which it is being\n         * called.\n         *\n         * Note that `headers` and `search` will override existing values completely if present in\n         * the `options` object. If these values should be merged, it should be done prior to calling\n         * `merge` on the `RequestOptions` instance.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n         *\n         * ```typescript\n         * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n         *\n         * var options = new RequestOptions({\n         *   method: RequestMethod.Post\n         * });\n         * var req = new Request(options.merge({\n         *   url: 'https://google.com'\n         * }));\n         * console.log('req.method:', RequestMethod[req.method]); // Post\n         * console.log('options.url:', options.url); // null\n         * console.log('req.url:', req.url); // https://google.com\n         * ```\n         * @param {?=} options\n         * @return {?}\n         */\n        RequestOptions.prototype.merge = function (options) {\n            return new RequestOptions({\n                method: options && options.method != null ? options.method : this.method,\n                headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n                body: options && options.body != null ? options.body : this.body,\n                url: options && options.url != null ? options.url : this.url,\n                search: options && options.search != null ?\n                    (typeof options.search === 'string' ? new URLSearchParams(options.search) :\n                        options.search.clone()) :\n                    this.search,\n                withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                    this.withCredentials,\n                responseType: options && options.responseType != null ? options.responseType :\n                    this.responseType\n            });\n        };\n        return RequestOptions;\n    }());\n    /**\n     * Subclass of {\\@link RequestOptions}, with default values.\n     *\n     * Default values:\n     *  * method: {\\@link RequestMethod RequestMethod.Get}\n     *  * headers: empty {\\@link Headers} object\n     *\n     * This class could be extended and bound to the {\\@link RequestOptions} class\n     * when configuring an {\\@link Injector}, in order to override the default options\n     * used by {\\@link Http} to create and send {\\@link Request Requests}.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\n     *\n     * ```typescript\n     * import {provide} from '\\@angular/core';\n     * import {bootstrap} from '\\@angular/platform-browser/browser';\n     * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\\@angular/http';\n     * import {App} from './myapp';\n     *\n     * class MyOptions extends BaseRequestOptions {\n     *   search: string = 'coreTeam=true';\n     * }\n     *\n     * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n     * ```\n     *\n     * The options could also be extended when manually creating a {\\@link Request}\n     * object.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\n     *\n     * ```\n     * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * var options = new BaseRequestOptions();\n     * var req = new Request(options.merge({\n     *   method: RequestMethod.Post,\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     *\n     * \\@experimental\n     */\n    var BaseRequestOptions = (function (_super) {\n        __extends$3(BaseRequestOptions, _super);\n        function BaseRequestOptions() {\n            _super.call(this, { method: RequestMethod.Get, headers: new Headers() });\n        }\n        BaseRequestOptions.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BaseRequestOptions.ctorParameters = function () { return []; };\n        return BaseRequestOptions;\n    }(RequestOptions));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates `Request` instances from provided values.\n     *\n     * The Request's interface is inspired by the Request constructor defined in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#request-class),\n     * but is considered a static value whose body can be accessed many times. There are other\n     * differences in the implementation, but this is the most significant.\n     *\n     * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n     * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n     * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n     * where it may be useful to generate a `Request` with arbitrary headers and search params.\n     *\n     * ```typescript\n     * import {Injectable, Injector} from '\\@angular/core';\n     * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n     *\n     * \\@Injectable()\n     * class AutoAuthenticator {\n     *   constructor(public http:Http) {}\n     *   request(url:string) {\n     *     return this.http.request(new Request({\n     *       method: RequestMethod.Get,\n     *       url: url,\n     *       search: 'password=123'\n     *     }));\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n     * var authenticator = injector.get(AutoAuthenticator);\n     * authenticator.request('people.json').subscribe(res => {\n     *   //URL should have included '?password=123'\n     *   console.log('people', res.json());\n     * });\n     * ```\n     *\n     * \\@experimental\n     */\n    var Request = (function (_super) {\n        __extends$5(Request, _super);\n        /**\n         * @param {?} requestOptions\n         */\n        function Request(requestOptions) {\n            _super.call(this);\n            // TODO: assert that url is present\n            var url = requestOptions.url;\n            this.url = requestOptions.url;\n            if (requestOptions.search) {\n                var search = requestOptions.search.toString();\n                if (search.length > 0) {\n                    var prefix = '?';\n                    if (this.url.indexOf('?') != -1) {\n                        prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n                    }\n                    // TODO: just delete search-query-looking string in url?\n                    this.url = url + prefix + search;\n                }\n            }\n            this._body = requestOptions.body;\n            this.method = normalizeMethodName(requestOptions.method);\n            // TODO(jeffbcross): implement behavior\n            // Defaults to 'omit', consistent with browser\n            this.headers = new Headers(requestOptions.headers);\n            this.contentType = this.detectContentType();\n            this.withCredentials = requestOptions.withCredentials;\n            this.responseType = requestOptions.responseType;\n        }\n        /**\n         * Returns the content type enum based on header options.\n         * @return {?}\n         */\n        Request.prototype.detectContentType = function () {\n            switch (this.headers.get('content-type')) {\n                case 'application/json':\n                    return ContentType.JSON;\n                case 'application/x-www-form-urlencoded':\n                    return ContentType.FORM;\n                case 'multipart/form-data':\n                    return ContentType.FORM_DATA;\n                case 'text/plain':\n                case 'text/html':\n                    return ContentType.TEXT;\n                case 'application/octet-stream':\n                    return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n                default:\n                    return this.detectContentTypeFromBody();\n            }\n        };\n        /**\n         * Returns the content type of request's body based on its type.\n         * @return {?}\n         */\n        Request.prototype.detectContentTypeFromBody = function () {\n            if (this._body == null) {\n                return ContentType.NONE;\n            }\n            else if (this._body instanceof URLSearchParams) {\n                return ContentType.FORM;\n            }\n            else if (this._body instanceof FormData) {\n                return ContentType.FORM_DATA;\n            }\n            else if (this._body instanceof Blob$1) {\n                return ContentType.BLOB;\n            }\n            else if (this._body instanceof ArrayBuffer$1) {\n                return ContentType.ARRAY_BUFFER;\n            }\n            else if (this._body && typeof this._body === 'object') {\n                return ContentType.JSON;\n            }\n            else {\n                return ContentType.TEXT;\n            }\n        };\n        /**\n         * Returns the request's body according to its type. If body is undefined, return\n         * null.\n         * @return {?}\n         */\n        Request.prototype.getBody = function () {\n            switch (this.contentType) {\n                case ContentType.JSON:\n                    return this.text();\n                case ContentType.FORM:\n                    return this.text();\n                case ContentType.FORM_DATA:\n                    return this._body;\n                case ContentType.TEXT:\n                    return this.text();\n                case ContentType.BLOB:\n                    return this.blob();\n                case ContentType.ARRAY_BUFFER:\n                    return this.arrayBuffer();\n                default:\n                    return null;\n            }\n        };\n        return Request;\n    }(Body));\n    var /** @type {?} */ noop = function () { };\n    var /** @type {?} */ w = typeof window == 'object' ? window : noop;\n    var /** @type {?} */ FormData = ((w) /** TODO #9100 */)['FormData'] || noop;\n    var /** @type {?} */ Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;\n    var /** @type {?} */ ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @param {?} backend\n     * @param {?} request\n     * @return {?}\n     */\n    function httpRequest(backend, request) {\n        return backend.createConnection(request).response;\n    }\n    /**\n     * @param {?} defaultOpts\n     * @param {?} providedOpts\n     * @param {?} method\n     * @param {?} url\n     * @return {?}\n     */\n    function mergeOptions(defaultOpts, providedOpts, method, url) {\n        var /** @type {?} */ newOptions = defaultOpts;\n        if (providedOpts) {\n            // Hack so Dart can used named parameters\n            return newOptions.merge(new RequestOptions({\n                method: providedOpts.method || method,\n                url: providedOpts.url || url,\n                search: providedOpts.search,\n                headers: providedOpts.headers,\n                body: providedOpts.body,\n                withCredentials: providedOpts.withCredentials,\n                responseType: providedOpts.responseType\n            }));\n        }\n        return newOptions.merge(new RequestOptions({ method: method, url: url }));\n    }\n    /**\n     * Performs http requests using `XMLHttpRequest` as the default backend.\n     *\n     * `Http` is available as an injectable class, with methods to perform http requests. Calling\n     * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n     * response is received.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n     * import 'rxjs/add/operator/map'\n     * \\@Component({\n     *   selector: 'http-app',\n     *   viewProviders: [HTTP_PROVIDERS],\n     *   templateUrl: 'people.html'\n     * })\n     * class PeopleComponent {\n     *   constructor(http: Http) {\n     *     http.get('people.json')\n     *       // Call map on the response observable to get the parsed people object\n     *       .map(res => res.json())\n     *       // Subscribe to the observable to get the parsed people object and attach it to the\n     *       // component\n     *       .subscribe(people => this.people = people);\n     *   }\n     * }\n     * ```\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n     * ```\n     *\n     * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n     * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n     * the {\\@link XHRBackend} provider, as in the following example:\n     *\n     * ### Example\n     *\n     * ```typescript\n     * import {BaseRequestOptions, Http} from '\\@angular/http';\n     * import {MockBackend} from '\\@angular/http/testing';\n     * var injector = Injector.resolveAndCreate([\n     *   BaseRequestOptions,\n     *   MockBackend,\n     *   {provide: Http, useFactory:\n     *       function(backend, defaultOptions) {\n     *         return new Http(backend, defaultOptions);\n     *       },\n     *       deps: [MockBackend, BaseRequestOptions]}\n     * ]);\n     * var http = injector.get(Http);\n     * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n     * ```\n     *\n     * \\@experimental\n     */\n    var Http = (function () {\n        /**\n         * @param {?} _backend\n         * @param {?} _defaultOptions\n         */\n        function Http(_backend, _defaultOptions) {\n            this._backend = _backend;\n            this._defaultOptions = _defaultOptions;\n        }\n        /**\n         * Performs any type of http request. First argument is required, and can either be a url or\n         * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n         * object can be provided as the 2nd argument. The options object will be merged with the values\n         * of {\\@link BaseRequestOptions} before performing the request.\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.request = function (url, options) {\n            var /** @type {?} */ responseObservable;\n            if (typeof url === 'string') {\n                responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n            }\n            else if (url instanceof Request) {\n                responseObservable = httpRequest(this._backend, url);\n            }\n            else {\n                throw new Error('First argument must be a url string or Request instance.');\n            }\n            return responseObservable;\n        };\n        /**\n         * Performs a request with `get` http method.\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.get = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n        };\n        /**\n         * Performs a request with `post` http method.\n         * @param {?} url\n         * @param {?} body\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.post = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n        };\n        /**\n         * Performs a request with `put` http method.\n         * @param {?} url\n         * @param {?} body\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.put = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n        };\n        /**\n         * Performs a request with `delete` http method.\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.delete = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n        };\n        /**\n         * Performs a request with `patch` http method.\n         * @param {?} url\n         * @param {?} body\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.patch = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n        };\n        /**\n         * Performs a request with `head` http method.\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.head = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n        };\n        /**\n         * Performs a request with `options` http method.\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Http.prototype.options = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n        };\n        Http.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        Http.ctorParameters = function () { return [\n            { type: ConnectionBackend, },\n            { type: RequestOptions, },\n        ]; };\n        return Http;\n    }());\n    /**\n     * \\@experimental\n     */\n    var Jsonp = (function (_super) {\n        __extends$4(Jsonp, _super);\n        /**\n         * @param {?} backend\n         * @param {?} defaultOptions\n         */\n        function Jsonp(backend, defaultOptions) {\n            _super.call(this, backend, defaultOptions);\n        }\n        /**\n         * Performs any type of http request. First argument is required, and can either be a url or\n         * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n         * object can be provided as the 2nd argument. The options object will be merged with the values\n         * of {\\@link BaseRequestOptions} before performing the request.\n         *\n         * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n         * supported by all current browsers. Because JSONP creates a `<script>` element with\n         * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n         * source could expose your application to XSS risks. Data exposed by JSONP may also be\n         * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n         * future security issues (e.g. content sniffing).  For more detail, see the\n         * [Security Guide](http://g.co/ng/security).\n         * @param {?} url\n         * @param {?=} options\n         * @return {?}\n         */\n        Jsonp.prototype.request = function (url, options) {\n            var /** @type {?} */ responseObservable;\n            if (typeof url === 'string') {\n                url =\n                    new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n            }\n            if (url instanceof Request) {\n                if (url.method !== RequestMethod.Get) {\n                    throw new Error('JSONP requests must use GET request method.');\n                }\n                responseObservable = httpRequest(this._backend, url);\n            }\n            else {\n                throw new Error('First argument must be a url string or Request instance.');\n            }\n            return responseObservable;\n        };\n        Jsonp.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        Jsonp.ctorParameters = function () { return [\n            { type: ConnectionBackend, },\n            { type: RequestOptions, },\n        ]; };\n        return Jsonp;\n    }(Http));\n\n    /**\n     * @return {?}\n     */\n    function _createDefaultCookieXSRFStrategy() {\n        return new CookieXSRFStrategy();\n    }\n    /**\n     * @param {?} xhrBackend\n     * @param {?} requestOptions\n     * @return {?}\n     */\n    function httpFactory(xhrBackend, requestOptions) {\n        return new Http(xhrBackend, requestOptions);\n    }\n    /**\n     * @param {?} jsonpBackend\n     * @param {?} requestOptions\n     * @return {?}\n     */\n    function jsonpFactory(jsonpBackend, requestOptions) {\n        return new Jsonp(jsonpBackend, requestOptions);\n    }\n    /**\n     * The module that includes http's providers\n     *\n     * \\@experimental\n     */\n    var HttpModule = (function () {\n        function HttpModule() {\n        }\n        HttpModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        providers: [\n                            // TODO(pascal): use factory type annotations once supported in DI\n                            // issue: https://github.com/angular/angular/issues/3183\n                            { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                            BrowserXhr,\n                            { provide: RequestOptions, useClass: BaseRequestOptions },\n                            { provide: ResponseOptions, useClass: BaseResponseOptions },\n                            XHRBackend,\n                            { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                        ],\n                    },] },\n        ];\n        /** @nocollapse */\n        HttpModule.ctorParameters = function () { return []; };\n        return HttpModule;\n    }());\n    /**\n     * The module that includes jsonp's providers\n     *\n     * \\@experimental\n     */\n    var JsonpModule = (function () {\n        function JsonpModule() {\n        }\n        JsonpModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        providers: [\n                            // TODO(pascal): use factory type annotations once supported in DI\n                            // issue: https://github.com/angular/angular/issues/3183\n                            { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                            BrowserJsonp,\n                            { provide: RequestOptions, useClass: BaseRequestOptions },\n                            { provide: ResponseOptions, useClass: BaseResponseOptions },\n                            { provide: JSONPBackend, useClass: JSONPBackend_ },\n                        ],\n                    },] },\n        ];\n        /** @nocollapse */\n        JsonpModule.ctorParameters = function () { return []; };\n        return JsonpModule;\n    }());\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.4');\n\n    exports.BrowserXhr = BrowserXhr;\n    exports.JSONPBackend = JSONPBackend;\n    exports.JSONPConnection = JSONPConnection;\n    exports.CookieXSRFStrategy = CookieXSRFStrategy;\n    exports.XHRBackend = XHRBackend;\n    exports.XHRConnection = XHRConnection;\n    exports.BaseRequestOptions = BaseRequestOptions;\n    exports.RequestOptions = RequestOptions;\n    exports.BaseResponseOptions = BaseResponseOptions;\n    exports.ResponseOptions = ResponseOptions;\n    exports.ReadyState = ReadyState;\n    exports.RequestMethod = RequestMethod;\n    exports.ResponseContentType = ResponseContentType;\n    exports.ResponseType = ResponseType;\n    exports.Headers = Headers;\n    exports.Http = Http;\n    exports.Jsonp = Jsonp;\n    exports.HttpModule = HttpModule;\n    exports.JsonpModule = JsonpModule;\n    exports.Connection = Connection;\n    exports.ConnectionBackend = ConnectionBackend;\n    exports.XSRFStrategy = XSRFStrategy;\n    exports.Request = Request;\n    exports.Response = Response;\n    exports.QueryEncoder = QueryEncoder;\n    exports.URLSearchParams = URLSearchParams;\n    exports.VERSION = VERSION;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/http/bundles/http.umd.js\n// module id = 24\n// module chunks = 0","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n__export(require('./http-status-codes'));\r\n__export(require('./in-memory-backend.service'));\r\nvar core_1 = require('@angular/core');\r\nvar http_1 = require('@angular/http');\r\nvar in_memory_backend_service_2 = require('./in-memory-backend.service');\r\nvar InMemoryWebApiModule = (function () {\r\n    function InMemoryWebApiModule() {\r\n    }\r\n    /**\r\n    *  Prepare in-memory-web-api in the root/boot application module\r\n    *  with class that implements InMemoryDbService and creates an in-memory database.\r\n    *\r\n    * @param {Type} dbCreator - Class that creates seed data for in-memory database. Must implement InMemoryDbService.\r\n    * @param {InMemoryBackendConfigArgs} [options]\r\n    *\r\n    * @example\r\n    * InMemoryWebApiModule.forRoot(dbCreator);\r\n    * InMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\r\n    */\r\n    InMemoryWebApiModule.forRoot = function (dbCreator, options) {\r\n        var providers = [\r\n            { provide: http_1.XHRBackend, useClass: in_memory_backend_service_2.InMemoryBackendService },\r\n            { provide: in_memory_backend_service_2.SEED_DATA, useClass: dbCreator }\r\n        ];\r\n        if (options) {\r\n            providers.push({ provide: in_memory_backend_service_2.InMemoryBackendConfig, useValue: options });\r\n        }\r\n        return {\r\n            ngModule: InMemoryWebApiModule,\r\n            providers: providers\r\n        };\r\n    };\r\n    InMemoryWebApiModule = __decorate([\r\n        core_1.NgModule({}), \r\n        __metadata('design:paramtypes', [])\r\n    ], InMemoryWebApiModule);\r\n    return InMemoryWebApiModule;\r\n}());\r\nexports.InMemoryWebApiModule = InMemoryWebApiModule;\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-in-memory-web-api/index.js\n// module id = 25\n// module chunks = 0","\"use strict\";\r\nexports.STATUS = {\r\n    CONTINUE: 100,\r\n    SWITCHING_PROTOCOLS: 101,\r\n    OK: 200,\r\n    CREATED: 201,\r\n    ACCEPTED: 202,\r\n    NON_AUTHORITATIVE_INFORMATION: 203,\r\n    NO_CONTENT: 204,\r\n    RESET_CONTENT: 205,\r\n    PARTIAL_CONTENT: 206,\r\n    MULTIPLE_CHOICES: 300,\r\n    MOVED_PERMANTENTLY: 301,\r\n    FOUND: 302,\r\n    SEE_OTHER: 303,\r\n    NOT_MODIFIED: 304,\r\n    USE_PROXY: 305,\r\n    TEMPORARY_REDIRECT: 307,\r\n    BAD_REQUEST: 400,\r\n    UNAUTHORIZED: 401,\r\n    PAYMENT_REQUIRED: 402,\r\n    FORBIDDEN: 403,\r\n    NOT_FOUND: 404,\r\n    METHOD_NOT_ALLOWED: 405,\r\n    NOT_ACCEPTABLE: 406,\r\n    PROXY_AUTHENTICATION_REQUIRED: 407,\r\n    REQUEST_TIMEOUT: 408,\r\n    CONFLICT: 409,\r\n    GONE: 410,\r\n    LENGTH_REQUIRED: 411,\r\n    PRECONDITION_FAILED: 412,\r\n    PAYLOAD_TO_LARGE: 413,\r\n    URI_TOO_LONG: 414,\r\n    UNSUPPORTED_MEDIA_TYPE: 415,\r\n    RANGE_NOT_SATISFIABLE: 416,\r\n    EXPECTATION_FAILED: 417,\r\n    IM_A_TEAPOT: 418,\r\n    UPGRADE_REQUIRED: 426,\r\n    INTERNAL_SERVER_ERROR: 500,\r\n    NOT_IMPLEMENTED: 501,\r\n    BAD_GATEWAY: 502,\r\n    SERVICE_UNAVAILABLE: 503,\r\n    GATEWAY_TIMEOUT: 504,\r\n    HTTP_VERSION_NOT_SUPPORTED: 505,\r\n    PROCESSING: 102,\r\n    MULTI_STATUS: 207,\r\n    IM_USED: 226,\r\n    PERMANENT_REDIRECT: 308,\r\n    UNPROCESSABLE_ENTRY: 422,\r\n    LOCKED: 423,\r\n    FAILED_DEPENDENCY: 424,\r\n    PRECONDITION_REQUIRED: 428,\r\n    TOO_MANY_REQUESTS: 429,\r\n    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\r\n    UNAVAILABLE_FOR_LEGAL_REASONS: 451,\r\n    VARIANT_ALSO_NEGOTIATES: 506,\r\n    INSUFFICIENT_STORAGE: 507,\r\n    NETWORK_AUTHENTICATION_REQUIRED: 511\r\n};\r\n/*tslint:disable:quotemark max-line-length one-line */\r\nexports.STATUS_CODE_INFO = {\r\n    \"100\": {\r\n        \"code\": 100,\r\n        \"text\": \"Continue\",\r\n        \"description\": \"\\\"The initial part of a request has been received and has not yet been rejected by the server.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.2.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.2.1\"\r\n    },\r\n    \"101\": {\r\n        \"code\": 101,\r\n        \"text\": \"Switching Protocols\",\r\n        \"description\": \"\\\"The server understands and is willing to comply with the client's request, via the Upgrade header field, for a change in the application protocol being used on this connection.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.2.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.2.2\"\r\n    },\r\n    \"200\": {\r\n        \"code\": 200,\r\n        \"text\": \"OK\",\r\n        \"description\": \"\\\"The request has succeeded.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.1\"\r\n    },\r\n    \"201\": {\r\n        \"code\": 201,\r\n        \"text\": \"Created\",\r\n        \"description\": \"\\\"The request has been fulfilled and has resulted in one or more new resources being created.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.2\"\r\n    },\r\n    \"202\": {\r\n        \"code\": 202,\r\n        \"text\": \"Accepted\",\r\n        \"description\": \"\\\"The request has been accepted for processing, but the processing has not been completed.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.3\"\r\n    },\r\n    \"203\": {\r\n        \"code\": 203,\r\n        \"text\": \"Non-Authoritative Information\",\r\n        \"description\": \"\\\"The request was successful but the enclosed payload has been modified from that of the origin server's 200 (OK) response by a transforming proxy.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.4\"\r\n    },\r\n    \"204\": {\r\n        \"code\": 204,\r\n        \"text\": \"No Content\",\r\n        \"description\": \"\\\"The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.5\"\r\n    },\r\n    \"205\": {\r\n        \"code\": 205,\r\n        \"text\": \"Reset Content\",\r\n        \"description\": \"\\\"The server has fulfilled the request and desires that the user agent reset the \\\"document view\\\", which caused the request to be sent, to its original state as received from the origin server.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.6\"\r\n    },\r\n    \"206\": {\r\n        \"code\": 206,\r\n        \"text\": \"Partial Content\",\r\n        \"description\": \"\\\"The server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the requests's Range header field.\\\"\",\r\n        \"spec_title\": \"RFC7233#4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7233#section-4.1\"\r\n    },\r\n    \"300\": {\r\n        \"code\": 300,\r\n        \"text\": \"Multiple Choices\",\r\n        \"description\": \"\\\"The target resource has more than one representation, each with its own more specific identifier, and information about the alternatives is being provided so that the user (or user agent) can select a preferred representation by redirecting its request to one or more of those identifiers.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.1\"\r\n    },\r\n    \"301\": {\r\n        \"code\": 301,\r\n        \"text\": \"Moved Permanently\",\r\n        \"description\": \"\\\"The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.2\"\r\n    },\r\n    \"302\": {\r\n        \"code\": 302,\r\n        \"text\": \"Found\",\r\n        \"description\": \"\\\"The target resource resides temporarily under a different URI.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.3\"\r\n    },\r\n    \"303\": {\r\n        \"code\": 303,\r\n        \"text\": \"See Other\",\r\n        \"description\": \"\\\"The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, that is intended to provide an indirect response to the original request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.4\"\r\n    },\r\n    \"304\": {\r\n        \"code\": 304,\r\n        \"text\": \"Not Modified\",\r\n        \"description\": \"\\\"A conditional GET request has been received and would have resulted in a 200 (OK) response if it were not for the fact that the condition has evaluated to false.\\\"\",\r\n        \"spec_title\": \"RFC7232#4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7232#section-4.1\"\r\n    },\r\n    \"305\": {\r\n        \"code\": 305,\r\n        \"text\": \"Use Proxy\",\r\n        \"description\": \"*deprecated*\",\r\n        \"spec_title\": \"RFC7231#6.4.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.5\"\r\n    },\r\n    \"307\": {\r\n        \"code\": 307,\r\n        \"text\": \"Temporary Redirect\",\r\n        \"description\": \"\\\"The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.4.7\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.4.7\"\r\n    },\r\n    \"400\": {\r\n        \"code\": 400,\r\n        \"text\": \"Bad Request\",\r\n        \"description\": \"\\\"The server cannot or will not process the request because the received syntax is invalid, nonsensical, or exceeds some limitation on what the server is willing to process.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.1\"\r\n    },\r\n    \"401\": {\r\n        \"code\": 401,\r\n        \"text\": \"Unauthorized\",\r\n        \"description\": \"\\\"The request has not been applied because it lacks valid authentication credentials for the target resource.\\\"\",\r\n        \"spec_title\": \"RFC7235#6.3.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7235#section-3.1\"\r\n    },\r\n    \"402\": {\r\n        \"code\": 402,\r\n        \"text\": \"Payment Required\",\r\n        \"description\": \"*reserved*\",\r\n        \"spec_title\": \"RFC7231#6.5.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.2\"\r\n    },\r\n    \"403\": {\r\n        \"code\": 403,\r\n        \"text\": \"Forbidden\",\r\n        \"description\": \"\\\"The server understood the request but refuses to authorize it.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.3\"\r\n    },\r\n    \"404\": {\r\n        \"code\": 404,\r\n        \"text\": \"Not Found\",\r\n        \"description\": \"\\\"The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.4\"\r\n    },\r\n    \"405\": {\r\n        \"code\": 405,\r\n        \"text\": \"Method Not Allowed\",\r\n        \"description\": \"\\\"The method specified in the request-line is known by the origin server but not supported by the target resource.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.5\"\r\n    },\r\n    \"406\": {\r\n        \"code\": 406,\r\n        \"text\": \"Not Acceptable\",\r\n        \"description\": \"\\\"The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.6\"\r\n    },\r\n    \"407\": {\r\n        \"code\": 407,\r\n        \"text\": \"Proxy Authentication Required\",\r\n        \"description\": \"\\\"The client needs to authenticate itself in order to use a proxy.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.3.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.3.2\"\r\n    },\r\n    \"408\": {\r\n        \"code\": 408,\r\n        \"text\": \"Request Timeout\",\r\n        \"description\": \"\\\"The server did not receive a complete request message within the time that it was prepared to wait.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.7\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.7\"\r\n    },\r\n    \"409\": {\r\n        \"code\": 409,\r\n        \"text\": \"Conflict\",\r\n        \"description\": \"\\\"The request could not be completed due to a conflict with the current state of the resource.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.8\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.8\"\r\n    },\r\n    \"410\": {\r\n        \"code\": 410,\r\n        \"text\": \"Gone\",\r\n        \"description\": \"\\\"Access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.9\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.9\"\r\n    },\r\n    \"411\": {\r\n        \"code\": 411,\r\n        \"text\": \"Length Required\",\r\n        \"description\": \"\\\"The server refuses to accept the request without a defined Content-Length.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.10\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.10\"\r\n    },\r\n    \"412\": {\r\n        \"code\": 412,\r\n        \"text\": \"Precondition Failed\",\r\n        \"description\": \"\\\"One or more preconditions given in the request header fields evaluated to false when tested on the server.\\\"\",\r\n        \"spec_title\": \"RFC7232#4.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7232#section-4.2\"\r\n    },\r\n    \"413\": {\r\n        \"code\": 413,\r\n        \"text\": \"Payload Too Large\",\r\n        \"description\": \"\\\"The server is refusing to process a request because the request payload is larger than the server is willing or able to process.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.11\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.11\"\r\n    },\r\n    \"414\": {\r\n        \"code\": 414,\r\n        \"text\": \"URI Too Long\",\r\n        \"description\": \"\\\"The server is refusing to service the request because the request-target is longer than the server is willing to interpret.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.12\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.12\"\r\n    },\r\n    \"415\": {\r\n        \"code\": 415,\r\n        \"text\": \"Unsupported Media Type\",\r\n        \"description\": \"\\\"The origin server is refusing to service the request because the payload is in a format not supported by the target resource for this method.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.13\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.13\"\r\n    },\r\n    \"416\": {\r\n        \"code\": 416,\r\n        \"text\": \"Range Not Satisfiable\",\r\n        \"description\": \"\\\"None of the ranges in the request's Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.\\\"\",\r\n        \"spec_title\": \"RFC7233#4.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7233#section-4.4\"\r\n    },\r\n    \"417\": {\r\n        \"code\": 417,\r\n        \"text\": \"Expectation Failed\",\r\n        \"description\": \"\\\"The expectation given in the request's Expect header field could not be met by at least one of the inbound servers.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.14\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.14\"\r\n    },\r\n    \"418\": {\r\n        \"code\": 418,\r\n        \"text\": \"I'm a teapot\",\r\n        \"description\": \"\\\"1988 April Fools Joke. Returned by tea pots requested to brew coffee.\\\"\",\r\n        \"spec_title\": \"RFC 2324\",\r\n        \"spec_href\": \"https://tools.ietf.org/html/rfc2324\"\r\n    },\r\n    \"426\": {\r\n        \"code\": 426,\r\n        \"text\": \"Upgrade Required\",\r\n        \"description\": \"\\\"The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.5.15\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.5.15\"\r\n    },\r\n    \"500\": {\r\n        \"code\": 500,\r\n        \"text\": \"Internal Server Error\",\r\n        \"description\": \"\\\"The server encountered an unexpected condition that prevented it from fulfilling the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.1\"\r\n    },\r\n    \"501\": {\r\n        \"code\": 501,\r\n        \"text\": \"Not Implemented\",\r\n        \"description\": \"\\\"The server does not support the functionality required to fulfill the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.2\"\r\n    },\r\n    \"502\": {\r\n        \"code\": 502,\r\n        \"text\": \"Bad Gateway\",\r\n        \"description\": \"\\\"The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.3\"\r\n    },\r\n    \"503\": {\r\n        \"code\": 503,\r\n        \"text\": \"Service Unavailable\",\r\n        \"description\": \"\\\"The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.4\"\r\n    },\r\n    \"504\": {\r\n        \"code\": 504,\r\n        \"text\": \"Gateway Time-out\",\r\n        \"description\": \"\\\"The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.5\"\r\n    },\r\n    \"505\": {\r\n        \"code\": 505,\r\n        \"text\": \"HTTP Version Not Supported\",\r\n        \"description\": \"\\\"The server does not support, or refuses to support, the protocol version that was used in the request message.\\\"\",\r\n        \"spec_title\": \"RFC7231#6.6.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7231#section-6.6.6\"\r\n    },\r\n    \"102\": {\r\n        \"code\": 102,\r\n        \"text\": \"Processing\",\r\n        \"description\": \"\\\"An interim response to inform the client that the server has accepted the complete request, but has not yet completed it.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.1\"\r\n    },\r\n    \"207\": {\r\n        \"code\": 207,\r\n        \"text\": \"Multi-Status\",\r\n        \"description\": \"\\\"Status for multiple independent operations.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.2\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.2\"\r\n    },\r\n    \"226\": {\r\n        \"code\": 226,\r\n        \"text\": \"IM Used\",\r\n        \"description\": \"\\\"The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\\\"\",\r\n        \"spec_title\": \"RFC3229#10.4.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc3229#section-10.4.1\"\r\n    },\r\n    \"308\": {\r\n        \"code\": 308,\r\n        \"text\": \"Permanent Redirect\",\r\n        \"description\": \"\\\"The target resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs. [...] This status code is similar to 301 Moved Permanently (Section 7.3.2 of rfc7231), except that it does not allow rewriting the request method from POST to GET.\\\"\",\r\n        \"spec_title\": \"RFC7238\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc7238\"\r\n    },\r\n    \"422\": {\r\n        \"code\": 422,\r\n        \"text\": \"Unprocessable Entity\",\r\n        \"description\": \"\\\"The server understands the content type of the request entity (hence a 415(Unsupported Media Type) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.3\"\r\n    },\r\n    \"423\": {\r\n        \"code\": 423,\r\n        \"text\": \"Locked\",\r\n        \"description\": \"\\\"The source or destination resource of a method is locked.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.4\"\r\n    },\r\n    \"424\": {\r\n        \"code\": 424,\r\n        \"text\": \"Failed Dependency\",\r\n        \"description\": \"\\\"The method could not be performed on the resource because the requested action depended on another action and that action failed.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.5\"\r\n    },\r\n    \"428\": {\r\n        \"code\": 428,\r\n        \"text\": \"Precondition Required\",\r\n        \"description\": \"\\\"The origin server requires the request to be conditional.\\\"\",\r\n        \"spec_title\": \"RFC6585#3\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-3\"\r\n    },\r\n    \"429\": {\r\n        \"code\": 429,\r\n        \"text\": \"Too Many Requests\",\r\n        \"description\": \"\\\"The user has sent too many requests in a given amount of time (\\\"rate limiting\\\").\\\"\",\r\n        \"spec_title\": \"RFC6585#4\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-4\"\r\n    },\r\n    \"431\": {\r\n        \"code\": 431,\r\n        \"text\": \"Request Header Fields Too Large\",\r\n        \"description\": \"\\\"The server is unwilling to process the request because its header fields are too large.\\\"\",\r\n        \"spec_title\": \"RFC6585#5\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-5\"\r\n    },\r\n    \"451\": {\r\n        \"code\": 451,\r\n        \"text\": \"Unavailable For Legal Reasons\",\r\n        \"description\": \"\\\"The server is denying access to the resource in response to a legal demand.\\\"\",\r\n        \"spec_title\": \"draft-ietf-httpbis-legally-restricted-status\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/draft-ietf-httpbis-legally-restricted-status\"\r\n    },\r\n    \"506\": {\r\n        \"code\": 506,\r\n        \"text\": \"Variant Also Negotiates\",\r\n        \"description\": \"\\\"The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.\\\"\",\r\n        \"spec_title\": \"RFC2295#8.1\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2295#section-8.1\"\r\n    },\r\n    \"507\": {\r\n        \"code\": 507,\r\n        \"text\": \"Insufficient Storage\",\r\n        \"description\": \"\\The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.\\\"\",\r\n        \"spec_title\": \"RFC5218#10.6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc2518#section-10.6\"\r\n    },\r\n    \"511\": {\r\n        \"code\": 511,\r\n        \"text\": \"Network Authentication Required\",\r\n        \"description\": \"\\\"The client needs to authenticate to gain network access.\\\"\",\r\n        \"spec_title\": \"RFC6585#6\",\r\n        \"spec_href\": \"http://tools.ietf.org/html/rfc6585#section-6\"\r\n    }\r\n};\r\n//# sourceMappingURL=http-status-codes.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-in-memory-web-api/http-status-codes.js\n// module id = 26\n// module chunks = 0","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar http_1 = require('@angular/http');\r\nvar Observable_1 = require('rxjs/Observable');\r\nrequire('rxjs/add/operator/delay');\r\nvar http_status_codes_1 = require('./http-status-codes');\r\n/**\r\n* Class that creates seed data for in-memory database\r\n* Must implement InMemoryDbService.\r\n*/\r\nexports.SEED_DATA = new core_1.OpaqueToken('seedData');\r\n/**\r\n*  InMemoryBackendService configuration options\r\n*  Usage:\r\n*    provide(InMemoryBackendConfig, {useValue: {delay:600}}),\r\n*/\r\nvar InMemoryBackendConfig = (function () {\r\n    function InMemoryBackendConfig(config) {\r\n        if (config === void 0) { config = {}; }\r\n        Object.assign(this, {\r\n            defaultResponseOptions: new http_1.BaseResponseOptions(),\r\n            delay: 500,\r\n            delete404: false\r\n        }, config);\r\n    }\r\n    return InMemoryBackendConfig;\r\n}());\r\nexports.InMemoryBackendConfig = InMemoryBackendConfig;\r\nexports.isSuccess = function (status) { return (status >= 200 && status < 300); };\r\n/**\r\n * Simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected InMemoryDataService service.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n *\r\n * ### Usage\r\n *\r\n * Create InMemoryDataService class the implements InMemoryDataService.\r\n * Register both this service and the seed data as in:\r\n * ```\r\n * // other imports\r\n * import { HTTPPROVIDERS, XHRBackend } from 'angular2/http';\r\n * import { InMemoryBackendConfig, InMemoryBackendService, SEEDDATA } from '../in-memory-backend/in-memory-backend.service';\r\n * import { InMemoryStoryService } from '../api/in-memory-story.service';\r\n *\r\n * @Component({\r\n *   selector: ...,\r\n *   templateUrl: ...,\r\n *   providers: [\r\n *     HTTPPROVIDERS,\r\n *     provide(XHRBackend, { useClass: InMemoryBackendService }),\r\n *     provide(SEEDDATA, { useClass: InMemoryStoryService }),\r\n *     provide(InMemoryBackendConfig, { useValue: { delay: 600 } }),\r\n *   ]\r\n * })\r\n * export class AppComponent { ... }\r\n * ```\r\n */\r\nvar InMemoryBackendService = (function () {\r\n    function InMemoryBackendService(seedData, config) {\r\n        this.seedData = seedData;\r\n        this.config = new InMemoryBackendConfig();\r\n        this.resetDb();\r\n        var loc = this.getLocation('./');\r\n        this.config.host = loc.host;\r\n        this.config.rootPath = loc.pathname;\r\n        Object.assign(this.config, config);\r\n    }\r\n    InMemoryBackendService.prototype.createConnection = function (req) {\r\n        var res = this.handleRequest(req);\r\n        var response = new Observable_1.Observable(function (responseObserver) {\r\n            if (exports.isSuccess(res.status)) {\r\n                responseObserver.next(res);\r\n                responseObserver.complete();\r\n            }\r\n            else {\r\n                responseObserver.error(res);\r\n            }\r\n            return function () { }; // unsubscribe function\r\n        });\r\n        response = response.delay(this.config.delay || 500);\r\n        return {\r\n            readyState: http_1.ReadyState.Done,\r\n            request: req,\r\n            response: response\r\n        };\r\n    };\r\n    ////  protected /////\r\n    /**\r\n     * Process Request and return an Http Response object\r\n     * in the manner of a RESTy web api.\r\n     *\r\n     * Expect URI pattern in the form :base/:collectionName/:id?\r\n     * Examples:\r\n     *   // for store with a 'characters' collection\r\n     *   GET api/characters          // all characters\r\n     *   GET api/characters/42       // the character with id=42\r\n     *   GET api/characters?name=^j  // 'j' is a regex; returns characters whose name contains 'j' or 'J'\r\n     *   GET api/characters.json/42  // ignores the \".json\"\r\n     *\r\n     *   POST commands/resetDb  // resets the \"database\"\r\n     */\r\n    InMemoryBackendService.prototype.handleRequest = function (req) {\r\n        var _a = this.parseUrl(req.url), base = _a.base, collectionName = _a.collectionName, id = _a.id, resourceUrl = _a.resourceUrl, query = _a.query;\r\n        var collection = this.db[collectionName];\r\n        var reqInfo = {\r\n            req: req,\r\n            base: base,\r\n            collection: collection,\r\n            collectionName: collectionName,\r\n            headers: new http_1.Headers({ 'Content-Type': 'application/json' }),\r\n            id: this.parseId(collection, id),\r\n            query: query,\r\n            resourceUrl: resourceUrl\r\n        };\r\n        var options;\r\n        try {\r\n            if ('commands' === reqInfo.base.toLowerCase()) {\r\n                options = this.commands(reqInfo);\r\n            }\r\n            else if (reqInfo.collection) {\r\n                switch (req.method) {\r\n                    case http_1.RequestMethod.Get:\r\n                        options = this.get(reqInfo);\r\n                        break;\r\n                    case http_1.RequestMethod.Post:\r\n                        options = this.post(reqInfo);\r\n                        break;\r\n                    case http_1.RequestMethod.Put:\r\n                        options = this.put(reqInfo);\r\n                        break;\r\n                    case http_1.RequestMethod.Delete:\r\n                        options = this.delete(reqInfo);\r\n                        break;\r\n                    default:\r\n                        options = this.createErrorResponse(http_status_codes_1.STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                options = this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            var err = error.message || error;\r\n            options = this.createErrorResponse(http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\r\n        }\r\n        options = this.setStatusText(options);\r\n        if (this.config.defaultResponseOptions) {\r\n            options = this.config.defaultResponseOptions.merge(options);\r\n        }\r\n        return new http_1.Response(options);\r\n    };\r\n    /**\r\n     * Apply query/search parameters as a filter over the collection\r\n     * This impl only supports RegExp queries on string properties of the collection\r\n     * ANDs the conditions together\r\n     */\r\n    InMemoryBackendService.prototype.applyQuery = function (collection, query) {\r\n        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\r\n        var conditions = [];\r\n        query.paramsMap.forEach(function (value, name) {\r\n            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), 'i') }); });\r\n        });\r\n        var len = conditions.length;\r\n        if (!len) {\r\n            return collection;\r\n        }\r\n        // AND the RegExp conditions\r\n        return collection.filter(function (row) {\r\n            var ok = true;\r\n            var i = len;\r\n            while (ok && i) {\r\n                i -= 1;\r\n                var cond = conditions[i];\r\n                ok = cond.rx.test(row[cond.name]);\r\n            }\r\n            return ok;\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.clone = function (data) {\r\n        return JSON.parse(JSON.stringify(data));\r\n    };\r\n    /**\r\n     * When the `base`=\"commands\", the `collectionName` is the command\r\n     * Example URLs:\r\n     *   commands/resetdb   // Reset the \"database\" to its original state\r\n     *   commands/config (GET) // Return this service's config object\r\n     *   commands/config (!GET) // Update the config (e.g. delay)\r\n     *\r\n     * Usage:\r\n     *   http.post('commands/resetdb', null);\r\n     *   http.get('commands/config');\r\n     *   http.post('commands/config', '{\"delay\":1000}');\r\n     */\r\n    InMemoryBackendService.prototype.commands = function (reqInfo) {\r\n        var command = reqInfo.collectionName.toLowerCase();\r\n        var method = reqInfo.req.method;\r\n        var options;\r\n        switch (command) {\r\n            case 'resetdb':\r\n                this.resetDb();\r\n                options = new http_1.ResponseOptions({ status: http_status_codes_1.STATUS.OK });\r\n                break;\r\n            case 'config':\r\n                if (method === http_1.RequestMethod.Get) {\r\n                    options = new http_1.ResponseOptions({\r\n                        body: this.clone(this.config),\r\n                        status: http_status_codes_1.STATUS.OK\r\n                    });\r\n                }\r\n                else {\r\n                    // Be nice ... any other method is a config update\r\n                    var body = JSON.parse(reqInfo.req.text() || '{}');\r\n                    Object.assign(this.config, body);\r\n                    options = new http_1.ResponseOptions({ status: http_status_codes_1.STATUS.NO_CONTENT });\r\n                }\r\n                break;\r\n            default:\r\n                options = this.createErrorResponse(http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\r\n        }\r\n        return options;\r\n    };\r\n    InMemoryBackendService.prototype.createErrorResponse = function (status, message) {\r\n        return new http_1.ResponseOptions({\r\n            body: { 'error': \"\" + message },\r\n            headers: new http_1.Headers({ 'Content-Type': 'application/json' }),\r\n            status: status\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.delete = function (_a) {\r\n        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers;\r\n        if (!id) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\r\n        }\r\n        var exists = this.removeById(collection, id);\r\n        return new http_1.ResponseOptions({\r\n            headers: headers,\r\n            status: (exists || !this.config.delete404) ? http_status_codes_1.STATUS.NO_CONTENT : http_status_codes_1.STATUS.NOT_FOUND\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.findById = function (collection, id) {\r\n        return collection.find(function (item) { return item.id === id; });\r\n    };\r\n    InMemoryBackendService.prototype.genId = function (collection) {\r\n        // assumes numeric ids\r\n        var maxId = 0;\r\n        collection.reduce(function (prev, item) {\r\n            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\r\n        }, null);\r\n        return maxId + 1;\r\n    };\r\n    InMemoryBackendService.prototype.get = function (_a) {\r\n        var id = _a.id, query = _a.query, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers;\r\n        var data = collection;\r\n        if (id) {\r\n            data = this.findById(collection, id);\r\n        }\r\n        else if (query) {\r\n            data = this.applyQuery(collection, query);\r\n        }\r\n        if (!data) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\r\n        }\r\n        return new http_1.ResponseOptions({\r\n            body: { data: this.clone(data) },\r\n            headers: headers,\r\n            status: http_status_codes_1.STATUS.OK\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.getLocation = function (href) {\r\n        var l = document.createElement('a');\r\n        l.href = href;\r\n        return l;\r\n    };\r\n    ;\r\n    InMemoryBackendService.prototype.indexOf = function (collection, id) {\r\n        return collection.findIndex(function (item) { return item.id === id; });\r\n    };\r\n    // tries to parse id as number if collection item.id is a number.\r\n    // returns the original param id otherwise.\r\n    InMemoryBackendService.prototype.parseId = function (collection, id) {\r\n        if (!id) {\r\n            return null;\r\n        }\r\n        var isNumberId = collection[0] && typeof collection[0].id === 'number';\r\n        if (isNumberId) {\r\n            var idNum = parseFloat(id);\r\n            return isNaN(idNum) ? id : idNum;\r\n        }\r\n        return id;\r\n    };\r\n    InMemoryBackendService.prototype.parseUrl = function (url) {\r\n        try {\r\n            var loc = this.getLocation(url);\r\n            var drop = this.config.rootPath.length;\r\n            var urlRoot = '';\r\n            if (loc.host !== this.config.host) {\r\n                // url for a server on a different host!\r\n                // assume it's collection is actually here too.\r\n                drop = 1; // the leading slash\r\n                urlRoot = loc.protocol + '//' + loc.host + '/';\r\n            }\r\n            var path = loc.pathname.substring(drop);\r\n            var _a = path.split('/'), base = _a[0], collectionName = _a[1], id = _a[2];\r\n            var resourceUrl = urlRoot + base + '/' + collectionName + '/';\r\n            collectionName = collectionName.split('.')[0]; // ignore anything after the '.', e.g., '.json'\r\n            var query = loc.search && new http_1.URLSearchParams(loc.search.substr(1));\r\n            return { base: base, id: id, collectionName: collectionName, resourceUrl: resourceUrl, query: query };\r\n        }\r\n        catch (err) {\r\n            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\r\n            throw new Error(msg);\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.post = function (_a) {\r\n        var collection = _a.collection, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl;\r\n        var item = JSON.parse(req.text());\r\n        if (!item.id) {\r\n            item.id = id || this.genId(collection);\r\n        }\r\n        // ignore the request id, if any. Alternatively,\r\n        // could reject request if id differs from item.id\r\n        id = item.id;\r\n        var existingIx = this.indexOf(collection, id);\r\n        if (existingIx > -1) {\r\n            collection[existingIx] = item;\r\n            return new http_1.ResponseOptions({\r\n                headers: headers,\r\n                status: http_status_codes_1.STATUS.NO_CONTENT\r\n            });\r\n        }\r\n        else {\r\n            collection.push(item);\r\n            headers.set('Location', resourceUrl + '/' + id);\r\n            return new http_1.ResponseOptions({\r\n                headers: headers,\r\n                body: { data: this.clone(item) },\r\n                status: http_status_codes_1.STATUS.CREATED\r\n            });\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.put = function (_a) {\r\n        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n        var item = JSON.parse(req.text());\r\n        if (!id) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\r\n        }\r\n        if (id !== item.id) {\r\n            return this.createErrorResponse(http_status_codes_1.STATUS.BAD_REQUEST, \"\\\"\" + collectionName + \"\\\" id does not match item.id\");\r\n        }\r\n        var existingIx = this.indexOf(collection, id);\r\n        if (existingIx > -1) {\r\n            collection[existingIx] = item;\r\n            return new http_1.ResponseOptions({\r\n                headers: headers,\r\n                status: http_status_codes_1.STATUS.NO_CONTENT // successful; no content\r\n            });\r\n        }\r\n        else {\r\n            collection.push(item);\r\n            return new http_1.ResponseOptions({\r\n                body: { data: this.clone(item) },\r\n                headers: headers,\r\n                status: http_status_codes_1.STATUS.CREATED\r\n            });\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.removeById = function (collection, id) {\r\n        var ix = this.indexOf(collection, id);\r\n        if (ix > -1) {\r\n            collection.splice(ix, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Reset the \"database\" to its original state\r\n     */\r\n    InMemoryBackendService.prototype.resetDb = function () {\r\n        this.db = this.seedData.createDb();\r\n    };\r\n    InMemoryBackendService.prototype.setStatusText = function (options) {\r\n        try {\r\n            var statusCode = http_status_codes_1.STATUS_CODE_INFO[options.status];\r\n            options['statusText'] = statusCode ? statusCode.text : 'Unknown Status';\r\n            return options;\r\n        }\r\n        catch (err) {\r\n            return new http_1.ResponseOptions({\r\n                status: http_status_codes_1.STATUS.INTERNAL_SERVER_ERROR,\r\n                statusText: 'Invalid Server Operation'\r\n            });\r\n        }\r\n    };\r\n    InMemoryBackendService = __decorate([\r\n        __param(0, core_1.Inject(exports.SEED_DATA)),\r\n        __param(1, core_1.Inject(InMemoryBackendConfig)),\r\n        __param(1, core_1.Optional()), \r\n        __metadata('design:paramtypes', [Object, Object])\r\n    ], InMemoryBackendService);\r\n    return InMemoryBackendService;\r\n}());\r\nexports.InMemoryBackendService = InMemoryBackendService;\r\n//# sourceMappingURL=in-memory-backend.service.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-in-memory-web-api/in-memory-backend.service.js\n// module id = 27\n// module chunks = 0","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'db-app',\r\n    moduleId: module.id.toString(),\r\n    template: require('./app.component.html'),\r\n    styles: [require('./app.component.css')]\r\n})\r\nexport class AppComponent {\r\n    pageTitle: string = \"Bienvenue dans l'univers de Dragon Ball\";\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/app.component.ts","module.exports = \"<div class=container> <div class=header-bar></div> <nav> <a [routerlink]='[\\\"/\\\"]' routerlinkactive=active>Home</a> <a [routerlink]='[\\\"category\\\", \\\"db\\\"]' routerlinkactive=active>Dragon Ball</a> <a [routerlink]='[\\\"category\\\", \\\"dbz\\\"]' routerlinkactive=active>Dragon Ball Z</a> </nav> <router-outlet></router-outlet> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/app.component.html\n// module id = 38\n// module chunks = 0","module.exports = \"/*@media (min-width: 768px) {\\r\\n  .sidebar-nav .navbar .navbar-collapse {\\r\\n    padding: 0;\\r\\n    max-height: none;\\r\\n  }\\r\\n  .sidebar-nav .navbar ul {\\r\\n    float: none;\\r\\n    display: block;\\r\\n  }\\r\\n  .sidebar-nav .navbar li {\\r\\n    float: none;\\r\\n    display: block;\\r\\n  }\\r\\n  .sidebar-nav .navbar li a {\\r\\n    padding-top: 12px;\\r\\n    padding-bottom: 12px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.content {\\r\\n  height: 600px;\\r\\n  width: 400px;\\r\\n}*/\\r\\n\\r\\nh1 {\\r\\n  font-size: 1.2em;\\r\\n  color: #999;\\r\\n  color: #555;\\r\\n  margin-bottom: 0;\\r\\n}\\r\\nh2 {\\r\\n  font-size: 2em;\\r\\n  margin-top: 0;\\r\\n  padding-top: 0;\\r\\n}\\r\\nnav a {\\r\\n  padding: 5px 10px;\\r\\n  text-decoration: none;\\r\\n  margin-top: 10px;\\r\\n  display: inline-block;\\r\\n  background-color: #eee;\\r\\n  border-radius: 4px;\\r\\n}\\r\\nnav a:visited, a:link {\\r\\n  color: #607D8B;\\r\\n}\\r\\nnav a:hover {\\r\\n  color: #039be5;\\r\\n  background-color: #CFD8DC;\\r\\n}\\r\\nnav a.router-link-active {\\r\\n  color: #039be5;\\r\\n}\\r\\n.header-bar {\\r\\n  background-color: rgb(0,120,215);\\r\\n  height: 4px;\\r\\n  margin-top: 10px;\\r\\n  margin-bottom: 10px;\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/app.component.css\n// module id = 39\n// module chunks = 0","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WelcomeRoutingModule } from './welcome-routing.module';\r\nimport { WelcomeComponent } from './welcome.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        WelcomeRoutingModule\r\n    ],\r\n    declarations: [\r\n        WelcomeComponent\r\n    ],\r\n    exports: [\r\n        WelcomeComponent\r\n    ]\r\n})\r\nexport class WelcomeModule {\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/welcome/welcome.module.ts","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { WelcomeComponent } from './welcome.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild([\r\n            { path: 'welcome', component: WelcomeComponent }\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule    \r\n    ]\r\n})\r\nexport class WelcomeRoutingModule {\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/welcome/welcome-routing.module.ts","/**\n * @license Angular v3.4.4\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs/BehaviorSubject'), require('rxjs/Subject'), require('rxjs/observable/from'), require('rxjs/observable/of'), require('rxjs/operator/concatMap'), require('rxjs/operator/every'), require('rxjs/operator/first'), require('rxjs/operator/map'), require('rxjs/operator/mergeMap'), require('rxjs/operator/reduce'), require('rxjs/Observable'), require('rxjs/operator/catch'), require('rxjs/operator/concatAll'), require('rxjs/util/EmptyError'), require('rxjs/observable/fromPromise'), require('rxjs/operator/last'), require('rxjs/operator/mergeAll'), require('@angular/platform-browser'), require('rxjs/operator/filter')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core', 'rxjs/BehaviorSubject', 'rxjs/Subject', 'rxjs/observable/from', 'rxjs/observable/of', 'rxjs/operator/concatMap', 'rxjs/operator/every', 'rxjs/operator/first', 'rxjs/operator/map', 'rxjs/operator/mergeMap', 'rxjs/operator/reduce', 'rxjs/Observable', 'rxjs/operator/catch', 'rxjs/operator/concatAll', 'rxjs/util/EmptyError', 'rxjs/observable/fromPromise', 'rxjs/operator/last', 'rxjs/operator/mergeAll', '@angular/platform-browser', 'rxjs/operator/filter'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.router = global.ng.router || {}),global.ng.common,global.ng.core,global.Rx,global.Rx,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.ng.platformBrowser,global.Rx.Observable.prototype));\n}(this, function (exports,_angular_common,_angular_core,rxjs_BehaviorSubject,rxjs_Subject,rxjs_observable_from,rxjs_observable_of,rxjs_operator_concatMap,rxjs_operator_every,rxjs_operator_first,rxjs_operator_map,rxjs_operator_mergeMap,rxjs_operator_reduce,rxjs_Observable,rxjs_operator_catch,rxjs_operator_concatAll,rxjs_util_EmptyError,rxjs_observable_fromPromise,l,rxjs_operator_mergeAll,_angular_platformBrowser,rxjs_operator_filter) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @whatItDoes Name of the primary outlet.\n     *\n     * @stable\n     */\n    var /** @type {?} */ PRIMARY_OUTLET = 'primary';\n    var NavigationCancelingError = (function (_super) {\n        __extends(NavigationCancelingError, _super);\n        /**\n         * @param {?} message\n         */\n        function NavigationCancelingError(message) {\n            _super.call(this, message);\n            this.message = message;\n            this.stack = (new Error(message)).stack;\n        }\n        /**\n         * @return {?}\n         */\n        NavigationCancelingError.prototype.toString = function () { return this.message; };\n        return NavigationCancelingError;\n    }(Error));\n    /**\n     * @param {?} segments\n     * @param {?} segmentGroup\n     * @param {?} route\n     * @return {?}\n     */\n    function defaultUrlMatcher(segments, segmentGroup, route) {\n        var /** @type {?} */ path = route.path;\n        var /** @type {?} */ parts = path.split('/');\n        var /** @type {?} */ posParams = {};\n        var /** @type {?} */ consumed = [];\n        var /** @type {?} */ currentIndex = 0;\n        for (var /** @type {?} */ i = 0; i < parts.length; ++i) {\n            if (currentIndex >= segments.length)\n                return null;\n            var /** @type {?} */ current = segments[currentIndex];\n            var /** @type {?} */ p = parts[i];\n            var /** @type {?} */ isPosParam = p.startsWith(':');\n            if (!isPosParam && p !== current.path)\n                return null;\n            if (isPosParam) {\n                posParams[p.substring(1)] = current;\n            }\n            consumed.push(current);\n            currentIndex++;\n        }\n        if (route.pathMatch === 'full' &&\n            (segmentGroup.hasChildren() || currentIndex < segments.length)) {\n            return null;\n        }\n        else {\n            return { consumed: consumed, posParams: posParams };\n        }\n    }\n\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function shallowEqualArrays(a, b) {\n        if (a.length !== b.length)\n            return false;\n        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n            if (!shallowEqual(a[i], b[i]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function shallowEqual(a, b) {\n        var /** @type {?} */ k1 = Object.keys(a);\n        var /** @type {?} */ k2 = Object.keys(b);\n        if (k1.length != k2.length) {\n            return false;\n        }\n        var /** @type {?} */ key;\n        for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n            key = k1[i];\n            if (a[key] !== b[key]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * @param {?} a\n     * @return {?}\n     */\n    function flatten(a) {\n        var /** @type {?} */ target = [];\n        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n            for (var /** @type {?} */ j = 0; j < a[i].length; ++j) {\n                target.push(a[i][j]);\n            }\n        }\n        return target;\n    }\n    /**\n     * @param {?} a\n     * @return {?}\n     */\n    function last(a) {\n        return a.length > 0 ? a[a.length - 1] : null;\n    }\n    /**\n     * @param {?} m1\n     * @param {?} m2\n     * @return {?}\n     */\n    function merge(m1, m2) {\n        var /** @type {?} */ m = {};\n        for (var attr in m1) {\n            if (m1.hasOwnProperty(attr)) {\n                m[attr] = m1[attr];\n            }\n        }\n        for (var attr in m2) {\n            if (m2.hasOwnProperty(attr)) {\n                m[attr] = m2[attr];\n            }\n        }\n        return m;\n    }\n    /**\n     * @param {?} map\n     * @param {?} callback\n     * @return {?}\n     */\n    function forEach(map, callback) {\n        for (var prop in map) {\n            if (map.hasOwnProperty(prop)) {\n                callback(map[prop], prop);\n            }\n        }\n    }\n    /**\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function waitForMap(obj, fn) {\n        var /** @type {?} */ waitFor = [];\n        var /** @type {?} */ res = {};\n        forEach(obj, function (a, k) {\n            if (k === PRIMARY_OUTLET) {\n                waitFor.push(rxjs_operator_map.map.call(fn(k, a), function (_) {\n                    res[k] = _;\n                    return _;\n                }));\n            }\n        });\n        forEach(obj, function (a, k) {\n            if (k !== PRIMARY_OUTLET) {\n                waitFor.push(rxjs_operator_map.map.call(fn(k, a), function (_) {\n                    res[k] = _;\n                    return _;\n                }));\n            }\n        });\n        if (waitFor.length > 0) {\n            var /** @type {?} */ concatted$ = rxjs_operator_concatAll.concatAll.call(rxjs_observable_of.of.apply(void 0, waitFor));\n            var /** @type {?} */ last$ = l.last.call(concatted$);\n            return rxjs_operator_map.map.call(last$, function () { return res; });\n        }\n        return rxjs_observable_of.of(res);\n    }\n    /**\n     * @param {?} observables\n     * @return {?}\n     */\n    function andObservables(observables) {\n        var /** @type {?} */ merged$ = rxjs_operator_mergeAll.mergeAll.call(observables);\n        return rxjs_operator_every.every.call(merged$, function (result) { return result === true; });\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function wrapIntoObservable(value) {\n        if (value instanceof rxjs_Observable.Observable) {\n            return value;\n        }\n        if (value instanceof Promise) {\n            return rxjs_observable_fromPromise.fromPromise(value);\n        }\n        return rxjs_observable_of.of(value);\n    }\n\n    /**\n     * @experimental\n     */\n    var /** @type {?} */ ROUTES = new _angular_core.OpaqueToken('ROUTES');\n    var LoadedRouterConfig = (function () {\n        /**\n         * @param {?} routes\n         * @param {?} injector\n         * @param {?} factoryResolver\n         * @param {?} injectorFactory\n         */\n        function LoadedRouterConfig(routes, injector, factoryResolver, injectorFactory) {\n            this.routes = routes;\n            this.injector = injector;\n            this.factoryResolver = factoryResolver;\n            this.injectorFactory = injectorFactory;\n        }\n        return LoadedRouterConfig;\n    }());\n    var RouterConfigLoader = (function () {\n        /**\n         * @param {?} loader\n         * @param {?} compiler\n         */\n        function RouterConfigLoader(loader, compiler) {\n            this.loader = loader;\n            this.compiler = compiler;\n        }\n        /**\n         * @param {?} parentInjector\n         * @param {?} loadChildren\n         * @return {?}\n         */\n        RouterConfigLoader.prototype.load = function (parentInjector, loadChildren) {\n            return rxjs_operator_map.map.call(this.loadModuleFactory(loadChildren), function (r) {\n                var /** @type {?} */ ref = r.create(parentInjector);\n                var /** @type {?} */ injectorFactory = function (parent) { return r.create(parent).injector; };\n                return new LoadedRouterConfig(flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver, injectorFactory);\n            });\n        };\n        /**\n         * @param {?} loadChildren\n         * @return {?}\n         */\n        RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {\n            var _this = this;\n            if (typeof loadChildren === 'string') {\n                return rxjs_observable_fromPromise.fromPromise(this.loader.load(loadChildren));\n            }\n            else {\n                var /** @type {?} */ offlineMode_1 = this.compiler instanceof _angular_core.Compiler;\n                return rxjs_operator_mergeMap.mergeMap.call(wrapIntoObservable(loadChildren()), function (t) { return offlineMode_1 ? rxjs_observable_of.of(/** @type {?} */ (t)) : rxjs_observable_fromPromise.fromPromise(_this.compiler.compileModuleAsync(t)); });\n            }\n        };\n        return RouterConfigLoader;\n    }());\n\n    /**\n     * @return {?}\n     */\n    function createEmptyUrlTree() {\n        return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @param {?} exact\n     * @return {?}\n     */\n    function containsTree(container, containee, exact) {\n        if (exact) {\n            return equalQueryParams(container.queryParams, containee.queryParams) &&\n                equalSegmentGroups(container.root, containee.root);\n        }\n        return containsQueryParams(container.queryParams, containee.queryParams) &&\n            containsSegmentGroup(container.root, containee.root);\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @return {?}\n     */\n    function equalQueryParams(container, containee) {\n        return shallowEqual(container, containee);\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @return {?}\n     */\n    function equalSegmentGroups(container, containee) {\n        if (!equalPath(container.segments, containee.segments))\n            return false;\n        if (container.numberOfChildren !== containee.numberOfChildren)\n            return false;\n        for (var c in containee.children) {\n            if (!container.children[c])\n                return false;\n            if (!equalSegmentGroups(container.children[c], containee.children[c]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @return {?}\n     */\n    function containsQueryParams(container, containee) {\n        return Object.keys(containee).length <= Object.keys(container).length &&\n            Object.keys(containee).every(function (key) { return containee[key] === container[key]; });\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @return {?}\n     */\n    function containsSegmentGroup(container, containee) {\n        return containsSegmentGroupHelper(container, containee, containee.segments);\n    }\n    /**\n     * @param {?} container\n     * @param {?} containee\n     * @param {?} containeePaths\n     * @return {?}\n     */\n    function containsSegmentGroupHelper(container, containee, containeePaths) {\n        if (container.segments.length > containeePaths.length) {\n            var /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\n            if (!equalPath(current, containeePaths))\n                return false;\n            if (containee.hasChildren())\n                return false;\n            return true;\n        }\n        else if (container.segments.length === containeePaths.length) {\n            if (!equalPath(container.segments, containeePaths))\n                return false;\n            for (var c in containee.children) {\n                if (!container.children[c])\n                    return false;\n                if (!containsSegmentGroup(container.children[c], containee.children[c]))\n                    return false;\n            }\n            return true;\n        }\n        else {\n            var /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\n            var /** @type {?} */ next = containeePaths.slice(container.segments.length);\n            if (!equalPath(container.segments, current))\n                return false;\n            if (!container.children[PRIMARY_OUTLET])\n                return false;\n            return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n        }\n    }\n    /**\n     * \\@whatItDoes Represents the parsed URL.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({templateUrl:'template.html'})\n     * class MyComponent {\n     *   constructor(router: Router) {\n     *     const tree: UrlTree =\n     *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n     *     const f = tree.fragment; // return 'fragment'\n     *     const q = tree.queryParams; // returns {debug: 'true'}\n     *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n     *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n     *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n     *     g.children['support'].segments; // return 1 segment 'help'\n     *   }\n     * }\n     * ```\n     *\n     * \\@description\n     *\n     * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n     * serialized tree.\n     * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n     *\n     * \\@stable\n     */\n    var UrlTree = (function () {\n        /**\n         * \\@internal\n         * @param {?} root\n         * @param {?} queryParams\n         * @param {?} fragment\n         */\n        function UrlTree(root, queryParams, fragment) {\n            this.root = root;\n            this.queryParams = queryParams;\n            this.fragment = fragment;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        UrlTree.prototype.toString = function () { return new DefaultUrlSerializer().serialize(this); };\n        return UrlTree;\n    }());\n    /**\n     * \\@whatItDoes Represents the parsed URL segment group.\n     *\n     * See {\\@link UrlTree} for more information.\n     *\n     * \\@stable\n     */\n    var UrlSegmentGroup = (function () {\n        /**\n         * @param {?} segments\n         * @param {?} children\n         */\n        function UrlSegmentGroup(segments, children) {\n            var _this = this;\n            this.segments = segments;\n            this.children = children;\n            /** The parent node in the url tree */\n            this.parent = null;\n            forEach(children, function (v, k) { return v.parent = _this; });\n        }\n        /**\n         * Wether the segment has child segments\n         * @return {?}\n         */\n        UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };\n        Object.defineProperty(UrlSegmentGroup.prototype, \"numberOfChildren\", {\n            /**\n             * Number of child segments\n             * @return {?}\n             */\n            get: function () { return Object.keys(this.children).length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };\n        return UrlSegmentGroup;\n    }());\n    /**\n     * \\@whatItDoes Represents a single URL segment.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({templateUrl:'template.html'})\n     * class MyComponent {\n     *   constructor(router: Router) {\n     *     const tree: UrlTree = router.parseUrl('/team;id=33');\n     *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n     *     const s: UrlSegment[] = g.segments;\n     *     s[0].path; // returns 'team'\n     *     s[0].parameters; // returns {id: 33}\n     *   }\n     * }\n     * ```\n     *\n     * \\@description\n     *\n     * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n     * parameters associated with the segment.\n     *\n     * \\@stable\n     */\n    var UrlSegment = (function () {\n        /**\n         * @param {?} path\n         * @param {?} parameters\n         */\n        function UrlSegment(path, parameters) {\n            this.path = path;\n            this.parameters = parameters;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        UrlSegment.prototype.toString = function () { return serializePath(this); };\n        return UrlSegment;\n    }());\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function equalSegments(a, b) {\n        if (a.length !== b.length)\n            return false;\n        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n            if (a[i].path !== b[i].path)\n                return false;\n            if (!shallowEqual(a[i].parameters, b[i].parameters))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function equalPath(a, b) {\n        if (a.length !== b.length)\n            return false;\n        for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n            if (a[i].path !== b[i].path)\n                return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} segment\n     * @param {?} fn\n     * @return {?}\n     */\n    function mapChildrenIntoArray(segment, fn) {\n        var /** @type {?} */ res = [];\n        forEach(segment.children, function (child, childOutlet) {\n            if (childOutlet === PRIMARY_OUTLET) {\n                res = res.concat(fn(child, childOutlet));\n            }\n        });\n        forEach(segment.children, function (child, childOutlet) {\n            if (childOutlet !== PRIMARY_OUTLET) {\n                res = res.concat(fn(child, childOutlet));\n            }\n        });\n        return res;\n    }\n    /**\n     * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n     *\n     * \\@description The url serialization strategy is customizable. You can\n     * make all URLs case insensitive by providing a custom UrlSerializer.\n     *\n     * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var UrlSerializer = (function () {\n        function UrlSerializer() {\n        }\n        /**\n         * Parse a url into a {\\@link UrlTree}\n         * @abstract\n         * @param {?} url\n         * @return {?}\n         */\n        UrlSerializer.prototype.parse = function (url) { };\n        /**\n         * Converts a {\\@link UrlTree} into a url\n         * @abstract\n         * @param {?} tree\n         * @return {?}\n         */\n        UrlSerializer.prototype.serialize = function (tree) { };\n        return UrlSerializer;\n    }());\n    /**\n     * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n     *\n     * \\@description\n     *\n     * Example URLs:\n     *\n     * ```\n     * /inbox/33(popup:compose)\n     * /inbox/33;open=true/messages/44\n     * ```\n     *\n     * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n     * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n     * specify route specific parameters.\n     *\n     * \\@stable\n     */\n    var DefaultUrlSerializer = (function () {\n        function DefaultUrlSerializer() {\n        }\n        /**\n         * Parses a url into a {\\@link UrlTree}\n         * @param {?} url\n         * @return {?}\n         */\n        DefaultUrlSerializer.prototype.parse = function (url) {\n            var /** @type {?} */ p = new UrlParser(url);\n            return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n        };\n        /**\n         * Converts a {\\@link UrlTree} into a url\n         * @param {?} tree\n         * @return {?}\n         */\n        DefaultUrlSerializer.prototype.serialize = function (tree) {\n            var /** @type {?} */ segment = \"/\" + serializeSegment(tree.root, true);\n            var /** @type {?} */ query = serializeQueryParams(tree.queryParams);\n            var /** @type {?} */ fragment = tree.fragment !== null && tree.fragment !== undefined ? \"#\" + encodeURI(tree.fragment) : '';\n            return \"\" + segment + query + fragment;\n        };\n        return DefaultUrlSerializer;\n    }());\n    /**\n     * @param {?} segment\n     * @return {?}\n     */\n    function serializePaths(segment) {\n        return segment.segments.map(function (p) { return serializePath(p); }).join('/');\n    }\n    /**\n     * @param {?} segment\n     * @param {?} root\n     * @return {?}\n     */\n    function serializeSegment(segment, root) {\n        if (segment.hasChildren() && root) {\n            var /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\n                serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n                '';\n            var /** @type {?} */ children_1 = [];\n            forEach(segment.children, function (v, k) {\n                if (k !== PRIMARY_OUTLET) {\n                    children_1.push(k + \":\" + serializeSegment(v, false));\n                }\n            });\n            if (children_1.length > 0) {\n                return primary + \"(\" + children_1.join('//') + \")\";\n            }\n            else {\n                return \"\" + primary;\n            }\n        }\n        else if (segment.hasChildren() && !root) {\n            var /** @type {?} */ children = mapChildrenIntoArray(segment, function (v, k) {\n                if (k === PRIMARY_OUTLET) {\n                    return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n                }\n                else {\n                    return [(k + \":\" + serializeSegment(v, false))];\n                }\n            });\n            return serializePaths(segment) + \"/(\" + children.join('//') + \")\";\n        }\n        else {\n            return serializePaths(segment);\n        }\n    }\n    /**\n     * @param {?} s\n     * @return {?}\n     */\n    function encode(s) {\n        return encodeURIComponent(s);\n    }\n    /**\n     * @param {?} s\n     * @return {?}\n     */\n    function decode(s) {\n        return decodeURIComponent(s);\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    function serializePath(path) {\n        return \"\" + encode(path.path) + serializeParams(path.parameters);\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    function serializeParams(params) {\n        return pairs(params).map(function (p) { return (\";\" + encode(p.first) + \"=\" + encode(p.second)); }).join('');\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    function serializeQueryParams(params) {\n        var /** @type {?} */ strParams = Object.keys(params).map(function (name) {\n            var /** @type {?} */ value = params[name];\n            return Array.isArray(value) ? value.map(function (v) { return (encode(name) + \"=\" + encode(v)); }).join('&') :\n                encode(name) + \"=\" + encode(value);\n        });\n        return strParams.length ? \"?\" + strParams.join(\"&\") : '';\n    }\n    var Pair = (function () {\n        /**\n         * @param {?} first\n         * @param {?} second\n         */\n        function Pair(first, second) {\n            this.first = first;\n            this.second = second;\n        }\n        return Pair;\n    }());\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function pairs(obj) {\n        var /** @type {?} */ res = [];\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                res.push(new Pair(prop, obj[prop]));\n            }\n        }\n        return res;\n    }\n    var /** @type {?} */ SEGMENT_RE = /^[^\\/()?;=&#]+/;\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    function matchSegments(str) {\n        SEGMENT_RE.lastIndex = 0;\n        var /** @type {?} */ match = str.match(SEGMENT_RE);\n        return match ? match[0] : '';\n    }\n    var /** @type {?} */ QUERY_PARAM_RE = /^[^=?&#]+/;\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    function matchQueryParams(str) {\n        QUERY_PARAM_RE.lastIndex = 0;\n        var /** @type {?} */ match = str.match(SEGMENT_RE);\n        return match ? match[0] : '';\n    }\n    var /** @type {?} */ QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    function matchUrlQueryParamValue(str) {\n        QUERY_PARAM_VALUE_RE.lastIndex = 0;\n        var /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\n        return match ? match[0] : '';\n    }\n    var UrlParser = (function () {\n        /**\n         * @param {?} url\n         */\n        function UrlParser(url) {\n            this.url = url;\n            this.remaining = url;\n        }\n        /**\n         * @param {?} str\n         * @return {?}\n         */\n        UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };\n        /**\n         * @param {?} str\n         * @return {?}\n         */\n        UrlParser.prototype.capture = function (str) {\n            if (!this.remaining.startsWith(str)) {\n                throw new Error(\"Expected \\\"\" + str + \"\\\".\");\n            }\n            this.remaining = this.remaining.substring(str.length);\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseRootSegment = function () {\n            if (this.remaining.startsWith('/')) {\n                this.capture('/');\n            }\n            if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {\n                return new UrlSegmentGroup([], {});\n            }\n            return new UrlSegmentGroup([], this.parseChildren());\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseChildren = function () {\n            if (this.remaining.length == 0) {\n                return {};\n            }\n            if (this.peekStartsWith('/')) {\n                this.capture('/');\n            }\n            var /** @type {?} */ paths = [];\n            if (!this.peekStartsWith('(')) {\n                paths.push(this.parseSegments());\n            }\n            while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n                this.capture('/');\n                paths.push(this.parseSegments());\n            }\n            var /** @type {?} */ children = {};\n            if (this.peekStartsWith('/(')) {\n                this.capture('/');\n                children = this.parseParens(true);\n            }\n            var /** @type {?} */ res = {};\n            if (this.peekStartsWith('(')) {\n                res = this.parseParens(false);\n            }\n            if (paths.length > 0 || Object.keys(children).length > 0) {\n                res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);\n            }\n            return res;\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseSegments = function () {\n            var /** @type {?} */ path = matchSegments(this.remaining);\n            if (path === '' && this.peekStartsWith(';')) {\n                throw new Error(\"Empty path url segment cannot have parameters: '\" + this.remaining + \"'.\");\n            }\n            this.capture(path);\n            var /** @type {?} */ matrixParams = {};\n            if (this.peekStartsWith(';')) {\n                matrixParams = this.parseMatrixParams();\n            }\n            return new UrlSegment(decode(path), matrixParams);\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseQueryParams = function () {\n            var /** @type {?} */ params = {};\n            if (this.peekStartsWith('?')) {\n                this.capture('?');\n                this.parseQueryParam(params);\n                while (this.remaining.length > 0 && this.peekStartsWith('&')) {\n                    this.capture('&');\n                    this.parseQueryParam(params);\n                }\n            }\n            return params;\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseFragment = function () {\n            if (this.peekStartsWith('#')) {\n                return decodeURI(this.remaining.substring(1));\n            }\n            return null;\n        };\n        /**\n         * @return {?}\n         */\n        UrlParser.prototype.parseMatrixParams = function () {\n            var /** @type {?} */ params = {};\n            while (this.remaining.length > 0 && this.peekStartsWith(';')) {\n                this.capture(';');\n                this.parseParam(params);\n            }\n            return params;\n        };\n        /**\n         * @param {?} params\n         * @return {?}\n         */\n        UrlParser.prototype.parseParam = function (params) {\n            var /** @type {?} */ key = matchSegments(this.remaining);\n            if (!key) {\n                return;\n            }\n            this.capture(key);\n            var /** @type {?} */ value = '';\n            if (this.peekStartsWith('=')) {\n                this.capture('=');\n                var /** @type {?} */ valueMatch = matchSegments(this.remaining);\n                if (valueMatch) {\n                    value = valueMatch;\n                    this.capture(value);\n                }\n            }\n            params[decode(key)] = decode(value);\n        };\n        /**\n         * @param {?} params\n         * @return {?}\n         */\n        UrlParser.prototype.parseQueryParam = function (params) {\n            var /** @type {?} */ key = matchQueryParams(this.remaining);\n            if (!key) {\n                return;\n            }\n            this.capture(key);\n            var /** @type {?} */ value = '';\n            if (this.peekStartsWith('=')) {\n                this.capture('=');\n                var /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\n                if (valueMatch) {\n                    value = valueMatch;\n                    this.capture(value);\n                }\n            }\n            var /** @type {?} */ decodedKey = decode(key);\n            var /** @type {?} */ decodedVal = decode(value);\n            if (params.hasOwnProperty(decodedKey)) {\n                // Append to existing values\n                var /** @type {?} */ currentVal = params[decodedKey];\n                if (!Array.isArray(currentVal)) {\n                    currentVal = [currentVal];\n                    params[decodedKey] = currentVal;\n                }\n                currentVal.push(decodedVal);\n            }\n            else {\n                // Create a new value\n                params[decodedKey] = decodedVal;\n            }\n        };\n        /**\n         * @param {?} allowPrimary\n         * @return {?}\n         */\n        UrlParser.prototype.parseParens = function (allowPrimary) {\n            var /** @type {?} */ segments = {};\n            this.capture('(');\n            while (!this.peekStartsWith(')') && this.remaining.length > 0) {\n                var /** @type {?} */ path = matchSegments(this.remaining);\n                var /** @type {?} */ next = this.remaining[path.length];\n                // if is is not one of these characters, then the segment was unescaped\n                // or the group was not closed\n                if (next !== '/' && next !== ')' && next !== ';') {\n                    throw new Error(\"Cannot parse url '\" + this.url + \"'\");\n                }\n                var /** @type {?} */ outletName = void 0;\n                if (path.indexOf(':') > -1) {\n                    outletName = path.substr(0, path.indexOf(':'));\n                    this.capture(outletName);\n                    this.capture(':');\n                }\n                else if (allowPrimary) {\n                    outletName = PRIMARY_OUTLET;\n                }\n                var /** @type {?} */ children = this.parseChildren();\n                segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                    new UrlSegmentGroup([], children);\n                if (this.peekStartsWith('//')) {\n                    this.capture('//');\n                }\n            }\n            this.capture(')');\n            return segments;\n        };\n        return UrlParser;\n    }());\n\n    var NoMatch = (function () {\n        /**\n         * @param {?=} segmentGroup\n         */\n        function NoMatch(segmentGroup) {\n            if (segmentGroup === void 0) { segmentGroup = null; }\n            this.segmentGroup = segmentGroup;\n        }\n        return NoMatch;\n    }());\n    var AbsoluteRedirect = (function () {\n        /**\n         * @param {?} urlTree\n         */\n        function AbsoluteRedirect(urlTree) {\n            this.urlTree = urlTree;\n        }\n        return AbsoluteRedirect;\n    }());\n    /**\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    function noMatch(segmentGroup) {\n        return new rxjs_Observable.Observable(function (obs) { return obs.error(new NoMatch(segmentGroup)); });\n    }\n    /**\n     * @param {?} newTree\n     * @return {?}\n     */\n    function absoluteRedirect(newTree) {\n        return new rxjs_Observable.Observable(function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });\n    }\n    /**\n     * @param {?} redirectTo\n     * @return {?}\n     */\n    function namedOutletsRedirect(redirectTo) {\n        return new rxjs_Observable.Observable(function (obs) { return obs.error(new Error(\"Only absolute redirects can have named outlets. redirectTo: '\" + redirectTo + \"'\")); });\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function canLoadFails(route) {\n        return new rxjs_Observable.Observable(function (obs) { return obs.error(new NavigationCancelingError(\"Cannot load children because the guard of the route \\\"path: '\" + route.path + \"'\\\" returned false\")); });\n    }\n    /**\n     * @param {?} injector\n     * @param {?} configLoader\n     * @param {?} urlSerializer\n     * @param {?} urlTree\n     * @param {?} config\n     * @return {?}\n     */\n    function applyRedirects(injector, configLoader, urlSerializer, urlTree, config) {\n        return new ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config).apply();\n    }\n    var ApplyRedirects = (function () {\n        /**\n         * @param {?} injector\n         * @param {?} configLoader\n         * @param {?} urlSerializer\n         * @param {?} urlTree\n         * @param {?} config\n         */\n        function ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config) {\n            this.injector = injector;\n            this.configLoader = configLoader;\n            this.urlSerializer = urlSerializer;\n            this.urlTree = urlTree;\n            this.config = config;\n            this.allowRedirects = true;\n        }\n        /**\n         * @return {?}\n         */\n        ApplyRedirects.prototype.apply = function () {\n            var _this = this;\n            var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);\n            var /** @type {?} */ urlTrees$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, _this.urlTree.fragment); });\n            return rxjs_operator_catch._catch.call(urlTrees$, function (e) {\n                if (e instanceof AbsoluteRedirect) {\n                    // after an absolute redirect we do not apply any more redirects!\n                    _this.allowRedirects = false;\n                    // we need to run matching, so we can fetch all lazy-loaded modules\n                    return _this.match(e.urlTree);\n                }\n                else if (e instanceof NoMatch) {\n                    throw _this.noMatchError(e);\n                }\n                else {\n                    throw e;\n                }\n            });\n        };\n        /**\n         * @param {?} tree\n         * @return {?}\n         */\n        ApplyRedirects.prototype.match = function (tree) {\n            var _this = this;\n            var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.injector, this.config, tree.root, PRIMARY_OUTLET);\n            var /** @type {?} */ mapped$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) {\n                return _this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment);\n            });\n            return rxjs_operator_catch._catch.call(mapped$, function (e) {\n                if (e instanceof NoMatch) {\n                    throw _this.noMatchError(e);\n                }\n                else {\n                    throw e;\n                }\n            });\n        };\n        /**\n         * @param {?} e\n         * @return {?}\n         */\n        ApplyRedirects.prototype.noMatchError = function (e) {\n            return new Error(\"Cannot match any routes. URL Segment: '\" + e.segmentGroup + \"'\");\n        };\n        /**\n         * @param {?} rootCandidate\n         * @param {?} queryParams\n         * @param {?} fragment\n         * @return {?}\n         */\n        ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {\n            var /** @type {?} */ root = rootCandidate.segments.length > 0 ?\n                new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :\n                rootCandidate;\n            return new UrlTree(root, queryParams, fragment);\n            var _a;\n        };\n        /**\n         * @param {?} injector\n         * @param {?} routes\n         * @param {?} segmentGroup\n         * @param {?} outlet\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandSegmentGroup = function (injector, routes, segmentGroup, outlet) {\n            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n                return rxjs_operator_map.map.call(this.expandChildren(injector, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });\n            }\n            else {\n                return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} routes\n         * @param {?} segmentGroup\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandChildren = function (injector, routes, segmentGroup) {\n            var _this = this;\n            return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(injector, routes, child, childOutlet); });\n        };\n        /**\n         * @param {?} injector\n         * @param {?} segmentGroup\n         * @param {?} routes\n         * @param {?} segments\n         * @param {?} outlet\n         * @param {?} allowRedirects\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandSegment = function (injector, segmentGroup, routes, segments, outlet, allowRedirects) {\n            var _this = this;\n            var /** @type {?} */ routes$ = rxjs_observable_of.of.apply(void 0, routes);\n            var /** @type {?} */ processedRoutes$ = rxjs_operator_map.map.call(routes$, function (r) {\n                var /** @type {?} */ expanded$ = _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects);\n                return rxjs_operator_catch._catch.call(expanded$, function (e) {\n                    if (e instanceof NoMatch)\n                        return rxjs_observable_of.of(null);\n                    else\n                        throw e;\n                });\n            });\n            var /** @type {?} */ concattedProcessedRoutes$ = rxjs_operator_concatAll.concatAll.call(processedRoutes$);\n            var /** @type {?} */ first$ = rxjs_operator_first.first.call(concattedProcessedRoutes$, function (s) { return !!s; });\n            return rxjs_operator_catch._catch.call(first$, function (e, _) {\n                if (e instanceof rxjs_util_EmptyError.EmptyError) {\n                    if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                        return rxjs_observable_of.of(new UrlSegmentGroup([], {}));\n                    }\n                    else {\n                        throw new NoMatch(segmentGroup);\n                    }\n                }\n                else {\n                    throw e;\n                }\n            });\n        };\n        /**\n         * @param {?} segmentGroup\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {\n            return segments.length === 0 && !segmentGroup.children[outlet];\n        };\n        /**\n         * @param {?} injector\n         * @param {?} segmentGroup\n         * @param {?} routes\n         * @param {?} route\n         * @param {?} paths\n         * @param {?} outlet\n         * @param {?} allowRedirects\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandSegmentAgainstRoute = function (injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {\n            if (getOutlet$1(route) !== outlet)\n                return noMatch(segmentGroup);\n            if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))\n                return noMatch(segmentGroup);\n            if (route.redirectTo === undefined) {\n                return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);\n            }\n            else {\n                return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} segmentGroup\n         * @param {?} routes\n         * @param {?} route\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {\n            if (route.path === '**') {\n                return this.expandWildCardWithParamsAgainstRouteUsingRedirect(injector, routes, route, outlet);\n            }\n            else {\n                return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} routes\n         * @param {?} route\n         * @param {?} outlet\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (injector, routes, route, outlet) {\n            var _this = this;\n            var /** @type {?} */ newTree = this.applyRedirectCommands([], route.redirectTo, {});\n            if (route.redirectTo.startsWith('/')) {\n                return absoluteRedirect(newTree);\n            }\n            else {\n                return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {\n                    var /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\n                    return _this.expandSegment(injector, group, routes, newSegments, outlet, false);\n                });\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} segmentGroup\n         * @param {?} routes\n         * @param {?} route\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {\n            var _this = this;\n            var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;\n            if (!matched)\n                return noMatch(segmentGroup);\n            var /** @type {?} */ newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, /** @type {?} */ (positionalParamSegments));\n            if (route.redirectTo.startsWith('/')) {\n                return absoluteRedirect(newTree);\n            }\n            else {\n                return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {\n                    return _this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\n                });\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} rawSegmentGroup\n         * @param {?} route\n         * @param {?} segments\n         * @return {?}\n         */\n        ApplyRedirects.prototype.matchSegmentAgainstRoute = function (injector, rawSegmentGroup, route, segments) {\n            var _this = this;\n            if (route.path === '**') {\n                if (route.loadChildren) {\n                    return rxjs_operator_map.map.call(this.configLoader.load(injector, route.loadChildren), function (r) {\n                        ((route))._loadedConfig = r;\n                        return new UrlSegmentGroup(segments, {});\n                    });\n                }\n                else {\n                    return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));\n                }\n            }\n            else {\n                var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments_1 = _a.consumedSegments, lastChild = _a.lastChild;\n                if (!matched)\n                    return noMatch(rawSegmentGroup);\n                var /** @type {?} */ rawSlicedSegments_1 = segments.slice(lastChild);\n                var /** @type {?} */ childConfig$ = this.getChildConfig(injector, route);\n                return rxjs_operator_mergeMap.mergeMap.call(childConfig$, function (routerConfig) {\n                    var /** @type {?} */ childInjector = routerConfig.injector;\n                    var /** @type {?} */ childConfig = routerConfig.routes;\n                    var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;\n                    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                        var /** @type {?} */ expanded$ = _this.expandChildren(childInjector, childConfig, segmentGroup);\n                        return rxjs_operator_map.map.call(expanded$, function (children) { return new UrlSegmentGroup(consumedSegments_1, children); });\n                    }\n                    else if (childConfig.length === 0 && slicedSegments.length === 0) {\n                        return rxjs_observable_of.of(new UrlSegmentGroup(consumedSegments_1, {}));\n                    }\n                    else {\n                        var /** @type {?} */ expanded$ = _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n                        return rxjs_operator_map.map.call(expanded$, function (cs) { return new UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children); });\n                    }\n                });\n            }\n        };\n        /**\n         * @param {?} injector\n         * @param {?} route\n         * @return {?}\n         */\n        ApplyRedirects.prototype.getChildConfig = function (injector, route) {\n            var _this = this;\n            if (route.children) {\n                return rxjs_observable_of.of(new LoadedRouterConfig(route.children, injector, null, null));\n            }\n            else if (route.loadChildren) {\n                return rxjs_operator_mergeMap.mergeMap.call(runGuards(injector, route), function (shouldLoad) {\n                    if (shouldLoad) {\n                        if (((route))._loadedConfig) {\n                            return rxjs_observable_of.of(((route))._loadedConfig);\n                        }\n                        else {\n                            return rxjs_operator_map.map.call(_this.configLoader.load(injector, route.loadChildren), function (r) {\n                                ((route))._loadedConfig = r;\n                                return r;\n                            });\n                        }\n                    }\n                    else {\n                        return canLoadFails(route);\n                    }\n                });\n            }\n            else {\n                return rxjs_observable_of.of(new LoadedRouterConfig([], injector, null, null));\n            }\n        };\n        /**\n         * @param {?} route\n         * @param {?} urlTree\n         * @return {?}\n         */\n        ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {\n            var /** @type {?} */ res = [];\n            var /** @type {?} */ c = urlTree.root;\n            while (true) {\n                res = res.concat(c.segments);\n                if (c.numberOfChildren === 0) {\n                    return rxjs_observable_of.of(res);\n                }\n                else if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n                    return namedOutletsRedirect(route.redirectTo);\n                }\n                else {\n                    c = c.children[PRIMARY_OUTLET];\n                }\n            }\n        };\n        /**\n         * @param {?} segments\n         * @param {?} redirectTo\n         * @param {?} posParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {\n            var /** @type {?} */ t = this.urlSerializer.parse(redirectTo);\n            return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n        };\n        /**\n         * @param {?} redirectTo\n         * @param {?} urlTree\n         * @param {?} segments\n         * @param {?} posParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {\n            var /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n            return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n        };\n        /**\n         * @param {?} redirectToParams\n         * @param {?} actualParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {\n            var /** @type {?} */ res = {};\n            forEach(redirectToParams, function (v, k) {\n                if (v.startsWith(':')) {\n                    res[k] = actualParams[v.substring(1)];\n                }\n                else {\n                    res[k] = v;\n                }\n            });\n            return res;\n        };\n        /**\n         * @param {?} redirectTo\n         * @param {?} group\n         * @param {?} segments\n         * @param {?} posParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {\n            var _this = this;\n            var /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n            var /** @type {?} */ children = {};\n            forEach(group.children, function (child, name) {\n                children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);\n            });\n            return new UrlSegmentGroup(updatedSegments, children);\n        };\n        /**\n         * @param {?} redirectTo\n         * @param {?} redirectToSegments\n         * @param {?} actualSegments\n         * @param {?} posParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {\n            var _this = this;\n            return redirectToSegments.map(function (s) { return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :\n                _this.findOrReturn(s, actualSegments); });\n        };\n        /**\n         * @param {?} redirectTo\n         * @param {?} redirectToUrlSegment\n         * @param {?} posParams\n         * @return {?}\n         */\n        ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {\n            var /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\n            if (!pos)\n                throw new Error(\"Cannot redirect to '\" + redirectTo + \"'. Cannot find '\" + redirectToUrlSegment.path + \"'.\");\n            return pos;\n        };\n        /**\n         * @param {?} redirectToUrlSegment\n         * @param {?} actualSegments\n         * @return {?}\n         */\n        ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {\n            var /** @type {?} */ idx = 0;\n            for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {\n                var s = actualSegments_1[_i];\n                if (s.path === redirectToUrlSegment.path) {\n                    actualSegments.splice(idx);\n                    return s;\n                }\n                idx++;\n            }\n            return redirectToUrlSegment;\n        };\n        return ApplyRedirects;\n    }());\n    /**\n     * @param {?} injector\n     * @param {?} route\n     * @return {?}\n     */\n    function runGuards(injector, route) {\n        var /** @type {?} */ canLoad = route.canLoad;\n        if (!canLoad || canLoad.length === 0)\n            return rxjs_observable_of.of(true);\n        var /** @type {?} */ obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canLoad), function (c) {\n            var /** @type {?} */ guard = injector.get(c);\n            if (guard.canLoad) {\n                return wrapIntoObservable(guard.canLoad(route));\n            }\n            else {\n                return wrapIntoObservable(guard(route));\n            }\n        });\n        return andObservables(obs);\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    function match(segmentGroup, route, segments) {\n        var /** @type {?} */ noMatch = { matched: false, consumedSegments: /** @type {?} */ ([]), lastChild: 0, positionalParamSegments: {} };\n        if (route.path === '') {\n            if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n                return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n            }\n            else {\n                return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n            }\n        }\n        var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n        var /** @type {?} */ res = matcher(segments, segmentGroup, route);\n        if (!res)\n            return noMatch;\n        return {\n            matched: true,\n            consumedSegments: res.consumed,\n            lastChild: res.consumed.length,\n            positionalParamSegments: res.posParams\n        };\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} consumedSegments\n     * @param {?} slicedSegments\n     * @param {?} config\n     * @return {?}\n     */\n    function split(segmentGroup, consumedSegments, slicedSegments, config) {\n        if (slicedSegments.length > 0 &&\n            containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n            var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\n        }\n        else if (slicedSegments.length === 0 &&\n            containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n            var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };\n        }\n        else {\n            return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };\n        }\n    }\n    /**\n     * @param {?} s\n     * @return {?}\n     */\n    function mergeTrivialChildren(s) {\n        if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n            var /** @type {?} */ c = s.children[PRIMARY_OUTLET];\n            return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n        }\n        else {\n            return s;\n        }\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @param {?} children\n     * @return {?}\n     */\n    function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n        var /** @type {?} */ res = {};\n        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n            var r = routes_1[_i];\n            if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {\n                res[getOutlet$1(r)] = new UrlSegmentGroup([], {});\n            }\n        }\n        return merge(children, res);\n    }\n    /**\n     * @param {?} routes\n     * @param {?} primarySegmentGroup\n     * @return {?}\n     */\n    function createChildrenForEmptySegments(routes, primarySegmentGroup) {\n        var /** @type {?} */ res = {};\n        res[PRIMARY_OUTLET] = primarySegmentGroup;\n        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n            var r = routes_2[_i];\n            if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {\n                res[getOutlet$1(r)] = new UrlSegmentGroup([], {});\n            }\n        }\n        return res;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @return {?}\n     */\n    function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n        return routes\n            .filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r) &&\n            getOutlet$1(r) !== PRIMARY_OUTLET; })\n            .length > 0;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @return {?}\n     */\n    function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {\n        return routes.filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r); }).length > 0;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} r\n     * @return {?}\n     */\n    function emptyPathRedirect(segmentGroup, slicedSegments, r) {\n        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n            return false;\n        return r.path === '' && r.redirectTo !== undefined;\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function getOutlet$1(route) {\n        return route.outlet ? route.outlet : PRIMARY_OUTLET;\n    }\n\n    /**\n     * @param {?} config\n     * @param {?=} parentPath\n     * @return {?}\n     */\n    function validateConfig(config, parentPath) {\n        if (parentPath === void 0) { parentPath = ''; }\n        // forEach doesn't iterate undefined values\n        for (var /** @type {?} */ i = 0; i < config.length; i++) {\n            var /** @type {?} */ route = config[i];\n            var /** @type {?} */ fullPath = getFullPath(parentPath, route);\n            validateNode(route, fullPath);\n        }\n    }\n    /**\n     * @param {?} route\n     * @param {?} fullPath\n     * @return {?}\n     */\n    function validateNode(route, fullPath) {\n        if (!route) {\n            throw new Error(\"\\n      Invalid configuration of route '\" + fullPath + \"': Encountered undefined route.\\n      The reason might be an extra comma.\\n       \\n      Example: \\n      const routes: Routes = [\\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\\n        { path: 'detail/:id', component: HeroDetailComponent }\\n      ];\\n    \");\n        }\n        if (Array.isArray(route)) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': Array cannot be specified\");\n        }\n        if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': a componentless route cannot have a named outlet set\");\n        }\n        if (route.redirectTo && route.children) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and children cannot be used together\");\n        }\n        if (route.redirectTo && route.loadChildren) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and loadChildren cannot be used together\");\n        }\n        if (route.children && route.loadChildren) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': children and loadChildren cannot be used together\");\n        }\n        if (route.redirectTo && route.component) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and component cannot be used together\");\n        }\n        if (route.path && route.matcher) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path and matcher cannot be used together\");\n        }\n        if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"'. One of the following must be provided: component, redirectTo, children or loadChildren\");\n        }\n        if (route.path === void 0 && route.matcher === void 0) {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': routes must have either a path or a matcher specified\");\n        }\n        if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path cannot start with a slash\");\n        }\n        if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n            var /** @type {?} */ exp = \"The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.\";\n            throw new Error(\"Invalid configuration of route '{path: \\\"\" + fullPath + \"\\\", redirectTo: \\\"\" + route.redirectTo + \"\\\"}': please provide 'pathMatch'. \" + exp);\n        }\n        if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n            throw new Error(\"Invalid configuration of route '\" + fullPath + \"': pathMatch can only be set to 'prefix' or 'full'\");\n        }\n        if (route.children) {\n            validateConfig(route.children, fullPath);\n        }\n    }\n    /**\n     * @param {?} parentPath\n     * @param {?} currentRoute\n     * @return {?}\n     */\n    function getFullPath(parentPath, currentRoute) {\n        if (!currentRoute) {\n            return parentPath;\n        }\n        if (!parentPath && !currentRoute.path) {\n            return '';\n        }\n        else if (parentPath && !currentRoute.path) {\n            return parentPath + \"/\";\n        }\n        else if (!parentPath && currentRoute.path) {\n            return currentRoute.path;\n        }\n        else {\n            return parentPath + \"/\" + currentRoute.path;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Tree = (function () {\n        /**\n         * @param {?} root\n         */\n        function Tree(root) {\n            this._root = root;\n        }\n        Object.defineProperty(Tree.prototype, \"root\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._root.value; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@internal\n         * @param {?} t\n         * @return {?}\n         */\n        Tree.prototype.parent = function (t) {\n            var /** @type {?} */ p = this.pathFromRoot(t);\n            return p.length > 1 ? p[p.length - 2] : null;\n        };\n        /**\n         * \\@internal\n         * @param {?} t\n         * @return {?}\n         */\n        Tree.prototype.children = function (t) {\n            var /** @type {?} */ n = findNode(t, this._root);\n            return n ? n.children.map(function (t) { return t.value; }) : [];\n        };\n        /**\n         * \\@internal\n         * @param {?} t\n         * @return {?}\n         */\n        Tree.prototype.firstChild = function (t) {\n            var /** @type {?} */ n = findNode(t, this._root);\n            return n && n.children.length > 0 ? n.children[0].value : null;\n        };\n        /**\n         * \\@internal\n         * @param {?} t\n         * @return {?}\n         */\n        Tree.prototype.siblings = function (t) {\n            var /** @type {?} */ p = findPath(t, this._root, []);\n            if (p.length < 2)\n                return [];\n            var /** @type {?} */ c = p[p.length - 2].children.map(function (c) { return c.value; });\n            return c.filter(function (cc) { return cc !== t; });\n        };\n        /**\n         * \\@internal\n         * @param {?} t\n         * @return {?}\n         */\n        Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root, []).map(function (s) { return s.value; }); };\n        return Tree;\n    }());\n    /**\n     * @param {?} expected\n     * @param {?} c\n     * @return {?}\n     */\n    function findNode(expected, c) {\n        if (expected === c.value)\n            return c;\n        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {\n            var cc = _a[_i];\n            var /** @type {?} */ r = findNode(expected, cc);\n            if (r)\n                return r;\n        }\n        return null;\n    }\n    /**\n     * @param {?} expected\n     * @param {?} c\n     * @param {?} collected\n     * @return {?}\n     */\n    function findPath(expected, c, collected) {\n        collected.push(c);\n        if (expected === c.value)\n            return collected;\n        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {\n            var cc = _a[_i];\n            var /** @type {?} */ cloned = collected.slice(0);\n            var /** @type {?} */ r = findPath(expected, cc, cloned);\n            if (r.length > 0)\n                return r;\n        }\n        return [];\n    }\n    var TreeNode = (function () {\n        /**\n         * @param {?} value\n         * @param {?} children\n         */\n        function TreeNode(value, children) {\n            this.value = value;\n            this.children = children;\n        }\n        /**\n         * @return {?}\n         */\n        TreeNode.prototype.toString = function () { return \"TreeNode(\" + this.value + \")\"; };\n        return TreeNode;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * \\@whatItDoes Represents the state of the router.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({templateUrl:'template.html'})\n     * class MyComponent {\n     *   constructor(router: Router) {\n     *     const state: RouterState = router.routerState;\n     *     const root: ActivatedRoute = state.root;\n     *     const child = root.firstChild;\n     *     const id: Observable<string> = child.params.map(p => p.id);\n     *     //...\n     *   }\n     * }\n     * ```\n     *\n     * \\@description\n     * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n     * segments,\n     * the extracted parameters, and the resolved data.\n     *\n     * See {\\@link ActivatedRoute} for more information.\n     *\n     * \\@stable\n     */\n    var RouterState = (function (_super) {\n        __extends$1(RouterState, _super);\n        /**\n         * \\@internal\n         * @param {?} root\n         * @param {?} snapshot\n         */\n        function RouterState(root, snapshot) {\n            _super.call(this, root);\n            this.snapshot = snapshot;\n            setRouterStateSnapshot(this, root);\n        }\n        /**\n         * @return {?}\n         */\n        RouterState.prototype.toString = function () { return this.snapshot.toString(); };\n        return RouterState;\n    }(Tree));\n    /**\n     * @param {?} urlTree\n     * @param {?} rootComponent\n     * @return {?}\n     */\n    function createEmptyState(urlTree, rootComponent) {\n        var /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n        var /** @type {?} */ emptyUrl = new rxjs_BehaviorSubject.BehaviorSubject([new UrlSegment('', {})]);\n        var /** @type {?} */ emptyParams = new rxjs_BehaviorSubject.BehaviorSubject({});\n        var /** @type {?} */ emptyData = new rxjs_BehaviorSubject.BehaviorSubject({});\n        var /** @type {?} */ emptyQueryParams = new rxjs_BehaviorSubject.BehaviorSubject({});\n        var /** @type {?} */ fragment = new rxjs_BehaviorSubject.BehaviorSubject('');\n        var /** @type {?} */ activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n        activated.snapshot = snapshot.root;\n        return new RouterState(new TreeNode(activated, []), snapshot);\n    }\n    /**\n     * @param {?} urlTree\n     * @param {?} rootComponent\n     * @return {?}\n     */\n    function createEmptyStateSnapshot(urlTree, rootComponent) {\n        var /** @type {?} */ emptyParams = {};\n        var /** @type {?} */ emptyData = {};\n        var /** @type {?} */ emptyQueryParams = {};\n        var /** @type {?} */ fragment = '';\n        var /** @type {?} */ activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\n        return new RouterStateSnapshot('', new TreeNode(activated, []));\n    }\n    /**\n     * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n     * outlet.\n     * An `ActivatedRoute` can also be used to traverse the router state tree.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({...})\n     * class MyComponent {\n     *   constructor(route: ActivatedRoute) {\n     *     const id: Observable<string> = route.params.map(p => p.id);\n     *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n     *     // route.data includes both `data` and `resolve`\n     *     const user = route.data.map(d => d.user);\n     *   }\n     * }\n     * ```\n     *\n     * \\@stable\n     */\n    var ActivatedRoute = (function () {\n        /**\n         * \\@internal\n         * @param {?} url\n         * @param {?} params\n         * @param {?} queryParams\n         * @param {?} fragment\n         * @param {?} data\n         * @param {?} outlet\n         * @param {?} component\n         * @param {?} futureSnapshot\n         */\n        function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {\n            this.url = url;\n            this.params = params;\n            this.queryParams = queryParams;\n            this.fragment = fragment;\n            this.data = data;\n            this.outlet = outlet;\n            this.component = component;\n            this._futureSnapshot = futureSnapshot;\n        }\n        Object.defineProperty(ActivatedRoute.prototype, \"routeConfig\", {\n            /**\n             * The configuration used to match this route\n             * @return {?}\n             */\n            get: function () { return this._futureSnapshot.routeConfig; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRoute.prototype, \"root\", {\n            /**\n             * The root of the router state\n             * @return {?}\n             */\n            get: function () { return this._routerState.root; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRoute.prototype, \"parent\", {\n            /**\n             * The parent of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.parent(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRoute.prototype, \"firstChild\", {\n            /**\n             * The first child of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.firstChild(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRoute.prototype, \"children\", {\n            /**\n             * The children of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.children(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRoute.prototype, \"pathFromRoot\", {\n            /**\n             * The path from the root of the router state tree to this route\n             * @return {?}\n             */\n            get: function () { return this._routerState.pathFromRoot(this); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        ActivatedRoute.prototype.toString = function () {\n            return this.snapshot ? this.snapshot.toString() : \"Future(\" + this._futureSnapshot + \")\";\n        };\n        return ActivatedRoute;\n    }());\n    /**\n     * \\@internal\n     * @param {?} route\n     * @return {?}\n     */\n    function inheritedParamsDataResolve(route) {\n        var /** @type {?} */ pathToRoot = route.pathFromRoot;\n        var /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\n        while (inhertingStartingFrom >= 1) {\n            var /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\n            var /** @type {?} */ parent_1 = pathToRoot[inhertingStartingFrom - 1];\n            // current route is an empty path => inherits its parent's params and data\n            if (current.routeConfig && current.routeConfig.path === '') {\n                inhertingStartingFrom--;\n            }\n            else if (!parent_1.component) {\n                inhertingStartingFrom--;\n            }\n            else {\n                break;\n            }\n        }\n        return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {\n            var /** @type {?} */ params = merge(res.params, curr.params);\n            var /** @type {?} */ data = merge(res.data, curr.data);\n            var /** @type {?} */ resolve = merge(res.resolve, curr._resolvedData);\n            return { params: params, data: data, resolve: resolve };\n        }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));\n    }\n    /**\n     * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n     * outlet\n     * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n     * state tree.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({templateUrl:'./my-component.html'})\n     * class MyComponent {\n     *   constructor(route: ActivatedRoute) {\n     *     const id: string = route.snapshot.params.id;\n     *     const url: string = route.snapshot.url.join('');\n     *     const user = route.snapshot.data.user;\n     *   }\n     * }\n     * ```\n     *\n     * \\@stable\n     */\n    var ActivatedRouteSnapshot = (function () {\n        /**\n         * \\@internal\n         * @param {?} url\n         * @param {?} params\n         * @param {?} queryParams\n         * @param {?} fragment\n         * @param {?} data\n         * @param {?} outlet\n         * @param {?} component\n         * @param {?} routeConfig\n         * @param {?} urlSegment\n         * @param {?} lastPathIndex\n         * @param {?} resolve\n         */\n        function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {\n            this.url = url;\n            this.params = params;\n            this.queryParams = queryParams;\n            this.fragment = fragment;\n            this.data = data;\n            this.outlet = outlet;\n            this.component = component;\n            this._routeConfig = routeConfig;\n            this._urlSegment = urlSegment;\n            this._lastPathIndex = lastPathIndex;\n            this._resolve = resolve;\n        }\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"routeConfig\", {\n            /**\n             * The configuration used to match this route\n             * @return {?}\n             */\n            get: function () { return this._routeConfig; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"root\", {\n            /**\n             * The root of the router state\n             * @return {?}\n             */\n            get: function () { return this._routerState.root; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"parent\", {\n            /**\n             * The parent of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.parent(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"firstChild\", {\n            /**\n             * The first child of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.firstChild(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"children\", {\n            /**\n             * The children of this route in the router state tree\n             * @return {?}\n             */\n            get: function () { return this._routerState.children(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ActivatedRouteSnapshot.prototype, \"pathFromRoot\", {\n            /**\n             * The path from the root of the router state tree to this route\n             * @return {?}\n             */\n            get: function () { return this._routerState.pathFromRoot(this); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        ActivatedRouteSnapshot.prototype.toString = function () {\n            var /** @type {?} */ url = this.url.map(function (segment) { return segment.toString(); }).join('/');\n            var /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';\n            return \"Route(url:'\" + url + \"', path:'\" + matched + \"')\";\n        };\n        return ActivatedRouteSnapshot;\n    }());\n    /**\n     * \\@whatItDoes Represents the state of the router at a moment in time.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@Component({templateUrl:'template.html'})\n     * class MyComponent {\n     *   constructor(router: Router) {\n     *     const state: RouterState = router.routerState;\n     *     const snapshot: RouterStateSnapshot = state.snapshot;\n     *     const root: ActivatedRouteSnapshot = snapshot.root;\n     *     const child = root.firstChild;\n     *     const id: Observable<string> = child.params.map(p => p.id);\n     *     //...\n     *   }\n     * }\n     * ```\n     *\n     * \\@description\n     * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n     * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n     *\n     * \\@stable\n     */\n    var RouterStateSnapshot = (function (_super) {\n        __extends$1(RouterStateSnapshot, _super);\n        /**\n         * \\@internal\n         * @param {?} url\n         * @param {?} root\n         */\n        function RouterStateSnapshot(url, root) {\n            _super.call(this, root);\n            this.url = url;\n            setRouterStateSnapshot(this, root);\n        }\n        /**\n         * @return {?}\n         */\n        RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };\n        return RouterStateSnapshot;\n    }(Tree));\n    /**\n     * @param {?} state\n     * @param {?} node\n     * @return {?}\n     */\n    function setRouterStateSnapshot(state, node) {\n        node.value._routerState = state;\n        node.children.forEach(function (c) { return setRouterStateSnapshot(state, c); });\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function serializeNode(node) {\n        var /** @type {?} */ c = node.children.length > 0 ? \" { \" + node.children.map(serializeNode).join(\", \") + \" } \" : '';\n        return \"\" + node.value + c;\n    }\n    /**\n     * The expectation is that the activate route is created with the right set of parameters.\n     * So we push new values into the observables only when they are not the initial values.\n     * And we detect that by checking if the snapshot field is set.\n     * @param {?} route\n     * @return {?}\n     */\n    function advanceActivatedRoute(route) {\n        if (route.snapshot) {\n            var /** @type {?} */ currentSnapshot = route.snapshot;\n            route.snapshot = route._futureSnapshot;\n            if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {\n                ((route.queryParams)).next(route._futureSnapshot.queryParams);\n            }\n            if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {\n                ((route.fragment)).next(route._futureSnapshot.fragment);\n            }\n            if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {\n                ((route.params)).next(route._futureSnapshot.params);\n            }\n            if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {\n                ((route.url)).next(route._futureSnapshot.url);\n            }\n            if (!equalParamsAndUrlSegments(currentSnapshot, route._futureSnapshot)) {\n                ((route.data)).next(route._futureSnapshot.data);\n            }\n        }\n        else {\n            route.snapshot = route._futureSnapshot;\n            // this is for resolved data\n            ((route.data)).next(route._futureSnapshot.data);\n        }\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function equalParamsAndUrlSegments(a, b) {\n        return shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n    }\n\n    /**\n     * @param {?} routeReuseStrategy\n     * @param {?} curr\n     * @param {?} prevState\n     * @return {?}\n     */\n    function createRouterState(routeReuseStrategy, curr, prevState) {\n        var /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n        return new RouterState(root, curr);\n    }\n    /**\n     * @param {?} routeReuseStrategy\n     * @param {?} curr\n     * @param {?=} prevState\n     * @return {?}\n     */\n    function createNode(routeReuseStrategy, curr, prevState) {\n        // reuse an activated route that is currently displayed on the screen\n        if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n            var /** @type {?} */ value = prevState.value;\n            value._futureSnapshot = curr.value;\n            var /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n            return new TreeNode(value, children);\n        }\n        else if (routeReuseStrategy.retrieve(curr.value)) {\n            var /** @type {?} */ tree = ((routeReuseStrategy.retrieve(curr.value))).route;\n            setFutureSnapshotsOfActivatedRoutes(curr, tree);\n            return tree;\n        }\n        else {\n            var /** @type {?} */ value = createActivatedRoute(curr.value);\n            var /** @type {?} */ children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });\n            return new TreeNode(value, children);\n        }\n    }\n    /**\n     * @param {?} curr\n     * @param {?} result\n     * @return {?}\n     */\n    function setFutureSnapshotsOfActivatedRoutes(curr, result) {\n        if (curr.value.routeConfig !== result.value.routeConfig) {\n            throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n        }\n        if (curr.children.length !== result.children.length) {\n            throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n        }\n        result.value._futureSnapshot = curr.value;\n        for (var /** @type {?} */ i = 0; i < curr.children.length; ++i) {\n            setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n        }\n    }\n    /**\n     * @param {?} routeReuseStrategy\n     * @param {?} curr\n     * @param {?} prevState\n     * @return {?}\n     */\n    function createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n        return curr.children.map(function (child) {\n            for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {\n                var p = _a[_i];\n                if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n                    return createNode(routeReuseStrategy, child, p);\n                }\n            }\n            return createNode(routeReuseStrategy, child);\n        });\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    function createActivatedRoute(c) {\n        return new ActivatedRoute(new rxjs_BehaviorSubject.BehaviorSubject(c.url), new rxjs_BehaviorSubject.BehaviorSubject(c.params), new rxjs_BehaviorSubject.BehaviorSubject(c.queryParams), new rxjs_BehaviorSubject.BehaviorSubject(c.fragment), new rxjs_BehaviorSubject.BehaviorSubject(c.data), c.outlet, c.component, c);\n    }\n\n    /**\n     * @param {?} route\n     * @param {?} urlTree\n     * @param {?} commands\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    function createUrlTree(route, urlTree, commands, queryParams, fragment) {\n        if (commands.length === 0) {\n            return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n        }\n        var /** @type {?} */ nav = computeNavigation(commands);\n        if (nav.toRoot()) {\n            return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n        }\n        var /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\n        var /** @type {?} */ segmentGroup = startingPosition.processChildren ?\n            updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n            updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n        return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n    }\n    /**\n     * @param {?} command\n     * @return {?}\n     */\n    function isMatrixParams(command) {\n        return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n    }\n    /**\n     * @param {?} oldSegmentGroup\n     * @param {?} newSegmentGroup\n     * @param {?} urlTree\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\n        if (urlTree.root === oldSegmentGroup) {\n            return new UrlTree(newSegmentGroup, stringify(queryParams), fragment);\n        }\n        return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams), fragment);\n    }\n    /**\n     * @param {?} current\n     * @param {?} oldSegment\n     * @param {?} newSegment\n     * @return {?}\n     */\n    function replaceSegment(current, oldSegment, newSegment) {\n        var /** @type {?} */ children = {};\n        forEach(current.children, function (c, outletName) {\n            if (c === oldSegment) {\n                children[outletName] = newSegment;\n            }\n            else {\n                children[outletName] = replaceSegment(c, oldSegment, newSegment);\n            }\n        });\n        return new UrlSegmentGroup(current.segments, children);\n    }\n    var Navigation = (function () {\n        /**\n         * @param {?} isAbsolute\n         * @param {?} numberOfDoubleDots\n         * @param {?} commands\n         */\n        function Navigation(isAbsolute, numberOfDoubleDots, commands) {\n            this.isAbsolute = isAbsolute;\n            this.numberOfDoubleDots = numberOfDoubleDots;\n            this.commands = commands;\n            if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n                throw new Error('Root segment cannot have matrix parameters');\n            }\n            var cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });\n            if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n                throw new Error('{outlets:{}} has to be the last command');\n            }\n        }\n        /**\n         * @return {?}\n         */\n        Navigation.prototype.toRoot = function () {\n            return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n        };\n        return Navigation;\n    }());\n    /**\n     * Transforms commands to a normalized `Navigation`\n     * @param {?} commands\n     * @return {?}\n     */\n    function computeNavigation(commands) {\n        if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n            return new Navigation(true, 0, commands);\n        }\n        var /** @type {?} */ numberOfDoubleDots = 0;\n        var /** @type {?} */ isAbsolute = false;\n        var /** @type {?} */ res = commands.reduce(function (res, cmd, cmdIdx) {\n            if (typeof cmd === 'object' && cmd != null) {\n                if (cmd.outlets) {\n                    var /** @type {?} */ outlets_1 = {};\n                    forEach(cmd.outlets, function (commands, name) {\n                        outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;\n                    });\n                    return res.concat([{ outlets: outlets_1 }]);\n                }\n                if (cmd.segmentPath) {\n                    return res.concat([cmd.segmentPath]);\n                }\n            }\n            if (!(typeof cmd === 'string')) {\n                return res.concat([cmd]);\n            }\n            if (cmdIdx === 0) {\n                cmd.split('/').forEach(function (urlPart, partIndex) {\n                    if (partIndex == 0 && urlPart === '.') {\n                    }\n                    else if (partIndex == 0 && urlPart === '') {\n                        isAbsolute = true;\n                    }\n                    else if (urlPart === '..') {\n                        numberOfDoubleDots++;\n                    }\n                    else if (urlPart != '') {\n                        res.push(urlPart);\n                    }\n                });\n                return res;\n            }\n            return res.concat([cmd]);\n        }, []);\n        return new Navigation(isAbsolute, numberOfDoubleDots, res);\n    }\n    var Position = (function () {\n        /**\n         * @param {?} segmentGroup\n         * @param {?} processChildren\n         * @param {?} index\n         */\n        function Position(segmentGroup, processChildren, index) {\n            this.segmentGroup = segmentGroup;\n            this.processChildren = processChildren;\n            this.index = index;\n        }\n        return Position;\n    }());\n    /**\n     * @param {?} nav\n     * @param {?} tree\n     * @param {?} route\n     * @return {?}\n     */\n    function findStartingPosition(nav, tree, route) {\n        if (nav.isAbsolute) {\n            return new Position(tree.root, true, 0);\n        }\n        if (route.snapshot._lastPathIndex === -1) {\n            return new Position(route.snapshot._urlSegment, true, 0);\n        }\n        var /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n        var /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\n        return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n    }\n    /**\n     * @param {?} group\n     * @param {?} index\n     * @param {?} numberOfDoubleDots\n     * @return {?}\n     */\n    function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n        var /** @type {?} */ g = group;\n        var /** @type {?} */ ci = index;\n        var /** @type {?} */ dd = numberOfDoubleDots;\n        while (dd > ci) {\n            dd -= ci;\n            g = g.parent;\n            if (!g) {\n                throw new Error('Invalid number of \\'../\\'');\n            }\n            ci = g.segments.length;\n        }\n        return new Position(g, false, ci - dd);\n    }\n    /**\n     * @param {?} command\n     * @return {?}\n     */\n    function getPath(command) {\n        if (typeof command === 'object' && command != null && command.outlets) {\n            return command.outlets[PRIMARY_OUTLET];\n        }\n        return \"\" + command;\n    }\n    /**\n     * @param {?} commands\n     * @return {?}\n     */\n    function getOutlets(commands) {\n        if (!(typeof commands[0] === 'object'))\n            return (_a = {}, _a[PRIMARY_OUTLET] = commands, _a);\n        if (commands[0].outlets === undefined)\n            return (_b = {}, _b[PRIMARY_OUTLET] = commands, _b);\n        return commands[0].outlets;\n        var _a, _b;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} startIndex\n     * @param {?} commands\n     * @return {?}\n     */\n    function updateSegmentGroup(segmentGroup, startIndex, commands) {\n        if (!segmentGroup) {\n            segmentGroup = new UrlSegmentGroup([], {});\n        }\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n        }\n        var /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\n        var /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\n        if (m.match && m.pathIndex < segmentGroup.segments.length) {\n            var /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n            g.children[PRIMARY_OUTLET] =\n                new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n            return updateSegmentGroupChildren(g, 0, slicedCommands);\n        }\n        else if (m.match && slicedCommands.length === 0) {\n            return new UrlSegmentGroup(segmentGroup.segments, {});\n        }\n        else if (m.match && !segmentGroup.hasChildren()) {\n            return createNewSegmentGroup(segmentGroup, startIndex, commands);\n        }\n        else if (m.match) {\n            return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n        }\n        else {\n            return createNewSegmentGroup(segmentGroup, startIndex, commands);\n        }\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} startIndex\n     * @param {?} commands\n     * @return {?}\n     */\n    function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n        if (commands.length === 0) {\n            return new UrlSegmentGroup(segmentGroup.segments, {});\n        }\n        else {\n            var /** @type {?} */ outlets_2 = getOutlets(commands);\n            var /** @type {?} */ children_1 = {};\n            forEach(outlets_2, function (commands, outlet) {\n                if (commands !== null) {\n                    children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n                }\n            });\n            forEach(segmentGroup.children, function (child, childOutlet) {\n                if (outlets_2[childOutlet] === undefined) {\n                    children_1[childOutlet] = child;\n                }\n            });\n            return new UrlSegmentGroup(segmentGroup.segments, children_1);\n        }\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} startIndex\n     * @param {?} commands\n     * @return {?}\n     */\n    function prefixedWith(segmentGroup, startIndex, commands) {\n        var /** @type {?} */ currentCommandIndex = 0;\n        var /** @type {?} */ currentPathIndex = startIndex;\n        var /** @type {?} */ noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\n        while (currentPathIndex < segmentGroup.segments.length) {\n            if (currentCommandIndex >= commands.length)\n                return noMatch;\n            var /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\n            var /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\n            var /** @type {?} */ next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n            if (currentPathIndex > 0 && curr === undefined)\n                break;\n            if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n                if (!compare(curr, next, path))\n                    return noMatch;\n                currentCommandIndex += 2;\n            }\n            else {\n                if (!compare(curr, {}, path))\n                    return noMatch;\n                currentCommandIndex++;\n            }\n            currentPathIndex++;\n        }\n        return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} startIndex\n     * @param {?} commands\n     * @return {?}\n     */\n    function createNewSegmentGroup(segmentGroup, startIndex, commands) {\n        var /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\n        var /** @type {?} */ i = 0;\n        while (i < commands.length) {\n            if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n                var /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\n                return new UrlSegmentGroup(paths, children);\n            }\n            // if we start with an object literal, we need to reuse the path part from the segment\n            if (i === 0 && isMatrixParams(commands[0])) {\n                var /** @type {?} */ p = segmentGroup.segments[startIndex];\n                paths.push(new UrlSegment(p.path, commands[0]));\n                i++;\n                continue;\n            }\n            var /** @type {?} */ curr = getPath(commands[i]);\n            var /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\n            if (curr && next && isMatrixParams(next)) {\n                paths.push(new UrlSegment(curr, stringify(next)));\n                i += 2;\n            }\n            else {\n                paths.push(new UrlSegment(curr, {}));\n                i++;\n            }\n        }\n        return new UrlSegmentGroup(paths, {});\n    }\n    /**\n     * @param {?} outlets\n     * @return {?}\n     */\n    function createNewSegmentChildren(outlets) {\n        var /** @type {?} */ children = {};\n        forEach(outlets, function (commands, outlet) {\n            if (commands !== null) {\n                children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n            }\n        });\n        return children;\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    function stringify(params) {\n        var /** @type {?} */ res = {};\n        forEach(params, function (v, k) { return res[k] = \"\" + v; });\n        return res;\n    }\n    /**\n     * @param {?} path\n     * @param {?} params\n     * @param {?} segment\n     * @return {?}\n     */\n    function compare(path, params, segment) {\n        return path == segment.path && shallowEqual(params, segment.parameters);\n    }\n\n    var NoMatch$1 = (function () {\n        function NoMatch() {\n        }\n        return NoMatch;\n    }());\n    /**\n     * @param {?} rootComponentType\n     * @param {?} config\n     * @param {?} urlTree\n     * @param {?} url\n     * @return {?}\n     */\n    function recognize(rootComponentType, config, urlTree, url) {\n        return new Recognizer(rootComponentType, config, urlTree, url).recognize();\n    }\n    var Recognizer = (function () {\n        /**\n         * @param {?} rootComponentType\n         * @param {?} config\n         * @param {?} urlTree\n         * @param {?} url\n         */\n        function Recognizer(rootComponentType, config, urlTree, url) {\n            this.rootComponentType = rootComponentType;\n            this.config = config;\n            this.urlTree = urlTree;\n            this.url = url;\n        }\n        /**\n         * @return {?}\n         */\n        Recognizer.prototype.recognize = function () {\n            try {\n                var /** @type {?} */ rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;\n                var /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n                var /** @type {?} */ root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n                var /** @type {?} */ rootNode = new TreeNode(root, children);\n                var /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\n                this.inheriteParamsAndData(routeState._root);\n                return rxjs_observable_of.of(routeState);\n            }\n            catch (e) {\n                return new rxjs_Observable.Observable(function (obs) { return obs.error(e); });\n            }\n        };\n        /**\n         * @param {?} routeNode\n         * @return {?}\n         */\n        Recognizer.prototype.inheriteParamsAndData = function (routeNode) {\n            var _this = this;\n            var /** @type {?} */ route = routeNode.value;\n            var /** @type {?} */ i = inheritedParamsDataResolve(route);\n            route.params = Object.freeze(i.params);\n            route.data = Object.freeze(i.data);\n            routeNode.children.forEach(function (n) { return _this.inheriteParamsAndData(n); });\n        };\n        /**\n         * @param {?} config\n         * @param {?} segmentGroup\n         * @param {?} outlet\n         * @return {?}\n         */\n        Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {\n            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n                return this.processChildren(config, segmentGroup);\n            }\n            else {\n                return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n            }\n        };\n        /**\n         * @param {?} config\n         * @param {?} segmentGroup\n         * @return {?}\n         */\n        Recognizer.prototype.processChildren = function (config, segmentGroup) {\n            var _this = this;\n            var /** @type {?} */ children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });\n            checkOutletNameUniqueness(children);\n            sortActivatedRouteSnapshots(children);\n            return children;\n        };\n        /**\n         * @param {?} config\n         * @param {?} segmentGroup\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {\n            for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {\n                var r = config_1[_i];\n                try {\n                    return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n                }\n                catch (e) {\n                    if (!(e instanceof NoMatch$1))\n                        throw e;\n                }\n            }\n            if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                return [];\n            }\n            else {\n                throw new NoMatch$1();\n            }\n        };\n        /**\n         * @param {?} segmentGroup\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {\n            return segments.length === 0 && !segmentGroup.children[outlet];\n        };\n        /**\n         * @param {?} route\n         * @param {?} rawSegment\n         * @param {?} segments\n         * @param {?} outlet\n         * @return {?}\n         */\n        Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {\n            if (route.redirectTo)\n                throw new NoMatch$1();\n            if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet)\n                throw new NoMatch$1();\n            if (route.path === '**') {\n                var /** @type {?} */ params = segments.length > 0 ? last(segments).parameters : {};\n                var /** @type {?} */ snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n                return [new TreeNode(snapshot_1, [])];\n            }\n            var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;\n            var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n            var /** @type {?} */ childConfig = getChildConfig(route);\n            var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;\n            var /** @type {?} */ snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                var /** @type {?} */ children = this.processChildren(childConfig, segmentGroup);\n                return [new TreeNode(snapshot, children)];\n            }\n            else if (childConfig.length === 0 && slicedSegments.length === 0) {\n                return [new TreeNode(snapshot, [])];\n            }\n            else {\n                var /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n                return [new TreeNode(snapshot, children)];\n            }\n        };\n        return Recognizer;\n    }());\n    /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    function sortActivatedRouteSnapshots(nodes) {\n        nodes.sort(function (a, b) {\n            if (a.value.outlet === PRIMARY_OUTLET)\n                return -1;\n            if (b.value.outlet === PRIMARY_OUTLET)\n                return 1;\n            return a.value.outlet.localeCompare(b.value.outlet);\n        });\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function getChildConfig(route) {\n        if (route.children) {\n            return route.children;\n        }\n        else if (route.loadChildren) {\n            return ((route))._loadedConfig.routes;\n        }\n        else {\n            return [];\n        }\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    function match$1(segmentGroup, route, segments) {\n        if (route.path === '') {\n            if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n                throw new NoMatch$1();\n            }\n            else {\n                return { consumedSegments: [], lastChild: 0, parameters: {} };\n            }\n        }\n        var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n        var /** @type {?} */ res = matcher(segments, segmentGroup, route);\n        if (!res)\n            throw new NoMatch$1();\n        var /** @type {?} */ posParams = {};\n        forEach(res.posParams, function (v, k) { posParams[k] = v.path; });\n        var /** @type {?} */ parameters = merge(posParams, res.consumed[res.consumed.length - 1].parameters);\n        return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };\n    }\n    /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    function checkOutletNameUniqueness(nodes) {\n        var /** @type {?} */ names = {};\n        nodes.forEach(function (n) {\n            var /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\n            if (routeWithSameOutletName) {\n                var /** @type {?} */ p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');\n                var /** @type {?} */ c = n.value.url.map(function (s) { return s.toString(); }).join('/');\n                throw new Error(\"Two segments cannot have the same outlet name: '\" + p + \"' and '\" + c + \"'.\");\n            }\n            names[n.value.outlet] = n.value;\n        });\n    }\n    /**\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    function getSourceSegmentGroup(segmentGroup) {\n        var /** @type {?} */ s = segmentGroup;\n        while (s._sourceSegment) {\n            s = s._sourceSegment;\n        }\n        return s;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    function getPathIndexShift(segmentGroup) {\n        var /** @type {?} */ s = segmentGroup;\n        var /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n        while (s._sourceSegment) {\n            s = s._sourceSegment;\n            res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n        }\n        return res - 1;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} consumedSegments\n     * @param {?} slicedSegments\n     * @param {?} config\n     * @return {?}\n     */\n    function split$1(segmentGroup, consumedSegments, slicedSegments, config) {\n        if (slicedSegments.length > 0 &&\n            containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n            var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            return { segmentGroup: s, slicedSegments: [] };\n        }\n        else if (slicedSegments.length === 0 &&\n            containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n            var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            return { segmentGroup: s, slicedSegments: slicedSegments };\n        }\n        else {\n            var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            return { segmentGroup: s, slicedSegments: slicedSegments };\n        }\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @param {?} children\n     * @return {?}\n     */\n    function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n        var /** @type {?} */ res = {};\n        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n            var r = routes_1[_i];\n            if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {\n                var /** @type {?} */ s = new UrlSegmentGroup([], {});\n                s._sourceSegment = segmentGroup;\n                s._segmentIndexShift = segmentGroup.segments.length;\n                res[getOutlet$2(r)] = s;\n            }\n        }\n        return merge(children, res);\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} consumedSegments\n     * @param {?} routes\n     * @param {?} primarySegment\n     * @return {?}\n     */\n    function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\n        var /** @type {?} */ res = {};\n        res[PRIMARY_OUTLET] = primarySegment;\n        primarySegment._sourceSegment = segmentGroup;\n        primarySegment._segmentIndexShift = consumedSegments.length;\n        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n            var r = routes_2[_i];\n            if (r.path === '' && getOutlet$2(r) !== PRIMARY_OUTLET) {\n                var /** @type {?} */ s = new UrlSegmentGroup([], {});\n                s._sourceSegment = segmentGroup;\n                s._segmentIndexShift = consumedSegments.length;\n                res[getOutlet$2(r)] = s;\n            }\n        }\n        return res;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @return {?}\n     */\n    function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n        return routes\n            .filter(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) &&\n            getOutlet$2(r) !== PRIMARY_OUTLET; })\n            .length > 0;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} routes\n     * @return {?}\n     */\n    function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n        return routes.filter(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); }).length > 0;\n    }\n    /**\n     * @param {?} segmentGroup\n     * @param {?} slicedSegments\n     * @param {?} r\n     * @return {?}\n     */\n    function emptyPathMatch(segmentGroup, slicedSegments, r) {\n        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n            return false;\n        return r.path === '' && r.redirectTo === undefined;\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function getOutlet$2(route) {\n        return route.outlet ? route.outlet : PRIMARY_OUTLET;\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function getData(route) {\n        return route.data ? route.data : {};\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    function getResolve(route) {\n        return route.resolve ? route.resolve : {};\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * \\@whatItDoes Contains all the router outlets created in a component.\n     *\n     * \\@stable\n     */\n    var RouterOutletMap = (function () {\n        function RouterOutletMap() {\n            /** @internal */\n            this._outlets = {};\n        }\n        /**\n         * Adds an outlet to this map.\n         * @param {?} name\n         * @param {?} outlet\n         * @return {?}\n         */\n        RouterOutletMap.prototype.registerOutlet = function (name, outlet) { this._outlets[name] = outlet; };\n        /**\n         * Removes an outlet from this map.\n         * @param {?} name\n         * @return {?}\n         */\n        RouterOutletMap.prototype.removeOutlet = function (name) { this._outlets[name] = undefined; };\n        return RouterOutletMap;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * \\@whatItDoes Provides a way to migrate Angular 1 applications to Angular 2.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var UrlHandlingStrategy = (function () {\n        function UrlHandlingStrategy() {\n        }\n        /**\n         * Tells the router if this URL should be processed.\n         *\n         * When it returns true, the router will execute the regular navigation.\n         * When it returns false, the router will set the router state to an empty state.\n         * As a result, all the active components will be destroyed.\n         *\n         * @abstract\n         * @param {?} url\n         * @return {?}\n         */\n        UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };\n        /**\n         * Extracts the part of the URL that should be handled by the router.\n         * The rest of the URL will remain untouched.\n         * @abstract\n         * @param {?} url\n         * @return {?}\n         */\n        UrlHandlingStrategy.prototype.extract = function (url) { };\n        /**\n         * Merges the URL fragment with the rest of the URL.\n         * @abstract\n         * @param {?} newUrlPart\n         * @param {?} rawUrl\n         * @return {?}\n         */\n        UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };\n        return UrlHandlingStrategy;\n    }());\n    /**\n     * \\@experimental\n     */\n    var DefaultUrlHandlingStrategy = (function () {\n        function DefaultUrlHandlingStrategy() {\n        }\n        /**\n         * @param {?} url\n         * @return {?}\n         */\n        DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };\n        /**\n         * @param {?} url\n         * @return {?}\n         */\n        DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };\n        /**\n         * @param {?} newUrlPart\n         * @param {?} wholeUrl\n         * @return {?}\n         */\n        DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };\n        return DefaultUrlHandlingStrategy;\n    }());\n\n    /**\n     * \\@whatItDoes Represents an event triggered when a navigation starts.\n     *\n     * \\@stable\n     */\n    var NavigationStart = (function () {\n        /**\n         * @param {?} id\n         * @param {?} url\n         */\n        function NavigationStart(id, url) {\n            this.id = id;\n            this.url = url;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        NavigationStart.prototype.toString = function () { return \"NavigationStart(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n        return NavigationStart;\n    }());\n    /**\n     * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n     *\n     * \\@stable\n     */\n    var NavigationEnd = (function () {\n        /**\n         * @param {?} id\n         * @param {?} url\n         * @param {?} urlAfterRedirects\n         */\n        function NavigationEnd(id, url, urlAfterRedirects) {\n            this.id = id;\n            this.url = url;\n            this.urlAfterRedirects = urlAfterRedirects;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        NavigationEnd.prototype.toString = function () {\n            return \"NavigationEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"')\";\n        };\n        return NavigationEnd;\n    }());\n    /**\n     * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n     *\n     * \\@stable\n     */\n    var NavigationCancel = (function () {\n        /**\n         * @param {?} id\n         * @param {?} url\n         * @param {?} reason\n         */\n        function NavigationCancel(id, url, reason) {\n            this.id = id;\n            this.url = url;\n            this.reason = reason;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        NavigationCancel.prototype.toString = function () { return \"NavigationCancel(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n        return NavigationCancel;\n    }());\n    /**\n     * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n     *\n     * \\@stable\n     */\n    var NavigationError = (function () {\n        /**\n         * @param {?} id\n         * @param {?} url\n         * @param {?} error\n         */\n        function NavigationError(id, url, error) {\n            this.id = id;\n            this.url = url;\n            this.error = error;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        NavigationError.prototype.toString = function () {\n            return \"NavigationError(id: \" + this.id + \", url: '\" + this.url + \"', error: \" + this.error + \")\";\n        };\n        return NavigationError;\n    }());\n    /**\n     * \\@whatItDoes Represents an event triggered when routes are recognized.\n     *\n     * \\@stable\n     */\n    var RoutesRecognized = (function () {\n        /**\n         * @param {?} id\n         * @param {?} url\n         * @param {?} urlAfterRedirects\n         * @param {?} state\n         */\n        function RoutesRecognized(id, url, urlAfterRedirects, state) {\n            this.id = id;\n            this.url = url;\n            this.urlAfterRedirects = urlAfterRedirects;\n            this.state = state;\n        }\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        RoutesRecognized.prototype.toString = function () {\n            return \"RoutesRecognized(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n        };\n        return RoutesRecognized;\n    }());\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    function defaultErrorHandler(error) {\n        throw error;\n    }\n    /**\n     * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n     */\n    var DefaultRouteReuseStrategy = (function () {\n        function DefaultRouteReuseStrategy() {\n        }\n        /**\n         * @param {?} route\n         * @return {?}\n         */\n        DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) { return false; };\n        /**\n         * @param {?} route\n         * @param {?} detachedTree\n         * @return {?}\n         */\n        DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) { };\n        /**\n         * @param {?} route\n         * @return {?}\n         */\n        DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) { return false; };\n        /**\n         * @param {?} route\n         * @return {?}\n         */\n        DefaultRouteReuseStrategy.prototype.retrieve = function (route) { return null; };\n        /**\n         * @param {?} future\n         * @param {?} curr\n         * @return {?}\n         */\n        DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {\n            return future.routeConfig === curr.routeConfig;\n        };\n        return DefaultRouteReuseStrategy;\n    }());\n    /**\n     * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n     *\n     * See {\\@link Routes} for more details and examples.\n     *\n     * \\@ngModule RouterModule\n     *\n     * \\@stable\n     */\n    var Router = (function () {\n        /**\n         * @param {?} rootComponentType\n         * @param {?} urlSerializer\n         * @param {?} outletMap\n         * @param {?} location\n         * @param {?} injector\n         * @param {?} loader\n         * @param {?} compiler\n         * @param {?} config\n         */\n        function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {\n            this.rootComponentType = rootComponentType;\n            this.urlSerializer = urlSerializer;\n            this.outletMap = outletMap;\n            this.location = location;\n            this.injector = injector;\n            this.config = config;\n            this.navigations = new rxjs_BehaviorSubject.BehaviorSubject(null);\n            this.routerEvents = new rxjs_Subject.Subject();\n            this.navigationId = 0;\n            /**\n             * Error handler that is invoked when a navigation errors.\n             *\n             * See {@link ErrorHandler} for more information.\n             */\n            this.errorHandler = defaultErrorHandler;\n            /**\n             * Indicates if at least one navigation happened.\n             */\n            this.navigated = false;\n            /**\n             * Extracts and merges URLs. Used for Angular 1 to Angular 2 migrations.\n             */\n            this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\n            this.routeReuseStrategy = new DefaultRouteReuseStrategy();\n            this.resetConfig(config);\n            this.currentUrlTree = createEmptyUrlTree();\n            this.rawUrlTree = this.currentUrlTree;\n            this.configLoader = new RouterConfigLoader(loader, compiler);\n            this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n            this.processNavigations();\n        }\n        /**\n         * \\@internal\n         * TODO: this should be removed once the constructor of the router made internal\n         * @param {?} rootComponentType\n         * @return {?}\n         */\n        Router.prototype.resetRootComponentType = function (rootComponentType) {\n            this.rootComponentType = rootComponentType;\n            // TODO: vsavkin router 4.0 should make the root component set to null\n            // this will simplify the lifecycle of the router.\n            this.currentRouterState.root.component = this.rootComponentType;\n        };\n        /**\n         * Sets up the location change listener and performs the initial navigation.\n         * @return {?}\n         */\n        Router.prototype.initialNavigation = function () {\n            this.setUpLocationChangeListener();\n            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\n        };\n        /**\n         * Sets up the location change listener.\n         * @return {?}\n         */\n        Router.prototype.setUpLocationChangeListener = function () {\n            var _this = this;\n            // Zone.current.wrap is needed because of the issue with RxJS scheduler,\n            // which does not work properly with zone.js in IE and Safari\n            if (!this.locationSubscription) {\n                this.locationSubscription = (this.location.subscribe(Zone.current.wrap(function (change) {\n                    var /** @type {?} */ rawUrlTree = _this.urlSerializer.parse(change['url']);\n                    var /** @type {?} */ source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n                    setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, { replaceUrl: true }); }, 0);\n                })));\n            }\n        };\n        Object.defineProperty(Router.prototype, \"routerState\", {\n            /**\n             * The current route state\n             * @return {?}\n             */\n            get: function () { return this.currentRouterState; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Router.prototype, \"url\", {\n            /**\n             * The current url\n             * @return {?}\n             */\n            get: function () { return this.serializeUrl(this.currentUrlTree); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Router.prototype, \"events\", {\n            /**\n             * An observable of router events\n             * @return {?}\n             */\n            get: function () { return this.routerEvents; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Resets the configuration used for navigation and generating links.\n         *\n         * ### Usage\n         *\n         * ```\n         * router.resetConfig([\n         *  { path: 'team/:id', component: TeamCmp, children: [\n         *    { path: 'simple', component: SimpleCmp },\n         *    { path: 'user/:name', component: UserCmp }\n         *  ]}\n         * ]);\n         * ```\n         * @param {?} config\n         * @return {?}\n         */\n        Router.prototype.resetConfig = function (config) {\n            validateConfig(config);\n            this.config = config;\n        };\n        /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        Router.prototype.ngOnDestroy = function () { this.dispose(); };\n        /**\n         * Disposes of the router\n         * @return {?}\n         */\n        Router.prototype.dispose = function () {\n            if (this.locationSubscription) {\n                this.locationSubscription.unsubscribe();\n                this.locationSubscription = null;\n            }\n        };\n        /**\n         * Applies an array of commands to the current url tree and creates a new url tree.\n         *\n         * When given an activate route, applies the given commands starting from the route.\n         * When not given a route, applies the given command starting from the root.\n         *\n         * ### Usage\n         *\n         * ```\n         * // create /team/33/user/11\n         * router.createUrlTree(['/team', 33, 'user', 11]);\n         *\n         * // create /team/33;expand=true/user/11\n         * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n         *\n         * // you can collapse static segments like this (this works only with the first passed-in value):\n         * router.createUrlTree(['/team/33/user', userId]);\n         *\n         * // If the first segment can contain slashes, and you do not want the router to split it, you\n         * // can do the following:\n         *\n         * router.createUrlTree([{segmentPath: '/one/two'}]);\n         *\n         * // create /team/33/(user/11//right:chat)\n         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n         *\n         * // remove the right secondary node\n         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n         *\n         * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n         *\n         * // navigate to /team/33/user/11/details\n         * router.createUrlTree(['details'], {relativeTo: route});\n         *\n         * // navigate to /team/33/user/22\n         * router.createUrlTree(['../22'], {relativeTo: route});\n         *\n         * // navigate to /team/44/user/22\n         * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n         * ```\n         * @param {?} commands\n         * @param {?=} __1\n         * @return {?}\n         */\n        Router.prototype.createUrlTree = function (commands, _a) {\n            var _b = _a === void 0 ? {} : _a, relativeTo = _b.relativeTo, queryParams = _b.queryParams, fragment = _b.fragment, preserveQueryParams = _b.preserveQueryParams, preserveFragment = _b.preserveFragment;\n            var /** @type {?} */ a = relativeTo || this.routerState.root;\n            var /** @type {?} */ q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;\n            var /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n            return createUrlTree(a, this.currentUrlTree, commands, q, f);\n        };\n        /**\n         * Navigate based on the provided url. This navigation is always absolute.\n         *\n         * Returns a promise that:\n         * - resolves to 'true' when navigation succeeds,\n         * - resolves to 'false' when navigation fails,\n         * - is rejected when an error happens.\n         *\n         * ### Usage\n         *\n         * ```\n         * router.navigateByUrl(\"/team/33/user/11\");\n         *\n         * // Navigate without updating the URL\n         * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n         * ```\n         *\n         * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n         * and does not apply any delta to the current one.\n         * @param {?} url\n         * @param {?=} extras\n         * @return {?}\n         */\n        Router.prototype.navigateByUrl = function (url, extras) {\n            if (extras === void 0) { extras = { skipLocationChange: false }; }\n            if (url instanceof UrlTree) {\n                return this.scheduleNavigation(this.urlHandlingStrategy.merge(url, this.rawUrlTree), 'imperative', extras);\n            }\n            var /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n            return this.scheduleNavigation(this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree), 'imperative', extras);\n        };\n        /**\n         * Navigate based on the provided array of commands and a starting point.\n         * If no starting route is provided, the navigation is absolute.\n         *\n         * Returns a promise that:\n         * - resolves to 'true' when navigation succeeds,\n         * - resolves to 'false' when navigation fails,\n         * - is rejected when an error happens.\n         *\n         * ### Usage\n         *\n         * ```\n         * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n         *\n         * // Navigate without updating the URL\n         * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n         * ```\n         *\n         * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n         * URL.\n         * @param {?} commands\n         * @param {?=} extras\n         * @return {?}\n         */\n        Router.prototype.navigate = function (commands, extras) {\n            if (extras === void 0) { extras = { skipLocationChange: false }; }\n            validateCommands(commands);\n            if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {\n                extras.queryParams = this.removeEmptyProps(extras.queryParams);\n            }\n            return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n        };\n        /**\n         * Serializes a {\\@link UrlTree} into a string\n         * @param {?} url\n         * @return {?}\n         */\n        Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };\n        /**\n         * Parses a string into a {\\@link UrlTree}\n         * @param {?} url\n         * @return {?}\n         */\n        Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };\n        /**\n         * Returns whether the url is activated\n         * @param {?} url\n         * @param {?} exact\n         * @return {?}\n         */\n        Router.prototype.isActive = function (url, exact) {\n            if (url instanceof UrlTree) {\n                return containsTree(this.currentUrlTree, url, exact);\n            }\n            else {\n                var /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n                return containsTree(this.currentUrlTree, urlTree, exact);\n            }\n        };\n        /**\n         * @param {?} params\n         * @return {?}\n         */\n        Router.prototype.removeEmptyProps = function (params) {\n            return Object.keys(params).reduce(function (result, key) {\n                var /** @type {?} */ value = params[key];\n                if (value !== null && value !== undefined) {\n                    result[key] = value;\n                }\n                return result;\n            }, {});\n        };\n        /**\n         * @return {?}\n         */\n        Router.prototype.processNavigations = function () {\n            var _this = this;\n            rxjs_operator_concatMap.concatMap\n                .call(this.navigations, function (nav) {\n                if (nav) {\n                    _this.executeScheduledNavigation(nav);\n                    // a failed navigation should not stop the router from processing\n                    // further navigations => the catch\n                    return nav.promise.catch(function () { });\n                }\n                else {\n                    return (rxjs_observable_of.of(null));\n                }\n            })\n                .subscribe(function () { });\n        };\n        /**\n         * @param {?} rawUrl\n         * @param {?} source\n         * @param {?} extras\n         * @return {?}\n         */\n        Router.prototype.scheduleNavigation = function (rawUrl, source, extras) {\n            var /** @type {?} */ lastNavigation = this.navigations.value;\n            // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n            // and that navigation results in 'replaceState' that leads to the same URL,\n            // we should skip those.\n            if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n                lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n                return null; // return value is not used\n            }\n            // Because of a bug in IE and Edge, the location class fires two events (popstate and\n            // hashchange)\n            // every single time. The second one should be ignored. Otherwise, the URL will flicker.\n            if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n                lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n                return null; // return value is not used\n            }\n            var /** @type {?} */ resolve = null;\n            var /** @type {?} */ reject = null;\n            var /** @type {?} */ promise = new Promise(function (res, rej) {\n                resolve = res;\n                reject = rej;\n            });\n            var /** @type {?} */ id = ++this.navigationId;\n            this.navigations.next({ id: id, source: source, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });\n            // Make sure that the error is propagated even though `processNavigations` catch\n            // handler does not rethrow\n            return promise.catch(function (e) { return Promise.reject(e); });\n        };\n        /**\n         * @param {?} __0\n         * @return {?}\n         */\n        Router.prototype.executeScheduledNavigation = function (_a) {\n            var _this = this;\n            var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;\n            var /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\n            var /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n            if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n                Promise.resolve()\n                    .then(function (_) { return _this.runNavigate(url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null); })\n                    .then(resolve, reject);\n            }\n            else if (urlTransition && this.rawUrlTree &&\n                this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n                Promise.resolve()\n                    .then(function (_) { return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot); })\n                    .then(resolve, reject);\n            }\n            else {\n                this.rawUrlTree = rawUrl;\n                resolve(null);\n            }\n        };\n        /**\n         * @param {?} url\n         * @param {?} rawUrl\n         * @param {?} shouldPreventPushState\n         * @param {?} shouldReplaceUrl\n         * @param {?} id\n         * @param {?} precreatedState\n         * @return {?}\n         */\n        Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {\n            var _this = this;\n            if (id !== this.navigationId) {\n                this.location.go(this.urlSerializer.serialize(this.currentUrlTree));\n                this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), \"Navigation ID \" + id + \" is not equal to the current navigation id \" + this.navigationId));\n                return Promise.resolve(false);\n            }\n            return new Promise(function (resolvePromise, rejectPromise) {\n                // create an observable of the url and route state snapshot\n                // this operation do not result in any side effects\n                var /** @type {?} */ urlAndSnapshot$;\n                if (!precreatedState) {\n                    var /** @type {?} */ redirectsApplied$ = applyRedirects(_this.injector, _this.configLoader, _this.urlSerializer, url, _this.config);\n                    urlAndSnapshot$ = rxjs_operator_mergeMap.mergeMap.call(redirectsApplied$, function (appliedUrl) {\n                        return rxjs_operator_map.map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {\n                            _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));\n                            return { appliedUrl: appliedUrl, snapshot: snapshot };\n                        });\n                    });\n                }\n                else {\n                    urlAndSnapshot$ = rxjs_observable_of.of({ appliedUrl: url, snapshot: precreatedState });\n                }\n                // run preactivation: guards and data resolvers\n                var /** @type {?} */ preActivation;\n                var /** @type {?} */ preactivationTraverse$ = rxjs_operator_map.map.call(urlAndSnapshot$, function (_a) {\n                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;\n                    preActivation =\n                        new PreActivation(snapshot, _this.currentRouterState.snapshot, _this.injector);\n                    preActivation.traverse(_this.outletMap);\n                    return { appliedUrl: appliedUrl, snapshot: snapshot };\n                });\n                var /** @type {?} */ preactivationCheckGuards = rxjs_operator_mergeMap.mergeMap.call(preactivationTraverse$, function (_a) {\n                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;\n                    if (_this.navigationId !== id)\n                        return rxjs_observable_of.of(false);\n                    return rxjs_operator_map.map.call(preActivation.checkGuards(), function (shouldActivate) {\n                        return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };\n                    });\n                });\n                var /** @type {?} */ preactivationResolveData$ = rxjs_operator_mergeMap.mergeMap.call(preactivationCheckGuards, function (p) {\n                    if (_this.navigationId !== id)\n                        return rxjs_observable_of.of(false);\n                    if (p.shouldActivate) {\n                        return rxjs_operator_map.map.call(preActivation.resolveData(), function () { return p; });\n                    }\n                    else {\n                        return rxjs_observable_of.of(p);\n                    }\n                });\n                // create router state\n                // this operation has side effects => route state is being affected\n                var /** @type {?} */ routerState$ = rxjs_operator_map.map.call(preactivationResolveData$, function (_a) {\n                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;\n                    if (shouldActivate) {\n                        var /** @type {?} */ state = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);\n                        return { appliedUrl: appliedUrl, state: state, shouldActivate: shouldActivate };\n                    }\n                    else {\n                        return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };\n                    }\n                });\n                // applied the new router state\n                // this operation has side effects\n                var /** @type {?} */ navigationIsSuccessful;\n                var /** @type {?} */ storedState = _this.currentRouterState;\n                var /** @type {?} */ storedUrl = _this.currentUrlTree;\n                routerState$\n                    .forEach(function (_a) {\n                    var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;\n                    if (!shouldActivate || id !== _this.navigationId) {\n                        navigationIsSuccessful = false;\n                        return;\n                    }\n                    _this.currentUrlTree = appliedUrl;\n                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);\n                    _this.currentRouterState = state;\n                    if (!shouldPreventPushState) {\n                        var /** @type {?} */ path = _this.urlSerializer.serialize(_this.rawUrlTree);\n                        if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {\n                            _this.location.replaceState(path);\n                        }\n                        else {\n                            _this.location.go(path);\n                        }\n                    }\n                    new ActivateRoutes(_this.routeReuseStrategy, state, storedState)\n                        .activate(_this.outletMap);\n                    navigationIsSuccessful = true;\n                })\n                    .then(function () {\n                    _this.navigated = true;\n                    if (navigationIsSuccessful) {\n                        _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));\n                        resolvePromise(true);\n                    }\n                    else {\n                        _this.resetUrlToCurrentUrlTree();\n                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));\n                        resolvePromise(false);\n                    }\n                }, function (e) {\n                    if (e instanceof NavigationCancelingError) {\n                        _this.resetUrlToCurrentUrlTree();\n                        _this.navigated = true;\n                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));\n                        resolvePromise(false);\n                    }\n                    else {\n                        _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));\n                        try {\n                            resolvePromise(_this.errorHandler(e));\n                        }\n                        catch (ee) {\n                            rejectPromise(ee);\n                        }\n                    }\n                    _this.currentRouterState = storedState;\n                    _this.currentUrlTree = storedUrl;\n                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);\n                    _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));\n                });\n            });\n        };\n        /**\n         * @return {?}\n         */\n        Router.prototype.resetUrlToCurrentUrlTree = function () {\n            var /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n            this.location.replaceState(path);\n        };\n        return Router;\n    }());\n    var CanActivate = (function () {\n        /**\n         * @param {?} path\n         */\n        function CanActivate(path) {\n            this.path = path;\n        }\n        Object.defineProperty(CanActivate.prototype, \"route\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.path[this.path.length - 1]; },\n            enumerable: true,\n            configurable: true\n        });\n        return CanActivate;\n    }());\n    var CanDeactivate = (function () {\n        /**\n         * @param {?} component\n         * @param {?} route\n         */\n        function CanDeactivate(component, route) {\n            this.component = component;\n            this.route = route;\n        }\n        return CanDeactivate;\n    }());\n    var PreActivation = (function () {\n        /**\n         * @param {?} future\n         * @param {?} curr\n         * @param {?} injector\n         */\n        function PreActivation(future, curr, injector) {\n            this.future = future;\n            this.curr = curr;\n            this.injector = injector;\n            this.checks = [];\n        }\n        /**\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        PreActivation.prototype.traverse = function (parentOutletMap) {\n            var /** @type {?} */ futureRoot = this.future._root;\n            var /** @type {?} */ currRoot = this.curr ? this.curr._root : null;\n            this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);\n        };\n        /**\n         * @return {?}\n         */\n        PreActivation.prototype.checkGuards = function () {\n            var _this = this;\n            if (this.checks.length === 0)\n                return rxjs_observable_of.of(true);\n            var /** @type {?} */ checks$ = rxjs_observable_from.from(this.checks);\n            var /** @type {?} */ runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function (s) {\n                if (s instanceof CanActivate) {\n                    return andObservables(rxjs_observable_from.from([_this.runCanActivateChild(s.path), _this.runCanActivate(s.route)]));\n                }\n                else if (s instanceof CanDeactivate) {\n                    // workaround https://github.com/Microsoft/TypeScript/issues/7271\n                    var /** @type {?} */ s2 = (s);\n                    return _this.runCanDeactivate(s2.component, s2.route);\n                }\n                else {\n                    throw new Error('Cannot be reached');\n                }\n            });\n            return rxjs_operator_every.every.call(runningChecks$, function (result) { return result === true; });\n        };\n        /**\n         * @return {?}\n         */\n        PreActivation.prototype.resolveData = function () {\n            var _this = this;\n            if (this.checks.length === 0)\n                return rxjs_observable_of.of(null);\n            var /** @type {?} */ checks$ = rxjs_observable_from.from(this.checks);\n            var /** @type {?} */ runningChecks$ = rxjs_operator_concatMap.concatMap.call(checks$, function (s) {\n                if (s instanceof CanActivate) {\n                    return _this.runResolve(s.route);\n                }\n                else {\n                    return rxjs_observable_of.of(null);\n                }\n            });\n            return rxjs_operator_reduce.reduce.call(runningChecks$, function (_, __) { return _; });\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} outletMap\n         * @param {?} futurePath\n         * @return {?}\n         */\n        PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap, futurePath) {\n            var _this = this;\n            var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n            futureNode.children.forEach(function (c) {\n                _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));\n                delete prevChildren[c.value.outlet];\n            });\n            forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]); });\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} parentOutletMap\n         * @param {?} futurePath\n         * @return {?}\n         */\n        PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap, futurePath) {\n            var /** @type {?} */ future = futureNode.value;\n            var /** @type {?} */ curr = currNode ? currNode.value : null;\n            var /** @type {?} */ outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;\n            // reusing the node\n            if (curr && future._routeConfig === curr._routeConfig) {\n                if (!equalParamsAndUrlSegments(future, curr)) {\n                    this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));\n                }\n                else {\n                    // we need to set the data\n                    future.data = curr.data;\n                    future._resolvedData = curr._resolvedData;\n                }\n                // If we have a component, we need to go through an outlet.\n                if (future.component) {\n                    this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);\n                }\n                else {\n                    this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);\n                }\n            }\n            else {\n                if (curr) {\n                    this.deactiveRouteAndItsChildren(currNode, outlet);\n                }\n                this.checks.push(new CanActivate(futurePath));\n                // If we have a component, we need to go through an outlet.\n                if (future.component) {\n                    this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);\n                }\n                else {\n                    this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);\n                }\n            }\n        };\n        /**\n         * @param {?} route\n         * @param {?} outlet\n         * @return {?}\n         */\n        PreActivation.prototype.deactiveRouteAndItsChildren = function (route, outlet) {\n            var _this = this;\n            var /** @type {?} */ prevChildren = nodeChildrenAsMap(route);\n            var /** @type {?} */ r = route.value;\n            forEach(prevChildren, function (v, k) {\n                if (!r.component) {\n                    _this.deactiveRouteAndItsChildren(v, outlet);\n                }\n                else if (!!outlet) {\n                    _this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);\n                }\n                else {\n                    _this.deactiveRouteAndItsChildren(v, null);\n                }\n            });\n            if (!r.component) {\n                this.checks.push(new CanDeactivate(null, r));\n            }\n            else if (outlet && outlet.isActivated) {\n                this.checks.push(new CanDeactivate(outlet.component, r));\n            }\n            else {\n                this.checks.push(new CanDeactivate(null, r));\n            }\n        };\n        /**\n         * @param {?} future\n         * @return {?}\n         */\n        PreActivation.prototype.runCanActivate = function (future) {\n            var _this = this;\n            var /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;\n            if (!canActivate || canActivate.length === 0)\n                return rxjs_observable_of.of(true);\n            var /** @type {?} */ obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canActivate), function (c) {\n                var /** @type {?} */ guard = _this.getToken(c, future);\n                var /** @type {?} */ observable;\n                if (guard.canActivate) {\n                    observable = wrapIntoObservable(guard.canActivate(future, _this.future));\n                }\n                else {\n                    observable = wrapIntoObservable(guard(future, _this.future));\n                }\n                return rxjs_operator_first.first.call(observable);\n            });\n            return andObservables(obs);\n        };\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n        PreActivation.prototype.runCanActivateChild = function (path) {\n            var _this = this;\n            var /** @type {?} */ future = path[path.length - 1];\n            var /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)\n                .reverse()\n                .map(function (p) { return _this.extractCanActivateChild(p); })\n                .filter(function (_) { return _ !== null; });\n            return andObservables(rxjs_operator_map.map.call(rxjs_observable_from.from(canActivateChildGuards), function (d) {\n                var /** @type {?} */ obs = rxjs_operator_map.map.call(rxjs_observable_from.from(d.guards), function (c) {\n                    var /** @type {?} */ guard = _this.getToken(c, c.node);\n                    var /** @type {?} */ observable;\n                    if (guard.canActivateChild) {\n                        observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));\n                    }\n                    else {\n                        observable = wrapIntoObservable(guard(future, _this.future));\n                    }\n                    return rxjs_operator_first.first.call(observable);\n                });\n                return andObservables(obs);\n            }));\n        };\n        /**\n         * @param {?} p\n         * @return {?}\n         */\n        PreActivation.prototype.extractCanActivateChild = function (p) {\n            var /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;\n            if (!canActivateChild || canActivateChild.length === 0)\n                return null;\n            return { node: p, guards: canActivateChild };\n        };\n        /**\n         * @param {?} component\n         * @param {?} curr\n         * @return {?}\n         */\n        PreActivation.prototype.runCanDeactivate = function (component, curr) {\n            var _this = this;\n            var /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;\n            if (!canDeactivate || canDeactivate.length === 0)\n                return rxjs_observable_of.of(true);\n            var /** @type {?} */ canDeactivate$ = rxjs_operator_mergeMap.mergeMap.call(rxjs_observable_from.from(canDeactivate), function (c) {\n                var /** @type {?} */ guard = _this.getToken(c, curr);\n                var /** @type {?} */ observable;\n                if (guard.canDeactivate) {\n                    observable = wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));\n                }\n                else {\n                    observable = wrapIntoObservable(guard(component, curr, _this.curr));\n                }\n                return rxjs_operator_first.first.call(observable);\n            });\n            return rxjs_operator_every.every.call(canDeactivate$, function (result) { return result === true; });\n        };\n        /**\n         * @param {?} future\n         * @return {?}\n         */\n        PreActivation.prototype.runResolve = function (future) {\n            var /** @type {?} */ resolve = future._resolve;\n            return rxjs_operator_map.map.call(this.resolveNode(resolve, future), function (resolvedData) {\n                future._resolvedData = resolvedData;\n                future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);\n                return null;\n            });\n        };\n        /**\n         * @param {?} resolve\n         * @param {?} future\n         * @return {?}\n         */\n        PreActivation.prototype.resolveNode = function (resolve, future) {\n            var _this = this;\n            return waitForMap(resolve, function (k, v) {\n                var /** @type {?} */ resolver = _this.getToken(v, future);\n                return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) :\n                    wrapIntoObservable(resolver(future, _this.future));\n            });\n        };\n        /**\n         * @param {?} token\n         * @param {?} snapshot\n         * @return {?}\n         */\n        PreActivation.prototype.getToken = function (token, snapshot) {\n            var /** @type {?} */ config = closestLoadedConfig(snapshot);\n            var /** @type {?} */ injector = config ? config.injector : this.injector;\n            return injector.get(token);\n        };\n        return PreActivation;\n    }());\n    var ActivateRoutes = (function () {\n        /**\n         * @param {?} routeReuseStrategy\n         * @param {?} futureState\n         * @param {?} currState\n         */\n        function ActivateRoutes(routeReuseStrategy, futureState, currState) {\n            this.routeReuseStrategy = routeReuseStrategy;\n            this.futureState = futureState;\n            this.currState = currState;\n        }\n        /**\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.activate = function (parentOutletMap) {\n            var /** @type {?} */ futureRoot = this.futureState._root;\n            var /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\n            this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);\n            advanceActivatedRoute(this.futureState.root);\n            this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} outletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, outletMap) {\n            var _this = this;\n            var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n            futureNode.children.forEach(function (c) {\n                _this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);\n                delete prevChildren[c.value.outlet];\n            });\n            forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap); });\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} outletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {\n            var _this = this;\n            var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n            futureNode.children.forEach(function (c) { _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap); });\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentOutletMap) {\n            var /** @type {?} */ future = futureNode.value;\n            var /** @type {?} */ curr = currNode ? currNode.value : null;\n            // reusing the node\n            if (future === curr) {\n                // If we have a normal route, we need to go through an outlet.\n                if (future.component) {\n                    var /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n                    this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);\n                }\n                else {\n                    this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);\n                }\n            }\n            else {\n                if (curr) {\n                    this.deactiveRouteAndItsChildren(currNode, parentOutletMap);\n                }\n            }\n        };\n        /**\n         * @param {?} futureNode\n         * @param {?} currNode\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {\n            var /** @type {?} */ future = futureNode.value;\n            var /** @type {?} */ curr = currNode ? currNode.value : null;\n            // reusing the node\n            if (future === curr) {\n                // advance the route to push the parameters\n                advanceActivatedRoute(future);\n                // If we have a normal route, we need to go through an outlet.\n                if (future.component) {\n                    var /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n                    this.activateChildRoutes(futureNode, currNode, outlet.outletMap);\n                }\n                else {\n                    this.activateChildRoutes(futureNode, currNode, parentOutletMap);\n                }\n            }\n            else {\n                // if we have a normal route, we need to advance the route\n                // and place the component into the outlet. After that recurse.\n                if (future.component) {\n                    advanceActivatedRoute(future);\n                    var /** @type {?} */ outlet = getOutlet(parentOutletMap, futureNode.value);\n                    if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n                        var /** @type {?} */ stored = ((this.routeReuseStrategy.retrieve(future.snapshot)));\n                        this.routeReuseStrategy.store(future.snapshot, null);\n                        outlet.attach(stored.componentRef, stored.route.value);\n                        advanceActivatedRouteNodeAndItsChildren(stored.route);\n                    }\n                    else {\n                        var /** @type {?} */ outletMap = new RouterOutletMap();\n                        this.placeComponentIntoOutlet(outletMap, future, outlet);\n                        this.activateChildRoutes(futureNode, null, outletMap);\n                    }\n                }\n                else {\n                    advanceActivatedRoute(future);\n                    this.activateChildRoutes(futureNode, null, parentOutletMap);\n                }\n            }\n        };\n        /**\n         * @param {?} outletMap\n         * @param {?} future\n         * @param {?} outlet\n         * @return {?}\n         */\n        ActivateRoutes.prototype.placeComponentIntoOutlet = function (outletMap, future, outlet) {\n            var /** @type {?} */ resolved = ([{ provide: ActivatedRoute, useValue: future }, {\n                    provide: RouterOutletMap,\n                    useValue: outletMap\n                }]);\n            var /** @type {?} */ config = parentLoadedConfig(future.snapshot);\n            var /** @type {?} */ resolver = null;\n            var /** @type {?} */ injector = null;\n            if (config) {\n                injector = config.injectorFactory(outlet.locationInjector);\n                resolver = config.factoryResolver;\n                resolved.push({ provide: _angular_core.ComponentFactoryResolver, useValue: resolver });\n            }\n            else {\n                injector = outlet.locationInjector;\n                resolver = outlet.locationFactoryResolver;\n            }\n            outlet.activate(future, resolver, injector, _angular_core.ReflectiveInjector.resolve(resolved), outletMap);\n        };\n        /**\n         * @param {?} route\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.deactiveRouteAndItsChildren = function (route, parentOutletMap) {\n            if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n                this.detachAndStoreRouteSubtree(route, parentOutletMap);\n            }\n            else {\n                this.deactiveRouteAndOutlet(route, parentOutletMap);\n            }\n        };\n        /**\n         * @param {?} route\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentOutletMap) {\n            var /** @type {?} */ outlet = getOutlet(parentOutletMap, route.value);\n            var /** @type {?} */ componentRef = outlet.detach();\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route });\n        };\n        /**\n         * @param {?} route\n         * @param {?} parentOutletMap\n         * @return {?}\n         */\n        ActivateRoutes.prototype.deactiveRouteAndOutlet = function (route, parentOutletMap) {\n            var _this = this;\n            var /** @type {?} */ prevChildren = nodeChildrenAsMap(route);\n            var /** @type {?} */ outlet = null;\n            // getOutlet throws when cannot find the right outlet,\n            // which can happen if an outlet was in an NgIf and was removed\n            try {\n                outlet = getOutlet(parentOutletMap, route.value);\n            }\n            catch (e) {\n                return;\n            }\n            var /** @type {?} */ childOutletMap = outlet.outletMap;\n            forEach(prevChildren, function (v, k) {\n                if (route.value.component) {\n                    _this.deactiveRouteAndItsChildren(v, childOutletMap);\n                }\n                else {\n                    _this.deactiveRouteAndItsChildren(v, parentOutletMap);\n                }\n            });\n            if (outlet && outlet.isActivated) {\n                outlet.deactivate();\n            }\n        };\n        return ActivateRoutes;\n    }());\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function advanceActivatedRouteNodeAndItsChildren(node) {\n        advanceActivatedRoute(node.value);\n        node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n    }\n    /**\n     * @param {?} snapshot\n     * @return {?}\n     */\n    function parentLoadedConfig(snapshot) {\n        var /** @type {?} */ s = snapshot.parent;\n        while (s) {\n            var /** @type {?} */ c = s._routeConfig;\n            if (c && c._loadedConfig)\n                return c._loadedConfig;\n            if (c && c.component)\n                return null;\n            s = s.parent;\n        }\n        return null;\n    }\n    /**\n     * @param {?} snapshot\n     * @return {?}\n     */\n    function closestLoadedConfig(snapshot) {\n        if (!snapshot)\n            return null;\n        var /** @type {?} */ s = snapshot.parent;\n        while (s) {\n            var /** @type {?} */ c = s._routeConfig;\n            if (c && c._loadedConfig)\n                return c._loadedConfig;\n            s = s.parent;\n        }\n        return null;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function nodeChildrenAsMap(node) {\n        return node ? node.children.reduce(function (m, c) {\n            m[c.value.outlet] = c;\n            return m;\n        }, {}) : {};\n    }\n    /**\n     * @param {?} outletMap\n     * @param {?} route\n     * @return {?}\n     */\n    function getOutlet(outletMap, route) {\n        var /** @type {?} */ outlet = outletMap._outlets[route.outlet];\n        if (!outlet) {\n            var /** @type {?} */ componentName = ((route.component)).name;\n            if (route.outlet === PRIMARY_OUTLET) {\n                throw new Error(\"Cannot find primary outlet to load '\" + componentName + \"'\");\n            }\n            else {\n                throw new Error(\"Cannot find the outlet \" + route.outlet + \" to load '\" + componentName + \"'\");\n            }\n        }\n        return outlet;\n    }\n    /**\n     * @param {?} commands\n     * @return {?}\n     */\n    function validateCommands(commands) {\n        for (var /** @type {?} */ i = 0; i < commands.length; i++) {\n            var /** @type {?} */ cmd = commands[i];\n            if (cmd == null) {\n                throw new Error(\"The requested path contains \" + cmd + \" segment at index \" + i);\n            }\n        }\n    }\n\n    /**\n     * \\@whatItDoes Lets you link to specific parts of your app.\n     *\n     * \\@howToUse\n     *\n     * Consider the following route configuration:\n     * `[{ path: 'user/:name', component: UserCmp }]`\n     *\n     * When linking to this `user/:name` route, you can write:\n     * `<a routerLink='/user/bob'>link to user component</a>`\n     *\n     * \\@description\n     *\n     * The RouterLink directives let you link to specific parts of your app.\n     *\n     * When the link is static, you can use the directive as follows:\n     * `<a routerLink=\"/user/bob\">link to user component</a>`\n     *\n     * If you use dynamic values to generate the link, you can pass an array of path\n     * segments, followed by the params for each segment.\n     *\n     * For instance `['/team', teamId, 'user', userName, {details: true}]`\n     * means that we want to generate a link to `/team/11/user/bob;details=true`.\n     *\n     * Multiple static segments can be merged into one\n     * (e.g., `['/team/11/user', userName, {details: true}]`).\n     *\n     * The first segment name can be prepended with `/`, `./`, or `../`:\n     * * If the first segment begins with `/`, the router will look up the route from the root of the\n     *   app.\n     * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n     *   instead look in the children of the current activated route.\n     * * And if the first segment begins with `../`, the router will go up one level.\n     *\n     * You can set query params and fragment as follows:\n     *\n     * ```\n     * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n     *   link to user component\n     * </a>\n     * ```\n     * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n     *\n     * You can also tell the directive to preserve the current query params and fragment:\n     *\n     * ```\n     * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n     *   link to user component\n     * </a>\n     * ```\n     *\n     * The router link directive always treats the provided input as a delta to the current url.\n     *\n     * For instance, if the current url is `/user/(box//aux:team)`.\n     *\n     * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n     * `/user/(jim//aux:team)`.\n     *\n     * \\@selector ':not(a)[routerLink]'\n     * \\@ngModule RouterModule\n     *\n     * See {\\@link Router.createUrlTree} for more information.\n     *\n     * \\@stable\n     */\n    var RouterLink = (function () {\n        /**\n         * @param {?} router\n         * @param {?} route\n         */\n        function RouterLink(router, route) {\n            this.router = router;\n            this.route = route;\n            this.commands = [];\n        }\n        Object.defineProperty(RouterLink.prototype, \"routerLink\", {\n            /**\n             * @param {?} commands\n             * @return {?}\n             */\n            set: function (commands) {\n                if (commands != null) {\n                    this.commands = Array.isArray(commands) ? commands : [commands];\n                }\n                else {\n                    this.commands = [];\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        RouterLink.prototype.onClick = function () {\n            var /** @type {?} */ extras = {\n                skipLocationChange: attrBoolValue(this.skipLocationChange),\n                replaceUrl: attrBoolValue(this.replaceUrl),\n            };\n            this.router.navigateByUrl(this.urlTree, extras);\n            return true;\n        };\n        Object.defineProperty(RouterLink.prototype, \"urlTree\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this.router.createUrlTree(this.commands, {\n                    relativeTo: this.route,\n                    queryParams: this.queryParams,\n                    fragment: this.fragment,\n                    preserveQueryParams: attrBoolValue(this.preserveQueryParams),\n                    preserveFragment: attrBoolValue(this.preserveFragment),\n                });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        RouterLink.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: ':not(a)[routerLink]' },] },\n        ];\n        /** @nocollapse */\n        RouterLink.ctorParameters = function () { return [\n            { type: Router, },\n            { type: ActivatedRoute, },\n        ]; };\n        RouterLink.propDecorators = {\n            'queryParams': [{ type: _angular_core.Input },],\n            'fragment': [{ type: _angular_core.Input },],\n            'preserveQueryParams': [{ type: _angular_core.Input },],\n            'preserveFragment': [{ type: _angular_core.Input },],\n            'skipLocationChange': [{ type: _angular_core.Input },],\n            'replaceUrl': [{ type: _angular_core.Input },],\n            'routerLink': [{ type: _angular_core.Input },],\n            'onClick': [{ type: _angular_core.HostListener, args: ['click',] },],\n        };\n        return RouterLink;\n    }());\n    /**\n     * \\@whatItDoes Lets you link to specific parts of your app.\n     *\n     * See {\\@link RouterLink} for more information.\n     *\n     * \\@selector 'a[routerLink]'\n     * \\@ngModule RouterModule\n     *\n     * \\@stable\n     */\n    var RouterLinkWithHref = (function () {\n        /**\n         * @param {?} router\n         * @param {?} route\n         * @param {?} locationStrategy\n         */\n        function RouterLinkWithHref(router, route, locationStrategy) {\n            var _this = this;\n            this.router = router;\n            this.route = route;\n            this.locationStrategy = locationStrategy;\n            this.commands = [];\n            this.subscription = router.events.subscribe(function (s) {\n                if (s instanceof NavigationEnd) {\n                    _this.updateTargetUrlAndHref();\n                }\n            });\n        }\n        Object.defineProperty(RouterLinkWithHref.prototype, \"routerLink\", {\n            /**\n             * @param {?} commands\n             * @return {?}\n             */\n            set: function (commands) {\n                if (commands != null) {\n                    this.commands = Array.isArray(commands) ? commands : [commands];\n                }\n                else {\n                    this.commands = [];\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };\n        /**\n         * @return {?}\n         */\n        RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n        /**\n         * @param {?} button\n         * @param {?} ctrlKey\n         * @param {?} metaKey\n         * @return {?}\n         */\n        RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey) {\n            if (button !== 0 || ctrlKey || metaKey) {\n                return true;\n            }\n            if (typeof this.target === 'string' && this.target != '_self') {\n                return true;\n            }\n            var /** @type {?} */ extras = {\n                skipLocationChange: attrBoolValue(this.skipLocationChange),\n                replaceUrl: attrBoolValue(this.replaceUrl),\n            };\n            this.router.navigateByUrl(this.urlTree, extras);\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {\n            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n        };\n        Object.defineProperty(RouterLinkWithHref.prototype, \"urlTree\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this.router.createUrlTree(this.commands, {\n                    relativeTo: this.route,\n                    queryParams: this.queryParams,\n                    fragment: this.fragment,\n                    preserveQueryParams: attrBoolValue(this.preserveQueryParams),\n                    preserveFragment: attrBoolValue(this.preserveFragment),\n                });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        RouterLinkWithHref.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'a[routerLink]' },] },\n        ];\n        /** @nocollapse */\n        RouterLinkWithHref.ctorParameters = function () { return [\n            { type: Router, },\n            { type: ActivatedRoute, },\n            { type: _angular_common.LocationStrategy, },\n        ]; };\n        RouterLinkWithHref.propDecorators = {\n            'target': [{ type: _angular_core.HostBinding, args: ['attr.target',] }, { type: _angular_core.Input },],\n            'queryParams': [{ type: _angular_core.Input },],\n            'fragment': [{ type: _angular_core.Input },],\n            'preserveQueryParams': [{ type: _angular_core.Input },],\n            'preserveFragment': [{ type: _angular_core.Input },],\n            'skipLocationChange': [{ type: _angular_core.Input },],\n            'replaceUrl': [{ type: _angular_core.Input },],\n            'href': [{ type: _angular_core.HostBinding },],\n            'routerLink': [{ type: _angular_core.Input },],\n            'onClick': [{ type: _angular_core.HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey'],] },],\n        };\n        return RouterLinkWithHref;\n    }());\n    /**\n     * @param {?} s\n     * @return {?}\n     */\n    function attrBoolValue(s) {\n        return s === '' || !!s;\n    }\n\n    /**\n     * \\@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n     * ```\n     *\n     * \\@description\n     *\n     * The RouterLinkActive directive lets you add a CSS class to an element when the link's route\n     * becomes active.\n     *\n     * Consider the following example:\n     *\n     * ```\n     * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n     * ```\n     *\n     * When the url is either '/user' or '/user/bob', the active-link class will\n     * be added to the `a` tag. If the url changes, the class will be removed.\n     *\n     * You can set more than one class, as follows:\n     *\n     * ```\n     * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n     * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n     * ```\n     *\n     * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n     * only when the url matches the link exactly.\n     *\n     * ```\n     * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n     * true}\">Bob</a>\n     * ```\n     *\n     * You can assign the RouterLinkActive instance to a template variable and directly check\n     * the `isActive` status.\n     * ```\n     * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n     *   Bob {{ rla.isActive ? '(already open)' : ''}}\n     * </a>\n     * ```\n     *\n     * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n     *\n     * ```\n     * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n     *   <a routerLink=\"/user/jim\">Jim</a>\n     *   <a routerLink=\"/user/bob\">Bob</a>\n     * </div>\n     * ```\n     *\n     * This will set the active-link class on the div tag if the url is either '/user/jim' or\n     * '/user/bob'.\n     *\n     * \\@selector ':not(a)[routerLink]'\n     * \\@ngModule RouterModule\n     *\n     * \\@stable\n     */\n    var RouterLinkActive = (function () {\n        /**\n         * @param {?} router\n         * @param {?} element\n         * @param {?} renderer\n         * @param {?} cdr\n         */\n        function RouterLinkActive(router, element, renderer, cdr) {\n            var _this = this;\n            this.router = router;\n            this.element = element;\n            this.renderer = renderer;\n            this.cdr = cdr;\n            this.classes = [];\n            this.active = false;\n            this.routerLinkActiveOptions = { exact: false };\n            this.subscription = router.events.subscribe(function (s) {\n                if (s instanceof NavigationEnd) {\n                    _this.update();\n                }\n            });\n        }\n        Object.defineProperty(RouterLinkActive.prototype, \"isActive\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.active; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        RouterLinkActive.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this.links.changes.subscribe(function (_) { return _this.update(); });\n            this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });\n            this.update();\n        };\n        Object.defineProperty(RouterLinkActive.prototype, \"routerLinkActive\", {\n            /**\n             * @param {?} data\n             * @return {?}\n             */\n            set: function (data) {\n                var /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');\n                this.classes = classes.filter(function (c) { return !!c; });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };\n        /**\n         * @return {?}\n         */\n        RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n        /**\n         * @return {?}\n         */\n        RouterLinkActive.prototype.update = function () {\n            var _this = this;\n            if (!this.links || !this.linksWithHrefs || !this.router.navigated)\n                return;\n            var /** @type {?} */ hasActiveLinks = this.hasActiveLinks();\n            // react only when status has changed to prevent unnecessary dom updates\n            if (this.active !== hasActiveLinks) {\n                this.active = hasActiveLinks;\n                this.classes.forEach(function (c) { return _this.renderer.setElementClass(_this.element.nativeElement, c, hasActiveLinks); });\n                this.cdr.detectChanges();\n            }\n        };\n        /**\n         * @param {?} router\n         * @return {?}\n         */\n        RouterLinkActive.prototype.isLinkActive = function (router) {\n            var _this = this;\n            return function (link) {\n                return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);\n            };\n        };\n        /**\n         * @return {?}\n         */\n        RouterLinkActive.prototype.hasActiveLinks = function () {\n            return this.links.some(this.isLinkActive(this.router)) ||\n                this.linksWithHrefs.some(this.isLinkActive(this.router));\n        };\n        RouterLinkActive.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[routerLinkActive]',\n                        exportAs: 'routerLinkActive',\n                    },] },\n        ];\n        /** @nocollapse */\n        RouterLinkActive.ctorParameters = function () { return [\n            { type: Router, },\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ChangeDetectorRef, },\n        ]; };\n        RouterLinkActive.propDecorators = {\n            'links': [{ type: _angular_core.ContentChildren, args: [RouterLink, { descendants: true },] },],\n            'linksWithHrefs': [{ type: _angular_core.ContentChildren, args: [RouterLinkWithHref, { descendants: true },] },],\n            'routerLinkActiveOptions': [{ type: _angular_core.Input },],\n            'routerLinkActive': [{ type: _angular_core.Input },],\n        };\n        return RouterLinkActive;\n    }());\n\n    /**\n     * \\@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router\n     * state.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * <router-outlet></router-outlet>\n     * <router-outlet name='left'></router-outlet>\n     * <router-outlet name='right'></router-outlet>\n     * ```\n     *\n     * A router outlet will emit an activate event any time a new component is being instantiated,\n     * and a deactivate event when it is being destroyed.\n     *\n     * ```\n     * <router-outlet\n     *   (activate)='onActivate($event)'\n     *   (deactivate)='onDeactivate($event)'></router-outlet>\n     * ```\n     * \\@selector 'a[routerLink]'\n     * \\@ngModule RouterModule\n     *\n     * \\@stable\n     */\n    var RouterOutlet = (function () {\n        /**\n         * @param {?} parentOutletMap\n         * @param {?} location\n         * @param {?} resolver\n         * @param {?} name\n         */\n        function RouterOutlet(parentOutletMap, location, resolver, name) {\n            this.parentOutletMap = parentOutletMap;\n            this.location = location;\n            this.resolver = resolver;\n            this.name = name;\n            this.activateEvents = new _angular_core.EventEmitter();\n            this.deactivateEvents = new _angular_core.EventEmitter();\n            parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);\n        }\n        /**\n         * @return {?}\n         */\n        RouterOutlet.prototype.ngOnDestroy = function () { this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET); };\n        Object.defineProperty(RouterOutlet.prototype, \"locationInjector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.location.injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RouterOutlet.prototype, \"locationFactoryResolver\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.resolver; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RouterOutlet.prototype, \"isActivated\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return !!this.activated; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RouterOutlet.prototype, \"component\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                if (!this.activated)\n                    throw new Error('Outlet is not activated');\n                return this.activated.instance;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RouterOutlet.prototype, \"activatedRoute\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                if (!this.activated)\n                    throw new Error('Outlet is not activated');\n                return this._activatedRoute;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        RouterOutlet.prototype.detach = function () {\n            if (!this.activated)\n                throw new Error('Outlet is not activated');\n            this.location.detach();\n            var /** @type {?} */ r = this.activated;\n            this.activated = null;\n            this._activatedRoute = null;\n            return r;\n        };\n        /**\n         * @param {?} ref\n         * @param {?} activatedRoute\n         * @return {?}\n         */\n        RouterOutlet.prototype.attach = function (ref, activatedRoute) {\n            this.activated = ref;\n            this._activatedRoute = activatedRoute;\n            this.location.insert(ref.hostView);\n        };\n        /**\n         * @return {?}\n         */\n        RouterOutlet.prototype.deactivate = function () {\n            if (this.activated) {\n                var /** @type {?} */ c = this.component;\n                this.activated.destroy();\n                this.activated = null;\n                this._activatedRoute = null;\n                this.deactivateEvents.emit(c);\n            }\n        };\n        /**\n         * @param {?} activatedRoute\n         * @param {?} resolver\n         * @param {?} injector\n         * @param {?} providers\n         * @param {?} outletMap\n         * @return {?}\n         */\n        RouterOutlet.prototype.activate = function (activatedRoute, resolver, injector, providers, outletMap) {\n            if (this.isActivated) {\n                throw new Error('Cannot activate an already activated outlet');\n            }\n            this.outletMap = outletMap;\n            this._activatedRoute = activatedRoute;\n            var /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\n            var /** @type {?} */ component = (snapshot._routeConfig.component);\n            var /** @type {?} */ factory = resolver.resolveComponentFactory(component);\n            var /** @type {?} */ inj = _angular_core.ReflectiveInjector.fromResolvedProviders(providers, injector);\n            this.activated = this.location.createComponent(factory, this.location.length, inj, []);\n            this.activated.changeDetectorRef.detectChanges();\n            this.activateEvents.emit(this.activated.instance);\n        };\n        RouterOutlet.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'router-outlet' },] },\n        ];\n        /** @nocollapse */\n        RouterOutlet.ctorParameters = function () { return [\n            { type: RouterOutletMap, },\n            { type: _angular_core.ViewContainerRef, },\n            { type: _angular_core.ComponentFactoryResolver, },\n            { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['name',] },] },\n        ]; };\n        RouterOutlet.propDecorators = {\n            'activateEvents': [{ type: _angular_core.Output, args: ['activate',] },],\n            'deactivateEvents': [{ type: _angular_core.Output, args: ['deactivate',] },],\n        };\n        return RouterOutlet;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * \\@whatItDoes Provides a way to customize when activated routes get reused.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var RouteReuseStrategy = (function () {\n        function RouteReuseStrategy() {\n        }\n        /**\n         * Determines if this route (and its subtree) should be detached to be reused later\n         * @abstract\n         * @param {?} route\n         * @return {?}\n         */\n        RouteReuseStrategy.prototype.shouldDetach = function (route) { };\n        /**\n         * Stores the detached route\n         * @abstract\n         * @param {?} route\n         * @param {?} handle\n         * @return {?}\n         */\n        RouteReuseStrategy.prototype.store = function (route, handle) { };\n        /**\n         * Determines if this route (and its subtree) should be reattached\n         * @abstract\n         * @param {?} route\n         * @return {?}\n         */\n        RouteReuseStrategy.prototype.shouldAttach = function (route) { };\n        /**\n         * Retrieves the previously stored route\n         * @abstract\n         * @param {?} route\n         * @return {?}\n         */\n        RouteReuseStrategy.prototype.retrieve = function (route) { };\n        /**\n         * Determines if a route should be reused\n         * @abstract\n         * @param {?} future\n         * @param {?} curr\n         * @return {?}\n         */\n        RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };\n        return RouteReuseStrategy;\n    }());\n\n    var /** @type {?} */ getDOM = _angular_platformBrowser.__platform_browser_private__.getDOM;\n\n    /**\n     * \\@whatItDoes Provides a preloading strategy.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var PreloadingStrategy = (function () {\n        function PreloadingStrategy() {\n        }\n        /**\n         * @abstract\n         * @param {?} route\n         * @param {?} fn\n         * @return {?}\n         */\n        PreloadingStrategy.prototype.preload = function (route, fn) { };\n        return PreloadingStrategy;\n    }());\n    /**\n     * \\@whatItDoes Provides a preloading strategy that preloads all modules as quicky as possible.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n     * ```\n     *\n     * \\@experimental\n     */\n    var PreloadAllModules = (function () {\n        function PreloadAllModules() {\n        }\n        /**\n         * @param {?} route\n         * @param {?} fn\n         * @return {?}\n         */\n        PreloadAllModules.prototype.preload = function (route, fn) {\n            return rxjs_operator_catch._catch.call(fn(), function () { return rxjs_observable_of.of(null); });\n        };\n        return PreloadAllModules;\n    }());\n    /**\n     * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n     *\n     * \\@description\n     *\n     * This strategy is enabled by default.\n     *\n     * \\@experimental\n     */\n    var NoPreloading = (function () {\n        function NoPreloading() {\n        }\n        /**\n         * @param {?} route\n         * @param {?} fn\n         * @return {?}\n         */\n        NoPreloading.prototype.preload = function (route, fn) { return rxjs_observable_of.of(null); };\n        return NoPreloading;\n    }());\n    /**\n     * The preloader optimistically loads all router configurations to\n     * make navigations into lazily-loaded sections of the application faster.\n     *\n     * The preloader runs in the background. When the router bootstraps, the preloader\n     * starts listening to all navigation events. After every such event, the preloader\n     * will check if any configurations can be loaded lazily.\n     *\n     * If a route is protected by `canLoad` guards, the preloaded will not load it.\n     *\n     * \\@stable\n     */\n    var RouterPreloader = (function () {\n        /**\n         * @param {?} router\n         * @param {?} moduleLoader\n         * @param {?} compiler\n         * @param {?} injector\n         * @param {?} preloadingStrategy\n         */\n        function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {\n            this.router = router;\n            this.injector = injector;\n            this.preloadingStrategy = preloadingStrategy;\n            this.loader = new RouterConfigLoader(moduleLoader, compiler);\n        }\n        ;\n        /**\n         * @return {?}\n         */\n        RouterPreloader.prototype.setUpPreloading = function () {\n            var _this = this;\n            var /** @type {?} */ navigations = rxjs_operator_filter.filter.call(this.router.events, function (e) { return e instanceof NavigationEnd; });\n            this.subscription = rxjs_operator_concatMap.concatMap.call(navigations, function () { return _this.preload(); }).subscribe(function (v) { });\n        };\n        /**\n         * @return {?}\n         */\n        RouterPreloader.prototype.preload = function () { return this.processRoutes(this.injector, this.router.config); };\n        /**\n         * @return {?}\n         */\n        RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n        /**\n         * @param {?} injector\n         * @param {?} routes\n         * @return {?}\n         */\n        RouterPreloader.prototype.processRoutes = function (injector, routes) {\n            var /** @type {?} */ res = [];\n            for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n                var c = routes_1[_i];\n                // we already have the config loaded, just recurce\n                if (c.loadChildren && !c.canLoad && ((c))._loadedConfig) {\n                    var /** @type {?} */ childConfig = ((c))._loadedConfig;\n                    res.push(this.processRoutes(childConfig.injector, childConfig.routes));\n                }\n                else if (c.loadChildren && !c.canLoad) {\n                    res.push(this.preloadConfig(injector, c));\n                }\n                else if (c.children) {\n                    res.push(this.processRoutes(injector, c.children));\n                }\n            }\n            return rxjs_operator_mergeAll.mergeAll.call(rxjs_observable_from.from(res));\n        };\n        /**\n         * @param {?} injector\n         * @param {?} route\n         * @return {?}\n         */\n        RouterPreloader.prototype.preloadConfig = function (injector, route) {\n            var _this = this;\n            return this.preloadingStrategy.preload(route, function () {\n                var /** @type {?} */ loaded = _this.loader.load(injector, route.loadChildren);\n                return rxjs_operator_mergeMap.mergeMap.call(loaded, function (config) {\n                    var /** @type {?} */ c = route;\n                    c._loadedConfig = config;\n                    return _this.processRoutes(config.injector, config.routes);\n                });\n            });\n        };\n        RouterPreloader.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        RouterPreloader.ctorParameters = function () { return [\n            { type: Router, },\n            { type: _angular_core.NgModuleFactoryLoader, },\n            { type: _angular_core.Compiler, },\n            { type: _angular_core.Injector, },\n            { type: PreloadingStrategy, },\n        ]; };\n        return RouterPreloader;\n    }());\n\n    /**\n     * @whatItDoes Contains a list of directives\n     * @stable\n     */\n    var /** @type {?} */ ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];\n    /**\n     * @whatItDoes Is used in DI to configure the router.\n     * @stable\n     */\n    var /** @type {?} */ ROUTER_CONFIGURATION = new _angular_core.OpaqueToken('ROUTER_CONFIGURATION');\n    /**\n     * @docsNotRequired\n     */\n    var /** @type {?} */ ROUTER_FORROOT_GUARD = new _angular_core.OpaqueToken('ROUTER_FORROOT_GUARD');\n    var /** @type {?} */ ROUTER_PROVIDERS = [\n        _angular_common.Location,\n        { provide: UrlSerializer, useClass: DefaultUrlSerializer },\n        {\n            provide: Router,\n            useFactory: setupRouter,\n            deps: [\n                _angular_core.ApplicationRef, UrlSerializer, RouterOutletMap, _angular_common.Location, _angular_core.Injector, _angular_core.NgModuleFactoryLoader,\n                _angular_core.Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new _angular_core.Optional()],\n                [RouteReuseStrategy, new _angular_core.Optional()]\n            ]\n        },\n        RouterOutletMap,\n        { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n        { provide: _angular_core.NgModuleFactoryLoader, useClass: _angular_core.SystemJsNgModuleLoader },\n        RouterPreloader,\n        NoPreloading,\n        PreloadAllModules,\n        { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },\n    ];\n    /**\n     * @return {?}\n     */\n    function routerNgProbeToken() {\n        return new _angular_core.NgProbeToken('Router', Router);\n    }\n    /**\n     * \\@whatItDoes Adds router directives and providers.\n     *\n     * \\@howToUse\n     *\n     * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n     * Since the router deals with a global shared resource--location, we cannot have\n     * more than one router service active.\n     *\n     * That is why there are two ways to create the module: `RouterModule.forRoot` and\n     * `RouterModule.forChild`.\n     *\n     * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n     *   service itself.\n     * * `forChild` creates a module that contains all the directives and the given routes, but does not\n     *   include the router service.\n     *\n     * When registered at the root, the module should be used as follows\n     *\n     * ```\n     * \\@NgModule({\n     *   imports: [RouterModule.forRoot(ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * For submodules and lazy loaded submodules the module should be used as follows:\n     *\n     * ```\n     * \\@NgModule({\n     *   imports: [RouterModule.forChild(ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * \\@description\n     *\n     * Managing state transitions is one of the hardest parts of building applications. This is\n     * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n     * In addition, we often want to split applications into multiple bundles and load them on demand.\n     * Doing this transparently is not trivial.\n     *\n     * The Angular 2 router solves these problems. Using the router, you can declaratively specify\n     * application states, manage state transitions while taking care of the URL, and load bundles on\n     * demand.\n     *\n     * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n     * overview of how the router should be used.\n     *\n     * \\@stable\n     */\n    var RouterModule = (function () {\n        /**\n         * @param {?} guard\n         */\n        function RouterModule(guard) {\n        }\n        /**\n         * Creates a module with all the router providers and directives. It also optionally sets up an\n         * application listener to perform an initial navigation.\n         *\n         * Options:\n         * * `enableTracing` makes the router log all its internal events to the console.\n         * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n         * API.\n         * * `initialNavigation` disables the initial navigation.\n         * * `errorHandler` provides a custom error handler.\n         * @param {?} routes\n         * @param {?=} config\n         * @return {?}\n         */\n        RouterModule.forRoot = function (routes, config) {\n            return {\n                ngModule: RouterModule,\n                providers: [\n                    ROUTER_PROVIDERS,\n                    provideRoutes(routes),\n                    {\n                        provide: ROUTER_FORROOT_GUARD,\n                        useFactory: provideForRootGuard,\n                        deps: [[Router, new _angular_core.Optional(), new _angular_core.SkipSelf()]]\n                    },\n                    { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n                    {\n                        provide: _angular_common.LocationStrategy,\n                        useFactory: provideLocationStrategy,\n                        deps: [\n                            _angular_common.PlatformLocation, [new _angular_core.Inject(_angular_common.APP_BASE_HREF), new _angular_core.Optional()], ROUTER_CONFIGURATION\n                        ]\n                    },\n                    {\n                        provide: PreloadingStrategy,\n                        useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                            NoPreloading\n                    },\n                    { provide: _angular_core.NgProbeToken, multi: true, useFactory: routerNgProbeToken },\n                    provideRouterInitializer(),\n                ],\n            };\n        };\n        /**\n         * Creates a module with all the router directives and a provider registering routes.\n         * @param {?} routes\n         * @return {?}\n         */\n        RouterModule.forChild = function (routes) {\n            return { ngModule: RouterModule, providers: [provideRoutes(routes)] };\n        };\n        RouterModule.decorators = [\n            { type: _angular_core.NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },\n        ];\n        /** @nocollapse */\n        RouterModule.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ROUTER_FORROOT_GUARD,] },] },\n        ]; };\n        return RouterModule;\n    }());\n    /**\n     * @param {?} platformLocationStrategy\n     * @param {?} baseHref\n     * @param {?=} options\n     * @return {?}\n     */\n    function provideLocationStrategy(platformLocationStrategy, baseHref, options) {\n        if (options === void 0) { options = {}; }\n        return options.useHash ? new _angular_common.HashLocationStrategy(platformLocationStrategy, baseHref) :\n            new _angular_common.PathLocationStrategy(platformLocationStrategy, baseHref);\n    }\n    /**\n     * @param {?} router\n     * @return {?}\n     */\n    function provideForRootGuard(router) {\n        if (router) {\n            throw new Error(\"RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.\");\n        }\n        return 'guarded';\n    }\n    /**\n     * \\@whatItDoes Registers routes.\n     *\n     * \\@howToUse\n     *\n     * ```\n     * \\@NgModule({\n     *   imports: [RouterModule.forChild(ROUTES)],\n     *   providers: [provideRoutes(EXTRA_ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * \\@stable\n     * @param {?} routes\n     * @return {?}\n     */\n    function provideRoutes(routes) {\n        return [\n            { provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },\n            { provide: ROUTES, multi: true, useValue: routes },\n        ];\n    }\n    /**\n     * @param {?} ref\n     * @param {?} urlSerializer\n     * @param {?} outletMap\n     * @param {?} location\n     * @param {?} injector\n     * @param {?} loader\n     * @param {?} compiler\n     * @param {?} config\n     * @param {?=} opts\n     * @param {?=} urlHandlingStrategy\n     * @param {?=} routeReuseStrategy\n     * @return {?}\n     */\n    function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {\n        if (opts === void 0) { opts = {}; }\n        var /** @type {?} */ router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));\n        if (urlHandlingStrategy) {\n            router.urlHandlingStrategy = urlHandlingStrategy;\n        }\n        if (routeReuseStrategy) {\n            router.routeReuseStrategy = routeReuseStrategy;\n        }\n        if (opts.errorHandler) {\n            router.errorHandler = opts.errorHandler;\n        }\n        if (opts.enableTracing) {\n            var /** @type {?} */ dom_1 = getDOM();\n            router.events.subscribe(function (e) {\n                dom_1.logGroup(\"Router Event: \" + ((e.constructor)).name);\n                dom_1.log(e.toString());\n                dom_1.log(e);\n                dom_1.logGroupEnd();\n            });\n        }\n        return router;\n    }\n    /**\n     * @param {?} router\n     * @return {?}\n     */\n    function rootRoute(router) {\n        return router.routerState.root;\n    }\n    /**\n     * @param {?} router\n     * @param {?} ref\n     * @param {?} preloader\n     * @param {?} opts\n     * @return {?}\n     */\n    function initialRouterNavigation(router, ref, preloader, opts) {\n        return function (bootstrappedComponentRef) {\n            if (bootstrappedComponentRef !== ref.components[0]) {\n                return;\n            }\n            router.resetRootComponentType(ref.componentTypes[0]);\n            preloader.setUpPreloading();\n            if (opts.initialNavigation === false) {\n                router.setUpLocationChangeListener();\n            }\n            else {\n                router.initialNavigation();\n            }\n        };\n    }\n    /**\n     * A token for the router initializer that will be called after the app is bootstrapped.\n     *\n     * @experimental\n     */\n    var /** @type {?} */ ROUTER_INITIALIZER = new _angular_core.OpaqueToken('Router Initializer');\n    /**\n     * @return {?}\n     */\n    function provideRouterInitializer() {\n        return [\n            {\n                provide: ROUTER_INITIALIZER,\n                useFactory: initialRouterNavigation,\n                deps: [Router, _angular_core.ApplicationRef, RouterPreloader, ROUTER_CONFIGURATION]\n            },\n            { provide: _angular_core.APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\n        ];\n    }\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */ VERSION = new _angular_core.Version('3.4.4');\n\n    var /** @type {?} */ __router_private__ = {\n        ROUTER_PROVIDERS: ROUTER_PROVIDERS,\n        ROUTES: ROUTES,\n        flatten: flatten,\n    };\n\n    exports.RouterLink = RouterLink;\n    exports.RouterLinkWithHref = RouterLinkWithHref;\n    exports.RouterLinkActive = RouterLinkActive;\n    exports.RouterOutlet = RouterOutlet;\n    exports.RouteReuseStrategy = RouteReuseStrategy;\n    exports.NavigationCancel = NavigationCancel;\n    exports.NavigationEnd = NavigationEnd;\n    exports.NavigationError = NavigationError;\n    exports.NavigationStart = NavigationStart;\n    exports.Router = Router;\n    exports.RoutesRecognized = RoutesRecognized;\n    exports.ROUTER_CONFIGURATION = ROUTER_CONFIGURATION;\n    exports.ROUTER_INITIALIZER = ROUTER_INITIALIZER;\n    exports.RouterModule = RouterModule;\n    exports.provideRoutes = provideRoutes;\n    exports.RouterOutletMap = RouterOutletMap;\n    exports.NoPreloading = NoPreloading;\n    exports.PreloadAllModules = PreloadAllModules;\n    exports.PreloadingStrategy = PreloadingStrategy;\n    exports.RouterPreloader = RouterPreloader;\n    exports.ActivatedRoute = ActivatedRoute;\n    exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;\n    exports.RouterState = RouterState;\n    exports.RouterStateSnapshot = RouterStateSnapshot;\n    exports.PRIMARY_OUTLET = PRIMARY_OUTLET;\n    exports.UrlHandlingStrategy = UrlHandlingStrategy;\n    exports.DefaultUrlSerializer = DefaultUrlSerializer;\n    exports.UrlSegment = UrlSegment;\n    exports.UrlSegmentGroup = UrlSegmentGroup;\n    exports.UrlSerializer = UrlSerializer;\n    exports.UrlTree = UrlTree;\n    exports.VERSION = VERSION;\n    exports.__router_private__ = __router_private__;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/router/bundles/router.umd.js\n// module id = 42\n// module chunks = 0","import { Component, trigger, state, style, transition, animate, keyframes } from '@angular/core';\r\n\r\n@Component({\r\n    moduleId: module.id.toString(),\r\n    template: require('./welcome.component.html'),\r\n    styles: [require('./welcome.component.css')],\r\n    // animations: [\r\n    //     trigger('myTrigger', [\r\n    //         state('small', style({\r\n    //             transform: 'scale(1)'\r\n    //         })),\r\n    //         state('large', style({\r\n    //             transform: 'scale(1.4)'\r\n    //         })),,\r\n    //         state('extra-large', style({\r\n    //             transform: 'scale(2)'\r\n    //         })),\r\n    //         state('fadeIn', style({\r\n    //             opacity: '1',\r\n    //             transform: 'scale(1.2)'\r\n    //         })),\r\n    //         transition('void => *', [\r\n    //             animate(500, keyframes([\r\n    //                 style({opacity: 0, transform: 'translateY(-30px)', offset: 0}),\r\n    //                 style({opacity: 1, transform: 'translateY(5px) scale(1.2)', offset: 0.3}),\r\n    //                 style({opacity: 1, transform: 'translateY(0) scale(1.2)', offset: 1}),\r\n    //             ]))\r\n    //         ])\r\n    //     ])\r\n    // ]\r\n})\r\nexport class WelcomeComponent {\r\n    pageTitle: string = \"Bienvenue dans l'univers de Dragon Ball et Dragon Ball Z\";\r\n    // state: string = 'fadeIn';\r\n    // items: any[] = ['item1', 'item2', 'item3'];\r\n\r\n    // toggleState(): void {\r\n    //     // this.state = (this.state === 'small' ? 'large' : 'small');\r\n    //     this.items.push('another item');\r\n    //     this.state = \"fadeIn\";\r\n    // }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/welcome/welcome.component.ts","module.exports = \"{{pageTitle}} \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/welcome/welcome.component.html\n// module id = 74\n// module chunks = 0","module.exports = \"ul {\\r\\n    list-style-type: none;\\r\\n    margin: 30px 30px 0 0;\\r\\n    padding: 0;\\r\\n}\\r\\n\\r\\nli {\\r\\n    padding: 15px;\\r\\n    width: 100%;\\r\\n    background: #f1f1f1;\\r\\n    margin-bottom: 2px;\\r\\n    font-weight: bold;\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/welcome/welcome.component.css\n// module id = 75\n// module chunks = 0","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CategoryComponent } from './category.component';\r\nimport { CategoryRoutingModule } from './category-routing.module';\r\nimport { CharacterModule } from '../characters/character.module';\r\nimport { CategoryGuard } from './category-guard.service';\r\n\r\n@NgModule({\r\n    imports: [ \r\n        CommonModule,\r\n        CategoryRoutingModule,\r\n        CharacterModule\r\n    ],\r\n    declarations: [\r\n        CategoryComponent\r\n    ],\r\n    providers: [\r\n        CategoryGuard\r\n    ]\r\n})\r\nexport class CategoryModule {\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/categories/category.module.ts","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    moduleId: module.id.toString(),\r\n    template: require('./category.component.html'),\r\n    styles: [require('./category.component.css')]\r\n})\r\nexport class CategoryComponent {\r\n    \r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/categories/category.component.ts","module.exports = \"<div class=container> <ul class=category> <li> <a routerlink=characters><span class=badge>Personnages</span></a> <a routerlink=books><span class=badge>Livres</span></a> </li> </ul> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/categories/category.component.html\n// module id = 78\n// module chunks = 0","module.exports = \"\\r\\n.category {\\r\\n  list-style-type: none;\\r\\n}\\r\\n\\r\\n.category li {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.category .badge {\\r\\n  height: 5em;\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/categories/category.component.css\n// module id = 79\n// module chunks = 0","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CategoryComponent } from './category.component';\r\nimport { CategoryGuard } from './category-guard.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild([\r\n            { path: 'category/:id', component: CategoryComponent, canActivate: [ CategoryGuard ] }\r\n        ])\r\n    ],\r\n    exports: [ RouterModule ]\r\n})\r\nexport class CategoryRoutingModule {\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/categories/category-routing.module.ts","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class CategoryGuard implements CanActivate {\r\n    \r\n    constructor(private _router: Router) {}\r\n    \r\n    canActivate(route: ActivatedRouteSnapshot): boolean {\r\n        const category = route.url[1].path;\r\n        if (category !== \"db\" && category !== \"dbz\") {\r\n            this._router.navigate(['/welcome']);\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/categories/category-guard.service.ts","import { NgModule } from '@angular/core';\r\nimport { CharacterRoutingModule } from './character-routing.module';\r\nimport { CharacterListComponent } from './character-list.component';\r\nimport { CharacterDetailsComponent } from './character-details.component';\r\nimport { CharacterFormComponent } from './character-form.component';\r\nimport { CoreModule } from '../core/core.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        SharedModule,\r\n        CharacterRoutingModule,\r\n        CoreModule\r\n    ],\r\n    declarations: [\r\n        CharacterListComponent,\r\n        CharacterDetailsComponent,\r\n        CharacterFormComponent\r\n    ],\r\n    exports: [\r\n        CharacterListComponent,\r\n        CharacterDetailsComponent\r\n    ]\r\n})\r\nexport class CharacterModule {\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/characters/character.module.ts","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CharacterListComponent } from './character-list.component';\r\nimport { CharacterDetailsComponent } from './character-details.component';\r\nimport { CharacterFormComponent } from './character-form.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild([\r\n            { path: 'category/:category/characters', component: CharacterListComponent },\r\n            { path: 'category/:category/characters/edit', component: CharacterFormComponent },\r\n            { path: 'category/:category/characters/:id', component: CharacterDetailsComponent },\r\n            { path: 'category/:category/characters/:id/edit', component: CharacterFormComponent }\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class CharacterRoutingModule {\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/characters/character-routing.module.ts","import { Component, OnInit, trigger, state, style, transition, animate, keyframes } from '@angular/core';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { CharacterService } from './character.service';\r\n\r\n@Component({\r\n    moduleId: module.id.toString(),\r\n    template: require('./character-list.component.html'),\r\n    styles: [require('./character-list.component.css')],\r\n    // animations: [\r\n    //     trigger('myTrigger', [\r\n    //         state('fadeIn', style({\r\n    //             opacity: 1\r\n    //         })),\r\n    //         transition('void => *', [\r\n    //             style({opacity: 0, transform: 'translateY(20px)'}),\r\n    //             animate('500ms 0 ease-in')\r\n    //             // animate(500, keyframes([\r\n    //             //     style({opacity: 0, transform: 'translateY(-30px)', offset: 0}),\r\n    //             //     style({opacity: 1, transform: 'translateY(5px)', offset: 0.3}),\r\n    //             //     style({opacity: 1, transform: 'translateY(0px)', offset: 1}),\r\n    //             // ]))\r\n    //         ])\r\n    //     ])\r\n    // ]\r\n})\r\nexport class CharacterListComponent implements OnInit {\r\n    public pageTitle: string = \"Liste des personnages\";\r\n    public characters: any[];\r\n    // public state: string = 'fadeIn';\r\n\r\n    constructor(\r\n        private _service: CharacterService,\r\n        private _route: ActivatedRoute,\r\n        private _router: Router\r\n    ) {}\r\n\r\n    public ngOnInit(): void {\r\n\r\n        this.getCharacters();\r\n\r\n    }\r\n\r\n    public getCharacters() {\r\n\r\n        this._route.params\r\n            .switchMap((params: Params) => this._service.getCharacters(params['category']))\r\n            .subscribe(\r\n                characters => this.characters = characters,\r\n                error => console.log(<any>error)\r\n            );\r\n\r\n    }\r\n\r\n    public onNew() {\r\n\r\n        this._router.navigate(['edit'], {relativeTo: this._route});\r\n        \r\n    }\r\n\r\n    onBack(): void {\r\n\r\n        this._router.navigate(['../'], {relativeTo: this._route});\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/characters/character-list.component.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers } from '@angular/http';\r\nimport { UUID } from 'angular2-uuid';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { ICharacter, ICharacterInfo } from './character';\r\nimport { CategoryService } from '../categories/category.service';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\n\r\n@Injectable()\r\nexport class CharacterService {\r\n    \r\n    private _data: BehaviorSubject<ICharacter[]>;\r\n    private _values: ICharacter[];\r\n\r\n    constructor(\r\n        private _http: Http,\r\n        private _categoryService: CategoryService\r\n    ) { }\r\n\r\n    public init(categories: string[]) {\r\n\r\n        this._data = new BehaviorSubject<ICharacter[]>([]);\r\n        this._values = [];\r\n\r\n        Observable.from(categories)\r\n            .concatMap(\r\n                (category: string) => {\r\n                    return Observable.defer(() => this._http.get(this.getUrl(category)))\r\n                },\r\n                (_, response: Response) => <ICharacter[]>response.json().data\r\n            )\r\n            .subscribe(\r\n                (data: ICharacter[])  => {\r\n                    this._values = this._values.concat(data);\r\n                },\r\n                (err: any) => console.error(err),\r\n                () => {\r\n                    console.log('characters loaded');\r\n                    this._data.next(this._values);\r\n                }\r\n            );\r\n\r\n    }\r\n\r\n    public getCharacters(category: string): Observable<ICharacter[]> {\r\n\r\n        return this._data\r\n                    .map((characters: ICharacter[]) => characters.filter(c => c.category === category));\r\n\r\n    }\r\n\r\n    public getCharacter(category: string, id: string): Observable<ICharacterInfo> {\r\n        return this.getCharacters(category)\r\n                   .map(characters => {\r\n                       const c = characters.filter(c => c.id === id)[0];\r\n                       \r\n                       return {\r\n                           character: c,\r\n                           previousId: this.getPreviousId(characters, id),\r\n                           nextId: this.getNextId(characters, id)\r\n                       }\r\n                    });\r\n    }\r\n\r\n    public save(category: string, character: ICharacter): Observable<ICharacter> {\r\n\r\n        if (character.id) {\r\n            return this.put(category, character);\r\n        }\r\n\r\n        return this.post(category, character);\r\n\r\n    }\r\n\r\n    private put(category: string, character: ICharacter): Observable<ICharacter> {\r\n\r\n        let headers = new Headers({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        let url = `${this.getUrl(category)}/${character.id}`;\r\n        console.log('character', character);\r\n        console.log('url', url);\r\n        return this._http\r\n                    .put(url, JSON.stringify(character), {headers: headers})\r\n                    .map(() => character)\r\n                    .catch(this.handleError);\r\n\r\n    }\r\n\r\n    private post(category: string, character: ICharacter): Observable<ICharacter> {\r\n\r\n        let headers = new Headers({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        character.id = UUID.UUID();\r\n\r\n        return this._http\r\n                    .post(this.getUrl(category), JSON.stringify(character), {headers: headers})\r\n                    .map((response: Response) => {\r\n                        let c = <ICharacter>response.json().data;\r\n                        this._values.push(c);\r\n                        return c;\r\n                    })\r\n                    .catch(this.handleError);\r\n\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n\r\n        return Observable.throw(error || 'Server error');\r\n\r\n    }\r\n\r\n    private getUrl(category: string): string {\r\n\r\n        const url = 'app/characters' + category;\r\n        return url;\r\n\r\n    }\r\n\r\n    private getNextId(characters: ICharacter[], id: string) {\r\n\r\n        const ids = characters.map(c => c.id);\r\n        let currentIndex = ids.indexOf(id);\r\n\r\n        if (currentIndex >= 0 && currentIndex < ids.length - 1) {\r\n            return ids[currentIndex + 1];\r\n        }\r\n\r\n        return id;\r\n\r\n    }\r\n\r\n    private getPreviousId(characters: ICharacter[], id: string) {\r\n\r\n        const ids = characters.map(c => c.id);\r\n        let currentIndex = ids.indexOf(id);\r\n\r\n        if (currentIndex > 0) {\r\n            return ids[currentIndex - 1];\r\n        }\r\n\r\n        return id;\r\n        \r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/characters/character.service.ts","\"use strict\";\nvar UUID = (function () {\n    function UUID() {\n        // no-op\n    }\n    UUID.UUID = function () {\n        if (typeof (window) !== \"undefined\" && typeof (window.crypto) !== \"undefined\" && typeof (window.crypto.getRandomValues) !== \"undefined\") {\n            // If we have a cryptographically secure PRNG, use that\n            // http://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\n            var buf = new Uint16Array(8);\n            window.crypto.getRandomValues(buf);\n            return (this.pad4(buf[0]) + this.pad4(buf[1]) + \"-\" + this.pad4(buf[2]) + \"-\" + this.pad4(buf[3]) + \"-\" + this.pad4(buf[4]) + \"-\" + this.pad4(buf[5]) + this.pad4(buf[6]) + this.pad4(buf[7]));\n        }\n        else {\n            // Otherwise, just use Math.random\n            // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n            // https://stackoverflow.com/questions/11605068/why-does-jshint-argue-against-bitwise-operators-how-should-i-express-this-code\n            return this.random4() + this.random4() + \"-\" + this.random4() + \"-\" + this.random4() + \"-\" +\n                this.random4() + \"-\" + this.random4() + this.random4() + this.random4();\n        }\n    };\n    UUID.pad4 = function (num) {\n        var ret = num.toString(16);\n        while (ret.length < 4) {\n            ret = \"0\" + ret;\n        }\n        return ret;\n    };\n    UUID.random4 = function () {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n    return UUID;\n}());\nexports.UUID = UUID;\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-uuid/index.js\n// module id = 86\n// module chunks = 0","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject'\r\n\r\n@Injectable()\r\nexport class CategoryService {\r\n\r\n    public getCategories(): Observable<string[]> {\r\n\r\n        return Observable.of([\"db\", \"dbz\"]);\r\n\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/categories/category.service.ts","module.exports = \"<h3>{{pageTitle}}</h3> <div class=grid> <div> <a class=\\\"btn btn-default\\\" (click)=onNew()> <i class=\\\"glyphicon glyphicon-plus\\\"></i> Ajouter un personnage </a> </div> <div *ngfor=\\\"let character of characters\\\" class=grid-list> <div class=module> <a [routerlink]=character.id routerlinkactive=true><span class=badge><h4>{{character.name}}</h4></span></a> </div> </div> <div> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour </a> </div> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/characters/character-list.component.html\n// module id = 90\n// module chunks = 0","module.exports = \"\\r\\nh3 {\\r\\n  text-align: center; \\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.grid {\\r\\n  margin: 0;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.grid-list {\\r\\n\\tfloat: left;\\r\\n}\\r\\n\\r\\n.module {\\r\\n\\tpadding: 20px;\\r\\n\\ttext-align: center;\\r\\n\\tmax-height: 120px;\\r\\n\\tmin-width: 120px;\\r\\n\\tborder-radius: 2px;\\r\\n}\\r\\n\\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/characters/character-list.component.css\n// module id = 91\n// module chunks = 0","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router, Params } from '@angular/router';\r\nimport { CharacterService } from './character.service';\r\nimport { ICharacter, ICharacterInfo } from './character';\r\nimport { Observable } from 'rxjs';\r\nimport 'rxjs/add/operator/switchMap';\r\n\r\n@Component({\r\n    moduleId: module.id.toString(),\r\n    template: require('./character-details.component.html'),\r\n    styles: [require('./character-details.component.css')]\r\n})\r\nexport class CharacterDetailsComponent implements OnInit {\r\n\r\n    character: ICharacter;\r\n    imageWidth: number = 150;\r\n    imageHeight: number = 300;\r\n    previousId: string;\r\n    nextId: string;\r\n\r\n    constructor(\r\n        private _service: CharacterService,\r\n        private _route: ActivatedRoute,\r\n        private _router: Router\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n\r\n        this._route.params\r\n            .switchMap((params: Params) => this._service.getCharacter(params['category'], params['id']))\r\n            .subscribe(\r\n                (info: ICharacterInfo) => {\r\n                    this.previousId = info.previousId;\r\n                    this.nextId = info.nextId;\r\n                    this.character = info.character\r\n                },\r\n                error => console.log(error)\r\n            );\r\n\r\n    }\r\n\r\n    onBack(): void {\r\n\r\n        this._router.navigate(['../'], {relativeTo: this._route});\r\n\r\n    }\r\n\r\n    onEdit(): void {\r\n\r\n        this._router.navigate(['edit'], {relativeTo: this._route});\r\n        \r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/characters/character-details.component.ts","module.exports = \"<div *ngif=character> <div>Fiche détaillée de {{character.name}}</div> <div> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour à la liste </a> <a class=\\\"btn btn-default\\\" (click)=onEdit()> <i class=\\\"glyphicon glyphicon-pencil\\\"></i>Modifier </a> </div> <div> <db-image [model]=character></db-image> </div> <db-pager [currentid]=character.id [previousid]=previousId [nextid]=nextId></db-pager> </div> \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/characters/character-details.component.html\n// module id = 95\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/characters/character-details.component.css\n// module id = 96\n// module chunks = 0","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ICharacter, ICharacterInfo } from './character';\r\nimport { CharacterService } from './character.service';\r\n\r\n@Component({\r\n    moduleId: module.id.toString(),\r\n    template: require('./character-form.component.html'),\r\n    styles: [require('./character-form.component.css')]\r\n})\r\nexport class CharacterFormComponent implements OnInit {\r\n    categories: string[];\r\n    model: ICharacter;\r\n    category: string;\r\n\r\n    constructor(\r\n        private _service: CharacterService,\r\n        private _route: ActivatedRoute,\r\n        private _router: Router\r\n    ) {\r\n        this.category = this._route.snapshot.params['category'];\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.categories = [\r\n            \"db\",\r\n            \"dbz\"\r\n        ];\r\n\r\n        let id = this._route.snapshot.params['id'];\r\n\r\n        if (id) {\r\n            this._service\r\n                .getCharacter(this.category, id)\r\n                .subscribe(\r\n                    (info: ICharacterInfo) => this.model = info.character,\r\n                    error => console.log(error)\r\n                )\r\n        }\r\n        else {\r\n            this.model = {\r\n                id: null,\r\n                category: this.category,\r\n                name: '',\r\n                description: '',\r\n                imageUrl: ''\r\n            };\r\n        }\r\n    }\r\n\r\n    public onSubmit() {\r\n        this._service\r\n                .save(this.category, this.model)\r\n                .subscribe(\r\n                    (character: ICharacter) => this.onBack(),\r\n                    error => console.log(error)\r\n                );\r\n    }\r\n\r\n    onBack(): void {\r\n        this._router.navigate(['../'], {relativeTo: this._route});\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/characters/character-form.component.ts","module.exports = \"<div class=container> <h1>Edition d'un personnage</h1> <form *ngif=model (ngsubmit)=onSubmit() #characterform=ngForm novalidate> <div class=form-group> <label for=category>Catégorie</label> <select class=form-control id=category required disabled=disabled [(ngmodel)]=model.category name=category> <option *ngfor=\\\"let cat of categories\\\" [value]=cat>{{cat}}</option> </select> </div> <div class=form-group> <label for=name>Nom</label> <input type=text class=form-control id=name required [(ngmodel)]=model.name name=name #name=ngModel> <div [hidden]=\\\"name.valid || name.pristine\\\" class=\\\"alert alert-danger\\\"> Le nom est requis </div> </div> <div class=form-group> <label for=description>Description</label> <input type=text class=form-control id=description required [(ngmodel)]=model.description name=description> </div> <div class=form-group> <label for=imageUrl>Url de l'image</label> <input type=text class=form-control id=imageUrl required [(ngmodel)]=model.imageUrl name=imageUrl> </div> <div> <button type=submit class=\\\"btn btn-primary\\\" [disabled]=!characterForm.form.valid>Enregistrer</button> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour </a> </div> </form> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/characters/character-form.component.html\n// module id = 98\n// module chunks = 0","module.exports = \".ng-valid[required], .ng-valid.required {\\r\\n    border-left: 5px solid #42A948;\\r\\n}\\r\\n\\r\\n.ng-invalid:not(form)  {\\r\\n  border-left: 5px solid #a94442;\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/characters/character-form.component.css\n// module id = 99\n// module chunks = 0","import { NgModule } from '@angular/core';\r\nimport { CoreService } from './core.service';\r\nimport { CharacterService } from '../characters/character.service';\r\nimport { BookService } from '../books/book.service';\r\nimport { CategoryService } from '../categories/category.service';\r\n\r\n@NgModule({\r\n    providers: [\r\n        CharacterService,\r\n        BookService,\r\n        CategoryService\r\n    ]\r\n})\r\nexport class CoreModule {\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/core/core.module.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers } from '@angular/http';\r\nimport { UUID } from 'angular2-uuid';\r\nimport { IBook, IBookInfo } from './book';\r\nimport { Observable } from 'rxjs';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class BookService {\r\n\r\n    private _url: string = 'app/books';\r\n    private _data: BehaviorSubject<IBook[]>;\r\n    private _values: IBook[];\r\n\r\n    constructor(private _http: Http) { }\r\n\r\n    public init(categories: string[]) {\r\n\r\n        // for(let i = 0; i < 10; i++) {\r\n        //     console.log(UUID.UUID());\r\n        // }\r\n\r\n        this._data = new BehaviorSubject<IBook[]>([]);\r\n        this._values = [];\r\n\r\n        Observable.from(categories)\r\n                .concatMap(\r\n                    (category: string) => {\r\n                        return Observable.defer(() => this._http.get(this.getUrl(category)))\r\n                    },\r\n                    (_, response: Response) => <IBook[]>response.json().data\r\n                )\r\n                .subscribe(\r\n                    (data: IBook[]) => this._values = this._values.concat(data),\r\n                    (err: any) => console.error(err),\r\n                    () => {\r\n                        console.log('books loaded');\r\n                        this._data.next(this._values);\r\n                    }\r\n                )\r\n\r\n    }\r\n\r\n    getBooks(category: string): Observable<IBook[]> {\r\n        \r\n        return this._data\r\n                    .map((books: IBook[]) => books.filter((b: IBook) => b.category === category));\r\n        \r\n    }\r\n\r\n    getBook(category: string, id: string): Observable<IBookInfo> {\r\n        \r\n        return this.getBooks(category)\r\n                    .map((books: IBook[]) => {\r\n                        const b = books.filter((b: IBook) => b.id === id)[0];\r\n\r\n                        return {\r\n                            book: b,\r\n                            previousId: this.getPreviousId(books, b.id),\r\n                            nextId: this.getNextId(books, b.id)\r\n                        }\r\n                    });\r\n\r\n    }\r\n\r\n    public save(category: string, book: IBook): Observable<IBook> {\r\n        if (book.id) {\r\n            return this.put(category, book);\r\n        }\r\n\r\n        return this.post(category, book);\r\n    }\r\n\r\n    private put(category: string, book: IBook): Observable<IBook> {\r\n        let headers = new Headers({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        let url = `${this.getUrl(category)}/${book.id}`;\r\n\r\n        return this._http\r\n                    .put(url, JSON.stringify(book), {headers: headers})\r\n                    .map(() => book)\r\n                    .catch(this.handleError);\r\n    }\r\n\r\n    private post(category: string, book: IBook): Observable<IBook> {\r\n        let headers = new Headers({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        book.id = UUID.UUID();\r\n\r\n        return this._http\r\n                    .post(this.getUrl(category), JSON.stringify(book), {headers: headers})\r\n                    .map((response: Response) => {\r\n                        let c = <IBook>response.json().data;\r\n                        this._values.push(c);\r\n                        return c;\r\n                    })\r\n                    .catch(this.handleError);\r\n    }\r\n\r\n    handleError(error: Response) {\r\n        return Observable.throw(error || 'Server error');\r\n    }\r\n\r\n    private getUrl(category: string): string {\r\n        const url = 'app/books' + category;\r\n        return url;\r\n    }\r\n\r\n    private getNextId(books: IBook[], id: string) {\r\n\r\n        const ids = books.map(c => c.id);\r\n        let currentIndex = ids.indexOf(id);\r\n\r\n        if (currentIndex >= 0 && currentIndex < ids.length - 1) {\r\n            return ids[currentIndex + 1];\r\n        }\r\n\r\n        return id;\r\n\r\n    }\r\n\r\n    private getPreviousId(books: IBook[], id: string) {\r\n        \r\n        const ids = books.map(c => c.id);\r\n        let currentIndex = ids.indexOf(id);\r\n\r\n        if (currentIndex > 0) {\r\n            return ids[currentIndex - 1];\r\n        }\r\n\r\n        return id;\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/books/book.service.ts","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ImageComponent } from './image.component';\r\nimport { PagerComponent } from './pager.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        BrowserModule\r\n    ],\r\n    declarations: [\r\n        ImageComponent,\r\n        PagerComponent\r\n    ],\r\n    exports: [\r\n        ImageComponent,\r\n        PagerComponent,\r\n        BrowserModule,\r\n        CommonModule,\r\n        FormsModule\r\n    ]\r\n})\r\nexport class SharedModule { }\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/shared/shared.module.ts","/**\n * @license Angular v2.4.4\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operator/toPromise'), require('rxjs/Subject'), require('rxjs/Observable'), require('rxjs/observable/fromPromise')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Base class for control directives.\n     *\n     * Only used internally in the forms module.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AbstractControlDirective = (function () {\n        function AbstractControlDirective() {\n        }\n        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { throw new Error('unimplemented'); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.value : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.valid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.invalid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.pending : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.errors : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.pristine : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.dirty : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.touched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.untouched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.disabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.enabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.statusChanges : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.valueChanges : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.reset = function (value) {\n            if (value === void 0) { value = undefined; }\n            if (this.control)\n                this.control.reset(value);\n        };\n        /**\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return this.control ? this.control.hasError(errorCode, path) : false;\n        };\n        /**\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return this.control ? this.control.getError(errorCode, path) : null;\n        };\n        return AbstractControlDirective;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * A directive that contains multiple {\\@link NgControl}s.\n     *\n     * Only used by the forms module.\n     *\n     * \\@stable\n     */\n    var ControlContainer = (function (_super) {\n        __extends$1(ControlContainer, _super);\n        function ControlContainer() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n            /**\n             * Get the form to which this container belongs.\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlContainer.prototype, \"path\", {\n            /**\n             * Get the path to this container.\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return ControlContainer;\n    }(AbstractControlDirective));\n\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPresent(obj) {\n        return obj != null;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isBlank(obj) {\n        return obj == null;\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    /**\n     * @param {?} o\n     * @return {?}\n     */\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.merge = function (m1, m2) {\n            var /** @type {?} */ m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.equals = function (m1, m2) {\n            var /** @type {?} */ k1 = Object.keys(m1);\n            var /** @type {?} */ k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n                var /** @type {?} */ key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        /**\n         * @param {?} arr\n         * @param {?} condition\n         * @return {?}\n         */\n        ListWrapper.findLast = function (arr, condition) {\n            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n                if (condition(arr[i])) {\n                    return arr[i];\n                }\n            }\n            return null;\n        };\n        /**\n         * @param {?} list\n         * @param {?} items\n         * @return {?}\n         */\n        ListWrapper.removeAll = function (list, items) {\n            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n                var /** @type {?} */ index = list.indexOf(items[i]);\n                if (index > -1) {\n                    list.splice(index, 1);\n                }\n            }\n        };\n        /**\n         * @param {?} list\n         * @param {?} el\n         * @return {?}\n         */\n        ListWrapper.remove = function (list, el) {\n            var /** @type {?} */ index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        /**\n         * @param {?} list\n         * @return {?}\n         */\n        ListWrapper.flatten = function (list) {\n            return list.reduce(function (flat, item) {\n                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n                return ((flat)).concat(flatItem);\n            }, []);\n        };\n        return ListWrapper;\n    }());\n\n    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function isEmptyInputValue(value) {\n        // we don't check for string here so it also works with arrays\n        return value == null || value.length === 0;\n    }\n    /**\n     * Providers for validators to be used for {@link FormControl}s in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * ### Example\n     *\n     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n     * @stable\n     */\n    var /** @type {?} */ NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n    /**\n     * Providers for asynchronous validators to be used for {@link FormControl}s\n     * in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * See {@link NG_VALIDATORS} for more details.\n     *\n     * @stable\n     */\n    var /** @type {?} */ NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n    /**\n     * Provides a set of validators used by form controls.\n     *\n     * A validator is a function that processes a {\\@link FormControl} or collection of\n     * controls and returns a map of errors. A null map means that validation has passed.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * var loginControl = new FormControl(\"\", Validators.required)\n     * ```\n     *\n     * \\@stable\n     */\n    var Validators = (function () {\n        function Validators() {\n        }\n        /**\n         * Validator that requires controls to have a non-empty value.\n         * @param {?} control\n         * @return {?}\n         */\n        Validators.required = function (control) {\n            return isEmptyInputValue(control.value) ? { 'required': true } : null;\n        };\n        /**\n         * Validator that requires control value to be true.\n         * @param {?} control\n         * @return {?}\n         */\n        Validators.requiredTrue = function (control) {\n            return control.value === true ? null : { 'required': true };\n        };\n        /**\n         * Validator that requires controls to have a value of a minimum length.\n         * @param {?} minLength\n         * @return {?}\n         */\n        Validators.minLength = function (minLength) {\n            return function (control) {\n                if (isEmptyInputValue(control.value)) {\n                    return null; // don't validate empty values to allow optional controls\n                }\n                var /** @type {?} */ length = control.value ? control.value.length : 0;\n                return length < minLength ?\n                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires controls to have a value of a maximum length.\n         * @param {?} maxLength\n         * @return {?}\n         */\n        Validators.maxLength = function (maxLength) {\n            return function (control) {\n                var /** @type {?} */ length = control.value ? control.value.length : 0;\n                return length > maxLength ?\n                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires a control to match a regex to its value.\n         * @param {?} pattern\n         * @return {?}\n         */\n        Validators.pattern = function (pattern) {\n            if (!pattern)\n                return Validators.nullValidator;\n            var /** @type {?} */ regex;\n            var /** @type {?} */ regexStr;\n            if (typeof pattern === 'string') {\n                regexStr = \"^\" + pattern + \"$\";\n                regex = new RegExp(regexStr);\n            }\n            else {\n                regexStr = pattern.toString();\n                regex = pattern;\n            }\n            return function (control) {\n                if (isEmptyInputValue(control.value)) {\n                    return null; // don't validate empty values to allow optional controls\n                }\n                var /** @type {?} */ value = control.value;\n                return regex.test(value) ? null :\n                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n            };\n        };\n        /**\n         * No-op validator.\n         * @param {?} c\n         * @return {?}\n         */\n        Validators.nullValidator = function (c) { return null; };\n        /**\n         * Compose multiple validators into a single function that returns the union\n         * of the individual error maps.\n         * @param {?} validators\n         * @return {?}\n         */\n        Validators.compose = function (validators) {\n            if (!validators)\n                return null;\n            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                return _mergeErrors(_executeValidators(control, presentValidators));\n            };\n        };\n        /**\n         * @param {?} validators\n         * @return {?}\n         */\n        Validators.composeAsync = function (validators) {\n            if (!validators)\n                return null;\n            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                var /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n                return Promise.all(promises).then(_mergeErrors);\n            };\n        };\n        return Validators;\n    }());\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function _convertToPromise(obj) {\n        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n    }\n    /**\n     * @param {?} control\n     * @param {?} validators\n     * @return {?}\n     */\n    function _executeValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    /**\n     * @param {?} control\n     * @param {?} validators\n     * @return {?}\n     */\n    function _executeAsyncValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    /**\n     * @param {?} arrayOfErrors\n     * @return {?}\n     */\n    function _mergeErrors(arrayOfErrors) {\n        var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n        }, {});\n        return Object.keys(res).length === 0 ? null : res;\n    }\n\n    /**\n     * Used to provide a {@link ControlValueAccessor} for form controls.\n     *\n     * See {@link DefaultValueAccessor} for how to implement one.\n     * @stable\n     */\n    var /** @type {?} */ NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\n    var /** @type {?} */ CHECKBOX_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n        multi: true,\n    };\n    /**\n     * The accessor for writing a value and listening to changes on a checkbox input element.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n     *  ```\n     *\n     *  \\@stable\n     */\n    var CheckboxControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        CheckboxControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                        providers: [CHECKBOX_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return CheckboxControlValueAccessor;\n    }());\n\n    var /** @type {?} */ DEFAULT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The default accessor for writing a value and listening to changes that is used by the\n     * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"text\" name=\"searchQuery\" ngModel>\n     *  ```\n     *\n     *  \\@stable\n     */\n    var DefaultValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function DefaultValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.writeValue = function (value) {\n            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        DefaultValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                        // TODO: vsavkin replace the above selector with the one below it once\n                        // https://github.com/angular/angular/issues/3011 is implemented\n                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [DEFAULT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        DefaultValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return DefaultValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function normalizeValidator(validator) {\n        if (((validator)).validate) {\n            return function (c) { return ((validator)).validate(c); };\n        }\n        else {\n            return (validator);\n        }\n    }\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function normalizeAsyncValidator(validator) {\n        if (((validator)).validate) {\n            return function (c) { return ((validator)).validate(c); };\n        }\n        else {\n            return (validator);\n        }\n    }\n\n    var /** @type {?} */ NUMBER_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a number value and listening to changes that is used by the\n     * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"number\" [(ngModel)]=\"age\">\n     *  ```\n     */\n    var NumberValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function NumberValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.writeValue = function (value) {\n            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        NumberValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [NUMBER_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        NumberValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return NumberValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @return {?}\n     */\n    function unimplemented() {\n        throw new Error('unimplemented');\n    }\n    /**\n     * A base class that all control directive extend.\n     * It binds a {\\@link FormControl} object to a DOM element.\n     *\n     * Used internally by Angular forms.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var NgControl = (function (_super) {\n        __extends$2(NgControl, _super);\n        function NgControl() {\n            _super.apply(this, arguments);\n            /** @internal */\n            this._parent = null;\n            this.name = null;\n            this.valueAccessor = null;\n            /** @internal */\n            this._rawValidators = [];\n            /** @internal */\n            this._rawAsyncValidators = [];\n        }\n        Object.defineProperty(NgControl.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return (unimplemented()); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return (unimplemented()); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @abstract\n         * @param {?} newValue\n         * @return {?}\n         */\n        NgControl.prototype.viewToModelUpdate = function (newValue) { };\n        return NgControl;\n    }(AbstractControlDirective));\n\n    var /** @type {?} */ RADIO_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * Internal class used by Angular to uncheck radio buttons with the matching name.\n     */\n    var RadioControlRegistry = (function () {\n        function RadioControlRegistry() {\n            this._accessors = [];\n        }\n        /**\n         * @param {?} control\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.add = function (control, accessor) {\n            this._accessors.push([control, accessor]);\n        };\n        /**\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.remove = function (accessor) {\n            for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n                if (this._accessors[i][1] === accessor) {\n                    this._accessors.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        /**\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.select = function (accessor) {\n            var _this = this;\n            this._accessors.forEach(function (c) {\n                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                    c[1].fireUncheck(accessor.value);\n                }\n            });\n        };\n        /**\n         * @param {?} controlPair\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n            if (!controlPair[0].control)\n                return false;\n            return controlPair[0]._parent === accessor._control._parent &&\n                controlPair[1].name === accessor.name;\n        };\n        RadioControlRegistry.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        RadioControlRegistry.ctorParameters = function () { return []; };\n        return RadioControlRegistry;\n    }());\n    /**\n     * \\@whatItDoes Writes radio control values and listens to radio control changes.\n     *\n     * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n     * to keep the view synced with the {\\@link FormControl} model.\n     *\n     * \\@howToUse\n     *\n     * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n     * value accessor will be active on any radio control that has a form directive. You do\n     * **not** need to add a special selector to activate it.\n     *\n     * ### How to use radio buttons with form directives\n     *\n     * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n     * in the same group have the same `name` attribute.  Radio buttons with different `name`\n     * attributes do not affect each other.\n     *\n     * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n     *\n     * When using radio buttons in a reactive form, radio buttons in the same group should have the\n     * same `formControlName`. You can also add a `name` attribute, but it's optional.\n     *\n     * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n     *\n     *  * **npm package**: `\\@angular/forms`\n     *\n     *  \\@stable\n     */\n    var RadioControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         * @param {?} _registry\n         * @param {?} _injector\n         */\n        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this._registry = _registry;\n            this._injector = _injector;\n            this.onChange = function () { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.ngOnInit = function () {\n            this._control = this._injector.get(NgControl);\n            this._checkName();\n            this._registry.add(this._control, this);\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.writeValue = function (value) {\n            this._state = value === this.value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this._fn = fn;\n            this.onChange = function () {\n                fn(_this.value);\n                _this._registry.select(_this);\n            };\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype._checkName = function () {\n            if (this.name && this.formControlName && this.name !== this.formControlName) {\n                this._throwNameError();\n            }\n            if (!this.name && this.formControlName)\n                this.name = this.formControlName;\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype._throwNameError = function () {\n            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n        };\n        RadioControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                        providers: [RADIO_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RadioControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n            { type: RadioControlRegistry, },\n            { type: _angular_core.Injector, },\n        ]; };\n        RadioControlValueAccessor.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'formControlName': [{ type: _angular_core.Input },],\n            'value': [{ type: _angular_core.Input },],\n        };\n        return RadioControlValueAccessor;\n    }());\n\n    var /** @type {?} */ RANGE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a range value and listening to changes that is used by the\n     * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"range\" [(ngModel)]=\"age\" >\n     *  ```\n     */\n    var RangeValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function RangeValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        RangeValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [RANGE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RangeValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return RangeValueAccessor;\n    }());\n\n    var /** @type {?} */ SELECT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * @param {?} id\n     * @param {?} value\n     * @return {?}\n     */\n    function _buildValueString(id, value) {\n        if (id == null)\n            return \"\" + value;\n        if (!isPrimitive(value))\n            value = 'Object';\n        return (id + \": \" + value).slice(0, 50);\n    }\n    /**\n     * @param {?} valueString\n     * @return {?}\n     */\n    function _extractId(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * \\@whatItDoes Writes values and listens to changes on a select element.\n     *\n     * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n     * to keep the view synced with the {\\@link FormControl} model.\n     *\n     * \\@howToUse\n     *\n     * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n     * value accessor will be active on any select control that has a form directive. You do\n     * **not** need to add a special selector to activate it.\n     *\n     * ### How to use select controls with form directives\n     *\n     * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n     * attribute to the main `<select>` tag.\n     *\n     * If your option values are simple strings, you can bind to the normal `value` property\n     * on the option.  If your option values happen to be objects (and you'd like to save the\n     * selection in your form as an object), use `ngValue` instead:\n     *\n     * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n     *\n     * In reactive forms, you'll also want to add your form directive (`formControlName` or\n     * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n     * choice of binding to the  `value` or `ngValue` property on the select's options.\n     *\n     * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n     *\n     * Note: We listen to the 'change' event because 'input' events aren't fired\n     * for selects in Firefox and IE:\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * \\@stable\n     */\n    var SelectControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function SelectControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.writeValue = function (value) {\n            this.value = value;\n            var /** @type {?} */ valueString = _buildValueString(this._getOptionId(value), value);\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (valueString) {\n                _this.value = valueString;\n                fn(_this._getOptionValue(valueString));\n            };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id), value))\n                    return id;\n            }\n            return null;\n        };\n        /**\n         * \\@internal\n         * @param {?} valueString\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var /** @type {?} */ id = _extractId(valueString);\n            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n        };\n        SelectControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return SelectControlValueAccessor;\n    }());\n    /**\n     * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * \\@howToUse\n     *\n     * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n     *\n     * \\@stable\n     */\n    var NgSelectOption = (function () {\n        /**\n         * @param {?} _element\n         * @param {?} _renderer\n         * @param {?} _select\n         */\n        function NgSelectOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (this._select)\n                this.id = this._select._registerOption();\n        }\n        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._select._optionMap.set(this.id, value);\n                this._setElementValue(_buildValueString(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                this._setElementValue(value);\n                if (this._select)\n                    this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        NgSelectOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /**\n         * @return {?}\n         */\n        NgSelectOption.prototype.ngOnDestroy = function () {\n            if (this._select) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectOption.ctorParameters = function () { return [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ]; };\n        NgSelectOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectOption;\n    }());\n\n    var /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * @param {?} id\n     * @param {?} value\n     * @return {?}\n     */\n    function _buildValueString$1(id, value) {\n        if (id == null)\n            return \"\" + value;\n        if (typeof value === 'string')\n            value = \"'\" + value + \"'\";\n        if (!isPrimitive(value))\n            value = 'Object';\n        return (id + \": \" + value).slice(0, 50);\n    }\n    /**\n     * @param {?} valueString\n     * @return {?}\n     */\n    function _extractId$1(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * The accessor for writing a value and listening to changes on a select element.\n     *\n     * \\@stable\n     */\n    var SelectMultipleControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n            var _this = this;\n            this.value = value;\n            var /** @type {?} */ optionSelectedStateSetter;\n            if (Array.isArray(value)) {\n                // convert values to ids\n                var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n            }\n            else {\n                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n            }\n            this._optionMap.forEach(optionSelectedStateSetter);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (_) {\n                var /** @type {?} */ selected = [];\n                if (_.hasOwnProperty('selectedOptions')) {\n                    var /** @type {?} */ options = _.selectedOptions;\n                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                        var /** @type {?} */ opt = options.item(i);\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n                else {\n                    var /** @type {?} */ options = (_.options);\n                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                        var /** @type {?} */ opt = options.item(i);\n                        if (opt.selected) {\n                            var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                            selected.push(val);\n                        }\n                    }\n                }\n                _this.value = selected;\n                fn(selected);\n            };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n            var /** @type {?} */ id = (this._idCounter++).toString();\n            this._optionMap.set(id, value);\n            return id;\n        };\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id)._value, value))\n                    return id;\n            }\n            return null;\n        };\n        /**\n         * \\@internal\n         * @param {?} valueString\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var /** @type {?} */ id = _extractId$1(valueString);\n            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n        };\n        SelectMultipleControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return SelectMultipleControlValueAccessor;\n    }());\n    /**\n     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * ### Example\n     *\n     * ```\n     * <select multiple name=\"city\" ngModel>\n     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n     * </select>\n     * ```\n     */\n    var NgSelectMultipleOption = (function () {\n        /**\n         * @param {?} _element\n         * @param {?} _renderer\n         * @param {?} _select\n         */\n        function NgSelectMultipleOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (this._select) {\n                this.id = this._select._registerOption(this);\n            }\n        }\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select) {\n                    this._value = value;\n                    this._setElementValue(_buildValueString$1(this.id, value));\n                    this._select.writeValue(this._select.value);\n                }\n                else {\n                    this._setElementValue(value);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /**\n         * \\@internal\n         * @param {?} selected\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n        };\n        /**\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n            if (this._select) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectMultipleOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectMultipleOption.ctorParameters = function () { return [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ]; };\n        NgSelectMultipleOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectMultipleOption;\n    }());\n\n    /**\n     * @param {?} name\n     * @param {?} parent\n     * @return {?}\n     */\n    function controlPath(name, parent) {\n        return parent.path.concat([name]);\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function setUpControl(control, dir) {\n        if (!control)\n            _throwError(dir, 'Cannot find control with');\n        if (!dir.valueAccessor)\n            _throwError(dir, 'No value accessor for form control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n        dir.valueAccessor.writeValue(control.value);\n        // view -> model\n        dir.valueAccessor.registerOnChange(function (newValue) {\n            dir.viewToModelUpdate(newValue);\n            control.markAsDirty();\n            control.setValue(newValue, { emitModelToViewChange: false });\n        });\n        // touched\n        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n        control.registerOnChange(function (newValue, emitModelEvent) {\n            // control -> view\n            dir.valueAccessor.writeValue(newValue);\n            // control -> ngModel\n            if (emitModelEvent)\n                dir.viewToModelUpdate(newValue);\n        });\n        if (dir.valueAccessor.setDisabledState) {\n            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n        }\n        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n        dir._rawValidators.forEach(function (validator) {\n            if (((validator)).registerOnValidatorChange)\n                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (((validator)).registerOnValidatorChange)\n                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function cleanUpControl(control, dir) {\n        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n        dir._rawValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange) {\n                validator.registerOnValidatorChange(null);\n            }\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange) {\n                validator.registerOnValidatorChange(null);\n            }\n        });\n        if (control)\n            control._clearChangeFns();\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function setUpFormContainer(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    }\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function _noControlError(dir) {\n        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n    }\n    /**\n     * @param {?} dir\n     * @param {?} message\n     * @return {?}\n     */\n    function _throwError(dir, message) {\n        var /** @type {?} */ messageEnd;\n        if (dir.path.length > 1) {\n            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n        }\n        else if (dir.path[0]) {\n            messageEnd = \"name: '\" + dir.path + \"'\";\n        }\n        else {\n            messageEnd = 'unspecified name attribute';\n        }\n        throw new Error(message + \" \" + messageEnd);\n    }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function composeValidators(validators) {\n        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n    }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function composeAsyncValidators(validators) {\n        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n            null;\n    }\n    /**\n     * @param {?} changes\n     * @param {?} viewModel\n     * @return {?}\n     */\n    function isPropertyUpdated(changes, viewModel) {\n        if (!changes.hasOwnProperty('model'))\n            return false;\n        var /** @type {?} */ change = changes['model'];\n        if (change.isFirstChange())\n            return true;\n        return !looseIdentical(viewModel, change.currentValue);\n    }\n    var /** @type {?} */ BUILTIN_ACCESSORS = [\n        CheckboxControlValueAccessor,\n        RangeValueAccessor,\n        NumberValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n    ];\n    /**\n     * @param {?} valueAccessor\n     * @return {?}\n     */\n    function isBuiltInAccessor(valueAccessor) {\n        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n    }\n    /**\n     * @param {?} dir\n     * @param {?} valueAccessors\n     * @return {?}\n     */\n    function selectValueAccessor(dir, valueAccessors) {\n        if (!valueAccessors)\n            return null;\n        var /** @type {?} */ defaultAccessor;\n        var /** @type {?} */ builtinAccessor;\n        var /** @type {?} */ customAccessor;\n        valueAccessors.forEach(function (v) {\n            if (v.constructor === DefaultValueAccessor) {\n                defaultAccessor = v;\n            }\n            else if (isBuiltInAccessor(v)) {\n                if (builtinAccessor)\n                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n                builtinAccessor = v;\n            }\n            else {\n                if (customAccessor)\n                    _throwError(dir, 'More than one custom value accessor matches form control with');\n                customAccessor = v;\n            }\n        });\n        if (customAccessor)\n            return customAccessor;\n        if (builtinAccessor)\n            return builtinAccessor;\n        if (defaultAccessor)\n            return defaultAccessor;\n        _throwError(dir, 'No valid value accessor for form control with');\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n     *\n     * \\@stable\n     */\n    var AbstractFormGroupDirective = (function (_super) {\n        __extends(AbstractFormGroupDirective, _super);\n        function AbstractFormGroupDirective() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormGroup(this);\n        };\n        /**\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormGroup(this);\n            }\n        };\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n            /**\n             * Get the {\\@link FormGroup} backing this binding.\n             * @return {?}\n             */\n            get: function () { return this.formDirective.getFormGroup(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n            /**\n             * Get the path to this control group.\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n            /**\n             * Get the {\\@link Form} to which this group belongs.\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n        return AbstractFormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var AbstractControlStatus = (function () {\n        /**\n         * @param {?} cd\n         */\n        function AbstractControlStatus(cd) {\n            this._cd = cd;\n        }\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.untouched : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.touched : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.pristine : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.dirty : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.valid : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.invalid : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.pending : false; },\n            enumerable: true,\n            configurable: true\n        });\n        return AbstractControlStatus;\n    }());\n    var /** @type {?} */ ngControlStatusHost = {\n        '[class.ng-untouched]': 'ngClassUntouched',\n        '[class.ng-touched]': 'ngClassTouched',\n        '[class.ng-pristine]': 'ngClassPristine',\n        '[class.ng-dirty]': 'ngClassDirty',\n        '[class.ng-valid]': 'ngClassValid',\n        '[class.ng-invalid]': 'ngClassInvalid',\n        '[class.ng-pending]': 'ngClassPending',\n    };\n    /**\n     * Directive automatically applied to Angular form controls that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * \\@stable\n     */\n    var NgControlStatus = (function (_super) {\n        __extends$3(NgControlStatus, _super);\n        /**\n         * @param {?} cd\n         */\n        function NgControlStatus(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatus.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n        ];\n        /** @nocollapse */\n        NgControlStatus.ctorParameters = function () { return [\n            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n        ]; };\n        return NgControlStatus;\n    }(AbstractControlStatus));\n    /**\n     * Directive automatically applied to Angular form groups that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * \\@stable\n     */\n    var NgControlStatusGroup = (function (_super) {\n        __extends$3(NgControlStatusGroup, _super);\n        /**\n         * @param {?} cd\n         */\n        function NgControlStatusGroup(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatusGroup.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                        host: ngControlStatusHost\n                    },] },\n        ];\n        /** @nocollapse */\n        NgControlStatusGroup.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n        ]; };\n        return NgControlStatusGroup;\n    }(AbstractControlStatus));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Use by directives and components to emit custom Events.\n     *\n     * ### Examples\n     *\n     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n     * title gets clicked:\n     *\n     * ```\n     * \\@Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n     *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * The events payload can be accessed by the parameter `$event` on the components output event\n     * handler:\n     *\n     * ```\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n     * https://github.com/jhusain/observable-spec\n     *\n     * Once a reference implementation of the spec is available, switch to it.\n     * \\@stable\n     */\n    var EventEmitter = (function (_super) {\n        __extends$5(EventEmitter, _super);\n        /**\n         * Creates an instance of [EventEmitter], which depending on [isAsync],\n         * delivers events synchronously or asynchronously.\n         * @param {?=} isAsync\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        /**\n         * @param {?=} generatorOrNext\n         * @param {?=} error\n         * @param {?=} complete\n         * @return {?}\n         */\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var /** @type {?} */ schedulerFn;\n            var /** @type {?} */ errorFn = function (err) { return null; };\n            var /** @type {?} */ completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                    function (value) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n     */\n    var /** @type {?} */ VALID = 'VALID';\n    /**\n     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n     */\n    var /** @type {?} */ INVALID = 'INVALID';\n    /**\n     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n     * errors are not yet available for the input value.\n     */\n    var /** @type {?} */ PENDING = 'PENDING';\n    /**\n     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n     * calculations of validity or value.\n     */\n    var /** @type {?} */ DISABLED = 'DISABLED';\n    /**\n     * @param {?} control\n     * @param {?} path\n     * @param {?} delimiter\n     * @return {?}\n     */\n    function _find(control, path, delimiter) {\n        if (path == null)\n            return null;\n        if (!(path instanceof Array)) {\n            path = ((path)).split(delimiter);\n        }\n        if (path instanceof Array && (path.length === 0))\n            return null;\n        return ((path)).reduce(function (v, name) {\n            if (v instanceof FormGroup) {\n                return v.controls[name] || null;\n            }\n            if (v instanceof FormArray) {\n                return v.at(/** @type {?} */ (name)) || null;\n            }\n            return null;\n        }, control);\n    }\n    /**\n     * @param {?} r\n     * @return {?}\n     */\n    function toObservable(r) {\n        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n    }\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function coerceToValidator(validator) {\n        return Array.isArray(validator) ? composeValidators(validator) : validator;\n    }\n    /**\n     * @param {?} asyncValidator\n     * @return {?}\n     */\n    function coerceToAsyncValidator(asyncValidator) {\n        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n    }\n    /**\n     * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n     * {\\@link FormArray}.\n     *\n     * It provides some of the shared behavior that all controls and groups of controls have, like\n     * running validators, calculating status, and resetting state. It also defines the properties\n     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n     * instantiated directly.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AbstractControl = (function () {\n        /**\n         * @param {?} validator\n         * @param {?} asyncValidator\n         */\n        function AbstractControl(validator, asyncValidator) {\n            this.validator = validator;\n            this.asyncValidator = asyncValidator;\n            /** @internal */\n            this._onCollectionChange = function () { };\n            this._pristine = true;\n            this._touched = false;\n            /** @internal */\n            this._onDisabledChange = [];\n        }\n        Object.defineProperty(AbstractControl.prototype, \"value\", {\n            /**\n             * The value of the control.\n             * @return {?}\n             */\n            get: function () { return this._value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"parent\", {\n            /**\n             * The parent control.\n             * @return {?}\n             */\n            get: function () { return this._parent; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"status\", {\n            /**\n             * The validation status of the control. There are four possible\n             * validation statuses:\n             *\n             * * **VALID**:  control has passed all validation checks\n             * * **INVALID**: control has failed at least one validation check\n             * * **PENDING**: control is in the midst of conducting a validation check\n             * * **DISABLED**: control is exempt from validation checks\n             *\n             * These statuses are mutually exclusive, so a control cannot be\n             * both valid AND invalid or invalid AND disabled.\n             * @return {?}\n             */\n            get: function () { return this._status; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n            /**\n             * A control is `valid` when its `status === VALID`.\n             *\n             * In order to have this status, the control must have passed all its\n             * validation checks.\n             * @return {?}\n             */\n            get: function () { return this._status === VALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n            /**\n             * A control is `invalid` when its `status === INVALID`.\n             *\n             * In order to have this status, the control must have failed\n             * at least one of its validation checks.\n             * @return {?}\n             */\n            get: function () { return this._status === INVALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n            /**\n             * A control is `pending` when its `status === PENDING`.\n             *\n             * In order to have this status, the control must be in the\n             * middle of conducting a validation check.\n             * @return {?}\n             */\n            get: function () { return this._status == PENDING; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n            /**\n             * A control is `disabled` when its `status === DISABLED`.\n             *\n             * Disabled controls are exempt from validation checks and\n             * are not included in the aggregate value of their ancestor\n             * controls.\n             * @return {?}\n             */\n            get: function () { return this._status === DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n            /**\n             * A control is `enabled` as long as its `status !== DISABLED`.\n             *\n             * In other words, it has a status of `VALID`, `INVALID`, or\n             * `PENDING`.\n             * @return {?}\n             */\n            get: function () { return this._status !== DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n            /**\n             * Returns any errors generated by failing validation. If there\n             * are no errors, it will return null.\n             * @return {?}\n             */\n            get: function () { return this._errors; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n            /**\n             * A control is `pristine` if the user has not yet changed\n             * the value in the UI.\n             *\n             * Note that programmatic changes to a control's value will\n             * *not* mark it dirty.\n             * @return {?}\n             */\n            get: function () { return this._pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n            /**\n             * A control is `dirty` if the user has changed the value\n             * in the UI.\n             *\n             * Note that programmatic changes to a control's value will\n             * *not* mark it dirty.\n             * @return {?}\n             */\n            get: function () { return !this.pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n            /**\n             * A control is marked `touched` once the user has triggered\n             * a `blur` event on it.\n             * @return {?}\n             */\n            get: function () { return this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n            /**\n             * A control is `untouched` if the user has not yet triggered\n             * a `blur` event on it.\n             * @return {?}\n             */\n            get: function () { return !this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n            /**\n             * Emits an event every time the value of the control changes, in\n             * the UI or programmatically.\n             * @return {?}\n             */\n            get: function () { return this._valueChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n            /**\n             * Emits an event every time the validation status of the control\n             * is re-calculated.\n             * @return {?}\n             */\n            get: function () { return this._statusChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Sets the synchronous validators that are active on this control.  Calling\n         * this will overwrite any existing sync validators.\n         * @param {?} newValidator\n         * @return {?}\n         */\n        AbstractControl.prototype.setValidators = function (newValidator) {\n            this.validator = coerceToValidator(newValidator);\n        };\n        /**\n         * Sets the async validators that are active on this control. Calling this\n         * will overwrite any existing async validators.\n         * @param {?} newValidator\n         * @return {?}\n         */\n        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n            this.asyncValidator = coerceToAsyncValidator(newValidator);\n        };\n        /**\n         * Empties out the sync validator list.\n         * @return {?}\n         */\n        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n        /**\n         * Empties out the async validator list.\n         * @return {?}\n         */\n        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n        /**\n         * Marks the control as `touched`.\n         *\n         * This will also mark all direct ancestors as `touched` to maintain\n         * the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = true;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `untouched`.\n         *\n         * If the control has any children, it will also mark all children as `untouched`\n         * to maintain the model, and re-calculate the `touched` status of all parent\n         * controls.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsUntouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = false;\n            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n            if (this._parent && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `dirty`.\n         *\n         * This will also mark all direct ancestors as `dirty` to maintain\n         * the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsDirty = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = false;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsDirty({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `pristine`.\n         *\n         * If the control has any children, it will also mark all children as `pristine`\n         * to maintain the model, and re-calculate the `pristine` status of all parent\n         * controls.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsPristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = true;\n            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n            if (this._parent && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `pending`.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsPending = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._status = PENDING;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsPending({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Disables the control. This means the control will be exempt from validation checks and\n         * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n         *\n         * If the control has children, all children will be disabled to maintain the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.disable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = DISABLED;\n            this._errors = null;\n            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n            this._updateValue();\n            if (emitEvent !== false) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n        };\n        /**\n         * Enables the control. This means the control will be included in validation checks and\n         * the aggregate value of its parent. Its status is re-calculated based on its value and\n         * its validators.\n         *\n         * If the control has children, all children will be enabled.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.enable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = VALID;\n            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n        };\n        /**\n         * @param {?} onlySelf\n         * @return {?}\n         */\n        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n            if (this._parent && !onlySelf) {\n                this._parent.updateValueAndValidity();\n                this._parent._updatePristine();\n                this._parent._updateTouched();\n            }\n        };\n        /**\n         * @param {?} parent\n         * @return {?}\n         */\n        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n        /**\n         * Sets the value of the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.setValue = function (value, options) { };\n        /**\n         * Patches the value of the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.patchValue = function (value, options) { };\n        /**\n         * Resets the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?=} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.reset = function (value, options) { };\n        /**\n         * Re-calculates the value and validation status of the control.\n         *\n         * By default, it will also update the value and validity of its ancestors.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._setInitialStatus();\n            this._updateValue();\n            if (this.enabled) {\n                this._errors = this._runValidator();\n                this._status = this._calculateStatus();\n                if (this._status === VALID || this._status === PENDING) {\n                    this._runAsyncValidator(emitEvent);\n                }\n            }\n            if (emitEvent !== false) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            if (this._parent && !onlySelf) {\n                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updateTreeValidity = function (_a) {\n            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._runValidator = function () {\n            return this.validator ? this.validator(this) : null;\n        };\n        /**\n         * @param {?} emitEvent\n         * @return {?}\n         */\n        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n            var _this = this;\n            if (this.asyncValidator) {\n                this._status = PENDING;\n                this._cancelExistingSubscription();\n                var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n                this._asyncValidationSubscription =\n                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._cancelExistingSubscription = function () {\n            if (this._asyncValidationSubscription) {\n                this._asyncValidationSubscription.unsubscribe();\n            }\n        };\n        /**\n         * Sets errors on a form control.\n         *\n         * This is used when validations are run manually by the user, rather than automatically.\n         *\n         * Calling `setErrors` will also update the validity of the parent control.\n         *\n         * ### Example\n         *\n         * ```\n         * const login = new FormControl(\"someLogin\");\n         * login.setErrors({\n         *   \"notUnique\": true\n         * });\n         *\n         * expect(login.valid).toEqual(false);\n         * expect(login.errors).toEqual({\"notUnique\": true});\n         *\n         * login.setValue(\"someOtherLogin\");\n         *\n         * expect(login.valid).toEqual(true);\n         * ```\n         * @param {?} errors\n         * @param {?=} __1\n         * @return {?}\n         */\n        AbstractControl.prototype.setErrors = function (errors, _a) {\n            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n            this._errors = errors;\n            this._updateControlsErrors(emitEvent !== false);\n        };\n        /**\n         * Retrieves a child control given the control's name or path.\n         *\n         * Paths can be passed in as an array or a string delimited by a dot.\n         *\n         * To get a control nested within a `person` sub-group:\n         *\n         * * `this.form.get('person.name');`\n         *\n         * -OR-\n         *\n         * * `this.form.get(['person', 'name']);`\n         * @param {?} path\n         * @return {?}\n         */\n        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n        /**\n         * Returns true if the control with the given path has the error specified. Otherwise\n         * returns null or undefined.\n         *\n         * If no path is given, it checks for the error on the present control.\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControl.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            var /** @type {?} */ control = path ? this.get(path) : this;\n            return control && control._errors ? control._errors[errorCode] : null;\n        };\n        /**\n         * Returns true if the control with the given path has the error specified. Otherwise\n         * returns false.\n         *\n         * If no path is given, it checks for the error on the present control.\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControl.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return !!this.getError(errorCode, path);\n        };\n        Object.defineProperty(AbstractControl.prototype, \"root\", {\n            /**\n             * Retrieves the top-level ancestor of this control.\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ x = this;\n                while (x._parent) {\n                    x = x._parent;\n                }\n                return x;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * \\@internal\n         * @param {?} emitEvent\n         * @return {?}\n         */\n        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n            this._status = this._calculateStatus();\n            if (emitEvent) {\n                this._statusChanges.emit(this._status);\n            }\n            if (this._parent) {\n                this._parent._updateControlsErrors(emitEvent);\n            }\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        AbstractControl.prototype._initObservables = function () {\n            this._valueChanges = new EventEmitter();\n            this._statusChanges = new EventEmitter();\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._calculateStatus = function () {\n            if (this._allControlsDisabled())\n                return DISABLED;\n            if (this._errors)\n                return INVALID;\n            if (this._anyControlsHaveStatus(PENDING))\n                return PENDING;\n            if (this._anyControlsHaveStatus(INVALID))\n                return INVALID;\n            return VALID;\n        };\n        /**\n         * \\@internal\n         * @abstract\n         * @return {?}\n         */\n        AbstractControl.prototype._updateValue = function () { };\n        /**\n         * \\@internal\n         * @abstract\n         * @param {?} cb\n         * @return {?}\n         */\n        AbstractControl.prototype._forEachChild = function (cb) { };\n        /**\n         * \\@internal\n         * @abstract\n         * @param {?} condition\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControls = function (condition) { };\n        /**\n         * \\@internal\n         * @abstract\n         * @return {?}\n         */\n        AbstractControl.prototype._allControlsDisabled = function () { };\n        /**\n         * \\@internal\n         * @param {?} status\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n            return this._anyControls(function (control) { return control.status === status; });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsDirty = function () {\n            return this._anyControls(function (control) { return control.dirty; });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsTouched = function () {\n            return this._anyControls(function (control) { return control.touched; });\n        };\n        /**\n         * \\@internal\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updatePristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = !this._anyControlsDirty();\n            if (this._parent && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updateTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = this._anyControlsTouched();\n            if (this._parent && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} formState\n         * @return {?}\n         */\n        AbstractControl.prototype._isBoxedValue = function (formState) {\n            return typeof formState === 'object' && formState !== null &&\n                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n        };\n        /**\n         * \\@internal\n         * @param {?} fn\n         * @return {?}\n         */\n        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n        return AbstractControl;\n    }());\n    /**\n     * \\@whatItDoes Tracks the value and validation status of an individual form control.\n     *\n     * It is one of the three fundamental building blocks of Angular forms, along with\n     * {\\@link FormGroup} and {\\@link FormArray}.\n     *\n     * \\@howToUse\n     *\n     * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n     * first argument. Example:\n     *\n     * ```ts\n     * const ctrl = new FormControl('some value');\n     * console.log(ctrl.value);     // 'some value'\n     * ```\n     *\n     * You can also initialize the control with a form state object on instantiation,\n     * which includes both the value and whether or not the control is disabled.\n     * You can't use the value key without the disabled key; both are required\n     * to use this way of initialization.\n     *\n     * ```ts\n     * const ctrl = new FormControl({value: 'n/a', disabled: true});\n     * console.log(ctrl.value);     // 'n/a'\n     * console.log(ctrl.status);   // 'DISABLED'\n     * ```\n     *\n     * To include a sync validator (or an array of sync validators) with the control,\n     * pass it in as the second argument. Async validators are also supported, but\n     * have to be passed in separately as the third arg.\n     *\n     * ```ts\n     * const ctrl = new FormControl('', Validators.required);\n     * console.log(ctrl.value);     // ''\n     * console.log(ctrl.status);   // 'INVALID'\n     * ```\n     *\n     * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * \\@stable\n     */\n    var FormControl = (function (_super) {\n        __extends$6(FormControl, _super);\n        /**\n         * @param {?=} formState\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormControl(formState, validator, asyncValidator) {\n            if (formState === void 0) { formState = null; }\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n            /** @internal */\n            this._onChange = [];\n            this._applyFormState(formState);\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n            this._initObservables();\n        }\n        /**\n         * Set the value of the form control to `value`.\n         *\n         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n         * and not its parent component. This defaults to false.\n         *\n         * If `emitEvent` is `true`, this\n         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n         * to true (as it falls through to `updateValueAndValidity`).\n         *\n         * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n         * specified.\n         *\n         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n         * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormControl.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n            this._value = value;\n            if (this._onChange.length && emitModelToViewChange !== false) {\n                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });\n            }\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * Patches the value of a control.\n         *\n         * This function is functionally the same as {\\@link FormControl.setValue} at this level.\n         * It exists for symmetry with {\\@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n         * where it does behave differently.\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        FormControl.prototype.patchValue = function (value, options) {\n            if (options === void 0) { options = {}; }\n            this.setValue(value, options);\n        };\n        /**\n         * Resets the form control. This means by default:\n         *\n         * * it is marked as `pristine`\n         * * it is marked as `untouched`\n         * * value is set to null\n         *\n         * You can also reset to a specific form state by passing through a standalone\n         * value or a form state object that contains both a value and a disabled state\n         * (these are the only two properties that cannot be calculated).\n         *\n         * Ex:\n         *\n         * ```ts\n         * this.control.reset('Nancy');\n         *\n         * console.log(this.control.value);  // 'Nancy'\n         * ```\n         *\n         * OR\n         *\n         * ```\n         * this.control.reset({value: 'Nancy', disabled: true});\n         *\n         * console.log(this.control.value);  // 'Nancy'\n         * console.log(this.control.status);  // 'DISABLED'\n         * ```\n         * @param {?=} formState\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormControl.prototype.reset = function (formState, _a) {\n            if (formState === void 0) { formState = null; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._applyFormState(formState);\n            this.markAsPristine({ onlySelf: onlySelf });\n            this.markAsUntouched({ onlySelf: onlySelf });\n            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormControl.prototype._updateValue = function () { };\n        /**\n         * \\@internal\n         * @param {?} condition\n         * @return {?}\n         */\n        FormControl.prototype._anyControls = function (condition) { return false; };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n        /**\n         * Register a listener for change events.\n         * @param {?} fn\n         * @return {?}\n         */\n        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormControl.prototype._clearChangeFns = function () {\n            this._onChange = [];\n            this._onDisabledChange = [];\n            this._onCollectionChange = function () { };\n        };\n        /**\n         * Register a listener for disabled events.\n         * @param {?} fn\n         * @return {?}\n         */\n        FormControl.prototype.registerOnDisabledChange = function (fn) {\n            this._onDisabledChange.push(fn);\n        };\n        /**\n         * \\@internal\n         * @param {?} cb\n         * @return {?}\n         */\n        FormControl.prototype._forEachChild = function (cb) { };\n        /**\n         * @param {?} formState\n         * @return {?}\n         */\n        FormControl.prototype._applyFormState = function (formState) {\n            if (this._isBoxedValue(formState)) {\n                this._value = formState.value;\n                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                    this.enable({ onlySelf: true, emitEvent: false });\n            }\n            else {\n                this._value = formState;\n            }\n        };\n        return FormControl;\n    }(AbstractControl));\n    /**\n     * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n     * instances.\n     *\n     * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n     * with each control name as the key.  It calculates its status by reducing the statuses\n     * of its children. For example, if one of the controls in a group is invalid, the entire\n     * group becomes invalid.\n     *\n     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {\\@link FormControl} and {\\@link FormArray}.\n     *\n     * \\@howToUse\n     *\n     * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n     * argument. The key for each child will be the name under which it is registered.\n     *\n     * ### Example\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('Nancy', Validators.minLength(2)),\n     *   last: new FormControl('Drew'),\n     * });\n     *\n     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n     * console.log(form.status);  // 'VALID'\n     * ```\n     *\n     * You can also include group-level validators as the second arg, or group-level async\n     * validators as the third arg. These come in handy when you want to perform validation\n     * that considers the value of more than one child control.\n     *\n     * ### Example\n     *\n     * ```\n     * const form = new FormGroup({\n     *   password: new FormControl('', Validators.minLength(2)),\n     *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n     * }, passwordMatchValidator);\n     *\n     *\n     * function passwordMatchValidator(g: FormGroup) {\n     *    return g.get('password').value === g.get('passwordConfirm').value\n     *       ? null : {'mismatch': true};\n     * }\n     * ```\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * \\@stable\n     */\n    var FormGroup = (function (_super) {\n        __extends$6(FormGroup, _super);\n        /**\n         * @param {?} controls\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormGroup(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Registers a control with the group's list of controls.\n         *\n         * This method does not update value or validity of the control, so for\n         * most cases you'll want to use {\\@link FormGroup.addControl} instead.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.registerControl = function (name, control) {\n            if (this.controls[name])\n                return this.controls[name];\n            this.controls[name] = control;\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n            return control;\n        };\n        /**\n         * Add a control to this group.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.addControl = function (name, control) {\n            this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Remove a control from this group.\n         * @param {?} name\n         * @return {?}\n         */\n        FormGroup.prototype.removeControl = function (name) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            delete (this.controls[name]);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Replace an existing control.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.setControl = function (name, control) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            delete (this.controls[name]);\n            if (control)\n                this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Check whether there is an enabled control with the given name in the group.\n         *\n         * It will return false for disabled controls. If you'd like to check for\n         * existence in the group only, use {\\@link AbstractControl.get} instead.\n         * @param {?} controlName\n         * @return {?}\n         */\n        FormGroup.prototype.contains = function (controlName) {\n            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n        };\n        /**\n         *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n         *  the structure of the group, with control names as keys.\n         *\n         * This method performs strict checks, so it will throw an error if you try\n         * to set the value of a control that doesn't exist or if you exclude the\n         * value of a control.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const form = new FormGroup({\n         *     first: new FormControl(),\n         *     last: new FormControl()\n         *  });\n         *  console.log(form.value);   // {first: null, last: null}\n         *\n         *  form.setValue({first: 'Nancy', last: 'Drew'});\n         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n         *\n         *  ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._checkAllValuesPresent(value);\n            Object.keys(value).forEach(function (name) {\n                _this._throwIfControlMissing(name);\n                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n         *  names as keys, and will do its best to match the values to the correct controls\n         *  in the group.\n         *\n         *  It accepts both super-sets and sub-sets of the group without throwing an error.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const form = new FormGroup({\n         *     first: new FormControl(),\n         *     last: new FormControl()\n         *  });\n         *  console.log(form.value);   // {first: null, last: null}\n         *\n         *  form.patchValue({first: 'Nancy'});\n         *  console.log(form.value);   // {first: 'Nancy', last: null}\n         *\n         *  ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            Object.keys(value).forEach(function (name) {\n                if (_this.controls[name]) {\n                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * Resets the {\\@link FormGroup}. This means by default:\n         *\n         * * The group and all descendants are marked `pristine`\n         * * The group and all descendants are marked `untouched`\n         * * The value of all descendants will be null or null maps\n         *\n         * You can also reset to a specific form state by passing in a map of states\n         * that matches the structure of your form, with control names as keys. The state\n         * can be a standalone value or a form state object with both a value and a disabled\n         * status.\n         *\n         * ### Example\n         *\n         * ```ts\n         * this.form.reset({first: 'name', last: 'last name'});\n         *\n         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n         * ```\n         *\n         * - OR -\n         *\n         * ```\n         * this.form.reset({\n         *   first: {value: 'name', disabled: true},\n         *   last: 'last'\n         * });\n         *\n         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n         * console.log(this.form.get('first').status);  // 'DISABLED'\n         * ```\n         * @param {?=} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = {}; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._forEachChild(function (control, name) {\n                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n         *\n         * If you'd like to include all values regardless of disabled status, use this method.\n         * Otherwise, the `value` property is the best way to get the value of the group.\n         * @return {?}\n         */\n        FormGroup.prototype.getRawValue = function () {\n            return this._reduceChildren({}, function (acc, control, name) {\n                acc[name] = control.value;\n                return acc;\n            });\n        };\n        /**\n         * \\@internal\n         * @param {?} name\n         * @return {?}\n         */\n        FormGroup.prototype._throwIfControlMissing = function (name) {\n            if (!Object.keys(this.controls).length) {\n                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.controls[name]) {\n                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} cb\n         * @return {?}\n         */\n        FormGroup.prototype._forEachChild = function (cb) {\n            var _this = this;\n            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroup.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) {\n                control.setParent(_this);\n                control._registerOnCollectionChange(_this._onCollectionChange);\n            });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n        /**\n         * \\@internal\n         * @param {?} condition\n         * @return {?}\n         */\n        FormGroup.prototype._anyControls = function (condition) {\n            var _this = this;\n            var /** @type {?} */ res = false;\n            this._forEachChild(function (control, name) {\n                res = res || (_this.contains(name) && condition(control));\n            });\n            return res;\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroup.prototype._reduceValue = function () {\n            var _this = this;\n            return this._reduceChildren({}, function (acc, control, name) {\n                if (control.enabled || _this.disabled) {\n                    acc[name] = control.value;\n                }\n                return acc;\n            });\n        };\n        /**\n         * \\@internal\n         * @param {?} initValue\n         * @param {?} fn\n         * @return {?}\n         */\n        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n            var /** @type {?} */ res = initValue;\n            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n            return res;\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroup.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n                var controlName = _a[_i];\n                if (this.controls[controlName].enabled) {\n                    return false;\n                }\n            }\n            return Object.keys(this.controls).length > 0 || this.disabled;\n        };\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        FormGroup.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, name) {\n                if (value[name] === undefined) {\n                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n                }\n            });\n        };\n        return FormGroup;\n    }(AbstractControl));\n    /**\n     * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl}\n     * instances.\n     *\n     * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n     * It calculates its status by reducing the statuses of its children. For example, if one of\n     * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n     *\n     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {\\@link FormControl} and {\\@link FormGroup}.\n     *\n     * \\@howToUse\n     *\n     * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n     * argument.\n     *\n     * ### Example\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl('Nancy', Validators.minLength(2)),\n     *   new FormControl('Drew'),\n     * ]);\n     *\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * console.log(arr.status);  // 'VALID'\n     * ```\n     *\n     * You can also include array-level validators as the second arg, or array-level async\n     * validators as the third arg. These come in handy when you want to perform validation\n     * that considers the value of more than one child control.\n     *\n     * ### Adding or removing controls\n     *\n     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n     * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n     * the `FormArray` directly, as that will result in strange and unexpected behavior such\n     * as broken change detection.\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * \\@stable\n     */\n    var FormArray = (function (_super) {\n        __extends$6(FormArray, _super);\n        /**\n         * @param {?} controls\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormArray(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Get the {\\@link AbstractControl} at the given `index` in the array.\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype.at = function (index) { return this.controls[index]; };\n        /**\n         * Insert a new {\\@link AbstractControl} at the end of the array.\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.push = function (control) {\n            this.controls.push(control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n         * @param {?} index\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.insert = function (index, control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Remove the control at the given `index` in the array.\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype.removeAt = function (index) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            this.controls.splice(index, 1);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Replace an existing control.\n         * @param {?} index\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.setControl = function (index, control) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            this.controls.splice(index, 1);\n            if (control) {\n                this.controls.splice(index, 0, control);\n                this._registerControl(control);\n            }\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        Object.defineProperty(FormArray.prototype, \"length\", {\n            /**\n             * Length of the control array.\n             * @return {?}\n             */\n            get: function () { return this.controls.length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n         *  the structure of the control.\n         *\n         * This method performs strict checks, so it will throw an error if you try\n         * to set the value of a control that doesn't exist or if you exclude the\n         * value of a control.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const arr = new FormArray([\n         *     new FormControl(),\n         *     new FormControl()\n         *  ]);\n         *  console.log(arr.value);   // [null, null]\n         *\n         *  arr.setValue(['Nancy', 'Drew']);\n         *  console.log(arr.value);   // ['Nancy', 'Drew']\n         *  ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._checkAllValuesPresent(value);\n            value.forEach(function (newValue, index) {\n                _this._throwIfControlMissing(index);\n                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n         *  structure of the control, and will do its best to match the values to the correct\n         *  controls in the group.\n         *\n         *  It accepts both super-sets and sub-sets of the array without throwing an error.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const arr = new FormArray([\n         *     new FormControl(),\n         *     new FormControl()\n         *  ]);\n         *  console.log(arr.value);   // [null, null]\n         *\n         *  arr.patchValue(['Nancy']);\n         *  console.log(arr.value);   // ['Nancy', null]\n         *  ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            value.forEach(function (newValue, index) {\n                if (_this.at(index)) {\n                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * Resets the {\\@link FormArray}. This means by default:\n         *\n         * * The array and all descendants are marked `pristine`\n         * * The array and all descendants are marked `untouched`\n         * * The value of all descendants will be null or null maps\n         *\n         * You can also reset to a specific form state by passing in an array of states\n         * that matches the structure of the control. The state can be a standalone value\n         * or a form state object with both a value and a disabled status.\n         *\n         * ### Example\n         *\n         * ```ts\n         * this.arr.reset(['name', 'last name']);\n         *\n         * console.log(this.arr.value);  // ['name', 'last name']\n         * ```\n         *\n         * - OR -\n         *\n         * ```\n         * this.arr.reset([\n         *   {value: 'name', disabled: true},\n         *   'last'\n         * ]);\n         *\n         * console.log(this.arr.value);  // ['name', 'last name']\n         * console.log(this.arr.get(0).status);  // 'DISABLED'\n         * ```\n         * @param {?=} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = []; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._forEachChild(function (control, index) {\n                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         * The aggregate value of the array, including any disabled controls.\n         *\n         * If you'd like to include all values regardless of disabled status, use this method.\n         * Otherwise, the `value` property is the best way to get the value of the array.\n         * @return {?}\n         */\n        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n        /**\n         * \\@internal\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype._throwIfControlMissing = function (index) {\n            if (!this.controls.length) {\n                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.at(index)) {\n                throw new Error(\"Cannot find form control at index \" + index);\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} cb\n         * @return {?}\n         */\n        FormArray.prototype._forEachChild = function (cb) {\n            this.controls.forEach(function (control, index) { cb(control, index); });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormArray.prototype._updateValue = function () {\n            var _this = this;\n            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n        };\n        /**\n         * \\@internal\n         * @param {?} condition\n         * @return {?}\n         */\n        FormArray.prototype._anyControls = function (condition) {\n            return this.controls.some(function (control) { return control.enabled && condition(control); });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormArray.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) { return _this._registerControl(control); });\n        };\n        /**\n         * \\@internal\n         * @param {?} value\n         * @return {?}\n         */\n        FormArray.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, i) {\n                if (value[i] === undefined) {\n                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n                }\n            });\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormArray.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n                var control = _a[_i];\n                if (control.enabled)\n                    return false;\n            }\n            return this.controls.length > 0 || this.disabled;\n        };\n        /**\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype._registerControl = function (control) {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        };\n        return FormArray;\n    }(AbstractControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formDirectiveProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n    };\n    var /** @type {?} */ resolvedPromise = Promise.resolve(null);\n    /**\n     * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n     * to track aggregate form value and validation status.\n     *\n     * \\@howToUse\n     *\n     * As soon as you import the `FormsModule`, this directive becomes active by default on\n     * all `<form>` tags.  You don't need to add a special selector.\n     *\n     * You can export the directive into a local template variable using `ngForm` as the key\n     * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n     * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n     * will give you access to the aggregate value and validity status of the form, as well as\n     * user interaction properties like `dirty` and `touched`.\n     *\n     * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n     * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n     * sub-groups within the form.\n     *\n     * You can listen to the directive's `ngSubmit` event to be notified when the user has\n     * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n     * submission event.\n     *\n     * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * * **NgModule**: `FormsModule`\n     *\n     *  \\@stable\n     */\n    var NgForm = (function (_super) {\n        __extends$4(NgForm, _super);\n        /**\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function NgForm(validators, asyncValidators) {\n            _super.call(this);\n            this._submitted = false;\n            this.ngSubmit = new EventEmitter();\n            this.form =\n                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        }\n        Object.defineProperty(NgForm.prototype, \"submitted\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"controls\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form.controls; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.addControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                dir._control = (container.registerControl(dir.name, dir.control));\n                setUpControl(dir.control, dir);\n                dir.control.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.removeControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                if (container) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.addFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                var /** @type {?} */ group = new FormGroup({});\n                setUpFormContainer(group, dir);\n                container.registerControl(dir.name, group);\n                group.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.removeFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                if (container) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @param {?} value\n         * @return {?}\n         */\n        NgForm.prototype.updateModel = function (dir, value) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ ctrl = (_this.form.get(dir.path));\n                ctrl.setValue(value);\n            });\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n        /**\n         * @param {?} $event\n         * @return {?}\n         */\n        NgForm.prototype.onSubmit = function ($event) {\n            this._submitted = true;\n            this.ngSubmit.emit($event);\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        NgForm.prototype.onReset = function () { this.resetForm(); };\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        NgForm.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /**\n         * \\@internal\n         * @param {?} path\n         * @return {?}\n         */\n        NgForm.prototype._findContainer = function (path) {\n            path.pop();\n            return path.length ? (this.form.get(path)) : this.form;\n        };\n        NgForm.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                        providers: [formDirectiveProvider],\n                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                        outputs: ['ngSubmit'],\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgForm.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        return NgForm;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */ Examples = {\n        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n    };\n\n    var TemplateDrivenErrors = (function () {\n        function TemplateDrivenErrors() {\n        }\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.modelParentException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.formGroupNameException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.missingNameException = function () {\n            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.modelGroupParentException = function () {\n            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        return TemplateDrivenErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ modelGroupProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n    };\n    /**\n     * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n     *\n     * \\@howToUse\n     *\n     * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n     * within `<form>` tags).\n     *\n     * Use this directive if you'd like to create a sub-group within a form. This can\n     * come in handy if you want to validate a sub-group of your form separately from\n     * the rest of your form, or if some values in your domain model make more sense to\n     * consume together in a nested object.\n     *\n     * Pass in the name you'd like this sub-group to have and it will become the key\n     * for the sub-group in the form's full value. You can also export the directive into\n     * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n     *\n     * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * * **NgModule**: `FormsModule`\n     *\n     * \\@stable\n     */\n    var NgModelGroup = (function (_super) {\n        __extends$8(NgModelGroup, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function NgModelGroup(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        NgModelGroup.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelGroupParentException();\n            }\n        };\n        NgModelGroup.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n        ];\n        /** @nocollapse */\n        NgModelGroup.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        NgModelGroup.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n        };\n        return NgModelGroup;\n    }(AbstractFormGroupDirective));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formControlBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n    };\n    /**\n     * `ngModel` forces an additional change detection run when its inputs change:\n     * E.g.:\n     * ```\n     * <div>{{myModel.valid}}</div>\n     * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n     * ```\n     * I.e. `ngModel` can export itself on the element and then be used in the template.\n     * Normally, this would result in expressions before the `input` that use the exported directive\n     * to have and old value as they have been\n     * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n     * detection run.\n     *\n     * Notes:\n     * - this is just one extra run no matter how many `ngModel` have been changed.\n     * - this is a general problem when using `exportAs` for directives!\n     */\n    var /** @type {?} */ resolvedPromise$1 = Promise.resolve(null);\n    /**\n     * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n     * to a form control element.\n     *\n     * The {\\@link FormControl} instance will track the value, user interaction, and\n     * validation status of the control and keep the view synced with the model. If used\n     * within a parent form, the directive will also register itself with the form as a child\n     * control.\n     *\n     * \\@howToUse\n     *\n     * This directive can be used by itself or as part of a larger form. All you need is the\n     * `ngModel` selector to activate it.\n     *\n     * It accepts a domain model as an optional {\\@link \\@Input}. If you have a one-way binding\n     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n     * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n     * the domain model in your class as well.\n     *\n     * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n     * validity state), you can also export the directive into a local template variable using\n     * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n     * will fall through to the control anyway, so you can access them directly. You can see a\n     * full list of properties directly available in {\\@link AbstractControlDirective}.\n     *\n     * The following is an example of a simple standalone control using `ngModel`:\n     *\n     * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n     *\n     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n     * so that the control can be registered with the parent form under that name.\n     *\n     * It's worth noting that in the context of a parent form, you often can skip one-way or\n     * two-way binding because the parent form will sync the value for you. You can access\n     * its properties by exporting it into a local template variable using `ngForm` (ex:\n     * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n     *\n     * If you do need to populate initial values into your form, using a one-way binding for\n     * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n     * than the domain model's value on submit.\n     *\n     * Take a look at an example of using `ngModel` within a form:\n     *\n     * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n     *\n     * To see `ngModel` examples with different form control types, see:\n     *\n     * * Radio buttons: {\\@link RadioControlValueAccessor}\n     * * Selects: {\\@link SelectControlValueAccessor}\n     *\n     * **npm package**: `\\@angular/forms`\n     *\n     * **NgModule**: `FormsModule`\n     *\n     *  \\@stable\n     */\n    var NgModel = (function (_super) {\n        __extends$7(NgModel, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            /** @internal */\n            this._control = new FormControl();\n            /** @internal */\n            this._registered = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        NgModel.prototype.ngOnChanges = function (changes) {\n            this._checkForErrors();\n            if (!this._registered)\n                this._setUpControl();\n            if ('isDisabled' in changes) {\n                this._updateDisabled(changes);\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this._updateValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n        Object.defineProperty(NgModel.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        NgModel.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._setUpControl = function () {\n            this._isStandalone() ? this._setUpStandalone() :\n                this.formDirective.addControl(this);\n            this._registered = true;\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._isStandalone = function () {\n            return !this._parent || (this.options && this.options.standalone);\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._setUpStandalone = function () {\n            setUpControl(this._control, this);\n            this._control.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkForErrors = function () {\n            if (!this._isStandalone()) {\n                this._checkParentType();\n            }\n            this._checkName();\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                TemplateDrivenErrors.formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelParentException();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkName = function () {\n            if (this.options && this.options.name)\n                this.name = this.options.name;\n            if (!this._isStandalone() && !this.name) {\n                TemplateDrivenErrors.missingNameException();\n            }\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgModel.prototype._updateValue = function (value) {\n            var _this = this;\n            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n        };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        NgModel.prototype._updateDisabled = function (changes) {\n            var _this = this;\n            var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n            var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n            resolvedPromise$1.then(function () {\n                if (isDisabled && !_this.control.disabled) {\n                    _this.control.disable();\n                }\n                else if (!isDisabled && _this.control.disabled) {\n                    _this.control.enable();\n                }\n            });\n        };\n        NgModel.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n                        providers: [formControlBinding],\n                        exportAs: 'ngModel'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgModel.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        NgModel.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n        };\n        return NgModel;\n    }(NgControl));\n\n    var ReactiveErrors = (function () {\n        function ReactiveErrors() {\n        }\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.controlParentException = function () {\n            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.ngModelGroupException = function () {\n            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.missingFormException = function () {\n            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.groupParentException = function () {\n            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.arrayParentException = function () {\n            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.disabledAttrWarning = function () {\n            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n        };\n        return ReactiveErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formControlBinding$1 = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n    };\n    /**\n     * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n     *\n     * In other words, this directive ensures that any values written to the {\\@link FormControl}\n     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n     * any values written to the DOM element through user input will be reflected in the\n     * {\\@link FormControl} instance (view -> model).\n     *\n     * \\@howToUse\n     *\n     * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n     * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n     * {\\@link FormControlDirective}.\n     *\n     * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n     * it does not require that your {\\@link FormControl} instance be part of any parent\n     * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n     * exists above it.\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {\\@link FormControl} instance. See a full list of available properties in\n     * {\\@link AbstractControl}.\n     *\n     * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n     * or you can set it programmatically later using {\\@link AbstractControl.setValue} or\n     * {\\@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n     * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n     * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     *  \\@stable\n     */\n    var FormControlDirective = (function (_super) {\n        __extends$9(FormControlDirective, _super);\n        /**\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this.update = new EventEmitter();\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n            /**\n             * @param {?} isDisabled\n             * @return {?}\n             */\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlDirective.prototype.ngOnChanges = function (changes) {\n            if (this._isControlChanged(changes)) {\n                setUpControl(this.form, this);\n                if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                    this.valueAccessor.setDisabledState(true);\n                }\n                this.form.updateValueAndValidity({ emitEvent: false });\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.form.setValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlDirective.prototype._isControlChanged = function (changes) {\n            return changes.hasOwnProperty('form');\n        };\n        FormControlDirective.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n        ];\n        /** @nocollapse */\n        FormControlDirective.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        FormControlDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlDirective;\n    }(NgControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formDirectiveProvider$1 = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n    };\n    /**\n     * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n     *\n     * \\@howToUse\n     *\n     * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n     * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n     * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n     * and {\\@link FormArrayName} directives.\n     *\n     * **Set value**: You can set the form's initial value when instantiating the\n     * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n     * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue} methods.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n     * to the {\\@link FormGroup}'s {\\@link AbstractControl.valueChanges} event.  You can also listen to\n     * its {\\@link AbstractControl.statusChanges} event to be notified when the validation status is\n     * re-calculated.\n     *\n     * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n     * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n     * submission event.\n     *\n     * ### Example\n     *\n     * In this example, we create form controls for first name and last name.\n     *\n     * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n     *\n     * **npm package**: `\\@angular/forms`\n     *\n     * **NgModule**: {\\@link ReactiveFormsModule}\n     *\n     *  \\@stable\n     */\n    var FormGroupDirective = (function (_super) {\n        __extends$11(FormGroupDirective, _super);\n        /**\n         * @param {?} _validators\n         * @param {?} _asyncValidators\n         */\n        function FormGroupDirective(_validators, _asyncValidators) {\n            _super.call(this);\n            this._validators = _validators;\n            this._asyncValidators = _asyncValidators;\n            this._submitted = false;\n            this.directives = [];\n            this.form = null;\n            this.ngSubmit = new EventEmitter();\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n            this._checkFormPresent();\n            if (changes.hasOwnProperty('form')) {\n                this._updateValidators();\n                this._updateDomValue();\n                this._updateRegistrations();\n            }\n        };\n        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addControl = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpControl(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n            this.directives.push(dir);\n            return ctrl;\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addFormGroup = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addFormArray = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @param {?} value\n         * @return {?}\n         */\n        FormGroupDirective.prototype.updateModel = function (dir, value) {\n            var /** @type {?} */ ctrl = (this.form.get(dir.path));\n            ctrl.setValue(value);\n        };\n        /**\n         * @param {?} $event\n         * @return {?}\n         */\n        FormGroupDirective.prototype.onSubmit = function ($event) {\n            this._submitted = true;\n            this.ngSubmit.emit($event);\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        FormGroupDirective.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateDomValue = function () {\n            var _this = this;\n            this.directives.forEach(function (dir) {\n                var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n                if (dir._control !== newCtrl) {\n                    cleanUpControl(dir._control, dir);\n                    if (newCtrl)\n                        setUpControl(newCtrl, dir);\n                    dir._control = newCtrl;\n                }\n            });\n            this.form._updateTreeValidity({ emitEvent: false });\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateRegistrations = function () {\n            var _this = this;\n            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n            if (this._oldForm)\n                this._oldForm._registerOnCollectionChange(function () { });\n            this._oldForm = this.form;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateValidators = function () {\n            var /** @type {?} */ sync = composeValidators(this._validators);\n            this.form.validator = Validators.compose([this.form.validator, sync]);\n            var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._checkFormPresent = function () {\n            if (!this.form) {\n                ReactiveErrors.missingFormException();\n            }\n        };\n        FormGroupDirective.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroup]',\n                        providers: [formDirectiveProvider$1],\n                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        FormGroupDirective.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormGroupDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n            'ngSubmit': [{ type: _angular_core.Output },],\n        };\n        return FormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formGroupNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n    };\n    /**\n     * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n     *\n     * \\@howToUse\n     *\n     * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n     * will look for a {\\@link FormGroup} registered with that name in the parent\n     * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n     *\n     * Nested form groups can come in handy when you want to validate a sub-group of a\n     * form separately from the rest or when you'd like to group the values of certain\n     * controls into their own nested object.\n     *\n     * **Access the group**: You can access the associated {\\@link FormGroup} using the\n     * {\\@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n     *\n     * You can also access individual controls within the group using dot syntax.\n     * Ex: `this.form.get('name.first')`\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n     *\n     * **Set the value**: You can set an initial value for each child control when instantiating\n     * the {\\@link FormGroup}, or you can set it programmatically later using\n     * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the group, you can\n     * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n     * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     * \\@stable\n     */\n    var FormGroupName = (function (_super) {\n        __extends$12(FormGroupName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function FormGroupName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        FormGroupName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.groupParentException();\n            }\n        };\n        FormGroupName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormGroupName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormGroupName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n        };\n        return FormGroupName;\n    }(AbstractFormGroupDirective));\n    var /** @type {?} */ formArrayNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n    };\n    /**\n     * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n     *\n     * \\@howToUse\n     *\n     * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n     * will look for a {\\@link FormArray} registered with that name in the parent\n     * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n     *\n     * Nested form arrays can come in handy when you have a group of form controls but\n     * you're not sure how many there will be. Form arrays allow you to create new\n     * form controls dynamically.\n     *\n     * **Access the array**: You can access the associated {\\@link FormArray} using the\n     * {\\@link AbstractControl.get} method on the parent {\\@link FormGroup}.\n     * Ex: `this.form.get('cities')`.\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n     *\n     * **Set the value**: You can set an initial value for each child control when instantiating\n     * the {\\@link FormArray}, or you can set the value programmatically later using the\n     * {\\@link FormArray}'s {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}\n     * methods.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the array, you can\n     * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl.valueChanges} event.  You can also\n     * listen to its {\\@link AbstractControl.statusChanges} event to be notified when the validation\n     * status is re-calculated.\n     *\n     * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by\n     * calling its {\\@link FormArray.push} method.\n     *  Ex: `this.form.get('cities').push(new FormControl());`\n     *\n     * ### Example\n     *\n     * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n     *\n     * * **npm package**: `\\@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     * \\@stable\n     */\n    var FormArrayName = (function (_super) {\n        __extends$12(FormArrayName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function FormArrayName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormArray(this);\n        };\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormArray(this);\n            }\n        };\n        Object.defineProperty(FormArrayName.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.formDirective.getFormArray(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._parent ? (this._parent.formDirective) : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.arrayParentException();\n            }\n        };\n        FormArrayName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormArrayName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormArrayName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n        };\n        return FormArrayName;\n    }(ControlContainer));\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    function _hasInvalidParent(parent) {\n        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n            !(parent instanceof FormArrayName);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ controlNameBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n    };\n    /**\n     * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n     * element by name.\n     *\n     * In other words, this directive ensures that any values written to the {\\@link FormControl}\n     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n     * any values written to the DOM element through user input will be reflected in the\n     * {\\@link FormControl} instance (view -> model).\n     *\n     * \\@howToUse\n     *\n     * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the {\\@link FormControl} instance you want to\n     * link, and will look for a {\\@link FormControl} registered with that name in the\n     * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n     *\n     * **Access the control**: You can access the {\\@link FormControl} associated with\n     * this directive by using the {\\@link AbstractControl.get} method.\n     * Ex: `this.form.get('first');`\n     *\n     * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n     * See a full list of available properties in {\\@link AbstractControl}.\n     *\n     *  **Set value**: You can set an initial value for the control when instantiating the\n     *  {\\@link FormControl}, or you can set it programmatically later using\n     *  {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n     * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n     * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * In this example, we create form controls for first name and last name.\n     *\n     * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n     *\n     * To see `formControlName` examples with different form control types, see:\n     *\n     * * Radio buttons: {\\@link RadioControlValueAccessor}\n     * * Selects: {\\@link SelectControlValueAccessor}\n     *\n     * **npm package**: `\\@angular/forms`\n     *\n     * **NgModule**: {\\@link ReactiveFormsModule}\n     *\n     *  \\@stable\n     */\n    var FormControlName = (function (_super) {\n        __extends$10(FormControlName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this._added = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n            /**\n             * @param {?} isDisabled\n             * @return {?}\n             */\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlName.prototype.ngOnChanges = function (changes) {\n            if (!this._added)\n                this._setUpControl();\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.viewModel = this.model;\n                this.formDirective.updateModel(this, this.model);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeControl(this);\n            }\n        };\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        Object.defineProperty(FormControlName.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype._checkParentType = function () {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                ReactiveErrors.ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                ReactiveErrors.controlParentException();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype._setUpControl = function () {\n            this._checkParentType();\n            this._control = this.formDirective.addControl(this);\n            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                this.valueAccessor.setDisabledState(true);\n            }\n            this._added = true;\n        };\n        FormControlName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n        ];\n        /** @nocollapse */\n        FormControlName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        FormControlName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlName;\n    }(NgControl));\n\n    var __extends$13 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n        multi: true\n    };\n    var /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxRequiredValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `required` validator to any controls marked with the\n     * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n     *\n     * ### Example\n     *\n     * ```\n     * <input name=\"fullName\" ngModel required>\n     * ```\n     *\n     * \\@stable\n     */\n    var RequiredValidator = (function () {\n        function RequiredValidator() {\n        }\n        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._required; },\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                this._required = value != null && value !== false && \"\" + value !== 'false';\n                if (this._onChange)\n                    this._onChange();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        RequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.required(c) : null;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        RequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                        providers: [REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required ? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        RequiredValidator.ctorParameters = function () { return []; };\n        RequiredValidator.propDecorators = {\n            'required': [{ type: _angular_core.Input },],\n        };\n        return RequiredValidator;\n    }());\n    /**\n     * A Directive that adds the `required` validator to checkbox controls marked with the\n     * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n     *\n     * ### Example\n     *\n     * ```\n     * <input type=\"checkbox\" name=\"active\" ngModel required>\n     * ```\n     *\n     * \\@experimental\n     */\n    var CheckboxRequiredValidator = (function (_super) {\n        __extends$13(CheckboxRequiredValidator, _super);\n        function CheckboxRequiredValidator() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        CheckboxRequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.requiredTrue(c) : null;\n        };\n        CheckboxRequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                        providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required ? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxRequiredValidator.ctorParameters = function () { return []; };\n        return CheckboxRequiredValidator;\n    }(RequiredValidator));\n    /**\n     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='min'}\n     */\n    var /** @type {?} */ MIN_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n     *\n     * \\@stable\n     */\n    var MinLengthValidator = (function () {\n        function MinLengthValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n            if ('minlength' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        MinLengthValidator.prototype.validate = function (c) {\n            return this.minlength == null ? null : this._validator(c);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        MinLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n        };\n        MinLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                        providers: [MIN_LENGTH_VALIDATOR],\n                        host: { '[attr.minlength]': 'minlength ? minlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MinLengthValidator.ctorParameters = function () { return []; };\n        MinLengthValidator.propDecorators = {\n            'minlength': [{ type: _angular_core.Input },],\n        };\n        return MinLengthValidator;\n    }());\n    /**\n     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='max'}\n     */\n    var /** @type {?} */ MAX_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n     * `formControl`,\n     * or control with `ngModel` that also has a `maxlength` attribute.\n     *\n     * \\@stable\n     */\n    var MaxLengthValidator = (function () {\n        function MaxLengthValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n            if ('maxlength' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.validate = function (c) {\n            return this.maxlength != null ? this._validator(c) : null;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        MaxLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n        };\n        MaxLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                        providers: [MAX_LENGTH_VALIDATOR],\n                        host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MaxLengthValidator.ctorParameters = function () { return []; };\n        MaxLengthValidator.propDecorators = {\n            'maxlength': [{ type: _angular_core.Input },],\n        };\n        return MaxLengthValidator;\n    }());\n    var /** @type {?} */ PATTERN_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `pattern` validator to any controls marked with the\n     * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n     * as the regex to validate Control value against.  Follows pattern attribute\n     * semantics; i.e. regex must match entire Control value.\n     *\n     * ### Example\n     *\n     * ```\n     * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n     * ```\n     * \\@stable\n     */\n    var PatternValidator = (function () {\n        function PatternValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        PatternValidator.prototype.ngOnChanges = function (changes) {\n            if ('pattern' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        PatternValidator.prototype.validate = function (c) { return this._validator(c); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n        PatternValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                        providers: [PATTERN_VALIDATOR],\n                        host: { '[attr.pattern]': 'pattern ? pattern : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        PatternValidator.ctorParameters = function () { return []; };\n        PatternValidator.propDecorators = {\n            'pattern': [{ type: _angular_core.Input },],\n        };\n        return PatternValidator;\n    }());\n\n    /**\n     * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n     *\n     * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n     * forms.\n     *\n     * \\@howToUse\n     *\n     * To use, inject `FormBuilder` into your component class. You can then call its methods\n     * directly.\n     *\n     * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n     *\n     *  * **npm package**: `\\@angular/forms`\n     *\n     *  * **NgModule**: {\\@link ReactiveFormsModule}\n     *\n     * \\@stable\n     */\n    var FormBuilder = (function () {\n        function FormBuilder() {\n        }\n        /**\n         * Construct a new {\\@link FormGroup} with the given map of configuration.\n         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n         *\n         * See the {\\@link FormGroup} constructor for more details.\n         * @param {?} controlsConfig\n         * @param {?=} extra\n         * @return {?}\n         */\n        FormBuilder.prototype.group = function (controlsConfig, extra) {\n            if (extra === void 0) { extra = null; }\n            var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n            var /** @type {?} */ validator = isPresent(extra) ? extra['validator'] : null;\n            var /** @type {?} */ asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;\n            return new FormGroup(controls, validator, asyncValidator);\n        };\n        /**\n         * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n         * `asyncValidator`.\n         *\n         * `formState` can either be a standalone value for the form control or an object\n         * that contains both a value and a disabled status.\n         *\n         * @param {?} formState\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         * @return {?}\n         */\n        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            return new FormControl(formState, validator, asyncValidator);\n        };\n        /**\n         * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n         * configuration, with the given optional `validator` and `asyncValidator`.\n         * @param {?} controlsConfig\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         * @return {?}\n         */\n        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n            var _this = this;\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n            return new FormArray(controls, validator, asyncValidator);\n        };\n        /**\n         * \\@internal\n         * @param {?} controlsConfig\n         * @return {?}\n         */\n        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n            var _this = this;\n            var /** @type {?} */ controls = {};\n            Object.keys(controlsConfig).forEach(function (controlName) {\n                controls[controlName] = _this._createControl(controlsConfig[controlName]);\n            });\n            return controls;\n        };\n        /**\n         * \\@internal\n         * @param {?} controlConfig\n         * @return {?}\n         */\n        FormBuilder.prototype._createControl = function (controlConfig) {\n            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n                controlConfig instanceof FormArray) {\n                return controlConfig;\n            }\n            else if (Array.isArray(controlConfig)) {\n                var /** @type {?} */ value = controlConfig[0];\n                var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n                var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n                return this.control(value, validator, asyncValidator);\n            }\n            else {\n                return this.control(controlConfig);\n            }\n        };\n        FormBuilder.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        FormBuilder.ctorParameters = function () { return []; };\n        return FormBuilder;\n    }());\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.4');\n\n    var /** @type {?} */ SHARED_FORM_DIRECTIVES = [\n        NgSelectOption,\n        NgSelectMultipleOption,\n        DefaultValueAccessor,\n        NumberValueAccessor,\n        RangeValueAccessor,\n        CheckboxControlValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n        NgControlStatus,\n        NgControlStatusGroup,\n        RequiredValidator,\n        MinLengthValidator,\n        MaxLengthValidator,\n        PatternValidator,\n        CheckboxRequiredValidator,\n    ];\n    var /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n    var /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n    /**\n     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n     */\n    var InternalFormsSharedModule = (function () {\n        function InternalFormsSharedModule() {\n        }\n        InternalFormsSharedModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: SHARED_FORM_DIRECTIVES,\n                        exports: SHARED_FORM_DIRECTIVES,\n                    },] },\n        ];\n        /** @nocollapse */\n        InternalFormsSharedModule.ctorParameters = function () { return []; };\n        return InternalFormsSharedModule;\n    }());\n\n    /**\n     * The ng module for forms.\n     * \\@stable\n     */\n    var FormsModule = (function () {\n        function FormsModule() {\n        }\n        FormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                        providers: [RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        FormsModule.ctorParameters = function () { return []; };\n        return FormsModule;\n    }());\n    /**\n     * The ng module for reactive forms.\n     * \\@stable\n     */\n    var ReactiveFormsModule = (function () {\n        function ReactiveFormsModule() {\n        }\n        ReactiveFormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                        providers: [FormBuilder, RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        ReactiveFormsModule.ctorParameters = function () { return []; };\n        return ReactiveFormsModule;\n    }());\n\n    exports.AbstractControlDirective = AbstractControlDirective;\n    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n    exports.ControlContainer = ControlContainer;\n    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n    exports.DefaultValueAccessor = DefaultValueAccessor;\n    exports.NgControl = NgControl;\n    exports.NgControlStatus = NgControlStatus;\n    exports.NgControlStatusGroup = NgControlStatusGroup;\n    exports.NgForm = NgForm;\n    exports.NgModel = NgModel;\n    exports.NgModelGroup = NgModelGroup;\n    exports.RadioControlValueAccessor = RadioControlValueAccessor;\n    exports.FormControlDirective = FormControlDirective;\n    exports.FormControlName = FormControlName;\n    exports.FormGroupDirective = FormGroupDirective;\n    exports.FormArrayName = FormArrayName;\n    exports.FormGroupName = FormGroupName;\n    exports.NgSelectOption = NgSelectOption;\n    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n    exports.CheckboxRequiredValidator = CheckboxRequiredValidator;\n    exports.MaxLengthValidator = MaxLengthValidator;\n    exports.MinLengthValidator = MinLengthValidator;\n    exports.PatternValidator = PatternValidator;\n    exports.RequiredValidator = RequiredValidator;\n    exports.FormBuilder = FormBuilder;\n    exports.AbstractControl = AbstractControl;\n    exports.FormArray = FormArray;\n    exports.FormControl = FormControl;\n    exports.FormGroup = FormGroup;\n    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n    exports.NG_VALIDATORS = NG_VALIDATORS;\n    exports.Validators = Validators;\n    exports.VERSION = VERSION;\n    exports.FormsModule = FormsModule;\n    exports.ReactiveFormsModule = ReactiveFormsModule;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/forms/bundles/forms.umd.js\n// module id = 386\n// module chunks = 0","import { Component, Input } from '@angular/core';\r\nimport { IDbImageUrl } from './image';\r\n\r\n@Component({\r\n    selector: 'db-image',\r\n    moduleId: module.id.toString(),\r\n    template: require('./image.component.html'),\r\n    styles: [\r\n        require('./image.component.css')\r\n    ]\r\n})\r\nexport class ImageComponent {\r\n\r\n    @Input() model: IDbImageUrl;\r\n    @Input() imageWidth: number = 150;\r\n    @Input() imageHeight: number = 300;\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/shared/image.component.ts","module.exports = \"<img [src]=model.imageUrl [width]=imageWidth [height]=imageHeight /><span>{{model.description}}</span>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/shared/image.component.html\n// module id = 388\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/shared/image.component.css\n// module id = 389\n// module chunks = 0","import { Component, EventEmitter, Input } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'db-pager',\r\n    moduleId: module.id.toString(),\r\n    template: require('./pager.component.html'),\r\n    styles: [\r\n        require('./pager.component.css')\r\n    ]\r\n})\r\nexport class PagerComponent {\r\n\r\n    @Input()\r\n    currentId: string\r\n\r\n    @Input()\r\n    previousId: string;\r\n\r\n    @Input()\r\n    nextId: string;\r\n\r\n    constructor(\r\n        private _route: ActivatedRoute,\r\n        private _router: Router\r\n    ) { }\r\n\r\n    goTo(id: string): void {\r\n        this._router.navigate(['../', id], {relativeTo: this._route})\r\n    }\r\n\r\n    isFirst(): boolean {\r\n        return this.currentId === this.previousId;\r\n    }\r\n\r\n    isLast(): boolean {\r\n        return this.currentId === this.nextId;\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/shared/pager.component.ts","module.exports = \"<div> <a *ngif=!isFirst() class=\\\"btn btn-default\\\" (click)=goTo(previousId)> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Précédent </a> <a *ngif=!isLast() class=\\\"btn btn-default\\\" (click)=goTo(nextId)> Suivant<i class=\\\"glyphicon glyphicon-chevron-right\\\"></i> </a> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/shared/pager.component.html\n// module id = 391\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/shared/pager.component.css\n// module id = 392\n// module chunks = 0","import { NgModule } from '@angular/core';\r\nimport { BookRoutingModule } from './book-routing.module';\r\nimport { BookListComponent} from './book-list.component';\r\nimport { BookFormComponent } from './book-form.component';\r\nimport { BookDetailsComponent } from './book-details.component';\r\nimport { BookService } from './book.service';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { CoreModule } from '../core/core.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CoreModule,\r\n        SharedModule,\r\n        BookRoutingModule\r\n    ],\r\n    declarations: [\r\n        BookListComponent,\r\n        BookFormComponent,\r\n        BookDetailsComponent\r\n    ],\r\n    providers: [\r\n        BookService\r\n    ]\r\n})\r\nexport class BookModule {\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/books/book.module.ts","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { BookListComponent} from './book-list.component';\r\nimport { BookFormComponent } from './book-form.component';\r\nimport { BookDetailsComponent } from './book-details.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild([\r\n            { path: 'category/:category/books', component: BookListComponent },\r\n            { path: 'category/:category/books/edit', component: BookFormComponent },\r\n            { path: 'category/:category/books/:id', component: BookDetailsComponent },\r\n            { path: 'category/:category/books/:id/edit', component: BookFormComponent }\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class BookRoutingModule {\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/books/book-routing.module.ts","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BookService } from './book.service';\r\nimport { IBook } from './book';\r\n\r\n@Component({\r\n    moduleId: module.id.toString(),\r\n    template: require('./book-list.component.html'),\r\n    styles: [require('./book-list.component.css')]\r\n})\r\nexport class BookListComponent implements OnInit {\r\n\r\n    public pageTitle: string = \"Liste des livres\";\r\n    public books: IBook[];\r\n    public imageWidth: number = 160;\r\n    public imageHeight: number = 250;\r\n\r\n    constructor(\r\n        private _bookService: BookService, \r\n        private _route: ActivatedRoute,\r\n        private _router: Router\r\n    ){}\r\n\r\n    ngOnInit(): void {\r\n        const category = this._route.snapshot.params['category'];\r\n\r\n        this._bookService\r\n                .getBooks(category)\r\n                .subscribe(\r\n                    (books: IBook[]) => this.books = books,\r\n                    error => console.log(error)\r\n                );\r\n    }\r\n\r\n    onNew() {\r\n\r\n        this._router.navigate(['edit'], {relativeTo: this._route});\r\n        \r\n    }\r\n\r\n    onBack(): void {\r\n\r\n        this._router.navigate(['../'], {relativeTo: this._route});\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/books/book-list.component.ts","module.exports = \"<div class=container> <div class=panel-heading> {{pageTitle}} </div> <div> <div> <a class=\\\"btn btn-default\\\" (click)=onNew()> <i class=\\\"glyphicon glyphicon-plus\\\"></i> Ajouter un livre </a> </div> <ul class=books> <li *ngfor=\\\"let book of books\\\"> <a [routerlink]=book.id routerlinkactive=true><span class=badge>{{book.title}}</span></a> </li> </ul> </div> <div> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour à la liste </a> </div> </div> \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/books/book-list.component.html\n// module id = 396\n// module chunks = 0","module.exports = \"h3 {\\r\\n  text-align: center; \\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.grid {\\r\\n  margin: 0;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.module {\\r\\n\\tpadding: 20px;\\r\\n\\ttext-align: center;\\r\\n\\tmax-height: 120px;\\r\\n\\tmin-width: 120px;\\r\\n\\tborder-radius: 2px;\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/books/book-list.component.css\n// module id = 397\n// module chunks = 0","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BookService } from './book.service';\r\nimport { CategoryService } from '../categories/category.service';\r\nimport { IBook, IBookInfo } from './book';\r\n\r\n@Component({\r\n    moduleId: module.id.toString(),\r\n    template: require('./book-form.component.html'),\r\n    styles: [\r\n        require('./book-form.component.css')\r\n    ]\r\n})\r\nexport class BookFormComponent implements OnInit {\r\n\r\n    categories: string[];\r\n    model: IBook;\r\n    category: string;\r\n\r\n    constructor(\r\n        private _bookService: BookService,\r\n        private _categoryService: CategoryService,\r\n        private _route: ActivatedRoute,\r\n        private _router: Router\r\n    ) {}\r\n\r\n    public ngOnInit(): void {\r\n\r\n        this.categories = [\r\n            \"db\",\r\n            \"dbz\"\r\n        ];\r\n\r\n        this.category = this._route.snapshot.params['category'];\r\n\r\n        let id = this._route.snapshot.params['id'];\r\n\r\n        if (id) {\r\n            this._bookService\r\n                .getBook(this.category, id)\r\n                .subscribe(\r\n                    (info: IBookInfo) => this.model = info.book,\r\n                    error => console.log(error)\r\n                );\r\n        }\r\n        else {\r\n            this.model = {\r\n                id: null,\r\n                category: this.category,\r\n                title: '',\r\n                description: '',\r\n                imageUrl: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    public onSubmit() {\r\n        this._bookService\r\n                .save(this.category, this.model)\r\n                .subscribe(\r\n                    (_) => this.onBack(),\r\n                    error => console.log(error)\r\n                );\r\n    }\r\n\r\n    onBack(): void {\r\n        this._router.navigate(['../'], {relativeTo: this._route});\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/books/book-form.component.ts","module.exports = \"<div class=container> <h1>Edition d'un livre</h1> <form *ngif=model (ngsubmit)=onSubmit() #bookform=ngForm novalidate> <div class=form-group> <label for=category>Catégorie</label> <select class=form-control id=category required disabled=disabled [(ngmodel)]=model.category name=category> <option *ngfor=\\\"let cat of categories\\\" [value]=cat>{{cat}}</option> </select> </div> <div class=form-group> <label for=title>Titre</label> <input type=text class=form-control id=title required [(ngmodel)]=model.title name=title #title=ngModel> <div [hidden]=\\\"title.valid || title.pristine\\\" class=\\\"alert alert-danger\\\"> Le titre est requis </div> </div> <div class=form-group> <label for=description>Description</label> <input type=text class=form-control id=description required [(ngmodel)]=model.description name=description> </div> <div class=form-group> <label for=imageUrl>Url de l'image</label> <input type=text class=form-control id=imageUrl required [(ngmodel)]=model.imageUrl name=imageUrl> </div> <div> <button type=submit class=\\\"btn btn-primary\\\" [disabled]=!bookForm.form.valid>Enregistrer</button> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour </a> </div> </form> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/books/book-form.component.html\n// module id = 399\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/books/book-form.component.css\n// module id = 400\n// module chunks = 0","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router, Params } from '@angular/router';\r\nimport { BookService } from './book.service';\r\nimport { IBook, IBookInfo } from './book';\r\n\r\n@Component({\r\n    moduleId: module.id.toString(),\r\n    template: require('./book-details.component.html'),\r\n    styles: [\r\n        require('./book-details.component.css')\r\n    ]\r\n})\r\nexport class BookDetailsComponent {\r\n\r\n    book: IBook;\r\n    imageWidth: number = 160;\r\n    imageHeight: number = 250;\r\n    previousId: string;\r\n    nextId: string\r\n\r\n    constructor(\r\n        private _service: BookService,\r\n        private _route: ActivatedRoute,\r\n        private _router: Router\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n\r\n        this._route.params\r\n            .switchMap((params: Params) => this._service.getBook(params['category'], params['id']))\r\n            .subscribe(\r\n                (info: IBookInfo) => {\r\n                    this.previousId = info.previousId;\r\n                    this.nextId = info.nextId;\r\n                    this.book = info.book\r\n                },\r\n                error => console.log(error)\r\n            );\r\n\r\n    }\r\n\r\n    onBack(): void {\r\n        this._router.navigate(['../'], {relativeTo: this._route});\r\n    }\r\n\r\n    onEdit(): void {\r\n        this._router.navigate(['edit'], {relativeTo: this._route});\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/books/book-details.component.ts","module.exports = \"<div *ngif=book> <div>Fiche détaillée de {{book.title}}</div> <div> <a class=\\\"btn btn-default\\\" (click)=onBack()> <i class=\\\"glyphicon glyphicon-chevron-left\\\"></i>Retour à la liste </a> <a class=\\\"btn btn-default\\\" (click)=onEdit()> <i class=\\\"glyphicon glyphicon-pencil\\\"></i>Modifier </a> </div> <div> <db-image [model]=book [imagewidth]=imageWidth [imageheight]=imageHeight></db-image> </div> <db-pager [currentid]=book.id [previousid]=previousId [nextid]=nextId></db-pager> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/books/book-details.component.html\n// module id = 402\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/books/book-details.component.css\n// module id = 403\n// module chunks = 0","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nexport const routes: Routes = [\r\n    { path: '', redirectTo: 'welcome', pathMatch: 'full'}\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/app-routing.module.ts","import { InMemoryDbService } from 'angular2-in-memory-web-api';\r\n\r\nexport class InMemoryDbUniverseService implements InMemoryDbService {\r\n    \r\n    createDb() {\r\n        const charactersdb = this.getDbCharacters();\r\n        const charactersdbz = this.getDbzCharacters();\r\n        const booksdb = this.getDbBooks();\r\n        const booksdbz = this.getDbzBooks();\r\n\r\n        return {\r\n            charactersdb,\r\n            charactersdbz,\r\n            booksdb,\r\n            booksdbz\r\n         };\r\n    }\r\n\r\n    getDbCharacters() {\r\n        return [\r\n            {\r\n                \"id\": \"515275eb-a311-4cc3-c428-151d091cd9b7\",\r\n                \"category\": \"db\",\r\n                \"imageUrl\": \"http://vignette1.wikia.nocookie.net/joke-battles/images/f/f2/Yamcha_render_by_anthonyjmo-d9tmtfh.png/revision/latest?cb=20160909123653\",\r\n                \"name\": \"Yamcha\",\r\n                \"description\": \"Yamcha est un redoutable guerrier capable de terrasser les adversaires les plus terribles grâce à sa technique dévastatrice : la botte secrète du loup. Accompagné de son acolyte Pual, il parcourt le désert à la recherche de voyageurs à détrousser.\\nCe jeune homme particulièrement séduisant souffre cependant d'une timidité maladive qui lui fait perdre tous ses moyens dès qu'il se trouve en face d'une fille.\\nIl abandonnera sa vie de bandit du désert pour accompagner Goku et vaincre sa peur de la gent féminine.\\nIl décidera ensuite d'aller en ville parfaire ses techniques de combat et il participera même au Championnat du Monde des arts martiaux.\"\r\n            },\r\n            {\r\n                \"id\": \"37e7dbaa-c6da-3107-67e6-3e91af769450\",\r\n                \"category\": \"db\",\r\n                \"imageUrl\": \"http://vignette1.wikia.nocookie.net/3__/images/8/8d/Goku2.jpg.png/revision/latest?cb=20140917091017&path-prefix=300-heroes\",\r\n                \"name\": \"Songoku\",\r\n                \"description\": \"Goku est un jeune garçon au cœur pur doté d’une queue de singe et d’une force extraordinaire.\\nSeule petite ombre au tableau : il a tendance à se transformer en gorille géant lorsqu’il regarde la pleine lune.\\nGoku ne se sépare jamais du bâton que lui a laissé son grand-père adoptif, Gohan, et qui a le pouvoir de changer de taille sur commande. Sa panoplie va s’étoffer par la suite avec le nuage magique offert par Tortue Géniale, qui lui permettra de parcourir des distances formidables en un rien de temps.\\nAu fil de ses aventures, Goku va gagner en expérience pour devenir le plus puissant guerrier de la terre.\\nIl apprendra notamment à maîtriser à la perfection la technique du Kamehameha, qui permet de concentrer sa force intérieure pour propulser des boules d’énergie destructrices.\"\r\n            },\r\n            {\r\n                \"id\": \"65e324cb-1f24-780a-e6a1-690e39b68d58\",\r\n                \"category\": \"db\",\r\n                \"imageUrl\": \"http://t0.gstatic.com/images?q=tbn:ANd9GcQ6t6fnkmF4KxL1FWi7oaGbBAoN1-P2asbz31JISQ2g0q8iFiT68LIDr5c\",\r\n                \"name\": \"Chichi\",\r\n                \"description\": \"Fille de Gyûmaô, Chichi rencontre Goku alors qu’elle n’est encore qu’une enfant. Elle n’en demeure pas moins, déjà à l’époque, une guerrière redoutable, ce qu’apprendra à ses dépens le premier dinosaure à essayer de la manger.\"\r\n            },\r\n        ];\r\n    }\r\n\r\n    getDbBooks() {\r\n        return [\r\n            {\r\n                \"id\": \"1e9f24e5-2277-507b-54e4-0f829ff76143\",\r\n                \"category\": \"db\",\r\n                \"title\": \"Tome 1\",\r\n                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723434621-G.jpg\",\r\n                \"description\": \"Tome 1\"\r\n            },\r\n            {\r\n                \"id\": \"203a4686-b22a-86ad-44d2-483aa9c5a111\",\r\n                \"category\": \"db\",\r\n                \"title\": \"Tome 2\",\r\n                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723434638-G.jpg\",\r\n                \"description\": \"Tome 2\"\r\n            }\r\n        ];\r\n    }\r\n\r\n    getDbzCharacters() {\r\n        return [\r\n            {\r\n                \"id\": \"65e324cb-1f24-780a-e6a1-690e39b68d58\",\r\n                \"category\": \"dbz\",\r\n                \"imageUrl\": \"http://vignette1.wikia.nocookie.net/villains/images/e/e3/Scouter_vegeta.png/revision/latest?cb=20130802141754\",\r\n                \"name\": \"Vegeta\",\r\n                \"description\": \"Vegeta est un Saïyen de sang royal. Il est le fils du Roi Vegeta qui régnait sur la planète du même nom avant que celle-ci ne soit détruite par Freezer.\\nIl débarque sur Terre avec Nappa après la défaite de Raditz avec la ferme intention de se débarrasser de Goku et de s’emparer des Dragon Ball.\\nFier et ombrageux, il sera le rival incessant de Goku, mais aussi un de ses plus proches compagnons.\\nContre toute attente, il se rapprochera plus tard de Bulma avec qui il aura un fils, Trunks, puis une fille, Bra.\\n\"\r\n            }\r\n        ];\r\n    }\r\n\r\n    getDbzBooks() {\r\n        return [\r\n            {\r\n                \"id\": \"d82878d-2a52-b90d-b6b7-6d525a8fe06c\",\r\n                \"category\": \"dbz\",\r\n                \"title\": \"Tome 41\",\r\n                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723449380-G.jpg\",\r\n                \"description\": \"Tome 41\"\r\n            },\r\n            {\r\n                \"id\": \"5434ce77-218b-8b2b-d95e-7aea191775a9\",\r\n                \"category\": \"dbz\",\r\n                \"title\": \"Tome 23\",\r\n                \"imageUrl\": \"http://www.glenatmanga.com/img/cata/02couv/9782723449205-G.jpg\",\r\n                \"description\": \"Tome 23\"\r\n            }\r\n        ];\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/inmemorydata.service.ts","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { CharacterService } from '../characters/character.service';\r\nimport { BookService } from '../books/book.service';\r\nimport { CategoryService } from '../categories/category.service';\r\n\r\n@Injectable()\r\nexport class CoreService {\r\n\r\n    constructor(\r\n        private _characterService: CharacterService,\r\n        private _bookService: BookService,\r\n        private _categoryService: CategoryService\r\n    ) { }\r\n\r\n    public load() {\r\n\r\n        return this._categoryService\r\n            .getCategories()\r\n            .subscribe((categories: string[]) => {\r\n                this._characterService.init(categories);\r\n                this._bookService.init(categories);\r\n            });\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./app/core/core.service.ts"],"sourceRoot":""}